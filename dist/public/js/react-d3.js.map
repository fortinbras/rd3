{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/d3-voronoi/dist/d3-voronoi.js","node_modules/d3plus-text/build/d3plus-text.full.js","src/ChartContext.js","src/ChartProvider.js","src/SetStyle.js","src/areachart/Area.jsx","src/areachart/AreaChart.jsx","src/areachart/AreaContainer.jsx","src/areachart/DataSeries.jsx","src/areachart/index.js","src/barchart/Bar.jsx","src/barchart/BarChart.jsx","src/barchart/BarContainer.jsx","src/barchart/DataSeries.jsx","src/barchart/index.js","src/candlestick/Candle.jsx","src/candlestick/CandlestickChart.jsx","src/candlestick/CandlestickContainer.jsx","src/candlestick/DataSeries.jsx","src/candlestick/Wick.jsx","src/candlestick/index.js","src/common/BreadCrumb.jsx","src/common/Legend.jsx","src/common/Polygon.jsx","src/common/Tooltip.jsx","src/common/Voronoi.jsx","src/common/axes/AxisLine.jsx","src/common/axes/AxisTicks.jsx","src/common/axes/Label.jsx","src/common/axes/XAxis.jsx","src/common/axes/XGrid.jsx","src/common/axes/YAxis.jsx","src/common/axes/YGrid.jsx","src/common/axes/index.js","src/common/charts/BasicChart.jsx","src/common/charts/Chart.jsx","src/common/charts/LegendChart.jsx","src/common/charts/index.js","src/common/index.js","src/index.js","src/linechart/DataSeries.jsx","src/linechart/Line.jsx","src/linechart/LineChart.jsx","src/linechart/VoronoiCircle.jsx","src/linechart/VoronoiCircleContainer.jsx","src/linechart/index.js","src/mixins/CartesianChartPropsMixin.js","src/mixins/DefaultAccessorsMixin.js","src/mixins/TooltipMixin.js","src/mixins/ViewBoxMixin.js","src/mixins/index.js","src/piechart/Arc.jsx","src/piechart/ArcContainer.jsx","src/piechart/DataSeries.jsx","src/piechart/PieChart.jsx","src/piechart/index.js","src/scatterchart/DataSeries.jsx","src/scatterchart/ScatterChart.jsx","src/scatterchart/VoronoiCircle.jsx","src/scatterchart/VoronoiCircleContainer.jsx","src/scatterchart/index.js","src/treemap/Cell.jsx","src/treemap/CellContainer.jsx","src/treemap/DataSeries.jsx","src/treemap/Treemap.jsx","src/treemap/index.js","src/utils/index.js","src/utils/input.js"],"names":[],"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","file":"react-d3.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// https://d3js.org/d3-voronoi/ v1.1.4 Copyright 2018 Mike Bostock\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\n(factory((global.d3 = global.d3 || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction constant(x) {\n  return function() {\n    return x;\n  };\n}\n\nfunction x(d) {\n  return d[0];\n}\n\nfunction y(d) {\n  return d[1];\n}\n\nfunction RedBlackTree() {\n  this._ = null; // root node\n}\n\nfunction RedBlackNode(node) {\n  node.U = // parent node\n  node.C = // color - true for red, false for black\n  node.L = // left node\n  node.R = // right node\n  node.P = // previous node\n  node.N = null; // next node\n}\n\nRedBlackTree.prototype = {\n  constructor: RedBlackTree,\n\n  insert: function(after, node) {\n    var parent, grandpa, uncle;\n\n    if (after) {\n      node.P = after;\n      node.N = after.N;\n      if (after.N) after.N.P = node;\n      after.N = node;\n      if (after.R) {\n        after = after.R;\n        while (after.L) after = after.L;\n        after.L = node;\n      } else {\n        after.R = node;\n      }\n      parent = after;\n    } else if (this._) {\n      after = RedBlackFirst(this._);\n      node.P = null;\n      node.N = after;\n      after.P = after.L = node;\n      parent = after;\n    } else {\n      node.P = node.N = null;\n      this._ = node;\n      parent = null;\n    }\n    node.L = node.R = null;\n    node.U = parent;\n    node.C = true;\n\n    after = node;\n    while (parent && parent.C) {\n      grandpa = parent.U;\n      if (parent === grandpa.L) {\n        uncle = grandpa.R;\n        if (uncle && uncle.C) {\n          parent.C = uncle.C = false;\n          grandpa.C = true;\n          after = grandpa;\n        } else {\n          if (after === parent.R) {\n            RedBlackRotateLeft(this, parent);\n            after = parent;\n            parent = after.U;\n          }\n          parent.C = false;\n          grandpa.C = true;\n          RedBlackRotateRight(this, grandpa);\n        }\n      } else {\n        uncle = grandpa.L;\n        if (uncle && uncle.C) {\n          parent.C = uncle.C = false;\n          grandpa.C = true;\n          after = grandpa;\n        } else {\n          if (after === parent.L) {\n            RedBlackRotateRight(this, parent);\n            after = parent;\n            parent = after.U;\n          }\n          parent.C = false;\n          grandpa.C = true;\n          RedBlackRotateLeft(this, grandpa);\n        }\n      }\n      parent = after.U;\n    }\n    this._.C = false;\n  },\n\n  remove: function(node) {\n    if (node.N) node.N.P = node.P;\n    if (node.P) node.P.N = node.N;\n    node.N = node.P = null;\n\n    var parent = node.U,\n        sibling,\n        left = node.L,\n        right = node.R,\n        next,\n        red;\n\n    if (!left) next = right;\n    else if (!right) next = left;\n    else next = RedBlackFirst(right);\n\n    if (parent) {\n      if (parent.L === node) parent.L = next;\n      else parent.R = next;\n    } else {\n      this._ = next;\n    }\n\n    if (left && right) {\n      red = next.C;\n      next.C = node.C;\n      next.L = left;\n      left.U = next;\n      if (next !== right) {\n        parent = next.U;\n        next.U = node.U;\n        node = next.R;\n        parent.L = node;\n        next.R = right;\n        right.U = next;\n      } else {\n        next.U = parent;\n        parent = next;\n        node = next.R;\n      }\n    } else {\n      red = node.C;\n      node = next;\n    }\n\n    if (node) node.U = parent;\n    if (red) return;\n    if (node && node.C) { node.C = false; return; }\n\n    do {\n      if (node === this._) break;\n      if (node === parent.L) {\n        sibling = parent.R;\n        if (sibling.C) {\n          sibling.C = false;\n          parent.C = true;\n          RedBlackRotateLeft(this, parent);\n          sibling = parent.R;\n        }\n        if ((sibling.L && sibling.L.C)\n            || (sibling.R && sibling.R.C)) {\n          if (!sibling.R || !sibling.R.C) {\n            sibling.L.C = false;\n            sibling.C = true;\n            RedBlackRotateRight(this, sibling);\n            sibling = parent.R;\n          }\n          sibling.C = parent.C;\n          parent.C = sibling.R.C = false;\n          RedBlackRotateLeft(this, parent);\n          node = this._;\n          break;\n        }\n      } else {\n        sibling = parent.L;\n        if (sibling.C) {\n          sibling.C = false;\n          parent.C = true;\n          RedBlackRotateRight(this, parent);\n          sibling = parent.L;\n        }\n        if ((sibling.L && sibling.L.C)\n          || (sibling.R && sibling.R.C)) {\n          if (!sibling.L || !sibling.L.C) {\n            sibling.R.C = false;\n            sibling.C = true;\n            RedBlackRotateLeft(this, sibling);\n            sibling = parent.L;\n          }\n          sibling.C = parent.C;\n          parent.C = sibling.L.C = false;\n          RedBlackRotateRight(this, parent);\n          node = this._;\n          break;\n        }\n      }\n      sibling.C = true;\n      node = parent;\n      parent = parent.U;\n    } while (!node.C);\n\n    if (node) node.C = false;\n  }\n};\n\nfunction RedBlackRotateLeft(tree, node) {\n  var p = node,\n      q = node.R,\n      parent = p.U;\n\n  if (parent) {\n    if (parent.L === p) parent.L = q;\n    else parent.R = q;\n  } else {\n    tree._ = q;\n  }\n\n  q.U = parent;\n  p.U = q;\n  p.R = q.L;\n  if (p.R) p.R.U = p;\n  q.L = p;\n}\n\nfunction RedBlackRotateRight(tree, node) {\n  var p = node,\n      q = node.L,\n      parent = p.U;\n\n  if (parent) {\n    if (parent.L === p) parent.L = q;\n    else parent.R = q;\n  } else {\n    tree._ = q;\n  }\n\n  q.U = parent;\n  p.U = q;\n  p.L = q.R;\n  if (p.L) p.L.U = p;\n  q.R = p;\n}\n\nfunction RedBlackFirst(node) {\n  while (node.L) node = node.L;\n  return node;\n}\n\nfunction createEdge(left, right, v0, v1) {\n  var edge = [null, null],\n      index = edges.push(edge) - 1;\n  edge.left = left;\n  edge.right = right;\n  if (v0) setEdgeEnd(edge, left, right, v0);\n  if (v1) setEdgeEnd(edge, right, left, v1);\n  cells[left.index].halfedges.push(index);\n  cells[right.index].halfedges.push(index);\n  return edge;\n}\n\nfunction createBorderEdge(left, v0, v1) {\n  var edge = [v0, v1];\n  edge.left = left;\n  return edge;\n}\n\nfunction setEdgeEnd(edge, left, right, vertex) {\n  if (!edge[0] && !edge[1]) {\n    edge[0] = vertex;\n    edge.left = left;\n    edge.right = right;\n  } else if (edge.left === right) {\n    edge[1] = vertex;\n  } else {\n    edge[0] = vertex;\n  }\n}\n\n// Liang–Barsky line clipping.\nfunction clipEdge(edge, x0, y0, x1, y1) {\n  var a = edge[0],\n      b = edge[1],\n      ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?\n\n  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];\n  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];\n  return true;\n}\n\nfunction connectEdge(edge, x0, y0, x1, y1) {\n  var v1 = edge[1];\n  if (v1) return true;\n\n  var v0 = edge[0],\n      left = edge.left,\n      right = edge.right,\n      lx = left[0],\n      ly = left[1],\n      rx = right[0],\n      ry = right[1],\n      fx = (lx + rx) / 2,\n      fy = (ly + ry) / 2,\n      fm,\n      fb;\n\n  if (ry === ly) {\n    if (fx < x0 || fx >= x1) return;\n    if (lx > rx) {\n      if (!v0) v0 = [fx, y0];\n      else if (v0[1] >= y1) return;\n      v1 = [fx, y1];\n    } else {\n      if (!v0) v0 = [fx, y1];\n      else if (v0[1] < y0) return;\n      v1 = [fx, y0];\n    }\n  } else {\n    fm = (lx - rx) / (ry - ly);\n    fb = fy - fm * fx;\n    if (fm < -1 || fm > 1) {\n      if (lx > rx) {\n        if (!v0) v0 = [(y0 - fb) / fm, y0];\n        else if (v0[1] >= y1) return;\n        v1 = [(y1 - fb) / fm, y1];\n      } else {\n        if (!v0) v0 = [(y1 - fb) / fm, y1];\n        else if (v0[1] < y0) return;\n        v1 = [(y0 - fb) / fm, y0];\n      }\n    } else {\n      if (ly < ry) {\n        if (!v0) v0 = [x0, fm * x0 + fb];\n        else if (v0[0] >= x1) return;\n        v1 = [x1, fm * x1 + fb];\n      } else {\n        if (!v0) v0 = [x1, fm * x1 + fb];\n        else if (v0[0] < x0) return;\n        v1 = [x0, fm * x0 + fb];\n      }\n    }\n  }\n\n  edge[0] = v0;\n  edge[1] = v1;\n  return true;\n}\n\nfunction clipEdges(x0, y0, x1, y1) {\n  var i = edges.length,\n      edge;\n\n  while (i--) {\n    if (!connectEdge(edge = edges[i], x0, y0, x1, y1)\n        || !clipEdge(edge, x0, y0, x1, y1)\n        || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon\n            || Math.abs(edge[0][1] - edge[1][1]) > epsilon)) {\n      delete edges[i];\n    }\n  }\n}\n\nfunction createCell(site) {\n  return cells[site.index] = {\n    site: site,\n    halfedges: []\n  };\n}\n\nfunction cellHalfedgeAngle(cell, edge) {\n  var site = cell.site,\n      va = edge.left,\n      vb = edge.right;\n  if (site === vb) vb = va, va = site;\n  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);\n  if (site === va) va = edge[1], vb = edge[0];\n  else va = edge[0], vb = edge[1];\n  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);\n}\n\nfunction cellHalfedgeStart(cell, edge) {\n  return edge[+(edge.left !== cell.site)];\n}\n\nfunction cellHalfedgeEnd(cell, edge) {\n  return edge[+(edge.left === cell.site)];\n}\n\nfunction sortCellHalfedges() {\n  for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {\n    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {\n      var index = new Array(m),\n          array = new Array(m);\n      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);\n      index.sort(function(i, j) { return array[j] - array[i]; });\n      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];\n      for (j = 0; j < m; ++j) halfedges[j] = array[j];\n    }\n  }\n}\n\nfunction clipCells(x0, y0, x1, y1) {\n  var nCells = cells.length,\n      iCell,\n      cell,\n      site,\n      iHalfedge,\n      halfedges,\n      nHalfedges,\n      start,\n      startX,\n      startY,\n      end,\n      endX,\n      endY,\n      cover = true;\n\n  for (iCell = 0; iCell < nCells; ++iCell) {\n    if (cell = cells[iCell]) {\n      site = cell.site;\n      halfedges = cell.halfedges;\n      iHalfedge = halfedges.length;\n\n      // Remove any dangling clipped edges.\n      while (iHalfedge--) {\n        if (!edges[halfedges[iHalfedge]]) {\n          halfedges.splice(iHalfedge, 1);\n        }\n      }\n\n      // Insert any border edges as necessary.\n      iHalfedge = 0, nHalfedges = halfedges.length;\n      while (iHalfedge < nHalfedges) {\n        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];\n        start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];\n        if (Math.abs(endX - startX) > epsilon || Math.abs(endY - startY) > epsilon) {\n          halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,\n              Math.abs(endX - x0) < epsilon && y1 - endY > epsilon ? [x0, Math.abs(startX - x0) < epsilon ? startY : y1]\n              : Math.abs(endY - y1) < epsilon && x1 - endX > epsilon ? [Math.abs(startY - y1) < epsilon ? startX : x1, y1]\n              : Math.abs(endX - x1) < epsilon && endY - y0 > epsilon ? [x1, Math.abs(startX - x1) < epsilon ? startY : y0]\n              : Math.abs(endY - y0) < epsilon && endX - x0 > epsilon ? [Math.abs(startY - y0) < epsilon ? startX : x0, y0]\n              : null)) - 1);\n          ++nHalfedges;\n        }\n      }\n\n      if (nHalfedges) cover = false;\n    }\n  }\n\n  // If there weren’t any edges, have the closest site cover the extent.\n  // It doesn’t matter which corner of the extent we measure!\n  if (cover) {\n    var dx, dy, d2, dc = Infinity;\n\n    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {\n      if (cell = cells[iCell]) {\n        site = cell.site;\n        dx = site[0] - x0;\n        dy = site[1] - y0;\n        d2 = dx * dx + dy * dy;\n        if (d2 < dc) dc = d2, cover = cell;\n      }\n    }\n\n    if (cover) {\n      var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];\n      cover.halfedges.push(\n        edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,\n        edges.push(createBorderEdge(site, v01, v11)) - 1,\n        edges.push(createBorderEdge(site, v11, v10)) - 1,\n        edges.push(createBorderEdge(site, v10, v00)) - 1\n      );\n    }\n  }\n\n  // Lastly delete any cells with no edges; these were entirely clipped.\n  for (iCell = 0; iCell < nCells; ++iCell) {\n    if (cell = cells[iCell]) {\n      if (!cell.halfedges.length) {\n        delete cells[iCell];\n      }\n    }\n  }\n}\n\nvar circlePool = [];\n\nvar firstCircle;\n\nfunction Circle() {\n  RedBlackNode(this);\n  this.x =\n  this.y =\n  this.arc =\n  this.site =\n  this.cy = null;\n}\n\nfunction attachCircle(arc) {\n  var lArc = arc.P,\n      rArc = arc.N;\n\n  if (!lArc || !rArc) return;\n\n  var lSite = lArc.site,\n      cSite = arc.site,\n      rSite = rArc.site;\n\n  if (lSite === rSite) return;\n\n  var bx = cSite[0],\n      by = cSite[1],\n      ax = lSite[0] - bx,\n      ay = lSite[1] - by,\n      cx = rSite[0] - bx,\n      cy = rSite[1] - by;\n\n  var d = 2 * (ax * cy - ay * cx);\n  if (d >= -epsilon2) return;\n\n  var ha = ax * ax + ay * ay,\n      hc = cx * cx + cy * cy,\n      x = (cy * ha - ay * hc) / d,\n      y = (ax * hc - cx * ha) / d;\n\n  var circle = circlePool.pop() || new Circle;\n  circle.arc = arc;\n  circle.site = cSite;\n  circle.x = x + bx;\n  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom\n\n  arc.circle = circle;\n\n  var before = null,\n      node = circles._;\n\n  while (node) {\n    if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {\n      if (node.L) node = node.L;\n      else { before = node.P; break; }\n    } else {\n      if (node.R) node = node.R;\n      else { before = node; break; }\n    }\n  }\n\n  circles.insert(before, circle);\n  if (!before) firstCircle = circle;\n}\n\nfunction detachCircle(arc) {\n  var circle = arc.circle;\n  if (circle) {\n    if (!circle.P) firstCircle = circle.N;\n    circles.remove(circle);\n    circlePool.push(circle);\n    RedBlackNode(circle);\n    arc.circle = null;\n  }\n}\n\nvar beachPool = [];\n\nfunction Beach() {\n  RedBlackNode(this);\n  this.edge =\n  this.site =\n  this.circle = null;\n}\n\nfunction createBeach(site) {\n  var beach = beachPool.pop() || new Beach;\n  beach.site = site;\n  return beach;\n}\n\nfunction detachBeach(beach) {\n  detachCircle(beach);\n  beaches.remove(beach);\n  beachPool.push(beach);\n  RedBlackNode(beach);\n}\n\nfunction removeBeach(beach) {\n  var circle = beach.circle,\n      x = circle.x,\n      y = circle.cy,\n      vertex = [x, y],\n      previous = beach.P,\n      next = beach.N,\n      disappearing = [beach];\n\n  detachBeach(beach);\n\n  var lArc = previous;\n  while (lArc.circle\n      && Math.abs(x - lArc.circle.x) < epsilon\n      && Math.abs(y - lArc.circle.cy) < epsilon) {\n    previous = lArc.P;\n    disappearing.unshift(lArc);\n    detachBeach(lArc);\n    lArc = previous;\n  }\n\n  disappearing.unshift(lArc);\n  detachCircle(lArc);\n\n  var rArc = next;\n  while (rArc.circle\n      && Math.abs(x - rArc.circle.x) < epsilon\n      && Math.abs(y - rArc.circle.cy) < epsilon) {\n    next = rArc.N;\n    disappearing.push(rArc);\n    detachBeach(rArc);\n    rArc = next;\n  }\n\n  disappearing.push(rArc);\n  detachCircle(rArc);\n\n  var nArcs = disappearing.length,\n      iArc;\n  for (iArc = 1; iArc < nArcs; ++iArc) {\n    rArc = disappearing[iArc];\n    lArc = disappearing[iArc - 1];\n    setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n  }\n\n  lArc = disappearing[0];\n  rArc = disappearing[nArcs - 1];\n  rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);\n\n  attachCircle(lArc);\n  attachCircle(rArc);\n}\n\nfunction addBeach(site) {\n  var x = site[0],\n      directrix = site[1],\n      lArc,\n      rArc,\n      dxl,\n      dxr,\n      node = beaches._;\n\n  while (node) {\n    dxl = leftBreakPoint(node, directrix) - x;\n    if (dxl > epsilon) node = node.L; else {\n      dxr = x - rightBreakPoint(node, directrix);\n      if (dxr > epsilon) {\n        if (!node.R) {\n          lArc = node;\n          break;\n        }\n        node = node.R;\n      } else {\n        if (dxl > -epsilon) {\n          lArc = node.P;\n          rArc = node;\n        } else if (dxr > -epsilon) {\n          lArc = node;\n          rArc = node.N;\n        } else {\n          lArc = rArc = node;\n        }\n        break;\n      }\n    }\n  }\n\n  createCell(site);\n  var newArc = createBeach(site);\n  beaches.insert(lArc, newArc);\n\n  if (!lArc && !rArc) return;\n\n  if (lArc === rArc) {\n    detachCircle(lArc);\n    rArc = createBeach(lArc.site);\n    beaches.insert(newArc, rArc);\n    newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);\n    attachCircle(lArc);\n    attachCircle(rArc);\n    return;\n  }\n\n  if (!rArc) { // && lArc\n    newArc.edge = createEdge(lArc.site, newArc.site);\n    return;\n  }\n\n  // else lArc !== rArc\n  detachCircle(lArc);\n  detachCircle(rArc);\n\n  var lSite = lArc.site,\n      ax = lSite[0],\n      ay = lSite[1],\n      bx = site[0] - ax,\n      by = site[1] - ay,\n      rSite = rArc.site,\n      cx = rSite[0] - ax,\n      cy = rSite[1] - ay,\n      d = 2 * (bx * cy - by * cx),\n      hb = bx * bx + by * by,\n      hc = cx * cx + cy * cy,\n      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];\n\n  setEdgeEnd(rArc.edge, lSite, rSite, vertex);\n  newArc.edge = createEdge(lSite, site, null, vertex);\n  rArc.edge = createEdge(site, rSite, null, vertex);\n  attachCircle(lArc);\n  attachCircle(rArc);\n}\n\nfunction leftBreakPoint(arc, directrix) {\n  var site = arc.site,\n      rfocx = site[0],\n      rfocy = site[1],\n      pby2 = rfocy - directrix;\n\n  if (!pby2) return rfocx;\n\n  var lArc = arc.P;\n  if (!lArc) return -Infinity;\n\n  site = lArc.site;\n  var lfocx = site[0],\n      lfocy = site[1],\n      plby2 = lfocy - directrix;\n\n  if (!plby2) return lfocx;\n\n  var hl = lfocx - rfocx,\n      aby2 = 1 / pby2 - 1 / plby2,\n      b = hl / plby2;\n\n  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n\n  return (rfocx + lfocx) / 2;\n}\n\nfunction rightBreakPoint(arc, directrix) {\n  var rArc = arc.N;\n  if (rArc) return leftBreakPoint(rArc, directrix);\n  var site = arc.site;\n  return site[1] === directrix ? site[0] : Infinity;\n}\n\nvar epsilon = 1e-6;\nvar epsilon2 = 1e-12;\nvar beaches;\nvar cells;\nvar circles;\nvar edges;\n\nfunction triangleArea(a, b, c) {\n  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);\n}\n\nfunction lexicographic(a, b) {\n  return b[1] - a[1]\n      || b[0] - a[0];\n}\n\nfunction Diagram(sites, extent) {\n  var site = sites.sort(lexicographic).pop(),\n      x,\n      y,\n      circle;\n\n  edges = [];\n  cells = new Array(sites.length);\n  beaches = new RedBlackTree;\n  circles = new RedBlackTree;\n\n  while (true) {\n    circle = firstCircle;\n    if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {\n      if (site[0] !== x || site[1] !== y) {\n        addBeach(site);\n        x = site[0], y = site[1];\n      }\n      site = sites.pop();\n    } else if (circle) {\n      removeBeach(circle.arc);\n    } else {\n      break;\n    }\n  }\n\n  sortCellHalfedges();\n\n  if (extent) {\n    var x0 = +extent[0][0],\n        y0 = +extent[0][1],\n        x1 = +extent[1][0],\n        y1 = +extent[1][1];\n    clipEdges(x0, y0, x1, y1);\n    clipCells(x0, y0, x1, y1);\n  }\n\n  this.edges = edges;\n  this.cells = cells;\n\n  beaches =\n  circles =\n  edges =\n  cells = null;\n}\n\nDiagram.prototype = {\n  constructor: Diagram,\n\n  polygons: function() {\n    var edges = this.edges;\n\n    return this.cells.map(function(cell) {\n      var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });\n      polygon.data = cell.site.data;\n      return polygon;\n    });\n  },\n\n  triangles: function() {\n    var triangles = [],\n        edges = this.edges;\n\n    this.cells.forEach(function(cell, i) {\n      if (!(m = (halfedges = cell.halfedges).length)) return;\n      var site = cell.site,\n          halfedges,\n          j = -1,\n          m,\n          s0,\n          e1 = edges[halfedges[m - 1]],\n          s1 = e1.left === site ? e1.right : e1.left;\n\n      while (++j < m) {\n        s0 = s1;\n        e1 = edges[halfedges[j]];\n        s1 = e1.left === site ? e1.right : e1.left;\n        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {\n          triangles.push([site.data, s0.data, s1.data]);\n        }\n      }\n    });\n\n    return triangles;\n  },\n\n  links: function() {\n    return this.edges.filter(function(edge) {\n      return edge.right;\n    }).map(function(edge) {\n      return {\n        source: edge.left.data,\n        target: edge.right.data\n      };\n    });\n  },\n\n  find: function(x, y, radius) {\n    var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;\n\n    // Use the previously-found cell, or start with an arbitrary one.\n    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;\n    var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;\n\n    // Traverse the half-edges to find a closer cell, if any.\n    do {\n      cell = that.cells[i0 = i1], i1 = null;\n      cell.halfedges.forEach(function(e) {\n        var edge = that.edges[e], v = edge.left;\n        if ((v === cell.site || !v) && !(v = edge.right)) return;\n        var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;\n        if (v2 < d2) d2 = v2, i1 = v.index;\n      });\n    } while (i1 !== null);\n\n    that._found = i0;\n\n    return radius == null || d2 <= radius * radius ? cell.site : null;\n  }\n};\n\nfunction voronoi() {\n  var x$$1 = x,\n      y$$1 = y,\n      extent = null;\n\n  function voronoi(data) {\n    return new Diagram(data.map(function(d, i) {\n      var s = [Math.round(x$$1(d, i, data) / epsilon) * epsilon, Math.round(y$$1(d, i, data) / epsilon) * epsilon];\n      s.index = i;\n      s.data = d;\n      return s;\n    }), extent);\n  }\n\n  voronoi.polygons = function(data) {\n    return voronoi(data).polygons();\n  };\n\n  voronoi.links = function(data) {\n    return voronoi(data).links();\n  };\n\n  voronoi.triangles = function(data) {\n    return voronoi(data).triangles();\n  };\n\n  voronoi.x = function(_) {\n    return arguments.length ? (x$$1 = typeof _ === \"function\" ? _ : constant(+_), voronoi) : x$$1;\n  };\n\n  voronoi.y = function(_) {\n    return arguments.length ? (y$$1 = typeof _ === \"function\" ? _ : constant(+_), voronoi) : y$$1;\n  };\n\n  voronoi.extent = function(_) {\n    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];\n  };\n\n  voronoi.size = function(_) {\n    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];\n  };\n\n  return voronoi;\n}\n\nexports.voronoi = voronoi;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","function _classCallCheck2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass2(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof2(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _typeof2(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\n/*\n  d3plus-text v1.0.2\n  A smart SVG text box with line wrapping and automatic font size scaling.\n  Copyright (c) 2021 D3plus - https://d3plus.org\n  @license MIT\n*/\n(function (factory) {\n  typeof define === 'function' && define.amd ? define(factory) : factory();\n})(function () {\n  'use strict';\n\n  function createCommonjsModule(fn) {\n    var module = {\n      exports: {}\n    };\n    return fn(module, module.exports), module.exports;\n  }\n\n  var _global = createCommonjsModule(function (module) {\n    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n    var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func\n    : Function('return this')();\n    if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n  });\n\n  var hasOwnProperty = {}.hasOwnProperty;\n\n  var _has = function _has(it, key) {\n    return hasOwnProperty.call(it, key);\n  };\n\n  var _fails = function _fails(exec) {\n    try {\n      return !!exec();\n    } catch (e) {\n      return true;\n    }\n  }; // Thank's IE8 for his funny defineProperty\n\n\n  var _descriptors = !_fails(function () {\n    return Object.defineProperty({}, 'a', {\n      get: function get() {\n        return 7;\n      }\n    }).a != 7;\n  });\n\n  var _core = createCommonjsModule(function (module) {\n    var core = module.exports = {\n      version: '2.6.12'\n    };\n    if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n  });\n\n  var _isObject = function _isObject(it) {\n    return _typeof2(it) === 'object' ? it !== null : typeof it === 'function';\n  };\n\n  var _anObject = function _anObject(it) {\n    if (!_isObject(it)) throw TypeError(it + ' is not an object!');\n    return it;\n  };\n\n  var document$1 = _global.document; // typeof document.createElement is 'object' in old IE\n\n  var is = _isObject(document$1) && _isObject(document$1.createElement);\n\n  var _domCreate = function _domCreate(it) {\n    return is ? document$1.createElement(it) : {};\n  };\n\n  var _ie8DomDefine = !_descriptors && !_fails(function () {\n    return Object.defineProperty(_domCreate('div'), 'a', {\n      get: function get() {\n        return 7;\n      }\n    }).a != 7;\n  }); // 7.1.1 ToPrimitive(input [, PreferredType])\n  // instead of the ES6 spec version, we didn't implement @@toPrimitive case\n  // and the second argument - flag - preferred type is a string\n\n\n  var _toPrimitive = function _toPrimitive(it, S) {\n    if (!_isObject(it)) return it;\n    var fn, val;\n    if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\n    if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;\n    if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\n    throw TypeError(\"Can't convert object to primitive value\");\n  };\n\n  var dP = Object.defineProperty;\n  var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n    _anObject(O);\n\n    P = _toPrimitive(P, true);\n\n    _anObject(Attributes);\n\n    if (_ie8DomDefine) try {\n      return dP(O, P, Attributes);\n    } catch (e) {\n      /* empty */\n    }\n    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n    if ('value' in Attributes) O[P] = Attributes.value;\n    return O;\n  };\n  var _objectDp = {\n    f: f\n  };\n\n  var _propertyDesc = function _propertyDesc(bitmap, value) {\n    return {\n      enumerable: !(bitmap & 1),\n      configurable: !(bitmap & 2),\n      writable: !(bitmap & 4),\n      value: value\n    };\n  };\n\n  var _hide = _descriptors ? function (object, key, value) {\n    return _objectDp.f(object, key, _propertyDesc(1, value));\n  } : function (object, key, value) {\n    object[key] = value;\n    return object;\n  };\n\n  var id = 0;\n  var px = Math.random();\n\n  var _uid = function _uid(key) {\n    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n  };\n\n  var _library = false;\n\n  var _shared = createCommonjsModule(function (module) {\n    var SHARED = '__core-js_shared__';\n    var store = _global[SHARED] || (_global[SHARED] = {});\n    (module.exports = function (key, value) {\n      return store[key] || (store[key] = value !== undefined ? value : {});\n    })('versions', []).push({\n      version: _core.version,\n      mode: 'global',\n      copyright: '© 2020 Denis Pushkarev (zloirock.ru)'\n    });\n  });\n\n  var _functionToString = _shared('native-function-to-string', Function.toString);\n\n  var _redefine = createCommonjsModule(function (module) {\n    var SRC = _uid('src');\n\n    var TO_STRING = 'toString';\n\n    var TPL = ('' + _functionToString).split(TO_STRING);\n\n    _core.inspectSource = function (it) {\n      return _functionToString.call(it);\n    };\n\n    (module.exports = function (O, key, val, safe) {\n      var isFunction = typeof val == 'function';\n      if (isFunction) _has(val, 'name') || _hide(val, 'name', key);\n      if (O[key] === val) return;\n      if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n\n      if (O === _global) {\n        O[key] = val;\n      } else if (!safe) {\n        delete O[key];\n\n        _hide(O, key, val);\n      } else if (O[key]) {\n        O[key] = val;\n      } else {\n        _hide(O, key, val);\n      } // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n\n    })(Function.prototype, TO_STRING, function toString() {\n      return typeof this == 'function' && this[SRC] || _functionToString.call(this);\n    });\n  });\n\n  var _aFunction = function _aFunction(it) {\n    if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n    return it;\n  }; // optional / simple context binding\n\n\n  var _ctx = function _ctx(fn, that, length) {\n    _aFunction(fn);\n\n    if (that === undefined) return fn;\n\n    switch (length) {\n      case 1:\n        return function (a) {\n          return fn.call(that, a);\n        };\n\n      case 2:\n        return function (a, b) {\n          return fn.call(that, a, b);\n        };\n\n      case 3:\n        return function (a, b, c) {\n          return fn.call(that, a, b, c);\n        };\n    }\n\n    return function ()\n    /* ...args */\n    {\n      return fn.apply(that, arguments);\n    };\n  };\n\n  var PROTOTYPE = 'prototype';\n\n  var $export = function $export(type, name, source) {\n    var IS_FORCED = type & $export.F;\n    var IS_GLOBAL = type & $export.G;\n    var IS_STATIC = type & $export.S;\n    var IS_PROTO = type & $export.P;\n    var IS_BIND = type & $export.B;\n    var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];\n    var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});\n    var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n    var key, own, out, exp;\n    if (IS_GLOBAL) source = name;\n\n    for (key in source) {\n      // contains in native\n      own = !IS_FORCED && target && target[key] !== undefined; // export native or passed\n\n      out = (own ? target : source)[key]; // bind timers to global for call from export context\n\n      exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out; // extend global\n\n      if (target) _redefine(target, key, out, type & $export.U); // export\n\n      if (exports[key] != out) _hide(exports, key, exp);\n      if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n    }\n  };\n\n  _global.core = _core; // type bitmap\n\n  $export.F = 1; // forced\n\n  $export.G = 2; // global\n\n  $export.S = 4; // static\n\n  $export.P = 8; // proto\n\n  $export.B = 16; // bind\n\n  $export.W = 32; // wrap\n\n  $export.U = 64; // safe\n\n  $export.R = 128; // real proto method for `library`\n\n  var _export = $export;\n\n  var _meta = createCommonjsModule(function (module) {\n    var META = _uid('meta');\n\n    var setDesc = _objectDp.f;\n    var id = 0;\n\n    var isExtensible = Object.isExtensible || function () {\n      return true;\n    };\n\n    var FREEZE = !_fails(function () {\n      return isExtensible(Object.preventExtensions({}));\n    });\n\n    var setMeta = function setMeta(it) {\n      setDesc(it, META, {\n        value: {\n          i: 'O' + ++id,\n          // object ID\n          w: {} // weak collections IDs\n\n        }\n      });\n    };\n\n    var fastKey = function fastKey(it, create) {\n      // return primitive with prefix\n      if (!_isObject(it)) return _typeof2(it) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n\n      if (!_has(it, META)) {\n        // can't set metadata to uncaught frozen object\n        if (!isExtensible(it)) return 'F'; // not necessary to add metadata\n\n        if (!create) return 'E'; // add missing metadata\n\n        setMeta(it); // return object ID\n      }\n\n      return it[META].i;\n    };\n\n    var getWeak = function getWeak(it, create) {\n      if (!_has(it, META)) {\n        // can't set metadata to uncaught frozen object\n        if (!isExtensible(it)) return true; // not necessary to add metadata\n\n        if (!create) return false; // add missing metadata\n\n        setMeta(it); // return hash weak collections IDs\n      }\n\n      return it[META].w;\n    }; // add metadata on freeze-family methods calling\n\n\n    var onFreeze = function onFreeze(it) {\n      if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);\n      return it;\n    };\n\n    var meta = module.exports = {\n      KEY: META,\n      NEED: false,\n      fastKey: fastKey,\n      getWeak: getWeak,\n      onFreeze: onFreeze\n    };\n  });\n\n  var _wks = createCommonjsModule(function (module) {\n    var store = _shared('wks');\n\n    var _Symbol = _global.Symbol;\n    var USE_SYMBOL = typeof _Symbol == 'function';\n\n    var $exports = module.exports = function (name) {\n      return store[name] || (store[name] = USE_SYMBOL && _Symbol[name] || (USE_SYMBOL ? _Symbol : _uid)('Symbol.' + name));\n    };\n\n    $exports.store = store;\n  });\n\n  var def = _objectDp.f;\n\n  var TAG = _wks('toStringTag');\n\n  var _setToStringTag = function _setToStringTag(it, tag, stat) {\n    if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {\n      configurable: true,\n      value: tag\n    });\n  };\n\n  var f$1 = _wks;\n  var _wksExt = {\n    f: f$1\n  };\n  var defineProperty = _objectDp.f;\n\n  var _wksDefine = function _wksDefine(name) {\n    var $Symbol = _core.Symbol || (_core.Symbol = _global.Symbol || {});\n    if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {\n      value: _wksExt.f(name)\n    });\n  };\n\n  var toString = {}.toString;\n\n  var _cof = function _cof(it) {\n    return toString.call(it).slice(8, -1);\n  }; // fallback for non-array-like ES3 and non-enumerable old V8 strings\n  // eslint-disable-next-line no-prototype-builtins\n\n\n  var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n    return _cof(it) == 'String' ? it.split('') : Object(it);\n  }; // 7.2.1 RequireObjectCoercible(argument)\n\n\n  var _defined = function _defined(it) {\n    if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n    return it;\n  }; // to indexed object, toObject with fallback for non-array-like ES3 strings\n\n\n  var _toIobject = function _toIobject(it) {\n    return _iobject(_defined(it));\n  }; // 7.1.4 ToInteger\n\n\n  var ceil = Math.ceil;\n  var floor = Math.floor;\n\n  var _toInteger = function _toInteger(it) {\n    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n  }; // 7.1.15 ToLength\n\n\n  var min = Math.min;\n\n  var _toLength = function _toLength(it) {\n    return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n  };\n\n  var max = Math.max;\n  var min$1 = Math.min;\n\n  var _toAbsoluteIndex = function _toAbsoluteIndex(index, length) {\n    index = _toInteger(index);\n    return index < 0 ? max(index + length, 0) : min$1(index, length);\n  }; // false -> Array#indexOf\n  // true  -> Array#includes\n\n\n  var _arrayIncludes = function _arrayIncludes(IS_INCLUDES) {\n    return function ($this, el, fromIndex) {\n      var O = _toIobject($this);\n\n      var length = _toLength(O.length);\n\n      var index = _toAbsoluteIndex(fromIndex, length);\n\n      var value; // Array#includes uses SameValueZero equality algorithm\n      // eslint-disable-next-line no-self-compare\n\n      if (IS_INCLUDES && el != el) while (length > index) {\n        value = O[index++]; // eslint-disable-next-line no-self-compare\n\n        if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not\n      } else for (; length > index; index++) {\n        if (IS_INCLUDES || index in O) {\n          if (O[index] === el) return IS_INCLUDES || index || 0;\n        }\n      }\n      return !IS_INCLUDES && -1;\n    };\n  };\n\n  var shared = _shared('keys');\n\n  var _sharedKey = function _sharedKey(key) {\n    return shared[key] || (shared[key] = _uid(key));\n  };\n\n  var arrayIndexOf = _arrayIncludes(false);\n\n  var IE_PROTO = _sharedKey('IE_PROTO');\n\n  var _objectKeysInternal = function _objectKeysInternal(object, names) {\n    var O = _toIobject(object);\n\n    var i = 0;\n    var result = [];\n    var key;\n\n    for (key in O) {\n      if (key != IE_PROTO) _has(O, key) && result.push(key);\n    } // Don't enum bug & hidden keys\n\n\n    while (names.length > i) {\n      if (_has(O, key = names[i++])) {\n        ~arrayIndexOf(result, key) || result.push(key);\n      }\n    }\n\n    return result;\n  }; // IE 8- don't enum bug keys\n\n\n  var _enumBugKeys = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(','); // 19.1.2.14 / 15.2.3.14 Object.keys(O)\n\n\n  var _objectKeys = Object.keys || function keys(O) {\n    return _objectKeysInternal(O, _enumBugKeys);\n  };\n\n  var f$2 = Object.getOwnPropertySymbols;\n  var _objectGops = {\n    f: f$2\n  };\n  var f$3 = {}.propertyIsEnumerable;\n  var _objectPie = {\n    f: f$3\n  }; // all enumerable object keys, includes symbols\n\n  var _enumKeys = function _enumKeys(it) {\n    var result = _objectKeys(it);\n\n    var getSymbols = _objectGops.f;\n\n    if (getSymbols) {\n      var symbols = getSymbols(it);\n      var isEnum = _objectPie.f;\n      var i = 0;\n      var key;\n\n      while (symbols.length > i) {\n        if (isEnum.call(it, key = symbols[i++])) result.push(key);\n      }\n    }\n\n    return result;\n  }; // 7.2.2 IsArray(argument)\n\n\n  var _isArray = Array.isArray || function isArray(arg) {\n    return _cof(arg) == 'Array';\n  }; // 7.1.13 ToObject(argument)\n\n\n  var _toObject = function _toObject(it) {\n    return Object(_defined(it));\n  };\n\n  var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {\n    _anObject(O);\n\n    var keys = _objectKeys(Properties);\n\n    var length = keys.length;\n    var i = 0;\n    var P;\n\n    while (length > i) {\n      _objectDp.f(O, P = keys[i++], Properties[P]);\n    }\n\n    return O;\n  };\n\n  var document$2 = _global.document;\n\n  var _html = document$2 && document$2.documentElement; // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n\n\n  var IE_PROTO$1 = _sharedKey('IE_PROTO');\n\n  var Empty = function Empty() {\n    /* empty */\n  };\n\n  var PROTOTYPE$1 = 'prototype'; // Create object with fake `null` prototype: use iframe Object with cleared prototype\n\n  var _createDict = function createDict() {\n    // Thrash, waste and sodomy: IE GC bug\n    var iframe = _domCreate('iframe');\n\n    var i = _enumBugKeys.length;\n    var lt = '<';\n    var gt = '>';\n    var iframeDocument;\n    iframe.style.display = 'none';\n\n    _html.appendChild(iframe);\n\n    iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n    // createDict = iframe.contentWindow.Object;\n    // html.removeChild(iframe);\n\n    iframeDocument = iframe.contentWindow.document;\n    iframeDocument.open();\n    iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n    iframeDocument.close();\n    _createDict = iframeDocument.F;\n\n    while (i--) {\n      delete _createDict[PROTOTYPE$1][_enumBugKeys[i]];\n    }\n\n    return _createDict();\n  };\n\n  var _objectCreate = Object.create || function create(O, Properties) {\n    var result;\n\n    if (O !== null) {\n      Empty[PROTOTYPE$1] = _anObject(O);\n      result = new Empty();\n      Empty[PROTOTYPE$1] = null; // add \"__proto__\" for Object.getPrototypeOf polyfill\n\n      result[IE_PROTO$1] = O;\n    } else result = _createDict();\n\n    return Properties === undefined ? result : _objectDps(result, Properties);\n  }; // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\n\n\n  var hiddenKeys = _enumBugKeys.concat('length', 'prototype');\n\n  var f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n    return _objectKeysInternal(O, hiddenKeys);\n  };\n\n  var _objectGopn = {\n    f: f$4\n  }; // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\n\n  var gOPN = _objectGopn.f;\n  var toString$1 = {}.toString;\n  var windowNames = (typeof window === \"undefined\" ? \"undefined\" : _typeof2(window)) == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];\n\n  var getWindowNames = function getWindowNames(it) {\n    try {\n      return gOPN(it);\n    } catch (e) {\n      return windowNames.slice();\n    }\n  };\n\n  var f$5 = function getOwnPropertyNames(it) {\n    return windowNames && toString$1.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(_toIobject(it));\n  };\n\n  var _objectGopnExt = {\n    f: f$5\n  };\n  var gOPD = Object.getOwnPropertyDescriptor;\n  var f$6 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {\n    O = _toIobject(O);\n    P = _toPrimitive(P, true);\n    if (_ie8DomDefine) try {\n      return gOPD(O, P);\n    } catch (e) {\n      /* empty */\n    }\n    if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);\n  };\n  var _objectGopd = {\n    f: f$6\n  }; // ECMAScript 6 symbols shim\n\n  var META = _meta.KEY;\n  var gOPD$1 = _objectGopd.f;\n  var dP$1 = _objectDp.f;\n  var gOPN$1 = _objectGopnExt.f;\n  var $Symbol = _global.Symbol;\n  var $JSON = _global.JSON;\n\n  var _stringify = $JSON && $JSON.stringify;\n\n  var PROTOTYPE$2 = 'prototype';\n\n  var HIDDEN = _wks('_hidden');\n\n  var TO_PRIMITIVE = _wks('toPrimitive');\n\n  var isEnum = {}.propertyIsEnumerable;\n\n  var SymbolRegistry = _shared('symbol-registry');\n\n  var AllSymbols = _shared('symbols');\n\n  var OPSymbols = _shared('op-symbols');\n\n  var ObjectProto = Object[PROTOTYPE$2];\n  var USE_NATIVE = typeof $Symbol == 'function' && !!_objectGops.f;\n  var QObject = _global.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\n\n  var setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\n\n  var setSymbolDesc = _descriptors && _fails(function () {\n    return _objectCreate(dP$1({}, 'a', {\n      get: function get() {\n        return dP$1(this, 'a', {\n          value: 7\n        }).a;\n      }\n    })).a != 7;\n  }) ? function (it, key, D) {\n    var protoDesc = gOPD$1(ObjectProto, key);\n    if (protoDesc) delete ObjectProto[key];\n    dP$1(it, key, D);\n    if (protoDesc && it !== ObjectProto) dP$1(ObjectProto, key, protoDesc);\n  } : dP$1;\n\n  var wrap = function wrap(tag) {\n    var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);\n\n    sym._k = tag;\n    return sym;\n  };\n\n  var isSymbol = USE_NATIVE && _typeof2($Symbol.iterator) == 'symbol' ? function (it) {\n    return _typeof2(it) == 'symbol';\n  } : function (it) {\n    return it instanceof $Symbol;\n  };\n\n  var $defineProperty = function defineProperty(it, key, D) {\n    if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n\n    _anObject(it);\n\n    key = _toPrimitive(key, true);\n\n    _anObject(D);\n\n    if (_has(AllSymbols, key)) {\n      if (!D.enumerable) {\n        if (!_has(it, HIDDEN)) dP$1(it, HIDDEN, _propertyDesc(1, {}));\n        it[HIDDEN][key] = true;\n      } else {\n        if (_has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n        D = _objectCreate(D, {\n          enumerable: _propertyDesc(0, false)\n        });\n      }\n\n      return setSymbolDesc(it, key, D);\n    }\n\n    return dP$1(it, key, D);\n  };\n\n  var $defineProperties = function defineProperties(it, P) {\n    _anObject(it);\n\n    var keys = _enumKeys(P = _toIobject(P));\n\n    var i = 0;\n    var l = keys.length;\n    var key;\n\n    while (l > i) {\n      $defineProperty(it, key = keys[i++], P[key]);\n    }\n\n    return it;\n  };\n\n  var $create = function create(it, P) {\n    return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);\n  };\n\n  var $propertyIsEnumerable = function propertyIsEnumerable(key) {\n    var E = isEnum.call(this, key = _toPrimitive(key, true));\n    if (this === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return false;\n    return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n  };\n\n  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n    it = _toIobject(it);\n    key = _toPrimitive(key, true);\n    if (it === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return;\n    var D = gOPD$1(it, key);\n    if (D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n    return D;\n  };\n\n  var $getOwnPropertyNames = function getOwnPropertyNames(it) {\n    var names = gOPN$1(_toIobject(it));\n    var result = [];\n    var i = 0;\n    var key;\n\n    while (names.length > i) {\n      if (!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n    }\n\n    return result;\n  };\n\n  var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n    var IS_OP = it === ObjectProto;\n    var names = gOPN$1(IS_OP ? OPSymbols : _toIobject(it));\n    var result = [];\n    var i = 0;\n    var key;\n\n    while (names.length > i) {\n      if (_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n    }\n\n    return result;\n  }; // 19.4.1.1 Symbol([description])\n\n\n  if (!USE_NATIVE) {\n    $Symbol = function _Symbol2() {\n      if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n\n      var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);\n\n      var $set = function $set(value) {\n        if (this === ObjectProto) $set.call(OPSymbols, value);\n        if (_has(this, HIDDEN) && _has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n        setSymbolDesc(this, tag, _propertyDesc(1, value));\n      };\n\n      if (_descriptors && setter) setSymbolDesc(ObjectProto, tag, {\n        configurable: true,\n        set: $set\n      });\n      return wrap(tag);\n    };\n\n    _redefine($Symbol[PROTOTYPE$2], 'toString', function toString() {\n      return this._k;\n    });\n\n    _objectGopd.f = $getOwnPropertyDescriptor;\n    _objectDp.f = $defineProperty;\n    _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;\n    _objectPie.f = $propertyIsEnumerable;\n    _objectGops.f = $getOwnPropertySymbols;\n\n    if (_descriptors && !_library) {\n      _redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n    }\n\n    _wksExt.f = function (name) {\n      return wrap(_wks(name));\n    };\n  }\n\n  _export(_export.G + _export.W + _export.F * !USE_NATIVE, {\n    Symbol: $Symbol\n  });\n\n  for (var es6Symbols = // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {\n    _wks(es6Symbols[j++]);\n  }\n\n  for (var wellKnownSymbols = _objectKeys(_wks.store), k = 0; wellKnownSymbols.length > k;) {\n    _wksDefine(wellKnownSymbols[k++]);\n  }\n\n  _export(_export.S + _export.F * !USE_NATIVE, 'Symbol', {\n    // 19.4.2.1 Symbol.for(key)\n    'for': function _for(key) {\n      return _has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);\n    },\n    // 19.4.2.5 Symbol.keyFor(sym)\n    keyFor: function keyFor(sym) {\n      if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n\n      for (var key in SymbolRegistry) {\n        if (SymbolRegistry[key] === sym) return key;\n      }\n    },\n    useSetter: function useSetter() {\n      setter = true;\n    },\n    useSimple: function useSimple() {\n      setter = false;\n    }\n  });\n\n  _export(_export.S + _export.F * !USE_NATIVE, 'Object', {\n    // 19.1.2.2 Object.create(O [, Properties])\n    create: $create,\n    // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n    defineProperty: $defineProperty,\n    // 19.1.2.3 Object.defineProperties(O, Properties)\n    defineProperties: $defineProperties,\n    // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n    // 19.1.2.7 Object.getOwnPropertyNames(O)\n    getOwnPropertyNames: $getOwnPropertyNames,\n    // 19.1.2.8 Object.getOwnPropertySymbols(O)\n    getOwnPropertySymbols: $getOwnPropertySymbols\n  }); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives\n  // https://bugs.chromium.org/p/v8/issues/detail?id=3443\n\n\n  var FAILS_ON_PRIMITIVES = _fails(function () {\n    _objectGops.f(1);\n  });\n\n  _export(_export.S + _export.F * FAILS_ON_PRIMITIVES, 'Object', {\n    getOwnPropertySymbols: function getOwnPropertySymbols(it) {\n      return _objectGops.f(_toObject(it));\n    }\n  }); // 24.3.2 JSON.stringify(value [, replacer [, space]])\n\n\n  $JSON && _export(_export.S + _export.F * (!USE_NATIVE || _fails(function () {\n    var S = $Symbol(); // MS Edge converts symbol values to JSON as {}\n    // WebKit converts symbol values to JSON as null\n    // V8 throws on boxed symbols\n\n    return _stringify([S]) != '[null]' || _stringify({\n      a: S\n    }) != '{}' || _stringify(Object(S)) != '{}';\n  })), 'JSON', {\n    stringify: function stringify(it) {\n      var args = [it];\n      var i = 1;\n      var replacer, $replacer;\n\n      while (arguments.length > i) {\n        args.push(arguments[i++]);\n      }\n\n      $replacer = replacer = args[1];\n      if (!_isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n\n      if (!_isArray(replacer)) replacer = function replacer(key, value) {\n        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n        if (!isSymbol(value)) return value;\n      };\n      args[1] = replacer;\n      return _stringify.apply($JSON, args);\n    }\n  }); // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n\n  $Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf); // 19.4.3.5 Symbol.prototype[@@toStringTag]\n\n  _setToStringTag($Symbol, 'Symbol'); // 20.2.1.9 Math[@@toStringTag]\n\n\n  _setToStringTag(Math, 'Math', true); // 24.3.3 JSON[@@toStringTag]\n\n\n  _setToStringTag(_global.JSON, 'JSON', true); // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n\n\n  _export(_export.S, 'Object', {\n    create: _objectCreate\n  }); // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n\n\n  _export(_export.S + _export.F * !_descriptors, 'Object', {\n    defineProperty: _objectDp.f\n  }); // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)\n\n\n  _export(_export.S + _export.F * !_descriptors, 'Object', {\n    defineProperties: _objectDps\n  }); // most Object methods by ES6 should accept primitives\n\n\n  var _objectSap = function _objectSap(KEY, exec) {\n    var fn = (_core.Object || {})[KEY] || Object[KEY];\n    var exp = {};\n    exp[KEY] = exec(fn);\n\n    _export(_export.S + _export.F * _fails(function () {\n      fn(1);\n    }), 'Object', exp);\n  }; // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n\n\n  var $getOwnPropertyDescriptor$1 = _objectGopd.f;\n\n  _objectSap('getOwnPropertyDescriptor', function () {\n    return function getOwnPropertyDescriptor(it, key) {\n      return $getOwnPropertyDescriptor$1(_toIobject(it), key);\n    };\n  }); // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\n\n\n  var IE_PROTO$2 = _sharedKey('IE_PROTO');\n\n  var ObjectProto$1 = Object.prototype;\n\n  var _objectGpo = Object.getPrototypeOf || function (O) {\n    O = _toObject(O);\n    if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];\n\n    if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n      return O.constructor.prototype;\n    }\n\n    return O instanceof Object ? ObjectProto$1 : null;\n  }; // 19.1.2.9 Object.getPrototypeOf(O)\n\n\n  _objectSap('getPrototypeOf', function () {\n    return function getPrototypeOf(it) {\n      return _objectGpo(_toObject(it));\n    };\n  }); // 19.1.2.14 Object.keys(O)\n\n\n  _objectSap('keys', function () {\n    return function keys(it) {\n      return _objectKeys(_toObject(it));\n    };\n  }); // 19.1.2.7 Object.getOwnPropertyNames(O)\n\n\n  _objectSap('getOwnPropertyNames', function () {\n    return _objectGopnExt.f;\n  }); // 19.1.2.5 Object.freeze(O)\n\n\n  var meta = _meta.onFreeze;\n\n  _objectSap('freeze', function ($freeze) {\n    return function freeze(it) {\n      return $freeze && _isObject(it) ? $freeze(meta(it)) : it;\n    };\n  }); // 19.1.2.17 Object.seal(O)\n\n\n  var meta$1 = _meta.onFreeze;\n\n  _objectSap('seal', function ($seal) {\n    return function seal(it) {\n      return $seal && _isObject(it) ? $seal(meta$1(it)) : it;\n    };\n  }); // 19.1.2.15 Object.preventExtensions(O)\n\n\n  var meta$2 = _meta.onFreeze;\n\n  _objectSap('preventExtensions', function ($preventExtensions) {\n    return function preventExtensions(it) {\n      return $preventExtensions && _isObject(it) ? $preventExtensions(meta$2(it)) : it;\n    };\n  }); // 19.1.2.12 Object.isFrozen(O)\n\n\n  _objectSap('isFrozen', function ($isFrozen) {\n    return function isFrozen(it) {\n      return _isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;\n    };\n  }); // 19.1.2.13 Object.isSealed(O)\n\n\n  _objectSap('isSealed', function ($isSealed) {\n    return function isSealed(it) {\n      return _isObject(it) ? $isSealed ? $isSealed(it) : false : true;\n    };\n  }); // 19.1.2.11 Object.isExtensible(O)\n\n\n  _objectSap('isExtensible', function ($isExtensible) {\n    return function isExtensible(it) {\n      return _isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;\n    };\n  }); // 19.1.2.1 Object.assign(target, source, ...)\n\n\n  var $assign = Object.assign; // should work with symbols and should have deterministic property order (V8 bug)\n\n  var _objectAssign = !$assign || _fails(function () {\n    var A = {};\n    var B = {}; // eslint-disable-next-line no-undef\n\n    var S = Symbol();\n    var K = 'abcdefghijklmnopqrst';\n    A[S] = 7;\n    K.split('').forEach(function (k) {\n      B[k] = k;\n    });\n    return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n  }) ? function assign(target, source) {\n    // eslint-disable-line no-unused-vars\n    var T = _toObject(target);\n\n    var aLen = arguments.length;\n    var index = 1;\n    var getSymbols = _objectGops.f;\n    var isEnum = _objectPie.f;\n\n    while (aLen > index) {\n      var S = _iobject(arguments[index++]);\n\n      var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);\n      var length = keys.length;\n      var j = 0;\n      var key;\n\n      while (length > j) {\n        key = keys[j++];\n        if (!_descriptors || isEnum.call(S, key)) T[key] = S[key];\n      }\n    }\n\n    return T;\n  } : $assign; // 19.1.3.1 Object.assign(target, source)\n\n\n  _export(_export.S + _export.F, 'Object', {\n    assign: _objectAssign\n  }); // 7.2.9 SameValue(x, y)\n\n\n  var _sameValue = Object.is || function is(x, y) {\n    // eslint-disable-next-line no-self-compare\n    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;\n  }; // 19.1.3.10 Object.is(value1, value2)\n\n\n  _export(_export.S, 'Object', {\n    is: _sameValue\n  }); // Works with __proto__ only. Old v8 can't work with null proto objects.\n\n  /* eslint-disable no-proto */\n\n\n  var check = function check(O, proto) {\n    _anObject(O);\n\n    if (!_isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n  };\n\n  var _setProto = {\n    set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = _ctx(Function.call, _objectGopd.f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) {\n        buggy = true;\n      }\n\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n    check: check\n  }; // 19.1.3.19 Object.setPrototypeOf(O, proto)\n\n  _export(_export.S, 'Object', {\n    setPrototypeOf: _setProto.set\n  }); // getting tag from 19.1.3.6 Object.prototype.toString()\n\n\n  var TAG$1 = _wks('toStringTag'); // ES3 wrong here\n\n\n  var ARG = _cof(function () {\n    return arguments;\n  }()) == 'Arguments'; // fallback for IE11 Script Access Denied error\n\n  var tryGet = function tryGet(it, key) {\n    try {\n      return it[key];\n    } catch (e) {\n      /* empty */\n    }\n  };\n\n  var _classof = function _classof(it) {\n    var O, T, B;\n    return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T // builtinTag case\n    : ARG ? _cof(O) // ES3 arguments fallback\n    : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n  }; // 19.1.3.6 Object.prototype.toString()\n\n\n  var test = {};\n  test[_wks('toStringTag')] = 'z';\n\n  if (test + '' != '[object z]') {\n    _redefine(Object.prototype, 'toString', function toString() {\n      return '[object ' + _classof(this) + ']';\n    }, true);\n  } // fast apply, http://jsperf.lnkit.com/fast-apply/5\n\n\n  var _invoke = function _invoke(fn, args, that) {\n    var un = that === undefined;\n\n    switch (args.length) {\n      case 0:\n        return un ? fn() : fn.call(that);\n\n      case 1:\n        return un ? fn(args[0]) : fn.call(that, args[0]);\n\n      case 2:\n        return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);\n\n      case 3:\n        return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);\n\n      case 4:\n        return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);\n    }\n\n    return fn.apply(that, args);\n  };\n\n  var arraySlice = [].slice;\n  var factories = {};\n\n  var construct = function construct(F, len, args) {\n    if (!(len in factories)) {\n      for (var n = [], i = 0; i < len; i++) {\n        n[i] = 'a[' + i + ']';\n      } // eslint-disable-next-line no-new-func\n\n\n      factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');\n    }\n\n    return factories[len](F, args);\n  };\n\n  var _bind = Function.bind || function bind(that\n  /* , ...args */\n  ) {\n    var fn = _aFunction(this);\n\n    var partArgs = arraySlice.call(arguments, 1);\n\n    var bound = function bound()\n    /* args... */\n    {\n      var args = partArgs.concat(arraySlice.call(arguments));\n      return this instanceof bound ? construct(fn, args.length, args) : _invoke(fn, args, that);\n    };\n\n    if (_isObject(fn.prototype)) bound.prototype = fn.prototype;\n    return bound;\n  }; // 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)\n\n\n  _export(_export.P, 'Function', {\n    bind: _bind\n  });\n\n  var dP$2 = _objectDp.f;\n  var FProto = Function.prototype;\n  var nameRE = /^\\s*function ([^ (]*)/;\n  var NAME = 'name'; // 19.2.4.2 name\n\n  NAME in FProto || _descriptors && dP$2(FProto, NAME, {\n    configurable: true,\n    get: function get() {\n      try {\n        return ('' + this).match(nameRE)[1];\n      } catch (e) {\n        return '';\n      }\n    }\n  });\n\n  var HAS_INSTANCE = _wks('hasInstance');\n\n  var FunctionProto = Function.prototype; // 19.2.3.6 Function.prototype[@@hasInstance](V)\n\n  if (!(HAS_INSTANCE in FunctionProto)) _objectDp.f(FunctionProto, HAS_INSTANCE, {\n    value: function value(O) {\n      if (typeof this != 'function' || !_isObject(O)) return false;\n      if (!_isObject(this.prototype)) return O instanceof this; // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:\n\n      while (O = _objectGpo(O)) {\n        if (this.prototype === O) return true;\n      }\n\n      return false;\n    }\n  });\n\n  var _stringWs = \"\\t\\n\\x0B\\f\\r \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\" + \"\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF\";\n\n  var space = '[' + _stringWs + ']';\n  var non = \"\\u200B\\x85\";\n  var ltrim = RegExp('^' + space + space + '*');\n  var rtrim = RegExp(space + space + '*$');\n\n  var exporter = function exporter(KEY, exec, ALIAS) {\n    var exp = {};\n\n    var FORCE = _fails(function () {\n      return !!_stringWs[KEY]() || non[KEY]() != non;\n    });\n\n    var fn = exp[KEY] = FORCE ? exec(trim) : _stringWs[KEY];\n    if (ALIAS) exp[ALIAS] = fn;\n\n    _export(_export.P + _export.F * FORCE, 'String', exp);\n  }; // 1 -> String#trimLeft\n  // 2 -> String#trimRight\n  // 3 -> String#trim\n\n\n  var trim = exporter.trim = function (string, TYPE) {\n    string = String(_defined(string));\n    if (TYPE & 1) string = string.replace(ltrim, '');\n    if (TYPE & 2) string = string.replace(rtrim, '');\n    return string;\n  };\n\n  var _stringTrim = exporter;\n  var $parseInt = _global.parseInt;\n  var $trim = _stringTrim.trim;\n  var hex = /^[-+]?0[xX]/;\n\n  var _parseInt = $parseInt(_stringWs + '08') !== 8 || $parseInt(_stringWs + '0x16') !== 22 ? function parseInt(str, radix) {\n    var string = $trim(String(str), 3);\n    return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10));\n  } : $parseInt; // 18.2.5 parseInt(string, radix)\n\n\n  _export(_export.G + _export.F * (parseInt != _parseInt), {\n    parseInt: _parseInt\n  });\n\n  var $parseFloat = _global.parseFloat;\n  var $trim$1 = _stringTrim.trim;\n\n  var _parseFloat = 1 / $parseFloat(_stringWs + '-0') !== -Infinity ? function parseFloat(str) {\n    var string = $trim$1(String(str), 3);\n    var result = $parseFloat(string);\n    return result === 0 && string.charAt(0) == '-' ? -0 : result;\n  } : $parseFloat; // 18.2.4 parseFloat(string)\n\n\n  _export(_export.G + _export.F * (parseFloat != _parseFloat), {\n    parseFloat: _parseFloat\n  });\n\n  var setPrototypeOf = _setProto.set;\n\n  var _inheritIfRequired = function _inheritIfRequired(that, target, C) {\n    var S = target.constructor;\n    var P;\n\n    if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && _isObject(P) && setPrototypeOf) {\n      setPrototypeOf(that, P);\n    }\n\n    return that;\n  };\n\n  var gOPN$2 = _objectGopn.f;\n  var gOPD$2 = _objectGopd.f;\n  var dP$3 = _objectDp.f;\n  var $trim$2 = _stringTrim.trim;\n  var NUMBER = 'Number';\n  var $Number = _global[NUMBER];\n  var Base = $Number;\n  var proto = $Number.prototype; // Opera ~12 has broken Object#toString\n\n  var BROKEN_COF = _cof(_objectCreate(proto)) == NUMBER;\n  var TRIM = ('trim' in String.prototype); // 7.1.3 ToNumber(argument)\n\n  var toNumber = function toNumber(argument) {\n    var it = _toPrimitive(argument, false);\n\n    if (typeof it == 'string' && it.length > 2) {\n      it = TRIM ? it.trim() : $trim$2(it, 3);\n      var first = it.charCodeAt(0);\n      var third, radix, maxCode;\n\n      if (first === 43 || first === 45) {\n        third = it.charCodeAt(2);\n        if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n      } else if (first === 48) {\n        switch (it.charCodeAt(1)) {\n          case 66:\n          case 98:\n            radix = 2;\n            maxCode = 49;\n            break;\n          // fast equal /^0b[01]+$/i\n\n          case 79:\n          case 111:\n            radix = 8;\n            maxCode = 55;\n            break;\n          // fast equal /^0o[0-7]+$/i\n\n          default:\n            return +it;\n        }\n\n        for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n          code = digits.charCodeAt(i); // parseInt parses a string to a first unavailable symbol\n          // but ToNumber should return NaN if a string contains unavailable symbols\n\n          if (code < 48 || code > maxCode) return NaN;\n        }\n\n        return parseInt(digits, radix);\n      }\n    }\n\n    return +it;\n  };\n\n  if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n    $Number = function Number(value) {\n      var it = arguments.length < 1 ? 0 : value;\n      var that = this;\n      return that instanceof $Number // check on 1..constructor(foo) case\n      && (BROKEN_COF ? _fails(function () {\n        proto.valueOf.call(that);\n      }) : _cof(that) != NUMBER) ? _inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n    };\n\n    for (var keys = _descriptors ? gOPN$2(Base) : ( // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES6 (in case, if modules with ES6 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j$1 = 0, key; keys.length > j$1; j$1++) {\n      if (_has(Base, key = keys[j$1]) && !_has($Number, key)) {\n        dP$3($Number, key, gOPD$2(Base, key));\n      }\n    }\n\n    $Number.prototype = proto;\n    proto.constructor = $Number;\n\n    _redefine(_global, NUMBER, $Number);\n  }\n\n  var _aNumberValue = function _aNumberValue(it, msg) {\n    if (typeof it != 'number' && _cof(it) != 'Number') throw TypeError(msg);\n    return +it;\n  };\n\n  var _stringRepeat = function repeat(count) {\n    var str = String(_defined(this));\n    var res = '';\n\n    var n = _toInteger(count);\n\n    if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n\n    for (; n > 0; (n >>>= 1) && (str += str)) {\n      if (n & 1) res += str;\n    }\n\n    return res;\n  };\n\n  var $toFixed = 1.0.toFixed;\n  var floor$1 = Math.floor;\n  var data = [0, 0, 0, 0, 0, 0];\n  var ERROR = 'Number.toFixed: incorrect invocation!';\n  var ZERO = '0';\n\n  var multiply = function multiply(n, c) {\n    var i = -1;\n    var c2 = c;\n\n    while (++i < 6) {\n      c2 += n * data[i];\n      data[i] = c2 % 1e7;\n      c2 = floor$1(c2 / 1e7);\n    }\n  };\n\n  var divide = function divide(n) {\n    var i = 6;\n    var c = 0;\n\n    while (--i >= 0) {\n      c += data[i];\n      data[i] = floor$1(c / n);\n      c = c % n * 1e7;\n    }\n  };\n\n  var numToString = function numToString() {\n    var i = 6;\n    var s = '';\n\n    while (--i >= 0) {\n      if (s !== '' || i === 0 || data[i] !== 0) {\n        var t = String(data[i]);\n        s = s === '' ? t : s + _stringRepeat.call(ZERO, 7 - t.length) + t;\n      }\n    }\n\n    return s;\n  };\n\n  var pow = function pow(x, n, acc) {\n    return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);\n  };\n\n  var log = function log(x) {\n    var n = 0;\n    var x2 = x;\n\n    while (x2 >= 4096) {\n      n += 12;\n      x2 /= 4096;\n    }\n\n    while (x2 >= 2) {\n      n += 1;\n      x2 /= 2;\n    }\n\n    return n;\n  };\n\n  _export(_export.P + _export.F * (!!$toFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128.0.toFixed(0) !== '1000000000000000128') || !_fails(function () {\n    // V8 ~ Android 4.3-\n    $toFixed.call({});\n  })), 'Number', {\n    toFixed: function toFixed(fractionDigits) {\n      var x = _aNumberValue(this, ERROR);\n\n      var f = _toInteger(fractionDigits);\n\n      var s = '';\n      var m = ZERO;\n      var e, z, j, k;\n      if (f < 0 || f > 20) throw RangeError(ERROR); // eslint-disable-next-line no-self-compare\n\n      if (x != x) return 'NaN';\n      if (x <= -1e21 || x >= 1e21) return String(x);\n\n      if (x < 0) {\n        s = '-';\n        x = -x;\n      }\n\n      if (x > 1e-21) {\n        e = log(x * pow(2, 69, 1)) - 69;\n        z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);\n        z *= 0x10000000000000;\n        e = 52 - e;\n\n        if (e > 0) {\n          multiply(0, z);\n          j = f;\n\n          while (j >= 7) {\n            multiply(1e7, 0);\n            j -= 7;\n          }\n\n          multiply(pow(10, j, 1), 0);\n          j = e - 1;\n\n          while (j >= 23) {\n            divide(1 << 23);\n            j -= 23;\n          }\n\n          divide(1 << j);\n          multiply(1, 1);\n          divide(2);\n          m = numToString();\n        } else {\n          multiply(0, z);\n          multiply(1 << -e, 0);\n          m = numToString() + _stringRepeat.call(ZERO, f);\n        }\n      }\n\n      if (f > 0) {\n        k = m.length;\n        m = s + (k <= f ? '0.' + _stringRepeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));\n      } else {\n        m = s + m;\n      }\n\n      return m;\n    }\n  });\n\n  var $toPrecision = 1.0.toPrecision;\n\n  _export(_export.P + _export.F * (_fails(function () {\n    // IE7-\n    return $toPrecision.call(1, undefined) !== '1';\n  }) || !_fails(function () {\n    // V8 ~ Android 4.3-\n    $toPrecision.call({});\n  })), 'Number', {\n    toPrecision: function toPrecision(precision) {\n      var that = _aNumberValue(this, 'Number#toPrecision: incorrect invocation!');\n\n      return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);\n    }\n  }); // 20.1.2.1 Number.EPSILON\n\n\n  _export(_export.S, 'Number', {\n    EPSILON: Math.pow(2, -52)\n  }); // 20.1.2.2 Number.isFinite(number)\n\n\n  var _isFinite = _global.isFinite;\n\n  _export(_export.S, 'Number', {\n    isFinite: function isFinite(it) {\n      return typeof it == 'number' && _isFinite(it);\n    }\n  }); // 20.1.2.3 Number.isInteger(number)\n\n\n  var floor$2 = Math.floor;\n\n  var _isInteger = function isInteger(it) {\n    return !_isObject(it) && isFinite(it) && floor$2(it) === it;\n  }; // 20.1.2.3 Number.isInteger(number)\n\n\n  _export(_export.S, 'Number', {\n    isInteger: _isInteger\n  }); // 20.1.2.4 Number.isNaN(number)\n\n\n  _export(_export.S, 'Number', {\n    isNaN: function isNaN(number) {\n      // eslint-disable-next-line no-self-compare\n      return number != number;\n    }\n  }); // 20.1.2.5 Number.isSafeInteger(number)\n\n\n  var abs = Math.abs;\n\n  _export(_export.S, 'Number', {\n    isSafeInteger: function isSafeInteger(number) {\n      return _isInteger(number) && abs(number) <= 0x1fffffffffffff;\n    }\n  }); // 20.1.2.6 Number.MAX_SAFE_INTEGER\n\n\n  _export(_export.S, 'Number', {\n    MAX_SAFE_INTEGER: 0x1fffffffffffff\n  }); // 20.1.2.10 Number.MIN_SAFE_INTEGER\n\n\n  _export(_export.S, 'Number', {\n    MIN_SAFE_INTEGER: -0x1fffffffffffff\n  }); // 20.1.2.12 Number.parseFloat(string)\n\n\n  _export(_export.S + _export.F * (Number.parseFloat != _parseFloat), 'Number', {\n    parseFloat: _parseFloat\n  }); // 20.1.2.13 Number.parseInt(string, radix)\n\n\n  _export(_export.S + _export.F * (Number.parseInt != _parseInt), 'Number', {\n    parseInt: _parseInt\n  }); // 20.2.2.20 Math.log1p(x)\n\n\n  var _mathLog1p = Math.log1p || function log1p(x) {\n    return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);\n  }; // 20.2.2.3 Math.acosh(x)\n\n\n  var sqrt = Math.sqrt;\n  var $acosh = Math.acosh;\n\n  _export(_export.S + _export.F * !($acosh // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509\n  && Math.floor($acosh(Number.MAX_VALUE)) == 710 // Tor Browser bug: Math.acosh(Infinity) -> NaN\n  && $acosh(Infinity) == Infinity), 'Math', {\n    acosh: function acosh(x) {\n      return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? Math.log(x) + Math.LN2 : _mathLog1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));\n    }\n  }); // 20.2.2.5 Math.asinh(x)\n\n\n  var $asinh = Math.asinh;\n\n  function asinh(x) {\n    return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));\n  } // Tor Browser bug: Math.asinh(0) -> -0\n\n\n  _export(_export.S + _export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {\n    asinh: asinh\n  }); // 20.2.2.7 Math.atanh(x)\n\n\n  var $atanh = Math.atanh; // Tor Browser bug: Math.atanh(-0) -> 0\n\n  _export(_export.S + _export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {\n    atanh: function atanh(x) {\n      return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;\n    }\n  }); // 20.2.2.28 Math.sign(x)\n\n\n  var _mathSign = Math.sign || function sign(x) {\n    // eslint-disable-next-line no-self-compare\n    return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\n  }; // 20.2.2.9 Math.cbrt(x)\n\n\n  _export(_export.S, 'Math', {\n    cbrt: function cbrt(x) {\n      return _mathSign(x = +x) * Math.pow(Math.abs(x), 1 / 3);\n    }\n  }); // 20.2.2.11 Math.clz32(x)\n\n\n  _export(_export.S, 'Math', {\n    clz32: function clz32(x) {\n      return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;\n    }\n  }); // 20.2.2.12 Math.cosh(x)\n\n\n  var exp = Math.exp;\n\n  _export(_export.S, 'Math', {\n    cosh: function cosh(x) {\n      return (exp(x = +x) + exp(-x)) / 2;\n    }\n  }); // 20.2.2.14 Math.expm1(x)\n\n\n  var $expm1 = Math.expm1;\n\n  var _mathExpm1 = !$expm1 // Old FF bug\n  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168 // Tor Browser bug\n  || $expm1(-2e-17) != -2e-17 ? function expm1(x) {\n    return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;\n  } : $expm1; // 20.2.2.14 Math.expm1(x)\n\n\n  _export(_export.S + _export.F * (_mathExpm1 != Math.expm1), 'Math', {\n    expm1: _mathExpm1\n  }); // 20.2.2.16 Math.fround(x)\n\n\n  var pow$1 = Math.pow;\n  var EPSILON = pow$1(2, -52);\n  var EPSILON32 = pow$1(2, -23);\n  var MAX32 = pow$1(2, 127) * (2 - EPSILON32);\n  var MIN32 = pow$1(2, -126);\n\n  var roundTiesToEven = function roundTiesToEven(n) {\n    return n + 1 / EPSILON - 1 / EPSILON;\n  };\n\n  var _mathFround = Math.fround || function fround(x) {\n    var $abs = Math.abs(x);\n\n    var $sign = _mathSign(x);\n\n    var a, result;\n    if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;\n    a = (1 + EPSILON32 / EPSILON) * $abs;\n    result = a - (a - $abs); // eslint-disable-next-line no-self-compare\n\n    if (result > MAX32 || result != result) return $sign * Infinity;\n    return $sign * result;\n  }; // 20.2.2.16 Math.fround(x)\n\n\n  _export(_export.S, 'Math', {\n    fround: _mathFround\n  }); // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])\n\n\n  var abs$1 = Math.abs;\n\n  _export(_export.S, 'Math', {\n    hypot: function hypot(value1, value2) {\n      // eslint-disable-line no-unused-vars\n      var sum = 0;\n      var i = 0;\n      var aLen = arguments.length;\n      var larg = 0;\n      var arg, div;\n\n      while (i < aLen) {\n        arg = abs$1(arguments[i++]);\n\n        if (larg < arg) {\n          div = larg / arg;\n          sum = sum * div * div + 1;\n          larg = arg;\n        } else if (arg > 0) {\n          div = arg / larg;\n          sum += div * div;\n        } else sum += arg;\n      }\n\n      return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n    }\n  }); // 20.2.2.18 Math.imul(x, y)\n\n\n  var $imul = Math.imul; // some WebKit versions fails with big numbers, some has wrong arity\n\n  _export(_export.S + _export.F * _fails(function () {\n    return $imul(0xffffffff, 5) != -5 || $imul.length != 2;\n  }), 'Math', {\n    imul: function imul(x, y) {\n      var UINT16 = 0xffff;\n      var xn = +x;\n      var yn = +y;\n      var xl = UINT16 & xn;\n      var yl = UINT16 & yn;\n      return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);\n    }\n  }); // 20.2.2.21 Math.log10(x)\n\n\n  _export(_export.S, 'Math', {\n    log10: function log10(x) {\n      return Math.log(x) * Math.LOG10E;\n    }\n  }); // 20.2.2.20 Math.log1p(x)\n\n\n  _export(_export.S, 'Math', {\n    log1p: _mathLog1p\n  }); // 20.2.2.22 Math.log2(x)\n\n\n  _export(_export.S, 'Math', {\n    log2: function log2(x) {\n      return Math.log(x) / Math.LN2;\n    }\n  }); // 20.2.2.28 Math.sign(x)\n\n\n  _export(_export.S, 'Math', {\n    sign: _mathSign\n  }); // 20.2.2.30 Math.sinh(x)\n\n\n  var exp$1 = Math.exp; // V8 near Chromium 38 has a problem with very small numbers\n\n  _export(_export.S + _export.F * _fails(function () {\n    return !Math.sinh(-2e-17) != -2e-17;\n  }), 'Math', {\n    sinh: function sinh(x) {\n      return Math.abs(x = +x) < 1 ? (_mathExpm1(x) - _mathExpm1(-x)) / 2 : (exp$1(x - 1) - exp$1(-x - 1)) * (Math.E / 2);\n    }\n  }); // 20.2.2.33 Math.tanh(x)\n\n\n  var exp$2 = Math.exp;\n\n  _export(_export.S, 'Math', {\n    tanh: function tanh(x) {\n      var a = _mathExpm1(x = +x);\n\n      var b = _mathExpm1(-x);\n\n      return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp$2(x) + exp$2(-x));\n    }\n  }); // 20.2.2.34 Math.trunc(x)\n\n\n  _export(_export.S, 'Math', {\n    trunc: function trunc(it) {\n      return (it > 0 ? Math.floor : Math.ceil)(it);\n    }\n  });\n\n  var fromCharCode = String.fromCharCode;\n  var $fromCodePoint = String.fromCodePoint; // length should be 1, old FF problem\n\n  _export(_export.S + _export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {\n    // 21.1.2.2 String.fromCodePoint(...codePoints)\n    fromCodePoint: function fromCodePoint(x) {\n      // eslint-disable-line no-unused-vars\n      var res = [];\n      var aLen = arguments.length;\n      var i = 0;\n      var code;\n\n      while (aLen > i) {\n        code = +arguments[i++];\n        if (_toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');\n        res.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00));\n      }\n\n      return res.join('');\n    }\n  });\n\n  _export(_export.S, 'String', {\n    // 21.1.2.4 String.raw(callSite, ...substitutions)\n    raw: function raw(callSite) {\n      var tpl = _toIobject(callSite.raw);\n\n      var len = _toLength(tpl.length);\n\n      var aLen = arguments.length;\n      var res = [];\n      var i = 0;\n\n      while (len > i) {\n        res.push(String(tpl[i++]));\n        if (i < aLen) res.push(String(arguments[i]));\n      }\n\n      return res.join('');\n    }\n  }); // 21.1.3.25 String.prototype.trim()\n\n\n  _stringTrim('trim', function ($trim) {\n    return function trim() {\n      return $trim(this, 3);\n    };\n  }); // true  -> String#at\n  // false -> String#codePointAt\n\n\n  var _stringAt = function _stringAt(TO_STRING) {\n    return function (that, pos) {\n      var s = String(_defined(that));\n\n      var i = _toInteger(pos);\n\n      var l = s.length;\n      var a, b;\n      if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n      a = s.charCodeAt(i);\n      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n    };\n  };\n\n  var _iterators = {};\n  var IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n\n  _hide(IteratorPrototype, _wks('iterator'), function () {\n    return this;\n  });\n\n  var _iterCreate = function _iterCreate(Constructor, NAME, next) {\n    Constructor.prototype = _objectCreate(IteratorPrototype, {\n      next: _propertyDesc(1, next)\n    });\n\n    _setToStringTag(Constructor, NAME + ' Iterator');\n  };\n\n  var ITERATOR = _wks('iterator');\n\n  var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\n\n  var FF_ITERATOR = '@@iterator';\n  var KEYS = 'keys';\n  var VALUES = 'values';\n\n  var returnThis = function returnThis() {\n    return this;\n  };\n\n  var _iterDefine = function _iterDefine(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n    _iterCreate(Constructor, NAME, next);\n\n    var getMethod = function getMethod(kind) {\n      if (!BUGGY && kind in proto) return proto[kind];\n\n      switch (kind) {\n        case KEYS:\n          return function keys() {\n            return new Constructor(this, kind);\n          };\n\n        case VALUES:\n          return function values() {\n            return new Constructor(this, kind);\n          };\n      }\n\n      return function entries() {\n        return new Constructor(this, kind);\n      };\n    };\n\n    var TAG = NAME + ' Iterator';\n    var DEF_VALUES = DEFAULT == VALUES;\n    var VALUES_BUG = false;\n    var proto = Base.prototype;\n    var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n    var $default = $native || getMethod(DEFAULT);\n    var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n    var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n    var methods, key, IteratorPrototype; // Fix native\n\n    if ($anyNative) {\n      IteratorPrototype = _objectGpo($anyNative.call(new Base()));\n\n      if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n        // Set @@toStringTag to native iterators\n        _setToStringTag(IteratorPrototype, TAG, true); // fix for some old engines\n\n\n        if (typeof IteratorPrototype[ITERATOR] != 'function') _hide(IteratorPrototype, ITERATOR, returnThis);\n      }\n    } // fix Array#{values, @@iterator}.name in V8 / FF\n\n\n    if (DEF_VALUES && $native && $native.name !== VALUES) {\n      VALUES_BUG = true;\n\n      $default = function values() {\n        return $native.call(this);\n      };\n    } // Define iterator\n\n\n    if (BUGGY || VALUES_BUG || !proto[ITERATOR]) {\n      _hide(proto, ITERATOR, $default);\n    } // Plug for library\n\n\n    _iterators[NAME] = $default;\n    _iterators[TAG] = returnThis;\n\n    if (DEFAULT) {\n      methods = {\n        values: DEF_VALUES ? $default : getMethod(VALUES),\n        keys: IS_SET ? $default : getMethod(KEYS),\n        entries: $entries\n      };\n      if (FORCED) for (key in methods) {\n        if (!(key in proto)) _redefine(proto, key, methods[key]);\n      } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);\n    }\n\n    return methods;\n  };\n\n  var $at = _stringAt(true); // 21.1.3.27 String.prototype[@@iterator]()\n\n\n  _iterDefine(String, 'String', function (iterated) {\n    this._t = String(iterated); // target\n\n    this._i = 0; // next index\n    // 21.1.5.2.1 %StringIteratorPrototype%.next()\n  }, function () {\n    var O = this._t;\n    var index = this._i;\n    var point;\n    if (index >= O.length) return {\n      value: undefined,\n      done: true\n    };\n    point = $at(O, index);\n    this._i += point.length;\n    return {\n      value: point,\n      done: false\n    };\n  });\n\n  var $at$1 = _stringAt(false);\n\n  _export(_export.P, 'String', {\n    // 21.1.3.3 String.prototype.codePointAt(pos)\n    codePointAt: function codePointAt(pos) {\n      return $at$1(this, pos);\n    }\n  }); // 7.2.8 IsRegExp(argument)\n\n\n  var MATCH = _wks('match');\n\n  var _isRegexp = function _isRegexp(it) {\n    var isRegExp;\n    return _isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : _cof(it) == 'RegExp');\n  }; // helper for String#{startsWith, endsWith, includes}\n\n\n  var _stringContext = function _stringContext(that, searchString, NAME) {\n    if (_isRegexp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n    return String(_defined(that));\n  };\n\n  var MATCH$1 = _wks('match');\n\n  var _failsIsRegexp = function _failsIsRegexp(KEY) {\n    var re = /./;\n\n    try {\n      '/./'[KEY](re);\n    } catch (e) {\n      try {\n        re[MATCH$1] = false;\n        return !'/./'[KEY](re);\n      } catch (f) {\n        /* empty */\n      }\n    }\n\n    return true;\n  };\n\n  var ENDS_WITH = 'endsWith';\n  var $endsWith = ''[ENDS_WITH];\n\n  _export(_export.P + _export.F * _failsIsRegexp(ENDS_WITH), 'String', {\n    endsWith: function endsWith(searchString\n    /* , endPosition = @length */\n    ) {\n      var that = _stringContext(this, searchString, ENDS_WITH);\n\n      var endPosition = arguments.length > 1 ? arguments[1] : undefined;\n\n      var len = _toLength(that.length);\n\n      var end = endPosition === undefined ? len : Math.min(_toLength(endPosition), len);\n      var search = String(searchString);\n      return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;\n    }\n  });\n\n  var INCLUDES = 'includes';\n\n  _export(_export.P + _export.F * _failsIsRegexp(INCLUDES), 'String', {\n    includes: function includes(searchString\n    /* , position = 0 */\n    ) {\n      return !!~_stringContext(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);\n    }\n  });\n\n  _export(_export.P, 'String', {\n    // 21.1.3.13 String.prototype.repeat(count)\n    repeat: _stringRepeat\n  });\n\n  var STARTS_WITH = 'startsWith';\n  var $startsWith = ''[STARTS_WITH];\n\n  _export(_export.P + _export.F * _failsIsRegexp(STARTS_WITH), 'String', {\n    startsWith: function startsWith(searchString\n    /* , position = 0 */\n    ) {\n      var that = _stringContext(this, searchString, STARTS_WITH);\n\n      var index = _toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n\n      var search = String(searchString);\n      return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;\n    }\n  });\n\n  var quot = /\"/g; // B.2.3.2.1 CreateHTML(string, tag, attribute, value)\n\n  var createHTML = function createHTML(string, tag, attribute, value) {\n    var S = String(_defined(string));\n    var p1 = '<' + tag;\n    if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n    return p1 + '>' + S + '</' + tag + '>';\n  };\n\n  var _stringHtml = function _stringHtml(NAME, exec) {\n    var O = {};\n    O[NAME] = exec(createHTML);\n\n    _export(_export.P + _export.F * _fails(function () {\n      var test = ''[NAME]('\"');\n      return test !== test.toLowerCase() || test.split('\"').length > 3;\n    }), 'String', O);\n  }; // B.2.3.2 String.prototype.anchor(name)\n\n\n  _stringHtml('anchor', function (createHTML) {\n    return function anchor(name) {\n      return createHTML(this, 'a', 'name', name);\n    };\n  }); // B.2.3.3 String.prototype.big()\n\n\n  _stringHtml('big', function (createHTML) {\n    return function big() {\n      return createHTML(this, 'big', '', '');\n    };\n  }); // B.2.3.4 String.prototype.blink()\n\n\n  _stringHtml('blink', function (createHTML) {\n    return function blink() {\n      return createHTML(this, 'blink', '', '');\n    };\n  }); // B.2.3.5 String.prototype.bold()\n\n\n  _stringHtml('bold', function (createHTML) {\n    return function bold() {\n      return createHTML(this, 'b', '', '');\n    };\n  }); // B.2.3.6 String.prototype.fixed()\n\n\n  _stringHtml('fixed', function (createHTML) {\n    return function fixed() {\n      return createHTML(this, 'tt', '', '');\n    };\n  }); // B.2.3.7 String.prototype.fontcolor(color)\n\n\n  _stringHtml('fontcolor', function (createHTML) {\n    return function fontcolor(color) {\n      return createHTML(this, 'font', 'color', color);\n    };\n  }); // B.2.3.8 String.prototype.fontsize(size)\n\n\n  _stringHtml('fontsize', function (createHTML) {\n    return function fontsize(size) {\n      return createHTML(this, 'font', 'size', size);\n    };\n  }); // B.2.3.9 String.prototype.italics()\n\n\n  _stringHtml('italics', function (createHTML) {\n    return function italics() {\n      return createHTML(this, 'i', '', '');\n    };\n  }); // B.2.3.10 String.prototype.link(url)\n\n\n  _stringHtml('link', function (createHTML) {\n    return function link(url) {\n      return createHTML(this, 'a', 'href', url);\n    };\n  }); // B.2.3.11 String.prototype.small()\n\n\n  _stringHtml('small', function (createHTML) {\n    return function small() {\n      return createHTML(this, 'small', '', '');\n    };\n  }); // B.2.3.12 String.prototype.strike()\n\n\n  _stringHtml('strike', function (createHTML) {\n    return function strike() {\n      return createHTML(this, 'strike', '', '');\n    };\n  }); // B.2.3.13 String.prototype.sub()\n\n\n  _stringHtml('sub', function (createHTML) {\n    return function sub() {\n      return createHTML(this, 'sub', '', '');\n    };\n  }); // B.2.3.14 String.prototype.sup()\n\n\n  _stringHtml('sup', function (createHTML) {\n    return function sup() {\n      return createHTML(this, 'sup', '', '');\n    };\n  }); // 20.3.3.1 / 15.9.4.4 Date.now()\n\n\n  _export(_export.S, 'Date', {\n    now: function now() {\n      return new Date().getTime();\n    }\n  });\n\n  _export(_export.P + _export.F * _fails(function () {\n    return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({\n      toISOString: function toISOString() {\n        return 1;\n      }\n    }) !== 1;\n  }), 'Date', {\n    // eslint-disable-next-line no-unused-vars\n    toJSON: function toJSON(key) {\n      var O = _toObject(this);\n\n      var pv = _toPrimitive(O);\n\n      return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();\n    }\n  }); // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\n\n\n  var getTime = Date.prototype.getTime;\n  var $toISOString = Date.prototype.toISOString;\n\n  var lz = function lz(num) {\n    return num > 9 ? num : '0' + num;\n  }; // PhantomJS / old WebKit has a broken implementations\n\n\n  var _dateToIsoString = _fails(function () {\n    return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';\n  }) || !_fails(function () {\n    $toISOString.call(new Date(NaN));\n  }) ? function toISOString() {\n    if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');\n    var d = this;\n    var y = d.getUTCFullYear();\n    var m = d.getUTCMilliseconds();\n    var s = y < 0 ? '-' : y > 9999 ? '+' : '';\n    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) + '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) + 'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) + ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';\n  } : $toISOString; // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\n  // PhantomJS / old WebKit has a broken implementations\n\n\n  _export(_export.P + _export.F * (Date.prototype.toISOString !== _dateToIsoString), 'Date', {\n    toISOString: _dateToIsoString\n  });\n\n  var DateProto = Date.prototype;\n  var INVALID_DATE = 'Invalid Date';\n  var TO_STRING = 'toString';\n  var $toString = DateProto[TO_STRING];\n  var getTime$1 = DateProto.getTime;\n\n  if (new Date(NaN) + '' != INVALID_DATE) {\n    _redefine(DateProto, TO_STRING, function toString() {\n      var value = getTime$1.call(this); // eslint-disable-next-line no-self-compare\n\n      return value === value ? $toString.call(this) : INVALID_DATE;\n    });\n  }\n\n  var NUMBER$1 = 'number';\n\n  var _dateToPrimitive = function _dateToPrimitive(hint) {\n    if (hint !== 'string' && hint !== NUMBER$1 && hint !== 'default') throw TypeError('Incorrect hint');\n    return _toPrimitive(_anObject(this), hint != NUMBER$1);\n  };\n\n  var TO_PRIMITIVE$1 = _wks('toPrimitive');\n\n  var proto$1 = Date.prototype;\n  if (!(TO_PRIMITIVE$1 in proto$1)) _hide(proto$1, TO_PRIMITIVE$1, _dateToPrimitive); // 22.1.2.2 / 15.4.3.2 Array.isArray(arg)\n\n  _export(_export.S, 'Array', {\n    isArray: _isArray\n  }); // call something on iterator step with safe closing on error\n\n\n  var _iterCall = function _iterCall(iterator, fn, value, entries) {\n    try {\n      return entries ? fn(_anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)\n    } catch (e) {\n      var ret = iterator['return'];\n      if (ret !== undefined) _anObject(ret.call(iterator));\n      throw e;\n    }\n  }; // check on default Array iterator\n\n\n  var ITERATOR$1 = _wks('iterator');\n\n  var ArrayProto = Array.prototype;\n\n  var _isArrayIter = function _isArrayIter(it) {\n    return it !== undefined && (_iterators.Array === it || ArrayProto[ITERATOR$1] === it);\n  };\n\n  var _createProperty = function _createProperty(object, index, value) {\n    if (index in object) _objectDp.f(object, index, _propertyDesc(0, value));else object[index] = value;\n  };\n\n  var ITERATOR$2 = _wks('iterator');\n\n  var core_getIteratorMethod = _core.getIteratorMethod = function (it) {\n    if (it != undefined) return it[ITERATOR$2] || it['@@iterator'] || _iterators[_classof(it)];\n  };\n\n  var ITERATOR$3 = _wks('iterator');\n\n  var SAFE_CLOSING = false;\n\n  try {\n    var riter = [7][ITERATOR$3]();\n\n    riter['return'] = function () {\n      SAFE_CLOSING = true;\n    }; // eslint-disable-next-line no-throw-literal\n\n\n    Array.from(riter, function () {\n      throw 2;\n    });\n  } catch (e) {\n    /* empty */\n  }\n\n  var _iterDetect = function _iterDetect(exec, skipClosing) {\n    if (!skipClosing && !SAFE_CLOSING) return false;\n    var safe = false;\n\n    try {\n      var arr = [7];\n      var iter = arr[ITERATOR$3]();\n\n      iter.next = function () {\n        return {\n          done: safe = true\n        };\n      };\n\n      arr[ITERATOR$3] = function () {\n        return iter;\n      };\n\n      exec(arr);\n    } catch (e) {\n      /* empty */\n    }\n\n    return safe;\n  };\n\n  _export(_export.S + _export.F * !_iterDetect(function (iter) {\n    Array.from(iter);\n  }), 'Array', {\n    // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n    from: function from(arrayLike\n    /* , mapfn = undefined, thisArg = undefined */\n    ) {\n      var O = _toObject(arrayLike);\n\n      var C = typeof this == 'function' ? this : Array;\n      var aLen = arguments.length;\n      var mapfn = aLen > 1 ? arguments[1] : undefined;\n      var mapping = mapfn !== undefined;\n      var index = 0;\n      var iterFn = core_getIteratorMethod(O);\n      var length, result, step, iterator;\n      if (mapping) mapfn = _ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2); // if object isn't iterable or it's array with default iterator - use simple case\n\n      if (iterFn != undefined && !(C == Array && _isArrayIter(iterFn))) {\n        for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n          _createProperty(result, index, mapping ? _iterCall(iterator, mapfn, [step.value, index], true) : step.value);\n        }\n      } else {\n        length = _toLength(O.length);\n\n        for (result = new C(length); length > index; index++) {\n          _createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n        }\n      }\n\n      result.length = index;\n      return result;\n    }\n  }); // WebKit Array.of isn't generic\n\n\n  _export(_export.S + _export.F * _fails(function () {\n    function F() {\n      /* empty */\n    }\n\n    return !(Array.of.call(F) instanceof F);\n  }), 'Array', {\n    // 22.1.2.3 Array.of( ...items)\n    of: function of()\n    /* ...args */\n    {\n      var index = 0;\n      var aLen = arguments.length;\n      var result = new (typeof this == 'function' ? this : Array)(aLen);\n\n      while (aLen > index) {\n        _createProperty(result, index, arguments[index++]);\n      }\n\n      result.length = aLen;\n      return result;\n    }\n  });\n\n  var _strictMethod = function _strictMethod(method, arg) {\n    return !!method && _fails(function () {\n      // eslint-disable-next-line no-useless-call\n      arg ? method.call(null, function () {\n        /* empty */\n      }, 1) : method.call(null);\n    });\n  }; // 22.1.3.13 Array.prototype.join(separator)\n\n\n  var arrayJoin = [].join; // fallback for not array-like strings\n\n  _export(_export.P + _export.F * (_iobject != Object || !_strictMethod(arrayJoin)), 'Array', {\n    join: function join(separator) {\n      return arrayJoin.call(_toIobject(this), separator === undefined ? ',' : separator);\n    }\n  });\n\n  var arraySlice$1 = [].slice; // fallback for not array-like ES3 strings and DOM objects\n\n  _export(_export.P + _export.F * _fails(function () {\n    if (_html) arraySlice$1.call(_html);\n  }), 'Array', {\n    slice: function slice(begin, end) {\n      var len = _toLength(this.length);\n\n      var klass = _cof(this);\n\n      end = end === undefined ? len : end;\n      if (klass == 'Array') return arraySlice$1.call(this, begin, end);\n\n      var start = _toAbsoluteIndex(begin, len);\n\n      var upTo = _toAbsoluteIndex(end, len);\n\n      var size = _toLength(upTo - start);\n\n      var cloned = new Array(size);\n      var i = 0;\n\n      for (; i < size; i++) {\n        cloned[i] = klass == 'String' ? this.charAt(start + i) : this[start + i];\n      }\n\n      return cloned;\n    }\n  });\n\n  var $sort = [].sort;\n  var test$1 = [1, 2, 3];\n\n  _export(_export.P + _export.F * (_fails(function () {\n    // IE8-\n    test$1.sort(undefined);\n  }) || !_fails(function () {\n    // V8 bug\n    test$1.sort(null); // Old WebKit\n  }) || !_strictMethod($sort)), 'Array', {\n    // 22.1.3.25 Array.prototype.sort(comparefn)\n    sort: function sort(comparefn) {\n      return comparefn === undefined ? $sort.call(_toObject(this)) : $sort.call(_toObject(this), _aFunction(comparefn));\n    }\n  });\n\n  var SPECIES = _wks('species');\n\n  var _arraySpeciesConstructor = function _arraySpeciesConstructor(original) {\n    var C;\n\n    if (_isArray(original)) {\n      C = original.constructor; // cross-realm fallback\n\n      if (typeof C == 'function' && (C === Array || _isArray(C.prototype))) C = undefined;\n\n      if (_isObject(C)) {\n        C = C[SPECIES];\n        if (C === null) C = undefined;\n      }\n    }\n\n    return C === undefined ? Array : C;\n  }; // 9.4.2.3 ArraySpeciesCreate(originalArray, length)\n\n\n  var _arraySpeciesCreate = function _arraySpeciesCreate(original, length) {\n    return new (_arraySpeciesConstructor(original))(length);\n  }; // 0 -> Array#forEach\n  // 1 -> Array#map\n  // 2 -> Array#filter\n  // 3 -> Array#some\n  // 4 -> Array#every\n  // 5 -> Array#find\n  // 6 -> Array#findIndex\n\n\n  var _arrayMethods = function _arrayMethods(TYPE, $create) {\n    var IS_MAP = TYPE == 1;\n    var IS_FILTER = TYPE == 2;\n    var IS_SOME = TYPE == 3;\n    var IS_EVERY = TYPE == 4;\n    var IS_FIND_INDEX = TYPE == 6;\n    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n    var create = $create || _arraySpeciesCreate;\n    return function ($this, callbackfn, that) {\n      var O = _toObject($this);\n\n      var self = _iobject(O);\n\n      var f = _ctx(callbackfn, that, 3);\n\n      var length = _toLength(self.length);\n\n      var index = 0;\n      var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n      var val, res;\n\n      for (; length > index; index++) {\n        if (NO_HOLES || index in self) {\n          val = self[index];\n          res = f(val, index, O);\n\n          if (TYPE) {\n            if (IS_MAP) result[index] = res; // map\n            else if (res) switch (TYPE) {\n                case 3:\n                  return true;\n                // some\n\n                case 5:\n                  return val;\n                // find\n\n                case 6:\n                  return index;\n                // findIndex\n\n                case 2:\n                  result.push(val);\n                // filter\n              } else if (IS_EVERY) return false; // every\n          }\n        }\n      }\n\n      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n    };\n  };\n\n  var $forEach = _arrayMethods(0);\n\n  var STRICT = _strictMethod([].forEach, true);\n\n  _export(_export.P + _export.F * !STRICT, 'Array', {\n    // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])\n    forEach: function forEach(callbackfn\n    /* , thisArg */\n    ) {\n      return $forEach(this, callbackfn, arguments[1]);\n    }\n  });\n\n  var $map = _arrayMethods(1);\n\n  _export(_export.P + _export.F * !_strictMethod([].map, true), 'Array', {\n    // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])\n    map: function map(callbackfn\n    /* , thisArg */\n    ) {\n      return $map(this, callbackfn, arguments[1]);\n    }\n  });\n\n  var $filter = _arrayMethods(2);\n\n  _export(_export.P + _export.F * !_strictMethod([].filter, true), 'Array', {\n    // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])\n    filter: function filter(callbackfn\n    /* , thisArg */\n    ) {\n      return $filter(this, callbackfn, arguments[1]);\n    }\n  });\n\n  var $some = _arrayMethods(3);\n\n  _export(_export.P + _export.F * !_strictMethod([].some, true), 'Array', {\n    // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])\n    some: function some(callbackfn\n    /* , thisArg */\n    ) {\n      return $some(this, callbackfn, arguments[1]);\n    }\n  });\n\n  var $every = _arrayMethods(4);\n\n  _export(_export.P + _export.F * !_strictMethod([].every, true), 'Array', {\n    // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])\n    every: function every(callbackfn\n    /* , thisArg */\n    ) {\n      return $every(this, callbackfn, arguments[1]);\n    }\n  });\n\n  var _arrayReduce = function _arrayReduce(that, callbackfn, aLen, memo, isRight) {\n    _aFunction(callbackfn);\n\n    var O = _toObject(that);\n\n    var self = _iobject(O);\n\n    var length = _toLength(O.length);\n\n    var index = isRight ? length - 1 : 0;\n    var i = isRight ? -1 : 1;\n    if (aLen < 2) for (;;) {\n      if (index in self) {\n        memo = self[index];\n        index += i;\n        break;\n      }\n\n      index += i;\n\n      if (isRight ? index < 0 : length <= index) {\n        throw TypeError('Reduce of empty array with no initial value');\n      }\n    }\n\n    for (; isRight ? index >= 0 : length > index; index += i) {\n      if (index in self) {\n        memo = callbackfn(memo, self[index], index, O);\n      }\n    }\n\n    return memo;\n  };\n\n  _export(_export.P + _export.F * !_strictMethod([].reduce, true), 'Array', {\n    // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])\n    reduce: function reduce(callbackfn\n    /* , initialValue */\n    ) {\n      return _arrayReduce(this, callbackfn, arguments.length, arguments[1], false);\n    }\n  });\n\n  _export(_export.P + _export.F * !_strictMethod([].reduceRight, true), 'Array', {\n    // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])\n    reduceRight: function reduceRight(callbackfn\n    /* , initialValue */\n    ) {\n      return _arrayReduce(this, callbackfn, arguments.length, arguments[1], true);\n    }\n  });\n\n  var $indexOf = _arrayIncludes(false);\n\n  var $native = [].indexOf;\n  var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;\n\n  _export(_export.P + _export.F * (NEGATIVE_ZERO || !_strictMethod($native)), 'Array', {\n    // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])\n    indexOf: function indexOf(searchElement\n    /* , fromIndex = 0 */\n    ) {\n      return NEGATIVE_ZERO // convert -0 to +0\n      ? $native.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments[1]);\n    }\n  });\n\n  var $native$1 = [].lastIndexOf;\n  var NEGATIVE_ZERO$1 = !!$native$1 && 1 / [1].lastIndexOf(1, -0) < 0;\n\n  _export(_export.P + _export.F * (NEGATIVE_ZERO$1 || !_strictMethod($native$1)), 'Array', {\n    // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])\n    lastIndexOf: function lastIndexOf(searchElement\n    /* , fromIndex = @[*-1] */\n    ) {\n      // convert -0 to +0\n      if (NEGATIVE_ZERO$1) return $native$1.apply(this, arguments) || 0;\n\n      var O = _toIobject(this);\n\n      var length = _toLength(O.length);\n\n      var index = length - 1;\n      if (arguments.length > 1) index = Math.min(index, _toInteger(arguments[1]));\n      if (index < 0) index = length + index;\n\n      for (; index >= 0; index--) {\n        if (index in O) if (O[index] === searchElement) return index || 0;\n      }\n\n      return -1;\n    }\n  });\n\n  var _arrayCopyWithin = [].copyWithin || function copyWithin(target\n  /* = 0 */\n  , start\n  /* = 0, end = @length */\n  ) {\n    var O = _toObject(this);\n\n    var len = _toLength(O.length);\n\n    var to = _toAbsoluteIndex(target, len);\n\n    var from = _toAbsoluteIndex(start, len);\n\n    var end = arguments.length > 2 ? arguments[2] : undefined;\n    var count = Math.min((end === undefined ? len : _toAbsoluteIndex(end, len)) - from, len - to);\n    var inc = 1;\n\n    if (from < to && to < from + count) {\n      inc = -1;\n      from += count - 1;\n      to += count - 1;\n    }\n\n    while (count-- > 0) {\n      if (from in O) O[to] = O[from];else delete O[to];\n      to += inc;\n      from += inc;\n    }\n\n    return O;\n  }; // 22.1.3.31 Array.prototype[@@unscopables]\n\n\n  var UNSCOPABLES = _wks('unscopables');\n\n  var ArrayProto$1 = Array.prototype;\n  if (ArrayProto$1[UNSCOPABLES] == undefined) _hide(ArrayProto$1, UNSCOPABLES, {});\n\n  var _addToUnscopables = function _addToUnscopables(key) {\n    ArrayProto$1[UNSCOPABLES][key] = true;\n  }; // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n\n\n  _export(_export.P, 'Array', {\n    copyWithin: _arrayCopyWithin\n  });\n\n  _addToUnscopables('copyWithin');\n\n  var _arrayFill = function fill(value\n  /* , start = 0, end = @length */\n  ) {\n    var O = _toObject(this);\n\n    var length = _toLength(O.length);\n\n    var aLen = arguments.length;\n\n    var index = _toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n\n    var end = aLen > 2 ? arguments[2] : undefined;\n    var endPos = end === undefined ? length : _toAbsoluteIndex(end, length);\n\n    while (endPos > index) {\n      O[index++] = value;\n    }\n\n    return O;\n  }; // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n\n\n  _export(_export.P, 'Array', {\n    fill: _arrayFill\n  });\n\n  _addToUnscopables('fill'); // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\n\n\n  var $find = _arrayMethods(5);\n\n  var KEY = 'find';\n  var forced = true; // Shouldn't skip holes\n\n  if (KEY in []) Array(1)[KEY](function () {\n    forced = false;\n  });\n\n  _export(_export.P + _export.F * forced, 'Array', {\n    find: function find(callbackfn\n    /* , that = undefined */\n    ) {\n      return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    }\n  });\n\n  _addToUnscopables(KEY); // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\n\n\n  var $find$1 = _arrayMethods(6);\n\n  var KEY$1 = 'findIndex';\n  var forced$1 = true; // Shouldn't skip holes\n\n  if (KEY$1 in []) Array(1)[KEY$1](function () {\n    forced$1 = false;\n  });\n\n  _export(_export.P + _export.F * forced$1, 'Array', {\n    findIndex: function findIndex(callbackfn\n    /* , that = undefined */\n    ) {\n      return $find$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    }\n  });\n\n  _addToUnscopables(KEY$1);\n\n  var SPECIES$1 = _wks('species');\n\n  var _setSpecies = function _setSpecies(KEY) {\n    var C = _global[KEY];\n    if (_descriptors && C && !C[SPECIES$1]) _objectDp.f(C, SPECIES$1, {\n      configurable: true,\n      get: function get() {\n        return this;\n      }\n    });\n  };\n\n  _setSpecies('Array');\n\n  var _iterStep = function _iterStep(done, value) {\n    return {\n      value: value,\n      done: !!done\n    };\n  }; // 22.1.3.4 Array.prototype.entries()\n  // 22.1.3.13 Array.prototype.keys()\n  // 22.1.3.29 Array.prototype.values()\n  // 22.1.3.30 Array.prototype[@@iterator]()\n\n\n  var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {\n    this._t = _toIobject(iterated); // target\n\n    this._i = 0; // next index\n\n    this._k = kind; // kind\n    // 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n  }, function () {\n    var O = this._t;\n    var kind = this._k;\n    var index = this._i++;\n\n    if (!O || index >= O.length) {\n      this._t = undefined;\n      return _iterStep(1);\n    }\n\n    if (kind == 'keys') return _iterStep(0, index);\n    if (kind == 'values') return _iterStep(0, O[index]);\n    return _iterStep(0, [index, O[index]]);\n  }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\n\n\n  _iterators.Arguments = _iterators.Array;\n\n  _addToUnscopables('keys');\n\n  _addToUnscopables('values');\n\n  _addToUnscopables('entries'); // 21.2.5.3 get RegExp.prototype.flags\n\n\n  var _flags = function _flags() {\n    var that = _anObject(this);\n\n    var result = '';\n    if (that.global) result += 'g';\n    if (that.ignoreCase) result += 'i';\n    if (that.multiline) result += 'm';\n    if (that.unicode) result += 'u';\n    if (that.sticky) result += 'y';\n    return result;\n  };\n\n  var dP$4 = _objectDp.f;\n  var gOPN$3 = _objectGopn.f;\n  var $RegExp = _global.RegExp;\n  var Base$1 = $RegExp;\n  var proto$2 = $RegExp.prototype;\n  var re1 = /a/g;\n  var re2 = /a/g; // \"new\" creates a new object, old webkit buggy here\n\n  var CORRECT_NEW = new $RegExp(re1) !== re1;\n\n  if (_descriptors && (!CORRECT_NEW || _fails(function () {\n    re2[_wks('match')] = false; // RegExp constructor can alter flags and IsRegExp works correct with @@match\n\n    return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';\n  }))) {\n    $RegExp = function RegExp(p, f) {\n      var tiRE = this instanceof $RegExp;\n\n      var piRE = _isRegexp(p);\n\n      var fiU = f === undefined;\n      return !tiRE && piRE && p.constructor === $RegExp && fiU ? p : _inheritIfRequired(CORRECT_NEW ? new Base$1(piRE && !fiU ? p.source : p, f) : Base$1((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? _flags.call(p) : f), tiRE ? this : proto$2, $RegExp);\n    };\n\n    var proxy = function proxy(key) {\n      key in $RegExp || dP$4($RegExp, key, {\n        configurable: true,\n        get: function get() {\n          return Base$1[key];\n        },\n        set: function set(it) {\n          Base$1[key] = it;\n        }\n      });\n    };\n\n    for (var keys$1 = gOPN$3(Base$1), i = 0; keys$1.length > i;) {\n      proxy(keys$1[i++]);\n    }\n\n    proto$2.constructor = $RegExp;\n    $RegExp.prototype = proto$2;\n\n    _redefine(_global, 'RegExp', $RegExp);\n  }\n\n  _setSpecies('RegExp');\n\n  var nativeExec = RegExp.prototype.exec; // This always refers to the native implementation, because the\n  // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n  // which loads this file before patching the method.\n\n  var nativeReplace = String.prototype.replace;\n  var patchedExec = nativeExec;\n  var LAST_INDEX = 'lastIndex';\n\n  var UPDATES_LAST_INDEX_WRONG = function () {\n    var re1 = /a/,\n        re2 = /b*/g;\n    nativeExec.call(re1, 'a');\n    nativeExec.call(re2, 'a');\n    return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;\n  }(); // nonparticipating capturing group, copied from es5-shim's String#split patch.\n\n\n  var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n  var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;\n\n  if (PATCH) {\n    patchedExec = function exec(str) {\n      var re = this;\n      var lastIndex, reCopy, match, i;\n\n      if (NPCG_INCLUDED) {\n        reCopy = new RegExp('^' + re.source + '$(?!\\\\s)', _flags.call(re));\n      }\n\n      if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];\n      match = nativeExec.call(re, str);\n\n      if (UPDATES_LAST_INDEX_WRONG && match) {\n        re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;\n      }\n\n      if (NPCG_INCLUDED && match && match.length > 1) {\n        // Fix browsers whose `exec` methods don't consistently return `undefined`\n        // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n        // eslint-disable-next-line no-loop-func\n        nativeReplace.call(match[0], reCopy, function () {\n          for (i = 1; i < arguments.length - 2; i++) {\n            if (arguments[i] === undefined) match[i] = undefined;\n          }\n        });\n      }\n\n      return match;\n    };\n  }\n\n  var _regexpExec = patchedExec;\n\n  _export({\n    target: 'RegExp',\n    proto: true,\n    forced: _regexpExec !== /./.exec\n  }, {\n    exec: _regexpExec\n  }); // 21.2.5.3 get RegExp.prototype.flags()\n\n\n  if (_descriptors && /./g.flags != 'g') _objectDp.f(RegExp.prototype, 'flags', {\n    configurable: true,\n    get: _flags\n  });\n  var TO_STRING$1 = 'toString';\n  var $toString$1 = /./[TO_STRING$1];\n\n  var define = function define(fn) {\n    _redefine(RegExp.prototype, TO_STRING$1, fn, true);\n  }; // 21.2.5.14 RegExp.prototype.toString()\n\n\n  if (_fails(function () {\n    return $toString$1.call({\n      source: 'a',\n      flags: 'b'\n    }) != '/a/b';\n  })) {\n    define(function toString() {\n      var R = _anObject(this);\n\n      return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !_descriptors && R instanceof RegExp ? _flags.call(R) : undefined);\n    }); // FF44- RegExp#toString has a wrong name\n  } else if ($toString$1.name != TO_STRING$1) {\n    define(function toString() {\n      return $toString$1.call(this);\n    });\n  }\n\n  var at = _stringAt(true); // `AdvanceStringIndex` abstract operation\n  // https://tc39.github.io/ecma262/#sec-advancestringindex\n\n\n  var _advanceStringIndex = function _advanceStringIndex(S, index, unicode) {\n    return index + (unicode ? at(S, index).length : 1);\n  };\n\n  var builtinExec = RegExp.prototype.exec; // `RegExpExec` abstract operation\n  // https://tc39.github.io/ecma262/#sec-regexpexec\n\n  var _regexpExecAbstract = function _regexpExecAbstract(R, S) {\n    var exec = R.exec;\n\n    if (typeof exec === 'function') {\n      var result = exec.call(R, S);\n\n      if (_typeof2(result) !== 'object') {\n        throw new TypeError('RegExp exec method returned something other than an Object or null');\n      }\n\n      return result;\n    }\n\n    if (_classof(R) !== 'RegExp') {\n      throw new TypeError('RegExp#exec called on incompatible receiver');\n    }\n\n    return builtinExec.call(R, S);\n  };\n\n  var SPECIES$2 = _wks('species');\n\n  var REPLACE_SUPPORTS_NAMED_GROUPS = !_fails(function () {\n    // #replace needs built-in support for named groups.\n    // #match works fine because it just return the exec results, even if it has\n    // a \"grops\" property.\n    var re = /./;\n\n    re.exec = function () {\n      var result = [];\n      result.groups = {\n        a: '7'\n      };\n      return result;\n    };\n\n    return ''.replace(re, '$<a>') !== '7';\n  });\n\n  var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = function () {\n    // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n    var re = /(?:)/;\n    var originalExec = re.exec;\n\n    re.exec = function () {\n      return originalExec.apply(this, arguments);\n    };\n\n    var result = 'ab'.split(re);\n    return result.length === 2 && result[0] === 'a' && result[1] === 'b';\n  }();\n\n  var _fixReWks = function _fixReWks(KEY, length, exec) {\n    var SYMBOL = _wks(KEY);\n\n    var DELEGATES_TO_SYMBOL = !_fails(function () {\n      // String methods call symbol-named RegEp methods\n      var O = {};\n\n      O[SYMBOL] = function () {\n        return 7;\n      };\n\n      return ''[KEY](O) != 7;\n    });\n    var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !_fails(function () {\n      // Symbol-named RegExp methods call .exec\n      var execCalled = false;\n      var re = /a/;\n\n      re.exec = function () {\n        execCalled = true;\n        return null;\n      };\n\n      if (KEY === 'split') {\n        // RegExp[@@split] doesn't call the regex's exec method, but first creates\n        // a new one. We need to return the patched regex when creating the new one.\n        re.constructor = {};\n\n        re.constructor[SPECIES$2] = function () {\n          return re;\n        };\n      }\n\n      re[SYMBOL]('');\n      return !execCalled;\n    }) : undefined;\n\n    if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {\n      var nativeRegExpMethod = /./[SYMBOL];\n      var fns = exec(_defined, SYMBOL, ''[KEY], function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {\n        if (regexp.exec === _regexpExec) {\n          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n            // The native String method already delegates to @@method (this\n            // polyfilled function), leasing to infinite recursion.\n            // We avoid it by directly calling the native @@method method.\n            return {\n              done: true,\n              value: nativeRegExpMethod.call(regexp, str, arg2)\n            };\n          }\n\n          return {\n            done: true,\n            value: nativeMethod.call(str, regexp, arg2)\n          };\n        }\n\n        return {\n          done: false\n        };\n      });\n      var strfn = fns[0];\n      var rxfn = fns[1];\n\n      _redefine(String.prototype, KEY, strfn);\n\n      _hide(RegExp.prototype, SYMBOL, length == 2 // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) {\n        return rxfn.call(string, this, arg);\n      } // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) {\n        return rxfn.call(string, this);\n      });\n    }\n  }; // @@match logic\n\n\n  _fixReWks('match', 1, function (defined, MATCH, $match, maybeCallNative) {\n    return [// `String.prototype.match` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.match\n    function match(regexp) {\n      var O = defined(this);\n      var fn = regexp == undefined ? undefined : regexp[MATCH];\n      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n    }, // `RegExp.prototype[@@match]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match\n    function (regexp) {\n      var res = maybeCallNative($match, regexp, this);\n      if (res.done) return res.value;\n\n      var rx = _anObject(regexp);\n\n      var S = String(this);\n      if (!rx.global) return _regexpExecAbstract(rx, S);\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n      var A = [];\n      var n = 0;\n      var result;\n\n      while ((result = _regexpExecAbstract(rx, S)) !== null) {\n        var matchStr = String(result[0]);\n        A[n] = matchStr;\n        if (matchStr === '') rx.lastIndex = _advanceStringIndex(S, _toLength(rx.lastIndex), fullUnicode);\n        n++;\n      }\n\n      return n === 0 ? null : A;\n    }];\n  });\n\n  var max$1 = Math.max;\n  var min$2 = Math.min;\n  var floor$3 = Math.floor;\n  var SUBSTITUTION_SYMBOLS = /\\$([$&`']|\\d\\d?|<[^>]*>)/g;\n  var SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&`']|\\d\\d?)/g;\n\n  var maybeToString = function maybeToString(it) {\n    return it === undefined ? it : String(it);\n  }; // @@replace logic\n\n\n  _fixReWks('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {\n    return [// `String.prototype.replace` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = defined(this);\n      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n      return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);\n    }, // `RegExp.prototype[@@replace]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n    function (regexp, replaceValue) {\n      var res = maybeCallNative($replace, regexp, this, replaceValue);\n      if (res.done) return res.value;\n\n      var rx = _anObject(regexp);\n\n      var S = String(this);\n      var functionalReplace = typeof replaceValue === 'function';\n      if (!functionalReplace) replaceValue = String(replaceValue);\n      var global = rx.global;\n\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n\n      var results = [];\n\n      while (true) {\n        var result = _regexpExecAbstract(rx, S);\n\n        if (result === null) break;\n        results.push(result);\n        if (!global) break;\n        var matchStr = String(result[0]);\n        if (matchStr === '') rx.lastIndex = _advanceStringIndex(S, _toLength(rx.lastIndex), fullUnicode);\n      }\n\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n        var matched = String(result[0]);\n        var position = max$1(min$2(_toInteger(result.index), S.length), 0);\n        var captures = []; // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n\n        for (var j = 1; j < result.length; j++) {\n          captures.push(maybeToString(result[j]));\n        }\n\n        var namedCaptures = result.groups;\n\n        if (functionalReplace) {\n          var replacerArgs = [matched].concat(captures, position, S);\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n\n        if (position >= nextSourcePosition) {\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n\n      return accumulatedResult + S.slice(nextSourcePosition);\n    }]; // https://tc39.github.io/ecma262/#sec-getsubstitution\n\n    function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n      var tailPos = position + matched.length;\n      var m = captures.length;\n      var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n\n      if (namedCaptures !== undefined) {\n        namedCaptures = _toObject(namedCaptures);\n        symbols = SUBSTITUTION_SYMBOLS;\n      }\n\n      return $replace.call(replacement, symbols, function (match, ch) {\n        var capture;\n\n        switch (ch.charAt(0)) {\n          case '$':\n            return '$';\n\n          case '&':\n            return matched;\n\n          case '`':\n            return str.slice(0, position);\n\n          case \"'\":\n            return str.slice(tailPos);\n\n          case '<':\n            capture = namedCaptures[ch.slice(1, -1)];\n            break;\n\n          default:\n            // \\d\\d?\n            var n = +ch;\n            if (n === 0) return match;\n\n            if (n > m) {\n              var f = floor$3(n / 10);\n              if (f === 0) return match;\n              if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n              return match;\n            }\n\n            capture = captures[n - 1];\n        }\n\n        return capture === undefined ? '' : capture;\n      });\n    }\n  }); // @@search logic\n\n\n  _fixReWks('search', 1, function (defined, SEARCH, $search, maybeCallNative) {\n    return [// `String.prototype.search` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.search\n    function search(regexp) {\n      var O = defined(this);\n      var fn = regexp == undefined ? undefined : regexp[SEARCH];\n      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));\n    }, // `RegExp.prototype[@@search]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search\n    function (regexp) {\n      var res = maybeCallNative($search, regexp, this);\n      if (res.done) return res.value;\n\n      var rx = _anObject(regexp);\n\n      var S = String(this);\n      var previousLastIndex = rx.lastIndex;\n      if (!_sameValue(previousLastIndex, 0)) rx.lastIndex = 0;\n\n      var result = _regexpExecAbstract(rx, S);\n\n      if (!_sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;\n      return result === null ? -1 : result.index;\n    }];\n  }); // 7.3.20 SpeciesConstructor(O, defaultConstructor)\n\n\n  var SPECIES$3 = _wks('species');\n\n  var _speciesConstructor = function _speciesConstructor(O, D) {\n    var C = _anObject(O).constructor;\n\n    var S;\n    return C === undefined || (S = _anObject(C)[SPECIES$3]) == undefined ? D : _aFunction(S);\n  };\n\n  var $min = Math.min;\n  var $push = [].push;\n  var $SPLIT = 'split';\n  var LENGTH = 'length';\n  var LAST_INDEX$1 = 'lastIndex';\n  var MAX_UINT32 = 0xffffffff; // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\n\n  var SUPPORTS_Y = !_fails(function () {\n    RegExp(MAX_UINT32, 'y');\n  }); // @@split logic\n\n  _fixReWks('split', 2, function (defined, SPLIT, $split, maybeCallNative) {\n    var internalSplit;\n\n    if ('abbc'[$SPLIT](/(b)*/)[1] == 'c' || 'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || 'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || '.'[$SPLIT](/()()/)[LENGTH] > 1 || ''[$SPLIT](/.?/)[LENGTH]) {\n      // based on es5-shim implementation, need to rework it\n      internalSplit = function internalSplit(separator, limit) {\n        var string = String(this);\n        if (separator === undefined && limit === 0) return []; // If `separator` is not a regex, use native split\n\n        if (!_isRegexp(separator)) return $split.call(string, separator, limit);\n        var output = [];\n        var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');\n        var lastLastIndex = 0;\n        var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0; // Make `global` and avoid `lastIndex` issues by working with a copy\n\n        var separatorCopy = new RegExp(separator.source, flags + 'g');\n        var match, lastIndex, lastLength;\n\n        while (match = _regexpExec.call(separatorCopy, string)) {\n          lastIndex = separatorCopy[LAST_INDEX$1];\n\n          if (lastIndex > lastLastIndex) {\n            output.push(string.slice(lastLastIndex, match.index));\n            if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n            lastLength = match[0][LENGTH];\n            lastLastIndex = lastIndex;\n            if (output[LENGTH] >= splitLimit) break;\n          }\n\n          if (separatorCopy[LAST_INDEX$1] === match.index) separatorCopy[LAST_INDEX$1]++; // Avoid an infinite loop\n        }\n\n        if (lastLastIndex === string[LENGTH]) {\n          if (lastLength || !separatorCopy.test('')) output.push('');\n        } else output.push(string.slice(lastLastIndex));\n\n        return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n      }; // Chakra, V8\n\n    } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n      internalSplit = function internalSplit(separator, limit) {\n        return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);\n      };\n    } else {\n      internalSplit = $split;\n    }\n\n    return [// `String.prototype.split` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = defined(this);\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\n      return splitter !== undefined ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);\n    }, // `RegExp.prototype[@@split]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (regexp, limit) {\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);\n      if (res.done) return res.value;\n\n      var rx = _anObject(regexp);\n\n      var S = String(this);\n\n      var C = _speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (SUPPORTS_Y ? 'y' : 'g'); // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return _regexpExecAbstract(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n\n      while (q < S.length) {\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n\n        var z = _regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));\n\n        var e;\n\n        if (z === null || (e = $min(_toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p) {\n          q = _advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          A.push(S.slice(p, q));\n          if (A.length === lim) return A;\n\n          for (var i = 1; i <= z.length - 1; i++) {\n            A.push(z[i]);\n            if (A.length === lim) return A;\n          }\n\n          q = p = e;\n        }\n      }\n\n      A.push(S.slice(p));\n      return A;\n    }];\n  });\n\n  var _anInstance = function _anInstance(it, Constructor, name, forbiddenField) {\n    if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {\n      throw TypeError(name + ': incorrect invocation!');\n    }\n\n    return it;\n  };\n\n  var _forOf = createCommonjsModule(function (module) {\n    var BREAK = {};\n    var RETURN = {};\n\n    var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n      var iterFn = ITERATOR ? function () {\n        return iterable;\n      } : core_getIteratorMethod(iterable);\n\n      var f = _ctx(fn, that, entries ? 2 : 1);\n\n      var index = 0;\n      var length, step, iterator, result;\n      if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!'); // fast case for arrays with default iterator\n\n      if (_isArrayIter(iterFn)) for (length = _toLength(iterable.length); length > index; index++) {\n        result = entries ? f(_anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n        if (result === BREAK || result === RETURN) return result;\n      } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n        result = _iterCall(iterator, f, step.value, entries);\n        if (result === BREAK || result === RETURN) return result;\n      }\n    };\n\n    exports.BREAK = BREAK;\n    exports.RETURN = RETURN;\n  });\n\n  var process = _global.process;\n  var setTask = _global.setImmediate;\n  var clearTask = _global.clearImmediate;\n  var MessageChannel = _global.MessageChannel;\n  var Dispatch = _global.Dispatch;\n  var counter = 0;\n  var queue = {};\n  var ONREADYSTATECHANGE = 'onreadystatechange';\n  var defer, channel, port;\n\n  var run = function run() {\n    var id = +this; // eslint-disable-next-line no-prototype-builtins\n\n    if (queue.hasOwnProperty(id)) {\n      var fn = queue[id];\n      delete queue[id];\n      fn();\n    }\n  };\n\n  var listener = function listener(event) {\n    run.call(event.data);\n  }; // Node.js 0.9+ & IE10+ has setImmediate, otherwise:\n\n\n  if (!setTask || !clearTask) {\n    setTask = function setImmediate(fn) {\n      var args = [];\n      var i = 1;\n\n      while (arguments.length > i) {\n        args.push(arguments[i++]);\n      }\n\n      queue[++counter] = function () {\n        // eslint-disable-next-line no-new-func\n        _invoke(typeof fn == 'function' ? fn : Function(fn), args);\n      };\n\n      defer(counter);\n      return counter;\n    };\n\n    clearTask = function clearImmediate(id) {\n      delete queue[id];\n    }; // Node.js 0.8-\n\n\n    if (_cof(process) == 'process') {\n      defer = function defer(id) {\n        process.nextTick(_ctx(run, id, 1));\n      }; // Sphere (JS game engine) Dispatch API\n\n    } else if (Dispatch && Dispatch.now) {\n      defer = function defer(id) {\n        Dispatch.now(_ctx(run, id, 1));\n      }; // Browsers with MessageChannel, includes WebWorkers\n\n    } else if (MessageChannel) {\n      channel = new MessageChannel();\n      port = channel.port2;\n      channel.port1.onmessage = listener;\n      defer = _ctx(port.postMessage, port, 1); // Browsers with postMessage, skip WebWorkers\n      // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n    } else if (_global.addEventListener && typeof postMessage == 'function' && !_global.importScripts) {\n      defer = function defer(id) {\n        _global.postMessage(id + '', '*');\n      };\n\n      _global.addEventListener('message', listener, false); // IE8-\n\n    } else if (ONREADYSTATECHANGE in _domCreate('script')) {\n      defer = function defer(id) {\n        _html.appendChild(_domCreate('script'))[ONREADYSTATECHANGE] = function () {\n          _html.removeChild(this);\n\n          run.call(id);\n        };\n      }; // Rest old browsers\n\n    } else {\n      defer = function defer(id) {\n        setTimeout(_ctx(run, id, 1), 0);\n      };\n    }\n  }\n\n  var _task = {\n    set: setTask,\n    clear: clearTask\n  };\n  var macrotask = _task.set;\n  var Observer = _global.MutationObserver || _global.WebKitMutationObserver;\n  var process$1 = _global.process;\n  var Promise$1 = _global.Promise;\n  var isNode = _cof(process$1) == 'process';\n\n  var _microtask = function _microtask() {\n    var head, last, notify;\n\n    var flush = function flush() {\n      var parent, fn;\n      if (isNode && (parent = process$1.domain)) parent.exit();\n\n      while (head) {\n        fn = head.fn;\n        head = head.next;\n\n        try {\n          fn();\n        } catch (e) {\n          if (head) notify();else last = undefined;\n          throw e;\n        }\n      }\n\n      last = undefined;\n      if (parent) parent.enter();\n    }; // Node.js\n\n\n    if (isNode) {\n      notify = function notify() {\n        process$1.nextTick(flush);\n      }; // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n\n    } else if (Observer && !(_global.navigator && _global.navigator.standalone)) {\n      var toggle = true;\n      var node = document.createTextNode('');\n      new Observer(flush).observe(node, {\n        characterData: true\n      }); // eslint-disable-line no-new\n\n      notify = function notify() {\n        node.data = toggle = !toggle;\n      }; // environments with maybe non-completely correct, but existent Promise\n\n    } else if (Promise$1 && Promise$1.resolve) {\n      // Promise.resolve without an argument throws an error in LG WebOS 2\n      var promise = Promise$1.resolve(undefined);\n\n      notify = function notify() {\n        promise.then(flush);\n      }; // for other environments - macrotask based on:\n      // - setImmediate\n      // - MessageChannel\n      // - window.postMessag\n      // - onreadystatechange\n      // - setTimeout\n\n    } else {\n      notify = function notify() {\n        // strange IE + webpack dev server bug - use .call(global)\n        macrotask.call(_global, flush);\n      };\n    }\n\n    return function (fn) {\n      var task = {\n        fn: fn,\n        next: undefined\n      };\n      if (last) last.next = task;\n\n      if (!head) {\n        head = task;\n        notify();\n      }\n\n      last = task;\n    };\n  }; // 25.4.1.5 NewPromiseCapability(C)\n\n\n  function PromiseCapability(C) {\n    var resolve, reject;\n    this.promise = new C(function ($$resolve, $$reject) {\n      if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n      resolve = $$resolve;\n      reject = $$reject;\n    });\n    this.resolve = _aFunction(resolve);\n    this.reject = _aFunction(reject);\n  }\n\n  var f$7 = function f$7(C) {\n    return new PromiseCapability(C);\n  };\n\n  var _newPromiseCapability = {\n    f: f$7\n  };\n\n  var _perform = function _perform(exec) {\n    try {\n      return {\n        e: false,\n        v: exec()\n      };\n    } catch (e) {\n      return {\n        e: true,\n        v: e\n      };\n    }\n  };\n\n  var navigator = _global.navigator;\n\n  var _userAgent = navigator && navigator.userAgent || '';\n\n  var _promiseResolve = function _promiseResolve(C, x) {\n    _anObject(C);\n\n    if (_isObject(x) && x.constructor === C) return x;\n\n    var promiseCapability = _newPromiseCapability.f(C);\n\n    var resolve = promiseCapability.resolve;\n    resolve(x);\n    return promiseCapability.promise;\n  };\n\n  var _redefineAll = function _redefineAll(target, src, safe) {\n    for (var key in src) {\n      _redefine(target, key, src[key], safe);\n    }\n\n    return target;\n  };\n\n  var task = _task.set;\n\n  var microtask = _microtask();\n\n  var PROMISE = 'Promise';\n  var TypeError$1 = _global.TypeError;\n  var process$2 = _global.process;\n  var versions = process$2 && process$2.versions;\n  var v8 = versions && versions.v8 || '';\n  var $Promise = _global[PROMISE];\n  var isNode$1 = _classof(process$2) == 'process';\n\n  var empty = function empty() {\n    /* empty */\n  };\n\n  var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\n  var newPromiseCapability = newGenericPromiseCapability = _newPromiseCapability.f;\n  var USE_NATIVE$1 = !!function () {\n    try {\n      // correct subclassing with @@species support\n      var promise = $Promise.resolve(1);\n\n      var FakePromise = (promise.constructor = {})[_wks('species')] = function (exec) {\n        exec(empty, empty);\n      }; // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n\n\n      return (isNode$1 || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n      // we can't detect it synchronously, so just check versions\n      && v8.indexOf('6.6') !== 0 && _userAgent.indexOf('Chrome/66') === -1;\n    } catch (e) {\n      /* empty */\n    }\n  }(); // helpers\n\n  var isThenable = function isThenable(it) {\n    var then;\n    return _isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n  };\n\n  var notify = function notify(promise, isReject) {\n    if (promise._n) return;\n    promise._n = true;\n    var chain = promise._c;\n    microtask(function () {\n      var value = promise._v;\n      var ok = promise._s == 1;\n      var i = 0;\n\n      var run = function run(reaction) {\n        var handler = ok ? reaction.ok : reaction.fail;\n        var resolve = reaction.resolve;\n        var reject = reaction.reject;\n        var domain = reaction.domain;\n        var result, then, exited;\n\n        try {\n          if (handler) {\n            if (!ok) {\n              if (promise._h == 2) onHandleUnhandled(promise);\n              promise._h = 1;\n            }\n\n            if (handler === true) result = value;else {\n              if (domain) domain.enter();\n              result = handler(value); // may throw\n\n              if (domain) {\n                domain.exit();\n                exited = true;\n              }\n            }\n\n            if (result === reaction.promise) {\n              reject(TypeError$1('Promise-chain cycle'));\n            } else if (then = isThenable(result)) {\n              then.call(result, resolve, reject);\n            } else resolve(result);\n          } else reject(value);\n        } catch (e) {\n          if (domain && !exited) domain.exit();\n          reject(e);\n        }\n      };\n\n      while (chain.length > i) {\n        run(chain[i++]);\n      } // variable length - can't use forEach\n\n\n      promise._c = [];\n      promise._n = false;\n      if (isReject && !promise._h) onUnhandled(promise);\n    });\n  };\n\n  var onUnhandled = function onUnhandled(promise) {\n    task.call(_global, function () {\n      var value = promise._v;\n      var unhandled = isUnhandled(promise);\n      var result, handler, console;\n\n      if (unhandled) {\n        result = _perform(function () {\n          if (isNode$1) {\n            process$2.emit('unhandledRejection', value, promise);\n          } else if (handler = _global.onunhandledrejection) {\n            handler({\n              promise: promise,\n              reason: value\n            });\n          } else if ((console = _global.console) && console.error) {\n            console.error('Unhandled promise rejection', value);\n          }\n        }); // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n\n        promise._h = isNode$1 || isUnhandled(promise) ? 2 : 1;\n      }\n\n      promise._a = undefined;\n      if (unhandled && result.e) throw result.v;\n    });\n  };\n\n  var isUnhandled = function isUnhandled(promise) {\n    return promise._h !== 1 && (promise._a || promise._c).length === 0;\n  };\n\n  var onHandleUnhandled = function onHandleUnhandled(promise) {\n    task.call(_global, function () {\n      var handler;\n\n      if (isNode$1) {\n        process$2.emit('rejectionHandled', promise);\n      } else if (handler = _global.onrejectionhandled) {\n        handler({\n          promise: promise,\n          reason: promise._v\n        });\n      }\n    });\n  };\n\n  var $reject = function $reject(value) {\n    var promise = this;\n    if (promise._d) return;\n    promise._d = true;\n    promise = promise._w || promise; // unwrap\n\n    promise._v = value;\n    promise._s = 2;\n    if (!promise._a) promise._a = promise._c.slice();\n    notify(promise, true);\n  };\n\n  var $resolve = function $resolve(value) {\n    var promise = this;\n    var then;\n    if (promise._d) return;\n    promise._d = true;\n    promise = promise._w || promise; // unwrap\n\n    try {\n      if (promise === value) throw TypeError$1(\"Promise can't be resolved itself\");\n\n      if (then = isThenable(value)) {\n        microtask(function () {\n          var wrapper = {\n            _w: promise,\n            _d: false\n          }; // wrap\n\n          try {\n            then.call(value, _ctx($resolve, wrapper, 1), _ctx($reject, wrapper, 1));\n          } catch (e) {\n            $reject.call(wrapper, e);\n          }\n        });\n      } else {\n        promise._v = value;\n        promise._s = 1;\n        notify(promise, false);\n      }\n    } catch (e) {\n      $reject.call({\n        _w: promise,\n        _d: false\n      }, e); // wrap\n    }\n  }; // constructor polyfill\n\n\n  if (!USE_NATIVE$1) {\n    // 25.4.3.1 Promise(executor)\n    $Promise = function Promise(executor) {\n      _anInstance(this, $Promise, PROMISE, '_h');\n\n      _aFunction(executor);\n\n      Internal.call(this);\n\n      try {\n        executor(_ctx($resolve, this, 1), _ctx($reject, this, 1));\n      } catch (err) {\n        $reject.call(this, err);\n      }\n    }; // eslint-disable-next-line no-unused-vars\n\n\n    Internal = function Promise(executor) {\n      this._c = []; // <- awaiting reactions\n\n      this._a = undefined; // <- checked in isUnhandled reactions\n\n      this._s = 0; // <- state\n\n      this._d = false; // <- done\n\n      this._v = undefined; // <- value\n\n      this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n\n      this._n = false; // <- notify\n    };\n\n    Internal.prototype = _redefineAll($Promise.prototype, {\n      // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n      then: function then(onFulfilled, onRejected) {\n        var reaction = newPromiseCapability(_speciesConstructor(this, $Promise));\n        reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n        reaction.fail = typeof onRejected == 'function' && onRejected;\n        reaction.domain = isNode$1 ? process$2.domain : undefined;\n\n        this._c.push(reaction);\n\n        if (this._a) this._a.push(reaction);\n        if (this._s) notify(this, false);\n        return reaction.promise;\n      },\n      // 25.4.5.1 Promise.prototype.catch(onRejected)\n      'catch': function _catch(onRejected) {\n        return this.then(undefined, onRejected);\n      }\n    });\n\n    OwnPromiseCapability = function OwnPromiseCapability() {\n      var promise = new Internal();\n      this.promise = promise;\n      this.resolve = _ctx($resolve, promise, 1);\n      this.reject = _ctx($reject, promise, 1);\n    };\n\n    _newPromiseCapability.f = newPromiseCapability = function newPromiseCapability(C) {\n      return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);\n    };\n  }\n\n  _export(_export.G + _export.W + _export.F * !USE_NATIVE$1, {\n    Promise: $Promise\n  });\n\n  _setToStringTag($Promise, PROMISE);\n\n  _setSpecies(PROMISE);\n\n  Wrapper = _core[PROMISE]; // statics\n\n  _export(_export.S + _export.F * !USE_NATIVE$1, PROMISE, {\n    // 25.4.4.5 Promise.reject(r)\n    reject: function reject(r) {\n      var capability = newPromiseCapability(this);\n      var $$reject = capability.reject;\n      $$reject(r);\n      return capability.promise;\n    }\n  });\n\n  _export(_export.S + _export.F * !USE_NATIVE$1, PROMISE, {\n    // 25.4.4.6 Promise.resolve(x)\n    resolve: function resolve(x) {\n      return _promiseResolve(this, x);\n    }\n  });\n\n  _export(_export.S + _export.F * !(USE_NATIVE$1 && _iterDetect(function (iter) {\n    $Promise.all(iter)['catch'](empty);\n  })), PROMISE, {\n    // 25.4.4.1 Promise.all(iterable)\n    all: function all(iterable) {\n      var C = this;\n      var capability = newPromiseCapability(C);\n      var resolve = capability.resolve;\n      var reject = capability.reject;\n\n      var result = _perform(function () {\n        var values = [];\n        var index = 0;\n        var remaining = 1;\n\n        _forOf(iterable, false, function (promise) {\n          var $index = index++;\n          var alreadyCalled = false;\n          values.push(undefined);\n          remaining++;\n          C.resolve(promise).then(function (value) {\n            if (alreadyCalled) return;\n            alreadyCalled = true;\n            values[$index] = value;\n            --remaining || resolve(values);\n          }, reject);\n        });\n\n        --remaining || resolve(values);\n      });\n\n      if (result.e) reject(result.v);\n      return capability.promise;\n    },\n    // 25.4.4.4 Promise.race(iterable)\n    race: function race(iterable) {\n      var C = this;\n      var capability = newPromiseCapability(C);\n      var reject = capability.reject;\n\n      var result = _perform(function () {\n        _forOf(iterable, false, function (promise) {\n          C.resolve(promise).then(capability.resolve, reject);\n        });\n      });\n\n      if (result.e) reject(result.v);\n      return capability.promise;\n    }\n  });\n\n  var _validateCollection = function _validateCollection(it, TYPE) {\n    if (!_isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');\n    return it;\n  };\n\n  var dP$5 = _objectDp.f;\n  var fastKey = _meta.fastKey;\n  var SIZE = _descriptors ? '_s' : 'size';\n\n  var getEntry = function getEntry(that, key) {\n    // fast case\n    var index = fastKey(key);\n    var entry;\n    if (index !== 'F') return that._i[index]; // frozen object case\n\n    for (entry = that._f; entry; entry = entry.n) {\n      if (entry.k == key) return entry;\n    }\n  };\n\n  var _collectionStrong = {\n    getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {\n      var C = wrapper(function (that, iterable) {\n        _anInstance(that, C, NAME, '_i');\n\n        that._t = NAME; // collection type\n\n        that._i = _objectCreate(null); // index\n\n        that._f = undefined; // first entry\n\n        that._l = undefined; // last entry\n\n        that[SIZE] = 0; // size\n\n        if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);\n      });\n\n      _redefineAll(C.prototype, {\n        // 23.1.3.1 Map.prototype.clear()\n        // 23.2.3.2 Set.prototype.clear()\n        clear: function clear() {\n          for (var that = _validateCollection(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {\n            entry.r = true;\n            if (entry.p) entry.p = entry.p.n = undefined;\n            delete data[entry.i];\n          }\n\n          that._f = that._l = undefined;\n          that[SIZE] = 0;\n        },\n        // 23.1.3.3 Map.prototype.delete(key)\n        // 23.2.3.4 Set.prototype.delete(value)\n        'delete': function _delete(key) {\n          var that = _validateCollection(this, NAME);\n\n          var entry = getEntry(that, key);\n\n          if (entry) {\n            var next = entry.n;\n            var prev = entry.p;\n            delete that._i[entry.i];\n            entry.r = true;\n            if (prev) prev.n = next;\n            if (next) next.p = prev;\n            if (that._f == entry) that._f = next;\n            if (that._l == entry) that._l = prev;\n            that[SIZE]--;\n          }\n\n          return !!entry;\n        },\n        // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n        // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n        forEach: function forEach(callbackfn\n        /* , that = undefined */\n        ) {\n          _validateCollection(this, NAME);\n\n          var f = _ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n\n          var entry;\n\n          while (entry = entry ? entry.n : this._f) {\n            f(entry.v, entry.k, this); // revert to the last existing entry\n\n            while (entry && entry.r) {\n              entry = entry.p;\n            }\n          }\n        },\n        // 23.1.3.7 Map.prototype.has(key)\n        // 23.2.3.7 Set.prototype.has(value)\n        has: function has(key) {\n          return !!getEntry(_validateCollection(this, NAME), key);\n        }\n      });\n\n      if (_descriptors) dP$5(C.prototype, 'size', {\n        get: function get() {\n          return _validateCollection(this, NAME)[SIZE];\n        }\n      });\n      return C;\n    },\n    def: function def(that, key, value) {\n      var entry = getEntry(that, key);\n      var prev, index; // change existing entry\n\n      if (entry) {\n        entry.v = value; // create new entry\n      } else {\n        that._l = entry = {\n          i: index = fastKey(key, true),\n          // <- index\n          k: key,\n          // <- key\n          v: value,\n          // <- value\n          p: prev = that._l,\n          // <- previous entry\n          n: undefined,\n          // <- next entry\n          r: false // <- removed\n\n        };\n        if (!that._f) that._f = entry;\n        if (prev) prev.n = entry;\n        that[SIZE]++; // add to index\n\n        if (index !== 'F') that._i[index] = entry;\n      }\n\n      return that;\n    },\n    getEntry: getEntry,\n    setStrong: function setStrong(C, NAME, IS_MAP) {\n      // add .keys, .values, .entries, [@@iterator]\n      // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n      _iterDefine(C, NAME, function (iterated, kind) {\n        this._t = _validateCollection(iterated, NAME); // target\n\n        this._k = kind; // kind\n\n        this._l = undefined; // previous\n      }, function () {\n        var that = this;\n        var kind = that._k;\n        var entry = that._l; // revert to the last existing entry\n\n        while (entry && entry.r) {\n          entry = entry.p;\n        } // get next entry\n\n\n        if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {\n          // or finish the iteration\n          that._t = undefined;\n          return _iterStep(1);\n        } // return step by kind\n\n\n        if (kind == 'keys') return _iterStep(0, entry.k);\n        if (kind == 'values') return _iterStep(0, entry.v);\n        return _iterStep(0, [entry.k, entry.v]);\n      }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // add [@@species], 23.1.2.2, 23.2.2.2\n\n\n      _setSpecies(NAME);\n    }\n  };\n\n  var _collection = function _collection(NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {\n    var Base = _global[NAME];\n    var C = Base;\n    var ADDER = IS_MAP ? 'set' : 'add';\n    var proto = C && C.prototype;\n    var O = {};\n\n    var fixMethod = function fixMethod(KEY) {\n      var fn = proto[KEY];\n\n      _redefine(proto, KEY, KEY == 'delete' ? function (a) {\n        return IS_WEAK && !_isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'has' ? function has(a) {\n        return IS_WEAK && !_isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'get' ? function get(a) {\n        return IS_WEAK && !_isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'add' ? function add(a) {\n        fn.call(this, a === 0 ? 0 : a);\n        return this;\n      } : function set(a, b) {\n        fn.call(this, a === 0 ? 0 : a, b);\n        return this;\n      });\n    };\n\n    if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !_fails(function () {\n      new C().entries().next();\n    }))) {\n      // create collection constructor\n      C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n\n      _redefineAll(C.prototype, methods);\n\n      _meta.NEED = true;\n    } else {\n      var instance = new C(); // early implementations not supports chaining\n\n      var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance; // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false\n\n      var THROWS_ON_PRIMITIVES = _fails(function () {\n        instance.has(1);\n      }); // most early implementations doesn't supports iterables, most modern - not close it correctly\n\n\n      var ACCEPT_ITERABLES = _iterDetect(function (iter) {\n        new C(iter);\n      }); // eslint-disable-line no-new\n      // for early implementations -0 and +0 not the same\n\n\n      var BUGGY_ZERO = !IS_WEAK && _fails(function () {\n        // V8 ~ Chromium 42- fails only with 5+ elements\n        var $instance = new C();\n        var index = 5;\n\n        while (index--) {\n          $instance[ADDER](index, index);\n        }\n\n        return !$instance.has(-0);\n      });\n\n      if (!ACCEPT_ITERABLES) {\n        C = wrapper(function (target, iterable) {\n          _anInstance(target, C, NAME);\n\n          var that = _inheritIfRequired(new Base(), target, C);\n\n          if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);\n          return that;\n        });\n        C.prototype = proto;\n        proto.constructor = C;\n      }\n\n      if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {\n        fixMethod('delete');\n        fixMethod('has');\n        IS_MAP && fixMethod('get');\n      }\n\n      if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER); // weak collections should not contains .clear method\n\n      if (IS_WEAK && proto.clear) delete proto.clear;\n    }\n\n    _setToStringTag(C, NAME);\n\n    O[NAME] = C;\n\n    _export(_export.G + _export.W + _export.F * (C != Base), O);\n\n    if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);\n    return C;\n  };\n\n  var MAP = 'Map'; // 23.1 Map Objects\n\n  var es6_map = _collection(MAP, function (get) {\n    return function Map() {\n      return get(this, arguments.length > 0 ? arguments[0] : undefined);\n    };\n  }, {\n    // 23.1.3.6 Map.prototype.get(key)\n    get: function get(key) {\n      var entry = _collectionStrong.getEntry(_validateCollection(this, MAP), key);\n\n      return entry && entry.v;\n    },\n    // 23.1.3.9 Map.prototype.set(key, value)\n    set: function set(key, value) {\n      return _collectionStrong.def(_validateCollection(this, MAP), key === 0 ? 0 : key, value);\n    }\n  }, _collectionStrong, true);\n\n  var SET = 'Set'; // 23.2 Set Objects\n\n  var es6_set = _collection(SET, function (get) {\n    return function Set() {\n      return get(this, arguments.length > 0 ? arguments[0] : undefined);\n    };\n  }, {\n    // 23.2.3.1 Set.prototype.add(value)\n    add: function add(value) {\n      return _collectionStrong.def(_validateCollection(this, SET), value = value === 0 ? 0 : value, value);\n    }\n  }, _collectionStrong);\n\n  var getWeak = _meta.getWeak;\n\n  var arrayFind = _arrayMethods(5);\n\n  var arrayFindIndex = _arrayMethods(6);\n\n  var id$1 = 0; // fallback for uncaught frozen keys\n\n  var uncaughtFrozenStore = function uncaughtFrozenStore(that) {\n    return that._l || (that._l = new UncaughtFrozenStore());\n  };\n\n  var UncaughtFrozenStore = function UncaughtFrozenStore() {\n    this.a = [];\n  };\n\n  var findUncaughtFrozen = function findUncaughtFrozen(store, key) {\n    return arrayFind(store.a, function (it) {\n      return it[0] === key;\n    });\n  };\n\n  UncaughtFrozenStore.prototype = {\n    get: function get(key) {\n      var entry = findUncaughtFrozen(this, key);\n      if (entry) return entry[1];\n    },\n    has: function has(key) {\n      return !!findUncaughtFrozen(this, key);\n    },\n    set: function set(key, value) {\n      var entry = findUncaughtFrozen(this, key);\n      if (entry) entry[1] = value;else this.a.push([key, value]);\n    },\n    'delete': function _delete(key) {\n      var index = arrayFindIndex(this.a, function (it) {\n        return it[0] === key;\n      });\n      if (~index) this.a.splice(index, 1);\n      return !!~index;\n    }\n  };\n  var _collectionWeak = {\n    getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {\n      var C = wrapper(function (that, iterable) {\n        _anInstance(that, C, NAME, '_i');\n\n        that._t = NAME; // collection type\n\n        that._i = id$1++; // collection id\n\n        that._l = undefined; // leak store for uncaught frozen objects\n\n        if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);\n      });\n\n      _redefineAll(C.prototype, {\n        // 23.3.3.2 WeakMap.prototype.delete(key)\n        // 23.4.3.3 WeakSet.prototype.delete(value)\n        'delete': function _delete(key) {\n          if (!_isObject(key)) return false;\n          var data = getWeak(key);\n          if (data === true) return uncaughtFrozenStore(_validateCollection(this, NAME))['delete'](key);\n          return data && _has(data, this._i) && delete data[this._i];\n        },\n        // 23.3.3.4 WeakMap.prototype.has(key)\n        // 23.4.3.4 WeakSet.prototype.has(value)\n        has: function has(key) {\n          if (!_isObject(key)) return false;\n          var data = getWeak(key);\n          if (data === true) return uncaughtFrozenStore(_validateCollection(this, NAME)).has(key);\n          return data && _has(data, this._i);\n        }\n      });\n\n      return C;\n    },\n    def: function def(that, key, value) {\n      var data = getWeak(_anObject(key), true);\n      if (data === true) uncaughtFrozenStore(that).set(key, value);else data[that._i] = value;\n      return that;\n    },\n    ufstore: uncaughtFrozenStore\n  };\n  var es6_weakMap = createCommonjsModule(function (module) {\n    var each = _arrayMethods(0);\n\n    var NATIVE_WEAK_MAP = _validateCollection;\n    var IS_IE11 = !_global.ActiveXObject && 'ActiveXObject' in _global;\n    var WEAK_MAP = 'WeakMap';\n    var getWeak = _meta.getWeak;\n    var isExtensible = Object.isExtensible;\n    var uncaughtFrozenStore = _collectionWeak.ufstore;\n    var InternalMap;\n\n    var wrapper = function wrapper(get) {\n      return function WeakMap() {\n        return get(this, arguments.length > 0 ? arguments[0] : undefined);\n      };\n    };\n\n    var methods = {\n      // 23.3.3.3 WeakMap.prototype.get(key)\n      get: function get(key) {\n        if (_isObject(key)) {\n          var data = getWeak(key);\n          if (data === true) return uncaughtFrozenStore(_validateCollection(this, WEAK_MAP)).get(key);\n          return data ? data[this._i] : undefined;\n        }\n      },\n      // 23.3.3.5 WeakMap.prototype.set(key, value)\n      set: function set(key, value) {\n        return _collectionWeak.def(_validateCollection(this, WEAK_MAP), key, value);\n      }\n    }; // 23.3 WeakMap Objects\n\n    var $WeakMap = module.exports = _collection(WEAK_MAP, wrapper, methods, _collectionWeak, true, true); // IE11 WeakMap frozen keys fix\n\n\n    if (NATIVE_WEAK_MAP && IS_IE11) {\n      InternalMap = _collectionWeak.getConstructor(wrapper, WEAK_MAP);\n\n      _objectAssign(InternalMap.prototype, methods);\n\n      _meta.NEED = true;\n      each(['delete', 'has', 'get', 'set'], function (key) {\n        var proto = $WeakMap.prototype;\n        var method = proto[key];\n\n        _redefine(proto, key, function (a, b) {\n          // store frozen objects on internal weakmap shim\n          if (_isObject(a) && !isExtensible(a)) {\n            if (!this._f) this._f = new InternalMap();\n\n            var result = this._f[key](a, b);\n\n            return key == 'set' ? this : result; // store all the rest on native weakmap\n          }\n\n          return method.call(this, a, b);\n        });\n      });\n    }\n  });\n  var WEAK_SET = 'WeakSet'; // 23.4 WeakSet Objects\n\n  _collection(WEAK_SET, function (get) {\n    return function WeakSet() {\n      return get(this, arguments.length > 0 ? arguments[0] : undefined);\n    };\n  }, {\n    // 23.4.3.1 WeakSet.prototype.add(value)\n    add: function add(value) {\n      return _collectionWeak.def(_validateCollection(this, WEAK_SET), value, true);\n    }\n  }, _collectionWeak, false, true);\n\n  var TYPED = _uid('typed_array');\n\n  var VIEW = _uid('view');\n\n  var ABV = !!(_global.ArrayBuffer && _global.DataView);\n  var CONSTR = ABV;\n  var i$1 = 0;\n  var l = 9;\n  var Typed;\n  var TypedArrayConstructors = 'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'.split(',');\n\n  while (i$1 < l) {\n    if (Typed = _global[TypedArrayConstructors[i$1++]]) {\n      _hide(Typed.prototype, TYPED, true);\n\n      _hide(Typed.prototype, VIEW, true);\n    } else CONSTR = false;\n  }\n\n  var _typed = {\n    ABV: ABV,\n    CONSTR: CONSTR,\n    TYPED: TYPED,\n    VIEW: VIEW\n  }; // https://tc39.github.io/ecma262/#sec-toindex\n\n  var _toIndex = function _toIndex(it) {\n    if (it === undefined) return 0;\n\n    var number = _toInteger(it);\n\n    var length = _toLength(number);\n\n    if (number !== length) throw RangeError('Wrong length!');\n    return length;\n  };\n\n  var _typedBuffer = createCommonjsModule(function (module, exports) {\n    var gOPN = _objectGopn.f;\n    var dP = _objectDp.f;\n    var ARRAY_BUFFER = 'ArrayBuffer';\n    var DATA_VIEW = 'DataView';\n    var PROTOTYPE = 'prototype';\n    var WRONG_LENGTH = 'Wrong length!';\n    var WRONG_INDEX = 'Wrong index!';\n    var $ArrayBuffer = _global[ARRAY_BUFFER];\n    var $DataView = _global[DATA_VIEW];\n    var Math = _global.Math;\n    var RangeError = _global.RangeError; // eslint-disable-next-line no-shadow-restricted-names\n\n    var Infinity = _global.Infinity;\n    var BaseBuffer = $ArrayBuffer;\n    var abs = Math.abs;\n    var pow = Math.pow;\n    var floor = Math.floor;\n    var log = Math.log;\n    var LN2 = Math.LN2;\n    var BUFFER = 'buffer';\n    var BYTE_LENGTH = 'byteLength';\n    var BYTE_OFFSET = 'byteOffset';\n    var $BUFFER = _descriptors ? '_b' : BUFFER;\n    var $LENGTH = _descriptors ? '_l' : BYTE_LENGTH;\n    var $OFFSET = _descriptors ? '_o' : BYTE_OFFSET; // IEEE754 conversions based on https://github.com/feross/ieee754\n\n    function packIEEE754(value, mLen, nBytes) {\n      var buffer = new Array(nBytes);\n      var eLen = nBytes * 8 - mLen - 1;\n      var eMax = (1 << eLen) - 1;\n      var eBias = eMax >> 1;\n      var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;\n      var i = 0;\n      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n      var e, m, c;\n      value = abs(value); // eslint-disable-next-line no-self-compare\n\n      if (value != value || value === Infinity) {\n        // eslint-disable-next-line no-self-compare\n        m = value != value ? 1 : 0;\n        e = eMax;\n      } else {\n        e = floor(log(value) / LN2);\n\n        if (value * (c = pow(2, -e)) < 1) {\n          e--;\n          c *= 2;\n        }\n\n        if (e + eBias >= 1) {\n          value += rt / c;\n        } else {\n          value += rt * pow(2, 1 - eBias);\n        }\n\n        if (value * c >= 2) {\n          e++;\n          c /= 2;\n        }\n\n        if (e + eBias >= eMax) {\n          m = 0;\n          e = eMax;\n        } else if (e + eBias >= 1) {\n          m = (value * c - 1) * pow(2, mLen);\n          e = e + eBias;\n        } else {\n          m = value * pow(2, eBias - 1) * pow(2, mLen);\n          e = 0;\n        }\n      }\n\n      for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8) {\n        ;\n      }\n\n      e = e << mLen | m;\n      eLen += mLen;\n\n      for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8) {\n        ;\n      }\n\n      buffer[--i] |= s * 128;\n      return buffer;\n    }\n\n    function unpackIEEE754(buffer, mLen, nBytes) {\n      var eLen = nBytes * 8 - mLen - 1;\n      var eMax = (1 << eLen) - 1;\n      var eBias = eMax >> 1;\n      var nBits = eLen - 7;\n      var i = nBytes - 1;\n      var s = buffer[i--];\n      var e = s & 127;\n      var m;\n      s >>= 7;\n\n      for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8) {\n        ;\n      }\n\n      m = e & (1 << -nBits) - 1;\n      e >>= -nBits;\n      nBits += mLen;\n\n      for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8) {\n        ;\n      }\n\n      if (e === 0) {\n        e = 1 - eBias;\n      } else if (e === eMax) {\n        return m ? NaN : s ? -Infinity : Infinity;\n      } else {\n        m = m + pow(2, mLen);\n        e = e - eBias;\n      }\n\n      return (s ? -1 : 1) * m * pow(2, e - mLen);\n    }\n\n    function unpackI32(bytes) {\n      return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];\n    }\n\n    function packI8(it) {\n      return [it & 0xff];\n    }\n\n    function packI16(it) {\n      return [it & 0xff, it >> 8 & 0xff];\n    }\n\n    function packI32(it) {\n      return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];\n    }\n\n    function packF64(it) {\n      return packIEEE754(it, 52, 8);\n    }\n\n    function packF32(it) {\n      return packIEEE754(it, 23, 4);\n    }\n\n    function addGetter(C, key, internal) {\n      dP(C[PROTOTYPE], key, {\n        get: function get() {\n          return this[internal];\n        }\n      });\n    }\n\n    function get(view, bytes, index, isLittleEndian) {\n      var numIndex = +index;\n\n      var intIndex = _toIndex(numIndex);\n\n      if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n      var store = view[$BUFFER]._b;\n      var start = intIndex + view[$OFFSET];\n      var pack = store.slice(start, start + bytes);\n      return isLittleEndian ? pack : pack.reverse();\n    }\n\n    function set(view, bytes, index, conversion, value, isLittleEndian) {\n      var numIndex = +index;\n\n      var intIndex = _toIndex(numIndex);\n\n      if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n      var store = view[$BUFFER]._b;\n      var start = intIndex + view[$OFFSET];\n      var pack = conversion(+value);\n\n      for (var i = 0; i < bytes; i++) {\n        store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];\n      }\n    }\n\n    if (!_typed.ABV) {\n      $ArrayBuffer = function ArrayBuffer(length) {\n        _anInstance(this, $ArrayBuffer, ARRAY_BUFFER);\n\n        var byteLength = _toIndex(length);\n\n        this._b = _arrayFill.call(new Array(byteLength), 0);\n        this[$LENGTH] = byteLength;\n      };\n\n      $DataView = function DataView(buffer, byteOffset, byteLength) {\n        _anInstance(this, $DataView, DATA_VIEW);\n\n        _anInstance(buffer, $ArrayBuffer, DATA_VIEW);\n\n        var bufferLength = buffer[$LENGTH];\n\n        var offset = _toInteger(byteOffset);\n\n        if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');\n        byteLength = byteLength === undefined ? bufferLength - offset : _toLength(byteLength);\n        if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);\n        this[$BUFFER] = buffer;\n        this[$OFFSET] = offset;\n        this[$LENGTH] = byteLength;\n      };\n\n      if (_descriptors) {\n        addGetter($ArrayBuffer, BYTE_LENGTH, '_l');\n        addGetter($DataView, BUFFER, '_b');\n        addGetter($DataView, BYTE_LENGTH, '_l');\n        addGetter($DataView, BYTE_OFFSET, '_o');\n      }\n\n      _redefineAll($DataView[PROTOTYPE], {\n        getInt8: function getInt8(byteOffset) {\n          return get(this, 1, byteOffset)[0] << 24 >> 24;\n        },\n        getUint8: function getUint8(byteOffset) {\n          return get(this, 1, byteOffset)[0];\n        },\n        getInt16: function getInt16(byteOffset\n        /* , littleEndian */\n        ) {\n          var bytes = get(this, 2, byteOffset, arguments[1]);\n          return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\n        },\n        getUint16: function getUint16(byteOffset\n        /* , littleEndian */\n        ) {\n          var bytes = get(this, 2, byteOffset, arguments[1]);\n          return bytes[1] << 8 | bytes[0];\n        },\n        getInt32: function getInt32(byteOffset\n        /* , littleEndian */\n        ) {\n          return unpackI32(get(this, 4, byteOffset, arguments[1]));\n        },\n        getUint32: function getUint32(byteOffset\n        /* , littleEndian */\n        ) {\n          return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;\n        },\n        getFloat32: function getFloat32(byteOffset\n        /* , littleEndian */\n        ) {\n          return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);\n        },\n        getFloat64: function getFloat64(byteOffset\n        /* , littleEndian */\n        ) {\n          return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);\n        },\n        setInt8: function setInt8(byteOffset, value) {\n          set(this, 1, byteOffset, packI8, value);\n        },\n        setUint8: function setUint8(byteOffset, value) {\n          set(this, 1, byteOffset, packI8, value);\n        },\n        setInt16: function setInt16(byteOffset, value\n        /* , littleEndian */\n        ) {\n          set(this, 2, byteOffset, packI16, value, arguments[2]);\n        },\n        setUint16: function setUint16(byteOffset, value\n        /* , littleEndian */\n        ) {\n          set(this, 2, byteOffset, packI16, value, arguments[2]);\n        },\n        setInt32: function setInt32(byteOffset, value\n        /* , littleEndian */\n        ) {\n          set(this, 4, byteOffset, packI32, value, arguments[2]);\n        },\n        setUint32: function setUint32(byteOffset, value\n        /* , littleEndian */\n        ) {\n          set(this, 4, byteOffset, packI32, value, arguments[2]);\n        },\n        setFloat32: function setFloat32(byteOffset, value\n        /* , littleEndian */\n        ) {\n          set(this, 4, byteOffset, packF32, value, arguments[2]);\n        },\n        setFloat64: function setFloat64(byteOffset, value\n        /* , littleEndian */\n        ) {\n          set(this, 8, byteOffset, packF64, value, arguments[2]);\n        }\n      });\n    } else {\n      if (!_fails(function () {\n        $ArrayBuffer(1);\n      }) || !_fails(function () {\n        new $ArrayBuffer(-1); // eslint-disable-line no-new\n      }) || _fails(function () {\n        new $ArrayBuffer(); // eslint-disable-line no-new\n\n        new $ArrayBuffer(1.5); // eslint-disable-line no-new\n\n        new $ArrayBuffer(NaN); // eslint-disable-line no-new\n\n        return $ArrayBuffer.name != ARRAY_BUFFER;\n      })) {\n        $ArrayBuffer = function ArrayBuffer(length) {\n          _anInstance(this, $ArrayBuffer);\n\n          return new BaseBuffer(_toIndex(length));\n        };\n\n        var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];\n\n        for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {\n          if (!((key = keys[j++]) in $ArrayBuffer)) _hide($ArrayBuffer, key, BaseBuffer[key]);\n        }\n\n        ArrayBufferProto.constructor = $ArrayBuffer;\n      } // iOS Safari 7.x bug\n\n\n      var view = new $DataView(new $ArrayBuffer(2));\n      var $setInt8 = $DataView[PROTOTYPE].setInt8;\n      view.setInt8(0, 2147483648);\n      view.setInt8(1, 2147483649);\n      if (view.getInt8(0) || !view.getInt8(1)) _redefineAll($DataView[PROTOTYPE], {\n        setInt8: function setInt8(byteOffset, value) {\n          $setInt8.call(this, byteOffset, value << 24 >> 24);\n        },\n        setUint8: function setUint8(byteOffset, value) {\n          $setInt8.call(this, byteOffset, value << 24 >> 24);\n        }\n      }, true);\n    }\n\n    _setToStringTag($ArrayBuffer, ARRAY_BUFFER);\n\n    _setToStringTag($DataView, DATA_VIEW);\n\n    _hide($DataView[PROTOTYPE], _typed.VIEW, true);\n\n    exports[ARRAY_BUFFER] = $ArrayBuffer;\n    exports[DATA_VIEW] = $DataView;\n  });\n\n  var ArrayBuffer = _global.ArrayBuffer;\n  var $ArrayBuffer = _typedBuffer.ArrayBuffer;\n  var $DataView = _typedBuffer.DataView;\n  var $isView = _typed.ABV && ArrayBuffer.isView;\n  var $slice = $ArrayBuffer.prototype.slice;\n  var VIEW$1 = _typed.VIEW;\n  var ARRAY_BUFFER = 'ArrayBuffer';\n\n  _export(_export.G + _export.W + _export.F * (ArrayBuffer !== $ArrayBuffer), {\n    ArrayBuffer: $ArrayBuffer\n  });\n\n  _export(_export.S + _export.F * !_typed.CONSTR, ARRAY_BUFFER, {\n    // 24.1.3.1 ArrayBuffer.isView(arg)\n    isView: function isView(it) {\n      return $isView && $isView(it) || _isObject(it) && VIEW$1 in it;\n    }\n  });\n\n  _export(_export.P + _export.U + _export.F * _fails(function () {\n    return !new $ArrayBuffer(2).slice(1, undefined).byteLength;\n  }), ARRAY_BUFFER, {\n    // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)\n    slice: function slice(start, end) {\n      if ($slice !== undefined && end === undefined) return $slice.call(_anObject(this), start); // FF fix\n\n      var len = _anObject(this).byteLength;\n\n      var first = _toAbsoluteIndex(start, len);\n\n      var fin = _toAbsoluteIndex(end === undefined ? len : end, len);\n\n      var result = new (_speciesConstructor(this, $ArrayBuffer))(_toLength(fin - first));\n      var viewS = new $DataView(this);\n      var viewT = new $DataView(result);\n      var index = 0;\n\n      while (first < fin) {\n        viewT.setUint8(index++, viewS.getUint8(first++));\n      }\n\n      return result;\n    }\n  });\n\n  _setSpecies(ARRAY_BUFFER);\n\n  _export(_export.G + _export.W + _export.F * !_typed.ABV, {\n    DataView: _typedBuffer.DataView\n  });\n\n  var _typedArray = createCommonjsModule(function (module) {\n    if (_descriptors) {\n      var LIBRARY = _library;\n      var global = _global;\n      var fails = _fails;\n      var $export = _export;\n      var $typed = _typed;\n      var $buffer = _typedBuffer;\n      var ctx = _ctx;\n      var anInstance = _anInstance;\n      var propertyDesc = _propertyDesc;\n      var hide = _hide;\n      var redefineAll = _redefineAll;\n      var toInteger = _toInteger;\n      var toLength = _toLength;\n      var toIndex = _toIndex;\n      var toAbsoluteIndex = _toAbsoluteIndex;\n      var toPrimitive = _toPrimitive;\n      var has = _has;\n      var classof = _classof;\n      var isObject = _isObject;\n      var toObject = _toObject;\n      var isArrayIter = _isArrayIter;\n      var create = _objectCreate;\n      var getPrototypeOf = _objectGpo;\n      var gOPN = _objectGopn.f;\n      var getIterFn = core_getIteratorMethod;\n      var uid = _uid;\n      var wks = _wks;\n      var createArrayMethod = _arrayMethods;\n      var createArrayIncludes = _arrayIncludes;\n      var speciesConstructor = _speciesConstructor;\n      var ArrayIterators = es6_array_iterator;\n      var Iterators = _iterators;\n      var $iterDetect = _iterDetect;\n      var setSpecies = _setSpecies;\n      var arrayFill = _arrayFill;\n      var arrayCopyWithin = _arrayCopyWithin;\n      var $DP = _objectDp;\n      var $GOPD = _objectGopd;\n      var dP = $DP.f;\n      var gOPD = $GOPD.f;\n      var RangeError = global.RangeError;\n      var TypeError = global.TypeError;\n      var Uint8Array = global.Uint8Array;\n      var ARRAY_BUFFER = 'ArrayBuffer';\n      var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;\n      var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';\n      var PROTOTYPE = 'prototype';\n      var ArrayProto = Array[PROTOTYPE];\n      var $ArrayBuffer = $buffer.ArrayBuffer;\n      var $DataView = $buffer.DataView;\n      var arrayForEach = createArrayMethod(0);\n      var arrayFilter = createArrayMethod(2);\n      var arraySome = createArrayMethod(3);\n      var arrayEvery = createArrayMethod(4);\n      var arrayFind = createArrayMethod(5);\n      var arrayFindIndex = createArrayMethod(6);\n      var arrayIncludes = createArrayIncludes(true);\n      var arrayIndexOf = createArrayIncludes(false);\n      var arrayValues = ArrayIterators.values;\n      var arrayKeys = ArrayIterators.keys;\n      var arrayEntries = ArrayIterators.entries;\n      var arrayLastIndexOf = ArrayProto.lastIndexOf;\n      var arrayReduce = ArrayProto.reduce;\n      var arrayReduceRight = ArrayProto.reduceRight;\n      var arrayJoin = ArrayProto.join;\n      var arraySort = ArrayProto.sort;\n      var arraySlice = ArrayProto.slice;\n      var arrayToString = ArrayProto.toString;\n      var arrayToLocaleString = ArrayProto.toLocaleString;\n      var ITERATOR = wks('iterator');\n      var TAG = wks('toStringTag');\n      var TYPED_CONSTRUCTOR = uid('typed_constructor');\n      var DEF_CONSTRUCTOR = uid('def_constructor');\n      var ALL_CONSTRUCTORS = $typed.CONSTR;\n      var TYPED_ARRAY = $typed.TYPED;\n      var VIEW = $typed.VIEW;\n      var WRONG_LENGTH = 'Wrong length!';\n      var $map = createArrayMethod(1, function (O, length) {\n        return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);\n      });\n      var LITTLE_ENDIAN = fails(function () {\n        // eslint-disable-next-line no-undef\n        return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;\n      });\n      var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {\n        new Uint8Array(1).set({});\n      });\n\n      var toOffset = function toOffset(it, BYTES) {\n        var offset = toInteger(it);\n        if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');\n        return offset;\n      };\n\n      var validate = function validate(it) {\n        if (isObject(it) && TYPED_ARRAY in it) return it;\n        throw TypeError(it + ' is not a typed array!');\n      };\n\n      var allocate = function allocate(C, length) {\n        if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {\n          throw TypeError('It is not a typed array constructor!');\n        }\n\n        return new C(length);\n      };\n\n      var speciesFromList = function speciesFromList(O, list) {\n        return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);\n      };\n\n      var fromList = function fromList(C, list) {\n        var index = 0;\n        var length = list.length;\n        var result = allocate(C, length);\n\n        while (length > index) {\n          result[index] = list[index++];\n        }\n\n        return result;\n      };\n\n      var addGetter = function addGetter(it, key, internal) {\n        dP(it, key, {\n          get: function get() {\n            return this._d[internal];\n          }\n        });\n      };\n\n      var $from = function from(source\n      /* , mapfn, thisArg */\n      ) {\n        var O = toObject(source);\n        var aLen = arguments.length;\n        var mapfn = aLen > 1 ? arguments[1] : undefined;\n        var mapping = mapfn !== undefined;\n        var iterFn = getIterFn(O);\n        var i, length, values, result, step, iterator;\n\n        if (iterFn != undefined && !isArrayIter(iterFn)) {\n          for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {\n            values.push(step.value);\n          }\n\n          O = values;\n        }\n\n        if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);\n\n        for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {\n          result[i] = mapping ? mapfn(O[i], i) : O[i];\n        }\n\n        return result;\n      };\n\n      var $of = function of()\n      /* ...items */\n      {\n        var index = 0;\n        var length = arguments.length;\n        var result = allocate(this, length);\n\n        while (length > index) {\n          result[index] = arguments[index++];\n        }\n\n        return result;\n      }; // iOS Safari 6.x fails here\n\n\n      var TO_LOCALE_BUG = !!Uint8Array && fails(function () {\n        arrayToLocaleString.call(new Uint8Array(1));\n      });\n\n      var $toLocaleString = function toLocaleString() {\n        return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);\n      };\n\n      var proto = {\n        copyWithin: function copyWithin(target, start\n        /* , end */\n        ) {\n          return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);\n        },\n        every: function every(callbackfn\n        /* , thisArg */\n        ) {\n          return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n        },\n        fill: function fill(value\n        /* , start, end */\n        ) {\n          // eslint-disable-line no-unused-vars\n          return arrayFill.apply(validate(this), arguments);\n        },\n        filter: function filter(callbackfn\n        /* , thisArg */\n        ) {\n          return speciesFromList(this, arrayFilter(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined));\n        },\n        find: function find(predicate\n        /* , thisArg */\n        ) {\n          return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n        },\n        findIndex: function findIndex(predicate\n        /* , thisArg */\n        ) {\n          return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n        },\n        forEach: function forEach(callbackfn\n        /* , thisArg */\n        ) {\n          arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n        },\n        indexOf: function indexOf(searchElement\n        /* , fromIndex */\n        ) {\n          return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n        },\n        includes: function includes(searchElement\n        /* , fromIndex */\n        ) {\n          return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n        },\n        join: function join(separator) {\n          // eslint-disable-line no-unused-vars\n          return arrayJoin.apply(validate(this), arguments);\n        },\n        lastIndexOf: function lastIndexOf(searchElement\n        /* , fromIndex */\n        ) {\n          // eslint-disable-line no-unused-vars\n          return arrayLastIndexOf.apply(validate(this), arguments);\n        },\n        map: function map(mapfn\n        /* , thisArg */\n        ) {\n          return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);\n        },\n        reduce: function reduce(callbackfn\n        /* , initialValue */\n        ) {\n          // eslint-disable-line no-unused-vars\n          return arrayReduce.apply(validate(this), arguments);\n        },\n        reduceRight: function reduceRight(callbackfn\n        /* , initialValue */\n        ) {\n          // eslint-disable-line no-unused-vars\n          return arrayReduceRight.apply(validate(this), arguments);\n        },\n        reverse: function reverse() {\n          var that = this;\n          var length = validate(that).length;\n          var middle = Math.floor(length / 2);\n          var index = 0;\n          var value;\n\n          while (index < middle) {\n            value = that[index];\n            that[index++] = that[--length];\n            that[length] = value;\n          }\n\n          return that;\n        },\n        some: function some(callbackfn\n        /* , thisArg */\n        ) {\n          return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n        },\n        sort: function sort(comparefn) {\n          return arraySort.call(validate(this), comparefn);\n        },\n        subarray: function subarray(begin, end) {\n          var O = validate(this);\n          var length = O.length;\n          var $begin = toAbsoluteIndex(begin, length);\n          return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(O.buffer, O.byteOffset + $begin * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin));\n        }\n      };\n\n      var $slice = function slice(start, end) {\n        return speciesFromList(this, arraySlice.call(validate(this), start, end));\n      };\n\n      var $set = function set(arrayLike\n      /* , offset */\n      ) {\n        validate(this);\n        var offset = toOffset(arguments[1], 1);\n        var length = this.length;\n        var src = toObject(arrayLike);\n        var len = toLength(src.length);\n        var index = 0;\n        if (len + offset > length) throw RangeError(WRONG_LENGTH);\n\n        while (index < len) {\n          this[offset + index] = src[index++];\n        }\n      };\n\n      var $iterators = {\n        entries: function entries() {\n          return arrayEntries.call(validate(this));\n        },\n        keys: function keys() {\n          return arrayKeys.call(validate(this));\n        },\n        values: function values() {\n          return arrayValues.call(validate(this));\n        }\n      };\n\n      var isTAIndex = function isTAIndex(target, key) {\n        return isObject(target) && target[TYPED_ARRAY] && _typeof2(key) != 'symbol' && key in target && String(+key) == String(key);\n      };\n\n      var $getDesc = function getOwnPropertyDescriptor(target, key) {\n        return isTAIndex(target, key = toPrimitive(key, true)) ? propertyDesc(2, target[key]) : gOPD(target, key);\n      };\n\n      var $setDesc = function defineProperty(target, key, desc) {\n        if (isTAIndex(target, key = toPrimitive(key, true)) && isObject(desc) && has(desc, 'value') && !has(desc, 'get') && !has(desc, 'set') // TODO: add validation descriptor w/o calling accessors\n        && !desc.configurable && (!has(desc, 'writable') || desc.writable) && (!has(desc, 'enumerable') || desc.enumerable)) {\n          target[key] = desc.value;\n          return target;\n        }\n\n        return dP(target, key, desc);\n      };\n\n      if (!ALL_CONSTRUCTORS) {\n        $GOPD.f = $getDesc;\n        $DP.f = $setDesc;\n      }\n\n      $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {\n        getOwnPropertyDescriptor: $getDesc,\n        defineProperty: $setDesc\n      });\n\n      if (fails(function () {\n        arrayToString.call({});\n      })) {\n        arrayToString = arrayToLocaleString = function toString() {\n          return arrayJoin.call(this);\n        };\n      }\n\n      var $TypedArrayPrototype$ = redefineAll({}, proto);\n      redefineAll($TypedArrayPrototype$, $iterators);\n      hide($TypedArrayPrototype$, ITERATOR, $iterators.values);\n      redefineAll($TypedArrayPrototype$, {\n        slice: $slice,\n        set: $set,\n        constructor: function constructor() {\n          /* noop */\n        },\n        toString: arrayToString,\n        toLocaleString: $toLocaleString\n      });\n      addGetter($TypedArrayPrototype$, 'buffer', 'b');\n      addGetter($TypedArrayPrototype$, 'byteOffset', 'o');\n      addGetter($TypedArrayPrototype$, 'byteLength', 'l');\n      addGetter($TypedArrayPrototype$, 'length', 'e');\n      dP($TypedArrayPrototype$, TAG, {\n        get: function get() {\n          return this[TYPED_ARRAY];\n        }\n      }); // eslint-disable-next-line max-statements\n\n      module.exports = function (KEY, BYTES, wrapper, CLAMPED) {\n        CLAMPED = !!CLAMPED;\n        var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';\n        var GETTER = 'get' + KEY;\n        var SETTER = 'set' + KEY;\n        var TypedArray = global[NAME];\n        var Base = TypedArray || {};\n        var TAC = TypedArray && getPrototypeOf(TypedArray);\n        var FORCED = !TypedArray || !$typed.ABV;\n        var O = {};\n        var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];\n\n        var getter = function getter(that, index) {\n          var data = that._d;\n          return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);\n        };\n\n        var setter = function setter(that, index, value) {\n          var data = that._d;\n          if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;\n          data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);\n        };\n\n        var addElement = function addElement(that, index) {\n          dP(that, index, {\n            get: function get() {\n              return getter(this, index);\n            },\n            set: function set(value) {\n              return setter(this, index, value);\n            },\n            enumerable: true\n          });\n        };\n\n        if (FORCED) {\n          TypedArray = wrapper(function (that, data, $offset, $length) {\n            anInstance(that, TypedArray, NAME, '_d');\n            var index = 0;\n            var offset = 0;\n            var buffer, byteLength, length, klass;\n\n            if (!isObject(data)) {\n              length = toIndex(data);\n              byteLength = length * BYTES;\n              buffer = new $ArrayBuffer(byteLength);\n            } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n              buffer = data;\n              offset = toOffset($offset, BYTES);\n              var $len = data.byteLength;\n\n              if ($length === undefined) {\n                if ($len % BYTES) throw RangeError(WRONG_LENGTH);\n                byteLength = $len - offset;\n                if (byteLength < 0) throw RangeError(WRONG_LENGTH);\n              } else {\n                byteLength = toLength($length) * BYTES;\n                if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);\n              }\n\n              length = byteLength / BYTES;\n            } else if (TYPED_ARRAY in data) {\n              return fromList(TypedArray, data);\n            } else {\n              return $from.call(TypedArray, data);\n            }\n\n            hide(that, '_d', {\n              b: buffer,\n              o: offset,\n              l: byteLength,\n              e: length,\n              v: new $DataView(buffer)\n            });\n\n            while (index < length) {\n              addElement(that, index++);\n            }\n          });\n          TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);\n          hide(TypedArrayPrototype, 'constructor', TypedArray);\n        } else if (!fails(function () {\n          TypedArray(1);\n        }) || !fails(function () {\n          new TypedArray(-1); // eslint-disable-line no-new\n        }) || !$iterDetect(function (iter) {\n          new TypedArray(); // eslint-disable-line no-new\n\n          new TypedArray(null); // eslint-disable-line no-new\n\n          new TypedArray(1.5); // eslint-disable-line no-new\n\n          new TypedArray(iter); // eslint-disable-line no-new\n        }, true)) {\n          TypedArray = wrapper(function (that, data, $offset, $length) {\n            anInstance(that, TypedArray, NAME);\n            var klass; // `ws` module bug, temporarily remove validation length for Uint8Array\n            // https://github.com/websockets/ws/pull/645\n\n            if (!isObject(data)) return new Base(toIndex(data));\n\n            if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n              return $length !== undefined ? new Base(data, toOffset($offset, BYTES), $length) : $offset !== undefined ? new Base(data, toOffset($offset, BYTES)) : new Base(data);\n            }\n\n            if (TYPED_ARRAY in data) return fromList(TypedArray, data);\n            return $from.call(TypedArray, data);\n          });\n          arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {\n            if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);\n          });\n          TypedArray[PROTOTYPE] = TypedArrayPrototype;\n          if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;\n        }\n\n        var $nativeIterator = TypedArrayPrototype[ITERATOR];\n        var CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);\n        var $iterator = $iterators.values;\n        hide(TypedArray, TYPED_CONSTRUCTOR, true);\n        hide(TypedArrayPrototype, TYPED_ARRAY, NAME);\n        hide(TypedArrayPrototype, VIEW, true);\n        hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);\n\n        if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {\n          dP(TypedArrayPrototype, TAG, {\n            get: function get() {\n              return NAME;\n            }\n          });\n        }\n\n        O[NAME] = TypedArray;\n        $export($export.G + $export.W + $export.F * (TypedArray != Base), O);\n        $export($export.S, NAME, {\n          BYTES_PER_ELEMENT: BYTES\n        });\n        $export($export.S + $export.F * fails(function () {\n          Base.of.call(TypedArray, 1);\n        }), NAME, {\n          from: $from,\n          of: $of\n        });\n        if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);\n        $export($export.P, NAME, proto);\n        setSpecies(NAME);\n        $export($export.P + $export.F * FORCED_SET, NAME, {\n          set: $set\n        });\n        $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);\n        if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;\n        $export($export.P + $export.F * fails(function () {\n          new TypedArray(1).slice();\n        }), NAME, {\n          slice: $slice\n        });\n        $export($export.P + $export.F * (fails(function () {\n          return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();\n        }) || !fails(function () {\n          TypedArrayPrototype.toLocaleString.call([1, 2]);\n        })), NAME, {\n          toLocaleString: $toLocaleString\n        });\n        Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;\n        if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);\n      };\n    } else module.exports = function () {\n      /* empty */\n    };\n  });\n\n  _typedArray('Int8', 1, function (init) {\n    return function Int8Array(data, byteOffset, length) {\n      return init(this, data, byteOffset, length);\n    };\n  });\n\n  _typedArray('Uint8', 1, function (init) {\n    return function Uint8Array(data, byteOffset, length) {\n      return init(this, data, byteOffset, length);\n    };\n  });\n\n  _typedArray('Uint8', 1, function (init) {\n    return function Uint8ClampedArray(data, byteOffset, length) {\n      return init(this, data, byteOffset, length);\n    };\n  }, true);\n\n  _typedArray('Int16', 2, function (init) {\n    return function Int16Array(data, byteOffset, length) {\n      return init(this, data, byteOffset, length);\n    };\n  });\n\n  _typedArray('Uint16', 2, function (init) {\n    return function Uint16Array(data, byteOffset, length) {\n      return init(this, data, byteOffset, length);\n    };\n  });\n\n  _typedArray('Int32', 4, function (init) {\n    return function Int32Array(data, byteOffset, length) {\n      return init(this, data, byteOffset, length);\n    };\n  });\n\n  _typedArray('Uint32', 4, function (init) {\n    return function Uint32Array(data, byteOffset, length) {\n      return init(this, data, byteOffset, length);\n    };\n  });\n\n  _typedArray('Float32', 4, function (init) {\n    return function Float32Array(data, byteOffset, length) {\n      return init(this, data, byteOffset, length);\n    };\n  });\n\n  _typedArray('Float64', 8, function (init) {\n    return function Float64Array(data, byteOffset, length) {\n      return init(this, data, byteOffset, length);\n    };\n  }); // 26.1.1 Reflect.apply(target, thisArgument, argumentsList)\n\n\n  var rApply = (_global.Reflect || {}).apply;\n  var fApply = Function.apply; // MS Edge argumentsList argument is optional\n\n  _export(_export.S + _export.F * !_fails(function () {\n    rApply(function () {\n      /* empty */\n    });\n  }), 'Reflect', {\n    apply: function apply(target, thisArgument, argumentsList) {\n      var T = _aFunction(target);\n\n      var L = _anObject(argumentsList);\n\n      return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);\n    }\n  }); // 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\n\n\n  var rConstruct = (_global.Reflect || {}).construct; // MS Edge supports only 2 arguments and argumentsList argument is optional\n  // FF Nightly sets third argument as `new.target`, but does not create `this` from it\n\n  var NEW_TARGET_BUG = _fails(function () {\n    function F() {\n      /* empty */\n    }\n\n    return !(rConstruct(function () {\n      /* empty */\n    }, [], F) instanceof F);\n  });\n\n  var ARGS_BUG = !_fails(function () {\n    rConstruct(function () {\n      /* empty */\n    });\n  });\n\n  _export(_export.S + _export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {\n    construct: function construct(Target, args\n    /* , newTarget */\n    ) {\n      _aFunction(Target);\n\n      _anObject(args);\n\n      var newTarget = arguments.length < 3 ? Target : _aFunction(arguments[2]);\n      if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);\n\n      if (Target == newTarget) {\n        // w/o altered newTarget, optimization for 0-4 arguments\n        switch (args.length) {\n          case 0:\n            return new Target();\n\n          case 1:\n            return new Target(args[0]);\n\n          case 2:\n            return new Target(args[0], args[1]);\n\n          case 3:\n            return new Target(args[0], args[1], args[2]);\n\n          case 4:\n            return new Target(args[0], args[1], args[2], args[3]);\n        } // w/o altered newTarget, lot of arguments case\n\n\n        var $args = [null];\n        $args.push.apply($args, args);\n        return new (_bind.apply(Target, $args))();\n      } // with altered newTarget, not support built-in constructors\n\n\n      var proto = newTarget.prototype;\n\n      var instance = _objectCreate(_isObject(proto) ? proto : Object.prototype);\n\n      var result = Function.apply.call(Target, instance, args);\n      return _isObject(result) ? result : instance;\n    }\n  }); // 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)\n  // MS Edge has broken Reflect.defineProperty - throwing instead of returning false\n\n\n  _export(_export.S + _export.F * _fails(function () {\n    // eslint-disable-next-line no-undef\n    Reflect.defineProperty(_objectDp.f({}, 1, {\n      value: 1\n    }), 1, {\n      value: 2\n    });\n  }), 'Reflect', {\n    defineProperty: function defineProperty(target, propertyKey, attributes) {\n      _anObject(target);\n\n      propertyKey = _toPrimitive(propertyKey, true);\n\n      _anObject(attributes);\n\n      try {\n        _objectDp.f(target, propertyKey, attributes);\n\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n  }); // 26.1.4 Reflect.deleteProperty(target, propertyKey)\n\n\n  var gOPD$3 = _objectGopd.f;\n\n  _export(_export.S, 'Reflect', {\n    deleteProperty: function deleteProperty(target, propertyKey) {\n      var desc = gOPD$3(_anObject(target), propertyKey);\n      return desc && !desc.configurable ? false : delete target[propertyKey];\n    }\n  }); // 26.1.5 Reflect.enumerate(target)\n\n\n  var Enumerate = function Enumerate(iterated) {\n    this._t = _anObject(iterated); // target\n\n    this._i = 0; // next index\n\n    var keys = this._k = []; // keys\n\n    var key;\n\n    for (key in iterated) {\n      keys.push(key);\n    }\n  };\n\n  _iterCreate(Enumerate, 'Object', function () {\n    var that = this;\n    var keys = that._k;\n    var key;\n\n    do {\n      if (that._i >= keys.length) return {\n        value: undefined,\n        done: true\n      };\n    } while (!((key = keys[that._i++]) in that._t));\n\n    return {\n      value: key,\n      done: false\n    };\n  });\n\n  _export(_export.S, 'Reflect', {\n    enumerate: function enumerate(target) {\n      return new Enumerate(target);\n    }\n  }); // 26.1.6 Reflect.get(target, propertyKey [, receiver])\n\n\n  function get(target, propertyKey\n  /* , receiver */\n  ) {\n    var receiver = arguments.length < 3 ? target : arguments[2];\n    var desc, proto;\n    if (_anObject(target) === receiver) return target[propertyKey];\n    if (desc = _objectGopd.f(target, propertyKey)) return _has(desc, 'value') ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;\n    if (_isObject(proto = _objectGpo(target))) return get(proto, propertyKey, receiver);\n  }\n\n  _export(_export.S, 'Reflect', {\n    get: get\n  }); // 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)\n\n\n  _export(_export.S, 'Reflect', {\n    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {\n      return _objectGopd.f(_anObject(target), propertyKey);\n    }\n  }); // 26.1.8 Reflect.getPrototypeOf(target)\n\n\n  _export(_export.S, 'Reflect', {\n    getPrototypeOf: function getPrototypeOf(target) {\n      return _objectGpo(_anObject(target));\n    }\n  }); // 26.1.9 Reflect.has(target, propertyKey)\n\n\n  _export(_export.S, 'Reflect', {\n    has: function has(target, propertyKey) {\n      return propertyKey in target;\n    }\n  }); // 26.1.10 Reflect.isExtensible(target)\n\n\n  var $isExtensible = Object.isExtensible;\n\n  _export(_export.S, 'Reflect', {\n    isExtensible: function isExtensible(target) {\n      _anObject(target);\n\n      return $isExtensible ? $isExtensible(target) : true;\n    }\n  }); // all object keys, includes non-enumerable and symbols\n\n\n  var Reflect$1 = _global.Reflect;\n\n  var _ownKeys = Reflect$1 && Reflect$1.ownKeys || function ownKeys(it) {\n    var keys = _objectGopn.f(_anObject(it));\n\n    var getSymbols = _objectGops.f;\n    return getSymbols ? keys.concat(getSymbols(it)) : keys;\n  }; // 26.1.11 Reflect.ownKeys(target)\n\n\n  _export(_export.S, 'Reflect', {\n    ownKeys: _ownKeys\n  }); // 26.1.12 Reflect.preventExtensions(target)\n\n\n  var $preventExtensions = Object.preventExtensions;\n\n  _export(_export.S, 'Reflect', {\n    preventExtensions: function preventExtensions(target) {\n      _anObject(target);\n\n      try {\n        if ($preventExtensions) $preventExtensions(target);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n  }); // 26.1.13 Reflect.set(target, propertyKey, V [, receiver])\n\n\n  function set(target, propertyKey, V\n  /* , receiver */\n  ) {\n    var receiver = arguments.length < 4 ? target : arguments[3];\n\n    var ownDesc = _objectGopd.f(_anObject(target), propertyKey);\n\n    var existingDescriptor, proto;\n\n    if (!ownDesc) {\n      if (_isObject(proto = _objectGpo(target))) {\n        return set(proto, propertyKey, V, receiver);\n      }\n\n      ownDesc = _propertyDesc(0);\n    }\n\n    if (_has(ownDesc, 'value')) {\n      if (ownDesc.writable === false || !_isObject(receiver)) return false;\n\n      if (existingDescriptor = _objectGopd.f(receiver, propertyKey)) {\n        if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;\n        existingDescriptor.value = V;\n\n        _objectDp.f(receiver, propertyKey, existingDescriptor);\n      } else _objectDp.f(receiver, propertyKey, _propertyDesc(0, V));\n\n      return true;\n    }\n\n    return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);\n  }\n\n  _export(_export.S, 'Reflect', {\n    set: set\n  }); // 26.1.14 Reflect.setPrototypeOf(target, proto)\n\n\n  if (_setProto) _export(_export.S, 'Reflect', {\n    setPrototypeOf: function setPrototypeOf(target, proto) {\n      _setProto.check(target, proto);\n\n      try {\n        _setProto.set(target, proto);\n\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n  }); // https://github.com/tc39/Array.prototype.includes\n\n  var $includes = _arrayIncludes(true);\n\n  _export(_export.P, 'Array', {\n    includes: function includes(el\n    /* , fromIndex = 0 */\n    ) {\n      return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n    }\n  });\n\n  _addToUnscopables('includes'); // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\n\n\n  var IS_CONCAT_SPREADABLE = _wks('isConcatSpreadable');\n\n  function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {\n    var targetIndex = start;\n    var sourceIndex = 0;\n    var mapFn = mapper ? _ctx(mapper, thisArg, 3) : false;\n    var element, spreadable;\n\n    while (sourceIndex < sourceLen) {\n      if (sourceIndex in source) {\n        element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n        spreadable = false;\n\n        if (_isObject(element)) {\n          spreadable = element[IS_CONCAT_SPREADABLE];\n          spreadable = spreadable !== undefined ? !!spreadable : _isArray(element);\n        }\n\n        if (spreadable && depth > 0) {\n          targetIndex = flattenIntoArray(target, original, element, _toLength(element.length), targetIndex, depth - 1) - 1;\n        } else {\n          if (targetIndex >= 0x1fffffffffffff) throw TypeError();\n          target[targetIndex] = element;\n        }\n\n        targetIndex++;\n      }\n\n      sourceIndex++;\n    }\n\n    return targetIndex;\n  }\n\n  var _flattenIntoArray = flattenIntoArray; // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap\n\n  _export(_export.P, 'Array', {\n    flatMap: function flatMap(callbackfn\n    /* , thisArg */\n    ) {\n      var O = _toObject(this);\n\n      var sourceLen, A;\n\n      _aFunction(callbackfn);\n\n      sourceLen = _toLength(O.length);\n      A = _arraySpeciesCreate(O, 0);\n\n      _flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);\n\n      return A;\n    }\n  });\n\n  _addToUnscopables('flatMap'); // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten\n\n\n  _export(_export.P, 'Array', {\n    flatten: function flatten()\n    /* depthArg = 1 */\n    {\n      var depthArg = arguments[0];\n\n      var O = _toObject(this);\n\n      var sourceLen = _toLength(O.length);\n\n      var A = _arraySpeciesCreate(O, 0);\n\n      _flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : _toInteger(depthArg));\n\n      return A;\n    }\n  });\n\n  _addToUnscopables('flatten'); // https://github.com/mathiasbynens/String.prototype.at\n\n\n  var $at$2 = _stringAt(true);\n\n  var FORCED = _fails(function () {\n    return '𠮷'.at(0) !== '𠮷';\n  });\n\n  _export(_export.P + _export.F * FORCED, 'String', {\n    at: function at(pos) {\n      return $at$2(this, pos);\n    }\n  }); // https://github.com/tc39/proposal-string-pad-start-end\n\n\n  var _stringPad = function _stringPad(that, maxLength, fillString, left) {\n    var S = String(_defined(that));\n    var stringLength = S.length;\n    var fillStr = fillString === undefined ? ' ' : String(fillString);\n\n    var intMaxLength = _toLength(maxLength);\n\n    if (intMaxLength <= stringLength || fillStr == '') return S;\n    var fillLen = intMaxLength - stringLength;\n\n    var stringFiller = _stringRepeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n\n    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n    return left ? stringFiller + S : S + stringFiller;\n  }; // https://github.com/tc39/proposal-string-pad-start-end\n  // https://github.com/zloirock/core-js/issues/280\n\n\n  var WEBKIT_BUG = /Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//.test(_userAgent);\n\n  _export(_export.P + _export.F * WEBKIT_BUG, 'String', {\n    padStart: function padStart(maxLength\n    /* , fillString = ' ' */\n    ) {\n      return _stringPad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\n    }\n  }); // https://github.com/tc39/proposal-string-pad-start-end\n  // https://github.com/zloirock/core-js/issues/280\n\n\n  var WEBKIT_BUG$1 = /Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//.test(_userAgent);\n\n  _export(_export.P + _export.F * WEBKIT_BUG$1, 'String', {\n    padEnd: function padEnd(maxLength\n    /* , fillString = ' ' */\n    ) {\n      return _stringPad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);\n    }\n  }); // https://github.com/sebmarkbage/ecmascript-string-left-right-trim\n\n\n  _stringTrim('trimLeft', function ($trim) {\n    return function trimLeft() {\n      return $trim(this, 1);\n    };\n  }, 'trimStart'); // https://github.com/sebmarkbage/ecmascript-string-left-right-trim\n\n\n  _stringTrim('trimRight', function ($trim) {\n    return function trimRight() {\n      return $trim(this, 2);\n    };\n  }, 'trimEnd'); // https://tc39.github.io/String.prototype.matchAll/\n\n\n  var RegExpProto = RegExp.prototype;\n\n  var $RegExpStringIterator = function $RegExpStringIterator(regexp, string) {\n    this._r = regexp;\n    this._s = string;\n  };\n\n  _iterCreate($RegExpStringIterator, 'RegExp String', function next() {\n    var match = this._r.exec(this._s);\n\n    return {\n      value: match,\n      done: match === null\n    };\n  });\n\n  _export(_export.P, 'String', {\n    matchAll: function matchAll(regexp) {\n      _defined(this);\n\n      if (!_isRegexp(regexp)) throw TypeError(regexp + ' is not a regexp!');\n      var S = String(this);\n      var flags = 'flags' in RegExpProto ? String(regexp.flags) : _flags.call(regexp);\n      var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);\n      rx.lastIndex = _toLength(regexp.lastIndex);\n      return new $RegExpStringIterator(rx, S);\n    }\n  });\n\n  _wksDefine('asyncIterator');\n\n  _wksDefine('observable'); // https://github.com/tc39/proposal-object-getownpropertydescriptors\n\n\n  _export(_export.S, 'Object', {\n    getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {\n      var O = _toIobject(object);\n\n      var getDesc = _objectGopd.f;\n\n      var keys = _ownKeys(O);\n\n      var result = {};\n      var i = 0;\n      var key, desc;\n\n      while (keys.length > i) {\n        desc = getDesc(O, key = keys[i++]);\n        if (desc !== undefined) _createProperty(result, key, desc);\n      }\n\n      return result;\n    }\n  });\n\n  var isEnum$1 = _objectPie.f;\n\n  var _objectToArray = function _objectToArray(isEntries) {\n    return function (it) {\n      var O = _toIobject(it);\n\n      var keys = _objectKeys(O);\n\n      var length = keys.length;\n      var i = 0;\n      var result = [];\n      var key;\n\n      while (length > i) {\n        key = keys[i++];\n\n        if (!_descriptors || isEnum$1.call(O, key)) {\n          result.push(isEntries ? [key, O[key]] : O[key]);\n        }\n      }\n\n      return result;\n    };\n  }; // https://github.com/tc39/proposal-object-values-entries\n\n\n  var $values = _objectToArray(false);\n\n  _export(_export.S, 'Object', {\n    values: function values(it) {\n      return $values(it);\n    }\n  }); // https://github.com/tc39/proposal-object-values-entries\n\n\n  var $entries = _objectToArray(true);\n\n  _export(_export.S, 'Object', {\n    entries: function entries(it) {\n      return $entries(it);\n    }\n  }); // Forced replacement prototype accessors methods\n\n\n  var _objectForcedPam = !_fails(function () {\n    var K = Math.random(); // In FF throws only define methods\n    // eslint-disable-next-line no-undef, no-useless-call\n\n    __defineSetter__.call(null, K, function () {\n      /* empty */\n    });\n\n    delete _global[K];\n  }); // B.2.2.2 Object.prototype.__defineGetter__(P, getter)\n\n\n  _descriptors && _export(_export.P + _objectForcedPam, 'Object', {\n    __defineGetter__: function __defineGetter__(P, getter) {\n      _objectDp.f(_toObject(this), P, {\n        get: _aFunction(getter),\n        enumerable: true,\n        configurable: true\n      });\n    }\n  }); // B.2.2.3 Object.prototype.__defineSetter__(P, setter)\n\n  _descriptors && _export(_export.P + _objectForcedPam, 'Object', {\n    __defineSetter__: function __defineSetter__(P, setter) {\n      _objectDp.f(_toObject(this), P, {\n        set: _aFunction(setter),\n        enumerable: true,\n        configurable: true\n      });\n    }\n  });\n  var getOwnPropertyDescriptor = _objectGopd.f; // B.2.2.4 Object.prototype.__lookupGetter__(P)\n\n  _descriptors && _export(_export.P + _objectForcedPam, 'Object', {\n    __lookupGetter__: function __lookupGetter__(P) {\n      var O = _toObject(this);\n\n      var K = _toPrimitive(P, true);\n\n      var D;\n\n      do {\n        if (D = getOwnPropertyDescriptor(O, K)) return D.get;\n      } while (O = _objectGpo(O));\n    }\n  });\n  var getOwnPropertyDescriptor$1 = _objectGopd.f; // B.2.2.5 Object.prototype.__lookupSetter__(P)\n\n  _descriptors && _export(_export.P + _objectForcedPam, 'Object', {\n    __lookupSetter__: function __lookupSetter__(P) {\n      var O = _toObject(this);\n\n      var K = _toPrimitive(P, true);\n\n      var D;\n\n      do {\n        if (D = getOwnPropertyDescriptor$1(O, K)) return D.set;\n      } while (O = _objectGpo(O));\n    }\n  });\n\n  var _arrayFromIterable = function _arrayFromIterable(iter, ITERATOR) {\n    var result = [];\n\n    _forOf(iter, false, result.push, result, ITERATOR);\n\n    return result;\n  }; // https://github.com/DavidBruant/Map-Set.prototype.toJSON\n\n\n  var _collectionToJson = function _collectionToJson(NAME) {\n    return function toJSON() {\n      if (_classof(this) != NAME) throw TypeError(NAME + \"#toJSON isn't generic\");\n      return _arrayFromIterable(this);\n    };\n  }; // https://github.com/DavidBruant/Map-Set.prototype.toJSON\n\n\n  _export(_export.P + _export.R, 'Map', {\n    toJSON: _collectionToJson('Map')\n  }); // https://github.com/DavidBruant/Map-Set.prototype.toJSON\n\n\n  _export(_export.P + _export.R, 'Set', {\n    toJSON: _collectionToJson('Set')\n  }); // https://tc39.github.io/proposal-setmap-offrom/\n\n\n  var _setCollectionOf = function _setCollectionOf(COLLECTION) {\n    _export(_export.S, COLLECTION, {\n      of: function of() {\n        var length = arguments.length;\n        var A = new Array(length);\n\n        while (length--) {\n          A[length] = arguments[length];\n        }\n\n        return new this(A);\n      }\n    });\n  }; // https://tc39.github.io/proposal-setmap-offrom/#sec-map.of\n\n\n  _setCollectionOf('Map'); // https://tc39.github.io/proposal-setmap-offrom/#sec-set.of\n\n\n  _setCollectionOf('Set'); // https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of\n\n\n  _setCollectionOf('WeakMap'); // https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of\n\n\n  _setCollectionOf('WeakSet'); // https://tc39.github.io/proposal-setmap-offrom/\n\n\n  var _setCollectionFrom = function _setCollectionFrom(COLLECTION) {\n    _export(_export.S, COLLECTION, {\n      from: function from(source\n      /* , mapFn, thisArg */\n      ) {\n        var mapFn = arguments[1];\n        var mapping, A, n, cb;\n\n        _aFunction(this);\n\n        mapping = mapFn !== undefined;\n        if (mapping) _aFunction(mapFn);\n        if (source == undefined) return new this();\n        A = [];\n\n        if (mapping) {\n          n = 0;\n          cb = _ctx(mapFn, arguments[2], 2);\n\n          _forOf(source, false, function (nextItem) {\n            A.push(cb(nextItem, n++));\n          });\n        } else {\n          _forOf(source, false, A.push, A);\n        }\n\n        return new this(A);\n      }\n    });\n  }; // https://tc39.github.io/proposal-setmap-offrom/#sec-map.from\n\n\n  _setCollectionFrom('Map'); // https://tc39.github.io/proposal-setmap-offrom/#sec-set.from\n\n\n  _setCollectionFrom('Set'); // https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from\n\n\n  _setCollectionFrom('WeakMap'); // https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from\n\n\n  _setCollectionFrom('WeakSet'); // https://github.com/tc39/proposal-global\n\n\n  _export(_export.G, {\n    global: _global\n  }); // https://github.com/tc39/proposal-global\n\n\n  _export(_export.S, 'System', {\n    global: _global\n  }); // https://github.com/ljharb/proposal-is-error\n\n\n  _export(_export.S, 'Error', {\n    isError: function isError(it) {\n      return _cof(it) === 'Error';\n    }\n  }); // https://rwaldron.github.io/proposal-math-extensions/\n\n\n  _export(_export.S, 'Math', {\n    clamp: function clamp(x, lower, upper) {\n      return Math.min(upper, Math.max(lower, x));\n    }\n  }); // https://rwaldron.github.io/proposal-math-extensions/\n\n\n  _export(_export.S, 'Math', {\n    DEG_PER_RAD: Math.PI / 180\n  }); // https://rwaldron.github.io/proposal-math-extensions/\n\n\n  var RAD_PER_DEG = 180 / Math.PI;\n\n  _export(_export.S, 'Math', {\n    degrees: function degrees(radians) {\n      return radians * RAD_PER_DEG;\n    }\n  }); // https://rwaldron.github.io/proposal-math-extensions/\n\n\n  var _mathScale = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {\n    if (arguments.length === 0 // eslint-disable-next-line no-self-compare\n    || x != x // eslint-disable-next-line no-self-compare\n    || inLow != inLow // eslint-disable-next-line no-self-compare\n    || inHigh != inHigh // eslint-disable-next-line no-self-compare\n    || outLow != outLow // eslint-disable-next-line no-self-compare\n    || outHigh != outHigh) return NaN;\n    if (x === Infinity || x === -Infinity) return x;\n    return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;\n  }; // https://rwaldron.github.io/proposal-math-extensions/\n\n\n  _export(_export.S, 'Math', {\n    fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {\n      return _mathFround(_mathScale(x, inLow, inHigh, outLow, outHigh));\n    }\n  }); // https://gist.github.com/BrendanEich/4294d5c212a6d2254703\n\n\n  _export(_export.S, 'Math', {\n    iaddh: function iaddh(x0, x1, y0, y1) {\n      var $x0 = x0 >>> 0;\n      var $x1 = x1 >>> 0;\n      var $y0 = y0 >>> 0;\n      return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;\n    }\n  }); // https://gist.github.com/BrendanEich/4294d5c212a6d2254703\n\n\n  _export(_export.S, 'Math', {\n    isubh: function isubh(x0, x1, y0, y1) {\n      var $x0 = x0 >>> 0;\n      var $x1 = x1 >>> 0;\n      var $y0 = y0 >>> 0;\n      return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;\n    }\n  }); // https://gist.github.com/BrendanEich/4294d5c212a6d2254703\n\n\n  _export(_export.S, 'Math', {\n    imulh: function imulh(u, v) {\n      var UINT16 = 0xffff;\n      var $u = +u;\n      var $v = +v;\n      var u0 = $u & UINT16;\n      var v0 = $v & UINT16;\n      var u1 = $u >> 16;\n      var v1 = $v >> 16;\n      var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);\n      return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);\n    }\n  }); // https://rwaldron.github.io/proposal-math-extensions/\n\n\n  _export(_export.S, 'Math', {\n    RAD_PER_DEG: 180 / Math.PI\n  }); // https://rwaldron.github.io/proposal-math-extensions/\n\n\n  var DEG_PER_RAD = Math.PI / 180;\n\n  _export(_export.S, 'Math', {\n    radians: function radians(degrees) {\n      return degrees * DEG_PER_RAD;\n    }\n  }); // https://rwaldron.github.io/proposal-math-extensions/\n\n\n  _export(_export.S, 'Math', {\n    scale: _mathScale\n  }); // https://gist.github.com/BrendanEich/4294d5c212a6d2254703\n\n\n  _export(_export.S, 'Math', {\n    umulh: function umulh(u, v) {\n      var UINT16 = 0xffff;\n      var $u = +u;\n      var $v = +v;\n      var u0 = $u & UINT16;\n      var v0 = $v & UINT16;\n      var u1 = $u >>> 16;\n      var v1 = $v >>> 16;\n      var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);\n      return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);\n    }\n  }); // http://jfbastien.github.io/papers/Math.signbit.html\n\n\n  _export(_export.S, 'Math', {\n    signbit: function signbit(x) {\n      // eslint-disable-next-line no-self-compare\n      return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;\n    }\n  });\n\n  _export(_export.P + _export.R, 'Promise', {\n    'finally': function _finally(onFinally) {\n      var C = _speciesConstructor(this, _core.Promise || _global.Promise);\n\n      var isFunction = typeof onFinally == 'function';\n      return this.then(isFunction ? function (x) {\n        return _promiseResolve(C, onFinally()).then(function () {\n          return x;\n        });\n      } : onFinally, isFunction ? function (e) {\n        return _promiseResolve(C, onFinally()).then(function () {\n          throw e;\n        });\n      } : onFinally);\n    }\n  }); // https://github.com/tc39/proposal-promise-try\n\n\n  _export(_export.S, 'Promise', {\n    'try': function _try(callbackfn) {\n      var promiseCapability = _newPromiseCapability.f(this);\n\n      var result = _perform(callbackfn);\n\n      (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);\n      return promiseCapability.promise;\n    }\n  });\n\n  var shared$1 = _shared('metadata');\n\n  var store = shared$1.store || (shared$1.store = new es6_weakMap());\n\n  var getOrCreateMetadataMap = function getOrCreateMetadataMap(target, targetKey, create) {\n    var targetMetadata = store.get(target);\n\n    if (!targetMetadata) {\n      if (!create) return undefined;\n      store.set(target, targetMetadata = new es6_map());\n    }\n\n    var keyMetadata = targetMetadata.get(targetKey);\n\n    if (!keyMetadata) {\n      if (!create) return undefined;\n      targetMetadata.set(targetKey, keyMetadata = new es6_map());\n    }\n\n    return keyMetadata;\n  };\n\n  var ordinaryHasOwnMetadata = function ordinaryHasOwnMetadata(MetadataKey, O, P) {\n    var metadataMap = getOrCreateMetadataMap(O, P, false);\n    return metadataMap === undefined ? false : metadataMap.has(MetadataKey);\n  };\n\n  var ordinaryGetOwnMetadata = function ordinaryGetOwnMetadata(MetadataKey, O, P) {\n    var metadataMap = getOrCreateMetadataMap(O, P, false);\n    return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);\n  };\n\n  var ordinaryDefineOwnMetadata = function ordinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n    getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);\n  };\n\n  var ordinaryOwnMetadataKeys = function ordinaryOwnMetadataKeys(target, targetKey) {\n    var metadataMap = getOrCreateMetadataMap(target, targetKey, false);\n    var keys = [];\n    if (metadataMap) metadataMap.forEach(function (_, key) {\n      keys.push(key);\n    });\n    return keys;\n  };\n\n  var toMetaKey = function toMetaKey(it) {\n    return it === undefined || _typeof2(it) == 'symbol' ? it : String(it);\n  };\n\n  var exp$3 = function exp$3(O) {\n    _export(_export.S, 'Reflect', O);\n  };\n\n  var _metadata = {\n    store: store,\n    map: getOrCreateMetadataMap,\n    has: ordinaryHasOwnMetadata,\n    get: ordinaryGetOwnMetadata,\n    set: ordinaryDefineOwnMetadata,\n    keys: ordinaryOwnMetadataKeys,\n    key: toMetaKey,\n    exp: exp$3\n  };\n  var toMetaKey$1 = _metadata.key;\n  var ordinaryDefineOwnMetadata$1 = _metadata.set;\n\n  _metadata.exp({\n    defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {\n      ordinaryDefineOwnMetadata$1(metadataKey, metadataValue, _anObject(target), toMetaKey$1(targetKey));\n    }\n  });\n\n  var toMetaKey$2 = _metadata.key;\n  var getOrCreateMetadataMap$1 = _metadata.map;\n  var store$1 = _metadata.store;\n\n  _metadata.exp({\n    deleteMetadata: function deleteMetadata(metadataKey, target\n    /* , targetKey */\n    ) {\n      var targetKey = arguments.length < 3 ? undefined : toMetaKey$2(arguments[2]);\n      var metadataMap = getOrCreateMetadataMap$1(_anObject(target), targetKey, false);\n      if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;\n      if (metadataMap.size) return true;\n      var targetMetadata = store$1.get(target);\n      targetMetadata['delete'](targetKey);\n      return !!targetMetadata.size || store$1['delete'](target);\n    }\n  });\n\n  var ordinaryHasOwnMetadata$1 = _metadata.has;\n  var ordinaryGetOwnMetadata$1 = _metadata.get;\n  var toMetaKey$3 = _metadata.key;\n\n  var ordinaryGetMetadata = function ordinaryGetMetadata(MetadataKey, O, P) {\n    var hasOwn = ordinaryHasOwnMetadata$1(MetadataKey, O, P);\n    if (hasOwn) return ordinaryGetOwnMetadata$1(MetadataKey, O, P);\n\n    var parent = _objectGpo(O);\n\n    return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;\n  };\n\n  _metadata.exp({\n    getMetadata: function getMetadata(metadataKey, target\n    /* , targetKey */\n    ) {\n      return ordinaryGetMetadata(metadataKey, _anObject(target), arguments.length < 3 ? undefined : toMetaKey$3(arguments[2]));\n    }\n  });\n\n  var ordinaryOwnMetadataKeys$1 = _metadata.keys;\n  var toMetaKey$4 = _metadata.key;\n\n  var ordinaryMetadataKeys = function ordinaryMetadataKeys(O, P) {\n    var oKeys = ordinaryOwnMetadataKeys$1(O, P);\n\n    var parent = _objectGpo(O);\n\n    if (parent === null) return oKeys;\n    var pKeys = ordinaryMetadataKeys(parent, P);\n    return pKeys.length ? oKeys.length ? _arrayFromIterable(new es6_set(oKeys.concat(pKeys))) : pKeys : oKeys;\n  };\n\n  _metadata.exp({\n    getMetadataKeys: function getMetadataKeys(target\n    /* , targetKey */\n    ) {\n      return ordinaryMetadataKeys(_anObject(target), arguments.length < 2 ? undefined : toMetaKey$4(arguments[1]));\n    }\n  });\n\n  var ordinaryGetOwnMetadata$2 = _metadata.get;\n  var toMetaKey$5 = _metadata.key;\n\n  _metadata.exp({\n    getOwnMetadata: function getOwnMetadata(metadataKey, target\n    /* , targetKey */\n    ) {\n      return ordinaryGetOwnMetadata$2(metadataKey, _anObject(target), arguments.length < 3 ? undefined : toMetaKey$5(arguments[2]));\n    }\n  });\n\n  var ordinaryOwnMetadataKeys$2 = _metadata.keys;\n  var toMetaKey$6 = _metadata.key;\n\n  _metadata.exp({\n    getOwnMetadataKeys: function getOwnMetadataKeys(target\n    /* , targetKey */\n    ) {\n      return ordinaryOwnMetadataKeys$2(_anObject(target), arguments.length < 2 ? undefined : toMetaKey$6(arguments[1]));\n    }\n  });\n\n  var ordinaryHasOwnMetadata$2 = _metadata.has;\n  var toMetaKey$7 = _metadata.key;\n\n  var ordinaryHasMetadata = function ordinaryHasMetadata(MetadataKey, O, P) {\n    var hasOwn = ordinaryHasOwnMetadata$2(MetadataKey, O, P);\n    if (hasOwn) return true;\n\n    var parent = _objectGpo(O);\n\n    return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;\n  };\n\n  _metadata.exp({\n    hasMetadata: function hasMetadata(metadataKey, target\n    /* , targetKey */\n    ) {\n      return ordinaryHasMetadata(metadataKey, _anObject(target), arguments.length < 3 ? undefined : toMetaKey$7(arguments[2]));\n    }\n  });\n\n  var ordinaryHasOwnMetadata$3 = _metadata.has;\n  var toMetaKey$8 = _metadata.key;\n\n  _metadata.exp({\n    hasOwnMetadata: function hasOwnMetadata(metadataKey, target\n    /* , targetKey */\n    ) {\n      return ordinaryHasOwnMetadata$3(metadataKey, _anObject(target), arguments.length < 3 ? undefined : toMetaKey$8(arguments[2]));\n    }\n  });\n\n  var toMetaKey$9 = _metadata.key;\n  var ordinaryDefineOwnMetadata$2 = _metadata.set;\n\n  _metadata.exp({\n    metadata: function metadata(metadataKey, metadataValue) {\n      return function decorator(target, targetKey) {\n        ordinaryDefineOwnMetadata$2(metadataKey, metadataValue, (targetKey !== undefined ? _anObject : _aFunction)(target), toMetaKey$9(targetKey));\n      };\n    }\n  }); // https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask\n\n\n  var microtask$1 = _microtask();\n\n  var process$3 = _global.process;\n  var isNode$2 = _cof(process$3) == 'process';\n\n  _export(_export.G, {\n    asap: function asap(fn) {\n      var domain = isNode$2 && process$3.domain;\n      microtask$1(domain ? domain.bind(fn) : fn);\n    }\n  }); // https://github.com/zenparsing/es-observable\n\n\n  var microtask$2 = _microtask();\n\n  var OBSERVABLE = _wks('observable');\n\n  var RETURN = _forOf.RETURN;\n\n  var getMethod = function getMethod(fn) {\n    return fn == null ? undefined : _aFunction(fn);\n  };\n\n  var cleanupSubscription = function cleanupSubscription(subscription) {\n    var cleanup = subscription._c;\n\n    if (cleanup) {\n      subscription._c = undefined;\n      cleanup();\n    }\n  };\n\n  var subscriptionClosed = function subscriptionClosed(subscription) {\n    return subscription._o === undefined;\n  };\n\n  var closeSubscription = function closeSubscription(subscription) {\n    if (!subscriptionClosed(subscription)) {\n      subscription._o = undefined;\n      cleanupSubscription(subscription);\n    }\n  };\n\n  var Subscription = function Subscription(observer, subscriber) {\n    _anObject(observer);\n\n    this._c = undefined;\n    this._o = observer;\n    observer = new SubscriptionObserver(this);\n\n    try {\n      var cleanup = subscriber(observer);\n      var subscription = cleanup;\n\n      if (cleanup != null) {\n        if (typeof cleanup.unsubscribe === 'function') cleanup = function cleanup() {\n          subscription.unsubscribe();\n        };else _aFunction(cleanup);\n        this._c = cleanup;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    if (subscriptionClosed(this)) cleanupSubscription(this);\n  };\n\n  Subscription.prototype = _redefineAll({}, {\n    unsubscribe: function unsubscribe() {\n      closeSubscription(this);\n    }\n  });\n\n  var SubscriptionObserver = function SubscriptionObserver(subscription) {\n    this._s = subscription;\n  };\n\n  SubscriptionObserver.prototype = _redefineAll({}, {\n    next: function next(value) {\n      var subscription = this._s;\n\n      if (!subscriptionClosed(subscription)) {\n        var observer = subscription._o;\n\n        try {\n          var m = getMethod(observer.next);\n          if (m) return m.call(observer, value);\n        } catch (e) {\n          try {\n            closeSubscription(subscription);\n          } finally {\n            throw e;\n          }\n        }\n      }\n    },\n    error: function error(value) {\n      var subscription = this._s;\n      if (subscriptionClosed(subscription)) throw value;\n      var observer = subscription._o;\n      subscription._o = undefined;\n\n      try {\n        var m = getMethod(observer.error);\n        if (!m) throw value;\n        value = m.call(observer, value);\n      } catch (e) {\n        try {\n          cleanupSubscription(subscription);\n        } finally {\n          throw e;\n        }\n      }\n\n      cleanupSubscription(subscription);\n      return value;\n    },\n    complete: function complete(value) {\n      var subscription = this._s;\n\n      if (!subscriptionClosed(subscription)) {\n        var observer = subscription._o;\n        subscription._o = undefined;\n\n        try {\n          var m = getMethod(observer.complete);\n          value = m ? m.call(observer, value) : undefined;\n        } catch (e) {\n          try {\n            cleanupSubscription(subscription);\n          } finally {\n            throw e;\n          }\n        }\n\n        cleanupSubscription(subscription);\n        return value;\n      }\n    }\n  });\n\n  var $Observable = function Observable(subscriber) {\n    _anInstance(this, $Observable, 'Observable', '_f')._f = _aFunction(subscriber);\n  };\n\n  _redefineAll($Observable.prototype, {\n    subscribe: function subscribe(observer) {\n      return new Subscription(observer, this._f);\n    },\n    forEach: function forEach(fn) {\n      var that = this;\n      return new (_core.Promise || _global.Promise)(function (resolve, reject) {\n        _aFunction(fn);\n\n        var subscription = that.subscribe({\n          next: function next(value) {\n            try {\n              return fn(value);\n            } catch (e) {\n              reject(e);\n              subscription.unsubscribe();\n            }\n          },\n          error: reject,\n          complete: resolve\n        });\n      });\n    }\n  });\n\n  _redefineAll($Observable, {\n    from: function from(x) {\n      var C = typeof this === 'function' ? this : $Observable;\n      var method = getMethod(_anObject(x)[OBSERVABLE]);\n\n      if (method) {\n        var observable = _anObject(method.call(x));\n\n        return observable.constructor === C ? observable : new C(function (observer) {\n          return observable.subscribe(observer);\n        });\n      }\n\n      return new C(function (observer) {\n        var done = false;\n        microtask$2(function () {\n          if (!done) {\n            try {\n              if (_forOf(x, false, function (it) {\n                observer.next(it);\n                if (done) return RETURN;\n              }) === RETURN) return;\n            } catch (e) {\n              if (done) throw e;\n              observer.error(e);\n              return;\n            }\n\n            observer.complete();\n          }\n        });\n        return function () {\n          done = true;\n        };\n      });\n    },\n    of: function of() {\n      for (var i = 0, l = arguments.length, items = new Array(l); i < l;) {\n        items[i] = arguments[i++];\n      }\n\n      return new (typeof this === 'function' ? this : $Observable)(function (observer) {\n        var done = false;\n        microtask$2(function () {\n          if (!done) {\n            for (var j = 0; j < items.length; ++j) {\n              observer.next(items[j]);\n              if (done) return;\n            }\n\n            observer.complete();\n          }\n        });\n        return function () {\n          done = true;\n        };\n      });\n    }\n  });\n\n  _hide($Observable.prototype, OBSERVABLE, function () {\n    return this;\n  });\n\n  _export(_export.G, {\n    Observable: $Observable\n  });\n\n  _setSpecies('Observable'); // ie9- setTimeout & setInterval additional parameters fix\n\n\n  var slice = [].slice;\n  var MSIE = /MSIE .\\./.test(_userAgent); // <- dirty ie9- check\n\n  var wrap$1 = function wrap$1(set) {\n    return function (fn, time\n    /* , ...args */\n    ) {\n      var boundArgs = arguments.length > 2;\n      var args = boundArgs ? slice.call(arguments, 2) : false;\n      return set(boundArgs ? function () {\n        // eslint-disable-next-line no-new-func\n        (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);\n      } : fn, time);\n    };\n  };\n\n  _export(_export.G + _export.B + _export.F * MSIE, {\n    setTimeout: wrap$1(_global.setTimeout),\n    setInterval: wrap$1(_global.setInterval)\n  });\n\n  _export(_export.G + _export.B, {\n    setImmediate: _task.set,\n    clearImmediate: _task.clear\n  });\n\n  var ITERATOR$4 = _wks('iterator');\n\n  var TO_STRING_TAG = _wks('toStringTag');\n\n  var ArrayValues = _iterators.Array;\n  var DOMIterables = {\n    CSSRuleList: true,\n    // TODO: Not spec compliant, should be false.\n    CSSStyleDeclaration: false,\n    CSSValueList: false,\n    ClientRectList: false,\n    DOMRectList: false,\n    DOMStringList: false,\n    DOMTokenList: true,\n    DataTransferItemList: false,\n    FileList: false,\n    HTMLAllCollection: false,\n    HTMLCollection: false,\n    HTMLFormElement: false,\n    HTMLSelectElement: false,\n    MediaList: true,\n    // TODO: Not spec compliant, should be false.\n    MimeTypeArray: false,\n    NamedNodeMap: false,\n    NodeList: true,\n    PaintRequestList: false,\n    Plugin: false,\n    PluginArray: false,\n    SVGLengthList: false,\n    SVGNumberList: false,\n    SVGPathSegList: false,\n    SVGPointList: false,\n    SVGStringList: false,\n    SVGTransformList: false,\n    SourceBufferList: false,\n    StyleSheetList: true,\n    // TODO: Not spec compliant, should be false.\n    TextTrackCueList: false,\n    TextTrackList: false,\n    TouchList: false\n  };\n\n  for (var collections = _objectKeys(DOMIterables), i$2 = 0; i$2 < collections.length; i$2++) {\n    var NAME$1 = collections[i$2];\n    var explicit = DOMIterables[NAME$1];\n    var Collection = _global[NAME$1];\n    var proto$3 = Collection && Collection.prototype;\n    var key$1;\n\n    if (proto$3) {\n      if (!proto$3[ITERATOR$4]) _hide(proto$3, ITERATOR$4, ArrayValues);\n      if (!proto$3[TO_STRING_TAG]) _hide(proto$3, TO_STRING_TAG, NAME$1);\n      _iterators[NAME$1] = ArrayValues;\n      if (explicit) for (key$1 in es6_array_iterator) {\n        if (!proto$3[key$1]) _redefine(proto$3, key$1, es6_array_iterator[key$1], true);\n      }\n    }\n  }\n  /**\n   * Copyright (c) 2014-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n\n  createCommonjsModule(function (module) {\n    var runtime = function (exports) {\n      var Op = Object.prototype;\n      var hasOwn = Op.hasOwnProperty;\n      var undefined$1; // More compressible than void 0.\n\n      var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n      var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n      var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n      var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n      function define(obj, key, value) {\n        Object.defineProperty(obj, key, {\n          value: value,\n          enumerable: true,\n          configurable: true,\n          writable: true\n        });\n        return obj[key];\n      }\n\n      try {\n        // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n        define({}, \"\");\n      } catch (err) {\n        define = function define(obj, key, value) {\n          return obj[key] = value;\n        };\n      }\n\n      function wrap(innerFn, outerFn, self, tryLocsList) {\n        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n        var generator = Object.create(protoGenerator.prototype);\n        var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n        // .throw, and .return methods.\n\n        generator._invoke = makeInvokeMethod(innerFn, self, context);\n        return generator;\n      }\n\n      exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n      // record like context.tryEntries[i].completion. This interface could\n      // have been (and was previously) designed to take a closure to be\n      // invoked without arguments, but in all the cases we care about we\n      // already have an existing method we want to call, so there's no need\n      // to create a new function object. We can even get away with assuming\n      // the method takes exactly one argument, since that happens to be true\n      // in every case, so we don't have to touch the arguments object. The\n      // only additional allocation required is the completion record, which\n      // has a stable shape and so hopefully should be cheap to allocate.\n\n      function tryCatch(fn, obj, arg) {\n        try {\n          return {\n            type: \"normal\",\n            arg: fn.call(obj, arg)\n          };\n        } catch (err) {\n          return {\n            type: \"throw\",\n            arg: err\n          };\n        }\n      }\n\n      var GenStateSuspendedStart = \"suspendedStart\";\n      var GenStateSuspendedYield = \"suspendedYield\";\n      var GenStateExecuting = \"executing\";\n      var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n      // breaking out of the dispatch switch statement.\n\n      var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n      // .constructor.prototype properties for functions that return Generator\n      // objects. For full spec compliance, you may wish to configure your\n      // minifier not to mangle the names of these two functions.\n\n      function Generator() {}\n\n      function GeneratorFunction() {}\n\n      function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n      // don't natively support it.\n\n\n      var IteratorPrototype = {};\n\n      IteratorPrototype[iteratorSymbol] = function () {\n        return this;\n      };\n\n      var getProto = Object.getPrototypeOf;\n      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n        // This environment has a native %IteratorPrototype%; use it instead\n        // of the polyfill.\n        IteratorPrototype = NativeIteratorPrototype;\n      }\n\n      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n      GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n      GeneratorFunctionPrototype.constructor = GeneratorFunction;\n      GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"); // Helper for defining the .next, .throw, and .return methods of the\n      // Iterator interface in terms of a single ._invoke method.\n\n      function defineIteratorMethods(prototype) {\n        [\"next\", \"throw\", \"return\"].forEach(function (method) {\n          define(prototype, method, function (arg) {\n            return this._invoke(method, arg);\n          });\n        });\n      }\n\n      exports.isGeneratorFunction = function (genFun) {\n        var ctor = typeof genFun === \"function\" && genFun.constructor;\n        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n      };\n\n      exports.mark = function (genFun) {\n        if (Object.setPrototypeOf) {\n          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n        } else {\n          genFun.__proto__ = GeneratorFunctionPrototype;\n          define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n        }\n\n        genFun.prototype = Object.create(Gp);\n        return genFun;\n      }; // Within the body of any async function, `await x` is transformed to\n      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n      // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n      // meant to be awaited.\n\n\n      exports.awrap = function (arg) {\n        return {\n          __await: arg\n        };\n      };\n\n      function AsyncIterator(generator, PromiseImpl) {\n        function invoke(method, arg, resolve, reject) {\n          var record = tryCatch(generator[method], generator, arg);\n\n          if (record.type === \"throw\") {\n            reject(record.arg);\n          } else {\n            var result = record.arg;\n            var value = result.value;\n\n            if (value && _typeof2(value) === \"object\" && hasOwn.call(value, \"__await\")) {\n              return PromiseImpl.resolve(value.__await).then(function (value) {\n                invoke(\"next\", value, resolve, reject);\n              }, function (err) {\n                invoke(\"throw\", err, resolve, reject);\n              });\n            }\n\n            return PromiseImpl.resolve(value).then(function (unwrapped) {\n              // When a yielded Promise is resolved, its final value becomes\n              // the .value of the Promise<{value,done}> result for the\n              // current iteration.\n              result.value = unwrapped;\n              resolve(result);\n            }, function (error) {\n              // If a rejected Promise was yielded, throw the rejection back\n              // into the async generator function so it can be handled there.\n              return invoke(\"throw\", error, resolve, reject);\n            });\n          }\n        }\n\n        var previousPromise;\n\n        function enqueue(method, arg) {\n          function callInvokeWithMethodAndArg() {\n            return new PromiseImpl(function (resolve, reject) {\n              invoke(method, arg, resolve, reject);\n            });\n          }\n\n          return previousPromise = // If enqueue has been called before, then we want to wait until\n          // all previous Promises have been resolved before calling invoke,\n          // so that results are always delivered in the correct order. If\n          // enqueue has not been called before, then it is important to\n          // call invoke immediately, without waiting on a callback to fire,\n          // so that the async generator function has the opportunity to do\n          // any necessary setup in a predictable way. This predictability\n          // is why the Promise constructor synchronously invokes its\n          // executor callback, and why async functions synchronously\n          // execute code before the first await. Since we implement simple\n          // async functions in terms of async generators, it is especially\n          // important to get this right, even though it requires care.\n          previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n        } // Define the unified helper method that is used to implement .next,\n        // .throw, and .return (see defineIteratorMethods).\n\n\n        this._invoke = enqueue;\n      }\n\n      defineIteratorMethods(AsyncIterator.prototype);\n\n      AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n        return this;\n      };\n\n      exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n      // AsyncIterator objects; they just return a Promise for the value of\n      // the final result produced by the iterator.\n\n      exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n        if (PromiseImpl === void 0) PromiseImpl = Promise;\n        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n        : iter.next().then(function (result) {\n          return result.done ? result.value : iter.next();\n        });\n      };\n\n      function makeInvokeMethod(innerFn, self, context) {\n        var state = GenStateSuspendedStart;\n        return function invoke(method, arg) {\n          if (state === GenStateExecuting) {\n            throw new Error(\"Generator is already running\");\n          }\n\n          if (state === GenStateCompleted) {\n            if (method === \"throw\") {\n              throw arg;\n            } // Be forgiving, per 25.3.3.3.3 of the spec:\n            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n            return doneResult();\n          }\n\n          context.method = method;\n          context.arg = arg;\n\n          while (true) {\n            var delegate = context.delegate;\n\n            if (delegate) {\n              var delegateResult = maybeInvokeDelegate(delegate, context);\n\n              if (delegateResult) {\n                if (delegateResult === ContinueSentinel) continue;\n                return delegateResult;\n              }\n            }\n\n            if (context.method === \"next\") {\n              // Setting context._sent for legacy support of Babel's\n              // function.sent implementation.\n              context.sent = context._sent = context.arg;\n            } else if (context.method === \"throw\") {\n              if (state === GenStateSuspendedStart) {\n                state = GenStateCompleted;\n                throw context.arg;\n              }\n\n              context.dispatchException(context.arg);\n            } else if (context.method === \"return\") {\n              context.abrupt(\"return\", context.arg);\n            }\n\n            state = GenStateExecuting;\n            var record = tryCatch(innerFn, self, context);\n\n            if (record.type === \"normal\") {\n              // If an exception is thrown from innerFn, we leave state ===\n              // GenStateExecuting and loop back for another invocation.\n              state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n              if (record.arg === ContinueSentinel) {\n                continue;\n              }\n\n              return {\n                value: record.arg,\n                done: context.done\n              };\n            } else if (record.type === \"throw\") {\n              state = GenStateCompleted; // Dispatch the exception by looping back around to the\n              // context.dispatchException(context.arg) call above.\n\n              context.method = \"throw\";\n              context.arg = record.arg;\n            }\n          }\n        };\n      } // Call delegate.iterator[context.method](context.arg) and handle the\n      // result, either by returning a { value, done } result from the\n      // delegate iterator, or by modifying context.method and context.arg,\n      // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n      function maybeInvokeDelegate(delegate, context) {\n        var method = delegate.iterator[context.method];\n\n        if (method === undefined$1) {\n          // A .throw or .return when the delegate iterator has no .throw\n          // method always terminates the yield* loop.\n          context.delegate = null;\n\n          if (context.method === \"throw\") {\n            // Note: [\"return\"] must be used for ES3 parsing compatibility.\n            if (delegate.iterator[\"return\"]) {\n              // If the delegate iterator has a return method, give it a\n              // chance to clean up.\n              context.method = \"return\";\n              context.arg = undefined$1;\n              maybeInvokeDelegate(delegate, context);\n\n              if (context.method === \"throw\") {\n                // If maybeInvokeDelegate(context) changed context.method from\n                // \"return\" to \"throw\", let that override the TypeError below.\n                return ContinueSentinel;\n              }\n            }\n\n            context.method = \"throw\";\n            context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n          }\n\n          return ContinueSentinel;\n        }\n\n        var record = tryCatch(method, delegate.iterator, context.arg);\n\n        if (record.type === \"throw\") {\n          context.method = \"throw\";\n          context.arg = record.arg;\n          context.delegate = null;\n          return ContinueSentinel;\n        }\n\n        var info = record.arg;\n\n        if (!info) {\n          context.method = \"throw\";\n          context.arg = new TypeError(\"iterator result is not an object\");\n          context.delegate = null;\n          return ContinueSentinel;\n        }\n\n        if (info.done) {\n          // Assign the result of the finished delegate to the temporary\n          // variable specified by delegate.resultName (see delegateYield).\n          context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n          context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n          // exception, let the outer generator proceed normally. If\n          // context.method was \"next\", forget context.arg since it has been\n          // \"consumed\" by the delegate iterator. If context.method was\n          // \"return\", allow the original .return call to continue in the\n          // outer generator.\n\n          if (context.method !== \"return\") {\n            context.method = \"next\";\n            context.arg = undefined$1;\n          }\n        } else {\n          // Re-yield the result returned by the delegate method.\n          return info;\n        } // The delegate iterator is finished, so forget it and continue with\n        // the outer generator.\n\n\n        context.delegate = null;\n        return ContinueSentinel;\n      } // Define Generator.prototype.{next,throw,return} in terms of the\n      // unified ._invoke helper method.\n\n\n      defineIteratorMethods(Gp);\n      define(Gp, toStringTagSymbol, \"Generator\"); // A Generator should always return itself as the iterator object when the\n      // @@iterator function is called on it. Some browsers' implementations of the\n      // iterator prototype chain incorrectly implement this, causing the Generator\n      // object to not be returned from this call. This ensures that doesn't happen.\n      // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n      Gp[iteratorSymbol] = function () {\n        return this;\n      };\n\n      Gp.toString = function () {\n        return \"[object Generator]\";\n      };\n\n      function pushTryEntry(locs) {\n        var entry = {\n          tryLoc: locs[0]\n        };\n\n        if (1 in locs) {\n          entry.catchLoc = locs[1];\n        }\n\n        if (2 in locs) {\n          entry.finallyLoc = locs[2];\n          entry.afterLoc = locs[3];\n        }\n\n        this.tryEntries.push(entry);\n      }\n\n      function resetTryEntry(entry) {\n        var record = entry.completion || {};\n        record.type = \"normal\";\n        delete record.arg;\n        entry.completion = record;\n      }\n\n      function Context(tryLocsList) {\n        // The root entry object (effectively a try statement without a catch\n        // or a finally block) gives us a place to store values thrown from\n        // locations where there is no enclosing try statement.\n        this.tryEntries = [{\n          tryLoc: \"root\"\n        }];\n        tryLocsList.forEach(pushTryEntry, this);\n        this.reset(true);\n      }\n\n      exports.keys = function (object) {\n        var keys = [];\n\n        for (var key in object) {\n          keys.push(key);\n        }\n\n        keys.reverse(); // Rather than returning an object with a next method, we keep\n        // things simple and return the next function itself.\n\n        return function next() {\n          while (keys.length) {\n            var key = keys.pop();\n\n            if (key in object) {\n              next.value = key;\n              next.done = false;\n              return next;\n            }\n          } // To avoid creating an additional object, we just hang the .value\n          // and .done properties off the next function object itself. This\n          // also ensures that the minifier will not anonymize the function.\n\n\n          next.done = true;\n          return next;\n        };\n      };\n\n      function values(iterable) {\n        if (iterable) {\n          var iteratorMethod = iterable[iteratorSymbol];\n\n          if (iteratorMethod) {\n            return iteratorMethod.call(iterable);\n          }\n\n          if (typeof iterable.next === \"function\") {\n            return iterable;\n          }\n\n          if (!isNaN(iterable.length)) {\n            var i = -1,\n                next = function next() {\n              while (++i < iterable.length) {\n                if (hasOwn.call(iterable, i)) {\n                  next.value = iterable[i];\n                  next.done = false;\n                  return next;\n                }\n              }\n\n              next.value = undefined$1;\n              next.done = true;\n              return next;\n            };\n\n            return next.next = next;\n          }\n        } // Return an iterator with no values.\n\n\n        return {\n          next: doneResult\n        };\n      }\n\n      exports.values = values;\n\n      function doneResult() {\n        return {\n          value: undefined$1,\n          done: true\n        };\n      }\n\n      Context.prototype = {\n        constructor: Context,\n        reset: function reset(skipTempReset) {\n          this.prev = 0;\n          this.next = 0; // Resetting context._sent for legacy support of Babel's\n          // function.sent implementation.\n\n          this.sent = this._sent = undefined$1;\n          this.done = false;\n          this.delegate = null;\n          this.method = \"next\";\n          this.arg = undefined$1;\n          this.tryEntries.forEach(resetTryEntry);\n\n          if (!skipTempReset) {\n            for (var name in this) {\n              // Not sure about the optimal order of these conditions:\n              if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n                this[name] = undefined$1;\n              }\n            }\n          }\n        },\n        stop: function stop() {\n          this.done = true;\n          var rootEntry = this.tryEntries[0];\n          var rootRecord = rootEntry.completion;\n\n          if (rootRecord.type === \"throw\") {\n            throw rootRecord.arg;\n          }\n\n          return this.rval;\n        },\n        dispatchException: function dispatchException(exception) {\n          if (this.done) {\n            throw exception;\n          }\n\n          var context = this;\n\n          function handle(loc, caught) {\n            record.type = \"throw\";\n            record.arg = exception;\n            context.next = loc;\n\n            if (caught) {\n              // If the dispatched exception was caught by a catch block,\n              // then let that catch block handle the exception normally.\n              context.method = \"next\";\n              context.arg = undefined$1;\n            }\n\n            return !!caught;\n          }\n\n          for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n            var entry = this.tryEntries[i];\n            var record = entry.completion;\n\n            if (entry.tryLoc === \"root\") {\n              // Exception thrown outside of any try block that could handle\n              // it, so set the completion value of the entire function to\n              // throw the exception.\n              return handle(\"end\");\n            }\n\n            if (entry.tryLoc <= this.prev) {\n              var hasCatch = hasOwn.call(entry, \"catchLoc\");\n              var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n              if (hasCatch && hasFinally) {\n                if (this.prev < entry.catchLoc) {\n                  return handle(entry.catchLoc, true);\n                } else if (this.prev < entry.finallyLoc) {\n                  return handle(entry.finallyLoc);\n                }\n              } else if (hasCatch) {\n                if (this.prev < entry.catchLoc) {\n                  return handle(entry.catchLoc, true);\n                }\n              } else if (hasFinally) {\n                if (this.prev < entry.finallyLoc) {\n                  return handle(entry.finallyLoc);\n                }\n              } else {\n                throw new Error(\"try statement without catch or finally\");\n              }\n            }\n          }\n        },\n        abrupt: function abrupt(type, arg) {\n          for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n            var entry = this.tryEntries[i];\n\n            if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n              var finallyEntry = entry;\n              break;\n            }\n          }\n\n          if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n            // Ignore the finally entry if control is not jumping to a\n            // location outside the try/catch block.\n            finallyEntry = null;\n          }\n\n          var record = finallyEntry ? finallyEntry.completion : {};\n          record.type = type;\n          record.arg = arg;\n\n          if (finallyEntry) {\n            this.method = \"next\";\n            this.next = finallyEntry.finallyLoc;\n            return ContinueSentinel;\n          }\n\n          return this.complete(record);\n        },\n        complete: function complete(record, afterLoc) {\n          if (record.type === \"throw\") {\n            throw record.arg;\n          }\n\n          if (record.type === \"break\" || record.type === \"continue\") {\n            this.next = record.arg;\n          } else if (record.type === \"return\") {\n            this.rval = this.arg = record.arg;\n            this.method = \"return\";\n            this.next = \"end\";\n          } else if (record.type === \"normal\" && afterLoc) {\n            this.next = afterLoc;\n          }\n\n          return ContinueSentinel;\n        },\n        finish: function finish(finallyLoc) {\n          for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n            var entry = this.tryEntries[i];\n\n            if (entry.finallyLoc === finallyLoc) {\n              this.complete(entry.completion, entry.afterLoc);\n              resetTryEntry(entry);\n              return ContinueSentinel;\n            }\n          }\n        },\n        \"catch\": function _catch(tryLoc) {\n          for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n            var entry = this.tryEntries[i];\n\n            if (entry.tryLoc === tryLoc) {\n              var record = entry.completion;\n\n              if (record.type === \"throw\") {\n                var thrown = record.arg;\n                resetTryEntry(entry);\n              }\n\n              return thrown;\n            }\n          } // The context.catch method must only be called with a location\n          // argument that corresponds to a known catch block.\n\n\n          throw new Error(\"illegal catch attempt\");\n        },\n        delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n          this.delegate = {\n            iterator: values(iterable),\n            resultName: resultName,\n            nextLoc: nextLoc\n          };\n\n          if (this.method === \"next\") {\n            // Deliberately forget the last sent value so that we don't\n            // accidentally pass it on to the delegate.\n            this.arg = undefined$1;\n          }\n\n          return ContinueSentinel;\n        }\n      }; // Regardless of whether this script is executing as a CommonJS module\n      // or not, return the runtime object so that we can declare the variable\n      // regeneratorRuntime in the outer scope, which allows this module to be\n      // injected easily by `bin/regenerator --include-runtime script.js`.\n\n      return exports;\n    }( // If this script is executing as a CommonJS module, use module.exports\n    // as the regeneratorRuntime namespace. Otherwise create a new empty\n    // object. Either way, the resulting object will be used to initialize\n    // the regeneratorRuntime variable at the top of this file.\n    module.exports);\n\n    try {\n      regeneratorRuntime = runtime;\n    } catch (accidentalStrictMode) {\n      // This module should not be running in strict mode, so the above\n      // assignment should always work unless something is misconfigured. Just\n      // in case runtime.js accidentally runs in strict mode, we can escape\n      // strict mode using a global Function call. This could conceivably fail\n      // if a Content Security Policy forbids using Function, but in that case\n      // the proper solution is to fix the accidental strict mode problem. If\n      // you've misconfigured your bundler to force strict mode and applied a\n      // CSP to forbid Function, and you're not willing to fix either of those\n      // problems, please detail your unique predicament in a GitHub issue.\n      Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n    }\n  });\n\n  if (typeof window !== \"undefined\") {\n    (function () {\n      try {\n        if (typeof SVGElement === 'undefined' || Boolean(SVGElement.prototype.innerHTML)) {\n          return;\n        }\n      } catch (e) {\n        return;\n      }\n\n      function serializeNode(node) {\n        switch (node.nodeType) {\n          case 1:\n            return serializeElementNode(node);\n\n          case 3:\n            return serializeTextNode(node);\n\n          case 8:\n            return serializeCommentNode(node);\n        }\n      }\n\n      function serializeTextNode(node) {\n        return node.textContent.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n      }\n\n      function serializeCommentNode(node) {\n        return '<!--' + node.nodeValue + '-->';\n      }\n\n      function serializeElementNode(node) {\n        var output = '';\n        output += '<' + node.tagName;\n\n        if (node.hasAttributes()) {\n          [].forEach.call(node.attributes, function (attrNode) {\n            output += ' ' + attrNode.name + '=\"' + attrNode.value + '\"';\n          });\n        }\n\n        output += '>';\n\n        if (node.hasChildNodes()) {\n          [].forEach.call(node.childNodes, function (childNode) {\n            output += serializeNode(childNode);\n          });\n        }\n\n        output += '</' + node.tagName + '>';\n        return output;\n      }\n\n      Object.defineProperty(SVGElement.prototype, 'innerHTML', {\n        get: function get() {\n          var output = '';\n          [].forEach.call(this.childNodes, function (childNode) {\n            output += serializeNode(childNode);\n          });\n          return output;\n        },\n        set: function set(markup) {\n          while (this.firstChild) {\n            this.removeChild(this.firstChild);\n          }\n\n          try {\n            var dXML = new DOMParser();\n            dXML.async = false;\n            var sXML = '<svg xmlns=\\'http://www.w3.org/2000/svg\\' xmlns:xlink=\\'http://www.w3.org/1999/xlink\\'>' + markup + '</svg>';\n            var svgDocElement = dXML.parseFromString(sXML, 'text/xml').documentElement;\n            [].forEach.call(svgDocElement.childNodes, function (childNode) {\n              this.appendChild(this.ownerDocument.importNode(childNode, true));\n            }.bind(this));\n          } catch (e) {\n            throw new Error('Error parsing markup string');\n          }\n        }\n      });\n      Object.defineProperty(SVGElement.prototype, 'innerSVG', {\n        get: function get() {\n          return this.innerHTML;\n        },\n        set: function set(markup) {\n          this.innerHTML = markup;\n        }\n      });\n    })();\n  }\n});\n\n(function (global, factory) {\n  (typeof exports === \"undefined\" ? \"undefined\" : _typeof2(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define('d3plus-text', ['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.d3plus = {}));\n})(this, function (exports) {\n  var _marked = /*#__PURE__*/regeneratorRuntime.mark(selection_iterator),\n      _marked2 = /*#__PURE__*/regeneratorRuntime.mark(flatten);\n\n  /**\n   * Strips HTML and \"un-escapes\" escape characters.\n   * @param {String} input\n   */\n  function htmlDecode(input) {\n    if (input.replace(/\\s+/g, \"\") === \"\") return input;\n    var doc = new DOMParser().parseFromString(input.replace(/<[^>]+>/g, \"\"), \"text/html\");\n    return doc.documentElement ? doc.documentElement.textContent : input;\n  }\n  /**\n      @function textWidth\n      @desc Given a text string, returns the predicted pixel width of the string when placed into DOM.\n      @param {String|Array} text Can be either a single string or an array of strings to analyze.\n      @param {Object} [style] An object of CSS font styles to apply. Accepts any of the valid [CSS font property](http://www.w3schools.com/cssref/pr_font_font.asp) values.\n  */\n\n\n  function measure(text, style) {\n    style = Object.assign({\n      \"font-size\": 10,\n      \"font-family\": \"sans-serif\",\n      \"font-style\": \"normal\",\n      \"font-weight\": 400,\n      \"font-variant\": \"normal\"\n    }, style);\n    var context = document.createElement(\"canvas\").getContext(\"2d\");\n    var font = [];\n    font.push(style[\"font-style\"]);\n    font.push(style[\"font-variant\"]);\n    font.push(style[\"font-weight\"]);\n    font.push(typeof style[\"font-size\"] === \"string\" ? style[\"font-size\"] : \"\".concat(style[\"font-size\"], \"px\"));\n    font.push(style[\"font-family\"]);\n    context.font = font.join(\" \");\n    if (text instanceof Array) return text.map(function (t) {\n      return context.measureText(htmlDecode(t)).width;\n    });\n    return context.measureText(htmlDecode(text)).width;\n  }\n  /**\n      @function trim\n      @desc Cross-browser implementation of [trim](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim).\n      @param {String} str\n  */\n\n\n  function trim(str) {\n    return str.toString().replace(/^\\s+|\\s+$/g, \"\");\n  }\n  /**\n      @function trimLeft\n      @desc Cross-browser implementation of [trimLeft](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/TrimLeft).\n      @param {String} str\n  */\n\n\n  function trimLeft(str) {\n    return str.toString().replace(/^\\s+/, \"\");\n  }\n  /**\n      @function trimRight\n      @desc Cross-browser implementation of [trimRight](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/TrimRight).\n      @param {String} str\n  */\n\n\n  function trimRight(str) {\n    return str.toString().replace(/\\s+$/, \"\");\n  }\n\n  var alpha = \"abcdefghiABCDEFGHI_!@#$%^&*()_+1234567890\",\n      checked = {},\n      height = 32;\n  var dejavu, macos, monospace, proportional;\n  /**\n      @function fontExists\n      @desc Given either a single font-family or a list of fonts, returns the name of the first font that can be rendered, or `false` if none are installed on the user's machine.\n      @param {String|Array} font Can be either a valid CSS font-family string (single or comma-separated names) or an Array of string names.\n  */\n\n  var fontExists = function fontExists(font) {\n    if (!dejavu) {\n      dejavu = measure(alpha, {\n        \"font-family\": \"DejaVuSans\",\n        \"font-size\": height\n      });\n      macos = measure(alpha, {\n        \"font-family\": \"-apple-system\",\n        \"font-size\": height\n      });\n      monospace = measure(alpha, {\n        \"font-family\": \"monospace\",\n        \"font-size\": height\n      });\n      proportional = measure(alpha, {\n        \"font-family\": \"sans-serif\",\n        \"font-size\": height\n      });\n    }\n\n    if (!(font instanceof Array)) font = font.split(\",\");\n    font = font.map(function (f) {\n      return trim(f);\n    });\n\n    for (var i = 0; i < font.length; i++) {\n      var fam = font[i];\n      if (checked[fam] || [\"-apple-system\", \"monospace\", \"sans-serif\", \"DejaVuSans\"].includes(fam)) return fam;else if (checked[fam] === false) continue;\n      var width = measure(alpha, {\n        \"font-family\": fam,\n        \"font-size\": height\n      });\n      checked[fam] = width !== monospace;\n      if (checked[fam]) checked[fam] = width !== proportional;\n      if (macos && checked[fam]) checked[fam] = width !== macos;\n      if (dejavu && checked[fam]) checked[fam] = width !== dejavu;\n      if (checked[fam]) return fam;\n    }\n\n    return false;\n  };\n\n  var xhtml = \"http://www.w3.org/1999/xhtml\";\n  var namespaces = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: xhtml,\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n\n  function namespace(name) {\n    var prefix = name += \"\",\n        i = prefix.indexOf(\":\");\n    if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n    return namespaces.hasOwnProperty(prefix) ? {\n      space: namespaces[prefix],\n      local: name\n    } : name; // eslint-disable-line no-prototype-builtins\n  }\n\n  function creatorInherit(name) {\n    return function () {\n      var document = this.ownerDocument,\n          uri = this.namespaceURI;\n      return uri === xhtml && document.documentElement.namespaceURI === xhtml ? document.createElement(name) : document.createElementNS(uri, name);\n    };\n  }\n\n  function creatorFixed(fullname) {\n    return function () {\n      return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n    };\n  }\n\n  function creator(name) {\n    var fullname = namespace(name);\n    return (fullname.local ? creatorFixed : creatorInherit)(fullname);\n  }\n\n  function none() {}\n\n  function selector(selector) {\n    return selector == null ? none : function () {\n      return this.querySelector(selector);\n    };\n  }\n\n  function selection_select(select) {\n    if (typeof select !== \"function\") select = selector(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          subgroup[i] = subnode;\n        }\n      }\n    }\n\n    return new Selection(subgroups, this._parents);\n  }\n\n  function array(x) {\n    return _typeof2(x) === \"object\" && \"length\" in x ? x // Array, TypedArray, NodeList, array-like\n    : Array.from(x); // Map, Set, iterable, string, or anything else\n  }\n\n  function empty() {\n    return [];\n  }\n\n  function selectorAll(selector) {\n    return selector == null ? empty : function () {\n      return this.querySelectorAll(selector);\n    };\n  }\n\n  function arrayAll(select) {\n    return function () {\n      var group = select.apply(this, arguments);\n      return group == null ? [] : array(group);\n    };\n  }\n\n  function selection_selectAll(select) {\n    if (typeof select === \"function\") select = arrayAll(select);else select = selectorAll(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          subgroups.push(select.call(node, node.__data__, i, group));\n          parents.push(node);\n        }\n      }\n    }\n\n    return new Selection(subgroups, parents);\n  }\n\n  function matcher(selector) {\n    return function () {\n      return this.matches(selector);\n    };\n  }\n\n  function childMatcher(selector) {\n    return function (node) {\n      return node.matches(selector);\n    };\n  }\n\n  var find = Array.prototype.find;\n\n  function childFind(match) {\n    return function () {\n      return find.call(this.children, match);\n    };\n  }\n\n  function childFirst() {\n    return this.firstElementChild;\n  }\n\n  function selection_selectChild(match) {\n    return this.select(match == null ? childFirst : childFind(typeof match === \"function\" ? match : childMatcher(match)));\n  }\n\n  var filter = Array.prototype.filter;\n\n  function children() {\n    return this.children;\n  }\n\n  function childrenFilter(match) {\n    return function () {\n      return filter.call(this.children, match);\n    };\n  }\n\n  function selection_selectChildren(match) {\n    return this.selectAll(match == null ? children : childrenFilter(typeof match === \"function\" ? match : childMatcher(match)));\n  }\n\n  function selection_filter(match) {\n    if (typeof match !== \"function\") match = matcher(match);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n          subgroup.push(node);\n        }\n      }\n    }\n\n    return new Selection(subgroups, this._parents);\n  }\n\n  function sparse(update) {\n    return new Array(update.length);\n  }\n\n  function selection_enter() {\n    return new Selection(this._enter || this._groups.map(sparse), this._parents);\n  }\n\n  function EnterNode(parent, datum) {\n    this.ownerDocument = parent.ownerDocument;\n    this.namespaceURI = parent.namespaceURI;\n    this._next = null;\n    this._parent = parent;\n    this.__data__ = datum;\n  }\n\n  EnterNode.prototype = {\n    constructor: EnterNode,\n    appendChild: function appendChild(child) {\n      return this._parent.insertBefore(child, this._next);\n    },\n    insertBefore: function insertBefore(child, next) {\n      return this._parent.insertBefore(child, next);\n    },\n    querySelector: function querySelector(selector) {\n      return this._parent.querySelector(selector);\n    },\n    querySelectorAll: function querySelectorAll(selector) {\n      return this._parent.querySelectorAll(selector);\n    }\n  };\n\n  function constant(x) {\n    return function () {\n      return x;\n    };\n  }\n\n  function bindIndex(parent, group, enter, update, exit, data) {\n    var i = 0,\n        node,\n        groupLength = group.length,\n        dataLength = data.length; // Put any non-null nodes that fit into update.\n    // Put any null nodes into enter.\n    // Put any remaining data into enter.\n\n    for (; i < dataLength; ++i) {\n      if (node = group[i]) {\n        node.__data__ = data[i];\n        update[i] = node;\n      } else {\n        enter[i] = new EnterNode(parent, data[i]);\n      }\n    } // Put any non-null nodes that don’t fit into exit.\n\n\n    for (; i < groupLength; ++i) {\n      if (node = group[i]) {\n        exit[i] = node;\n      }\n    }\n  }\n\n  function bindKey(parent, group, enter, update, exit, data, key) {\n    var i,\n        node,\n        nodeByKeyValue = new Map(),\n        groupLength = group.length,\n        dataLength = data.length,\n        keyValues = new Array(groupLength),\n        keyValue; // Compute the key for each node.\n    // If multiple nodes have the same key, the duplicates are added to exit.\n\n    for (i = 0; i < groupLength; ++i) {\n      if (node = group[i]) {\n        keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + \"\";\n\n        if (nodeByKeyValue.has(keyValue)) {\n          exit[i] = node;\n        } else {\n          nodeByKeyValue.set(keyValue, node);\n        }\n      }\n    } // Compute the key for each datum.\n    // If there a node associated with this key, join and add it to update.\n    // If there is not (or the key is a duplicate), add it to enter.\n\n\n    for (i = 0; i < dataLength; ++i) {\n      keyValue = key.call(parent, data[i], i, data) + \"\";\n\n      if (node = nodeByKeyValue.get(keyValue)) {\n        update[i] = node;\n        node.__data__ = data[i];\n        nodeByKeyValue[\"delete\"](keyValue);\n      } else {\n        enter[i] = new EnterNode(parent, data[i]);\n      }\n    } // Add any remaining nodes that were not bound to data to exit.\n\n\n    for (i = 0; i < groupLength; ++i) {\n      if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) {\n        exit[i] = node;\n      }\n    }\n  }\n\n  function datum(node) {\n    return node.__data__;\n  }\n\n  function selection_data(value, key) {\n    if (!arguments.length) return Array.from(this, datum);\n    var bind = key ? bindKey : bindIndex,\n        parents = this._parents,\n        groups = this._groups;\n    if (typeof value !== \"function\") value = constant(value);\n\n    for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n      var parent = parents[j],\n          group = groups[j],\n          groupLength = group.length,\n          data = array(value.call(parent, parent && parent.__data__, j, parents)),\n          dataLength = data.length,\n          enterGroup = enter[j] = new Array(dataLength),\n          updateGroup = update[j] = new Array(dataLength),\n          exitGroup = exit[j] = new Array(groupLength);\n      bind(parent, group, enterGroup, updateGroup, exitGroup, data, key); // Now connect the enter nodes to their following update node, such that\n      // appendChild can insert the materialized enter node before this node,\n      // rather than at the end of the parent node.\n\n      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n        if (previous = enterGroup[i0]) {\n          if (i0 >= i1) i1 = i0 + 1;\n\n          while (!(next = updateGroup[i1]) && ++i1 < dataLength) {\n            ;\n          }\n\n          previous._next = next || null;\n        }\n      }\n    }\n\n    update = new Selection(update, parents);\n    update._enter = enter;\n    update._exit = exit;\n    return update;\n  }\n\n  function selection_exit() {\n    return new Selection(this._exit || this._groups.map(sparse), this._parents);\n  }\n\n  function selection_join(onenter, onupdate, onexit) {\n    var enter = this.enter(),\n        update = this,\n        exit = this.exit();\n    enter = typeof onenter === \"function\" ? onenter(enter) : enter.append(onenter + \"\");\n    if (onupdate != null) update = onupdate(update);\n    if (onexit == null) exit.remove();else onexit(exit);\n    return enter && update ? enter.merge(update).order() : update;\n  }\n\n  function selection_merge(selection) {\n    if (!(selection instanceof Selection)) throw new Error(\"invalid merge\");\n\n    for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group0[i] || group1[i]) {\n          merge[i] = node;\n        }\n      }\n    }\n\n    for (; j < m0; ++j) {\n      merges[j] = groups0[j];\n    }\n\n    return new Selection(merges, this._parents);\n  }\n\n  function selection_order() {\n    for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n      for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n        if (node = group[i]) {\n          if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n\n    return this;\n  }\n\n  function selection_sort(compare) {\n    if (!compare) compare = ascending;\n\n    function compareNode(a, b) {\n      return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n    }\n\n    for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          sortgroup[i] = node;\n        }\n      }\n\n      sortgroup.sort(compareNode);\n    }\n\n    return new Selection(sortgroups, this._parents).order();\n  }\n\n  function ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n\n  function selection_call() {\n    var callback = arguments[0];\n    arguments[0] = this;\n    callback.apply(null, arguments);\n    return this;\n  }\n\n  function selection_nodes() {\n    return Array.from(this);\n  }\n\n  function selection_node() {\n    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n      for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n\n    return null;\n  }\n\n  function selection_size() {\n    var size = 0;\n\n    var _iterator = _createForOfIteratorHelper(this),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var node = _step.value;\n        ++size;\n      } // eslint-disable-line no-unused-vars\n\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return size;\n  }\n\n  function selection_empty() {\n    return !this.node();\n  }\n\n  function selection_each(callback) {\n    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n        if (node = group[i]) callback.call(node, node.__data__, i, group);\n      }\n    }\n\n    return this;\n  }\n\n  function attrRemove(name) {\n    return function () {\n      this.removeAttribute(name);\n    };\n  }\n\n  function attrRemoveNS(fullname) {\n    return function () {\n      this.removeAttributeNS(fullname.space, fullname.local);\n    };\n  }\n\n  function attrConstant(name, value) {\n    return function () {\n      this.setAttribute(name, value);\n    };\n  }\n\n  function attrConstantNS(fullname, value) {\n    return function () {\n      this.setAttributeNS(fullname.space, fullname.local, value);\n    };\n  }\n\n  function attrFunction(name, value) {\n    return function () {\n      var v = value.apply(this, arguments);\n      if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);\n    };\n  }\n\n  function attrFunctionNS(fullname, value) {\n    return function () {\n      var v = value.apply(this, arguments);\n      if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);\n    };\n  }\n\n  function selection_attr(name, value) {\n    var fullname = namespace(name);\n\n    if (arguments.length < 2) {\n      var node = this.node();\n      return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);\n    }\n\n    return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === \"function\" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));\n  }\n\n  function defaultView(node) {\n    return node.ownerDocument && node.ownerDocument.defaultView || // node is a Node\n    node.document && node // node is a Window\n    || node.defaultView; // node is a Document\n  }\n\n  function styleRemove(name) {\n    return function () {\n      this.style.removeProperty(name);\n    };\n  }\n\n  function styleConstant(name, value, priority) {\n    return function () {\n      this.style.setProperty(name, value, priority);\n    };\n  }\n\n  function styleFunction(name, value, priority) {\n    return function () {\n      var v = value.apply(this, arguments);\n      if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);\n    };\n  }\n\n  function selection_style(name, value, priority) {\n    return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === \"function\" ? styleFunction : styleConstant)(name, value, priority == null ? \"\" : priority)) : styleValue(this.node(), name);\n  }\n\n  function styleValue(node, name) {\n    return node.style.getPropertyValue(name) || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);\n  }\n\n  function propertyRemove(name) {\n    return function () {\n      delete this[name];\n    };\n  }\n\n  function propertyConstant(name, value) {\n    return function () {\n      this[name] = value;\n    };\n  }\n\n  function propertyFunction(name, value) {\n    return function () {\n      var v = value.apply(this, arguments);\n      if (v == null) delete this[name];else this[name] = v;\n    };\n  }\n\n  function selection_property(name, value) {\n    return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === \"function\" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];\n  }\n\n  function classArray(string) {\n    return string.trim().split(/^|\\s+/);\n  }\n\n  function classList(node) {\n    return node.classList || new ClassList(node);\n  }\n\n  function ClassList(node) {\n    this._node = node;\n    this._names = classArray(node.getAttribute(\"class\") || \"\");\n  }\n\n  ClassList.prototype = {\n    add: function add(name) {\n      var i = this._names.indexOf(name);\n\n      if (i < 0) {\n        this._names.push(name);\n\n        this._node.setAttribute(\"class\", this._names.join(\" \"));\n      }\n    },\n    remove: function remove(name) {\n      var i = this._names.indexOf(name);\n\n      if (i >= 0) {\n        this._names.splice(i, 1);\n\n        this._node.setAttribute(\"class\", this._names.join(\" \"));\n      }\n    },\n    contains: function contains(name) {\n      return this._names.indexOf(name) >= 0;\n    }\n  };\n\n  function classedAdd(node, names) {\n    var list = classList(node),\n        i = -1,\n        n = names.length;\n\n    while (++i < n) {\n      list.add(names[i]);\n    }\n  }\n\n  function classedRemove(node, names) {\n    var list = classList(node),\n        i = -1,\n        n = names.length;\n\n    while (++i < n) {\n      list.remove(names[i]);\n    }\n  }\n\n  function classedTrue(names) {\n    return function () {\n      classedAdd(this, names);\n    };\n  }\n\n  function classedFalse(names) {\n    return function () {\n      classedRemove(this, names);\n    };\n  }\n\n  function classedFunction(names, value) {\n    return function () {\n      (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n    };\n  }\n\n  function selection_classed(name, value) {\n    var names = classArray(name + \"\");\n\n    if (arguments.length < 2) {\n      var list = classList(this.node()),\n          i = -1,\n          n = names.length;\n\n      while (++i < n) {\n        if (!list.contains(names[i])) return false;\n      }\n\n      return true;\n    }\n\n    return this.each((typeof value === \"function\" ? classedFunction : value ? classedTrue : classedFalse)(names, value));\n  }\n\n  function textRemove() {\n    this.textContent = \"\";\n  }\n\n  function textConstant(value) {\n    return function () {\n      this.textContent = value;\n    };\n  }\n\n  function textFunction(value) {\n    return function () {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \"\" : v;\n    };\n  }\n\n  function selection_text(value) {\n    return arguments.length ? this.each(value == null ? textRemove : (typeof value === \"function\" ? textFunction : textConstant)(value)) : this.node().textContent;\n  }\n\n  function htmlRemove() {\n    this.innerHTML = \"\";\n  }\n\n  function htmlConstant(value) {\n    return function () {\n      this.innerHTML = value;\n    };\n  }\n\n  function htmlFunction(value) {\n    return function () {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \"\" : v;\n    };\n  }\n\n  function selection_html(value) {\n    return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === \"function\" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;\n  }\n\n  function raise() {\n    if (this.nextSibling) this.parentNode.appendChild(this);\n  }\n\n  function selection_raise() {\n    return this.each(raise);\n  }\n\n  function lower() {\n    if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n  }\n\n  function selection_lower() {\n    return this.each(lower);\n  }\n\n  function selection_append(name) {\n    var create = typeof name === \"function\" ? name : creator(name);\n    return this.select(function () {\n      return this.appendChild(create.apply(this, arguments));\n    });\n  }\n\n  function constantNull() {\n    return null;\n  }\n\n  function selection_insert(name, before) {\n    var create = typeof name === \"function\" ? name : creator(name),\n        select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\n    return this.select(function () {\n      return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n    });\n  }\n\n  function remove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n\n  function selection_remove() {\n    return this.each(remove);\n  }\n\n  function selection_cloneShallow() {\n    var clone = this.cloneNode(false),\n        parent = this.parentNode;\n    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n  }\n\n  function selection_cloneDeep() {\n    var clone = this.cloneNode(true),\n        parent = this.parentNode;\n    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n  }\n\n  function selection_clone(deep) {\n    return this.select(deep ? selection_cloneDeep : selection_cloneShallow);\n  }\n\n  function selection_datum(value) {\n    return arguments.length ? this.property(\"__data__\", value) : this.node().__data__;\n  }\n\n  function contextListener(listener) {\n    return function (event) {\n      listener.call(this, event, this.__data__);\n    };\n  }\n\n  function parseTypenames(typenames) {\n    return typenames.trim().split(/^|\\s+/).map(function (t) {\n      var name = \"\",\n          i = t.indexOf(\".\");\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n      return {\n        type: t,\n        name: name\n      };\n    });\n  }\n\n  function onRemove(typename) {\n    return function () {\n      var on = this.__on;\n      if (!on) return;\n\n      for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n        if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n          this.removeEventListener(o.type, o.listener, o.options);\n        } else {\n          on[++i] = o;\n        }\n      }\n\n      if (++i) on.length = i;else delete this.__on;\n    };\n  }\n\n  function onAdd(typename, value, options) {\n    return function () {\n      var on = this.__on,\n          o,\n          listener = contextListener(value);\n      if (on) for (var j = 0, m = on.length; j < m; ++j) {\n        if ((o = on[j]).type === typename.type && o.name === typename.name) {\n          this.removeEventListener(o.type, o.listener, o.options);\n          this.addEventListener(o.type, o.listener = listener, o.options = options);\n          o.value = value;\n          return;\n        }\n      }\n      this.addEventListener(typename.type, listener, options);\n      o = {\n        type: typename.type,\n        name: typename.name,\n        value: value,\n        listener: listener,\n        options: options\n      };\n      if (!on) this.__on = [o];else on.push(o);\n    };\n  }\n\n  function selection_on(typename, value, options) {\n    var typenames = parseTypenames(typename + \"\"),\n        i,\n        n = typenames.length,\n        t;\n\n    if (arguments.length < 2) {\n      var on = this.node().__on;\n\n      if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n        for (i = 0, o = on[j]; i < n; ++i) {\n          if ((t = typenames[i]).type === o.type && t.name === o.name) {\n            return o.value;\n          }\n        }\n      }\n      return;\n    }\n\n    on = value ? onAdd : onRemove;\n\n    for (i = 0; i < n; ++i) {\n      this.each(on(typenames[i], value, options));\n    }\n\n    return this;\n  }\n\n  function dispatchEvent(node, type, params) {\n    var window = defaultView(node),\n        event = window.CustomEvent;\n\n    if (typeof event === \"function\") {\n      event = new event(type, params);\n    } else {\n      event = window.document.createEvent(\"Event\");\n      if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);\n    }\n\n    node.dispatchEvent(event);\n  }\n\n  function dispatchConstant(type, params) {\n    return function () {\n      return dispatchEvent(this, type, params);\n    };\n  }\n\n  function dispatchFunction(type, params) {\n    return function () {\n      return dispatchEvent(this, type, params.apply(this, arguments));\n    };\n  }\n\n  function selection_dispatch(type, params) {\n    return this.each((typeof params === \"function\" ? dispatchFunction : dispatchConstant)(type, params));\n  }\n\n  function selection_iterator() {\n    var groups, j, m, group, i, n, node;\n    return regeneratorRuntime.wrap(function selection_iterator$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            groups = this._groups, j = 0, m = groups.length;\n\n          case 1:\n            if (!(j < m)) {\n              _context.next = 13;\n              break;\n            }\n\n            group = groups[j], i = 0, n = group.length;\n\n          case 3:\n            if (!(i < n)) {\n              _context.next = 10;\n              break;\n            }\n\n            if (!(node = group[i])) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 7;\n            return node;\n\n          case 7:\n            ++i;\n            _context.next = 3;\n            break;\n\n          case 10:\n            ++j;\n            _context.next = 1;\n            break;\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _marked, this);\n  }\n\n  var root = [null];\n\n  function Selection(groups, parents) {\n    this._groups = groups;\n    this._parents = parents;\n  }\n\n  function selection() {\n    return new Selection([[document.documentElement]], root);\n  }\n\n  function selection_selection() {\n    return this;\n  }\n\n  Selection.prototype = selection.prototype = _defineProperty2({\n    constructor: Selection,\n    select: selection_select,\n    selectAll: selection_selectAll,\n    selectChild: selection_selectChild,\n    selectChildren: selection_selectChildren,\n    filter: selection_filter,\n    data: selection_data,\n    enter: selection_enter,\n    exit: selection_exit,\n    join: selection_join,\n    merge: selection_merge,\n    selection: selection_selection,\n    order: selection_order,\n    sort: selection_sort,\n    call: selection_call,\n    nodes: selection_nodes,\n    node: selection_node,\n    size: selection_size,\n    empty: selection_empty,\n    each: selection_each,\n    attr: selection_attr,\n    style: selection_style,\n    property: selection_property,\n    classed: selection_classed,\n    text: selection_text,\n    html: selection_html,\n    raise: selection_raise,\n    lower: selection_lower,\n    append: selection_append,\n    insert: selection_insert,\n    remove: selection_remove,\n    clone: selection_clone,\n    datum: selection_datum,\n    on: selection_on,\n    dispatch: selection_dispatch\n  }, Symbol.iterator, selection_iterator);\n\n  function _select(selector) {\n    return typeof selector === \"string\" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);\n  }\n  /**\n      @function rtl\n      @desc Returns `true` if the HTML or body element has either the \"dir\" HTML attribute or the \"direction\" CSS property set to \"rtl\".\n  */\n\n\n  var detectRTL = function detectRTL() {\n    return _select(\"html\").attr(\"dir\") === \"rtl\" || _select(\"body\").attr(\"dir\") === \"rtl\" || _select(\"html\").style(\"direction\") === \"rtl\" || _select(\"body\").style(\"direction\") === \"rtl\";\n  };\n  /**\n      @function stringify\n      @desc Coerces value into a String.\n      @param {String} value\n  */\n\n\n  function stringify(value) {\n    if (value === void 0) value = \"undefined\";else if (!(typeof value === \"string\" || value instanceof String)) value = JSON.stringify(value);\n    return value;\n  } // great unicode list: http://asecuritysite.com/coding/asc2\n\n\n  var diacritics = [[/[\\300-\\305]/g, \"A\"], [/[\\340-\\345]/g, \"a\"], [/[\\306]/g, \"AE\"], [/[\\346]/g, \"ae\"], [/[\\337]/g, \"B\"], [/[\\307]/g, \"C\"], [/[\\347]/g, \"c\"], [/[\\320\\336\\376]/g, \"D\"], [/[\\360]/g, \"d\"], [/[\\310-\\313]/g, \"E\"], [/[\\350-\\353]/g, \"e\"], [/[\\314-\\317]/g, \"I\"], [/[\\354-\\357]/g, \"i\"], [/[\\321]/g, \"N\"], [/[\\361]/g, \"n\"], [/[\\u014c\\322-\\326\\330]/g, \"O\"], [/[\\u014d\\362-\\366\\370]/g, \"o\"], [/[\\u016a\\331-\\334]/g, \"U\"], [/[\\u016b\\371-\\374]/g, \"u\"], [/[\\327]/g, \"x\"], [/[\\335]/g, \"Y\"], [/[\\375\\377]/g, \"y\"]];\n  /**\n      @function strip\n      @desc Removes all non ASCII characters from a string.\n      @param {String} value\n  */\n\n  function strip(value) {\n    return \"\".concat(value).replace(/[^A-Za-z0-9\\-_]/g, function (_char) {\n      if (_char === \" \") return \"-\";\n      var ret = false;\n\n      for (var d = 0; d < diacritics.length; d++) {\n        if (new RegExp(diacritics[d][0]).test(_char)) {\n          ret = diacritics[d][1];\n          break;\n        }\n      }\n\n      return ret || \"\";\n    });\n  }\n\n  var noop = {\n    value: function value() {}\n  };\n\n  function dispatch() {\n    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n      if (!(t = arguments[i] + \"\") || t in _ || /[\\s.]/.test(t)) throw new Error(\"illegal type: \" + t);\n      _[t] = [];\n    }\n\n    return new Dispatch(_);\n  }\n\n  function Dispatch(_) {\n    this._ = _;\n  }\n\n  function parseTypenames$1(typenames, types) {\n    return typenames.trim().split(/^|\\s+/).map(function (t) {\n      var name = \"\",\n          i = t.indexOf(\".\");\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n      if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n      return {\n        type: t,\n        name: name\n      };\n    });\n  }\n\n  Dispatch.prototype = dispatch.prototype = {\n    constructor: Dispatch,\n    on: function on(typename, callback) {\n      var _ = this._,\n          T = parseTypenames$1(typename + \"\", _),\n          t,\n          i = -1,\n          n = T.length; // If no callback was specified, return the callback of the given type and name.\n\n      if (arguments.length < 2) {\n        while (++i < n) {\n          if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n        }\n\n        return;\n      } // If a type was specified, set the callback for the given type and name.\n      // Otherwise, if a null callback was specified, remove callbacks of the given name.\n\n\n      if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n\n      while (++i < n) {\n        if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);else if (callback == null) for (t in _) {\n          _[t] = set(_[t], typename.name, null);\n        }\n      }\n\n      return this;\n    },\n    copy: function copy() {\n      var copy = {},\n          _ = this._;\n\n      for (var t in _) {\n        copy[t] = _[t].slice();\n      }\n\n      return new Dispatch(copy);\n    },\n    call: function call(type, that) {\n      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) {\n        args[i] = arguments[i + 2];\n      }\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n\n      for (t = this._[type], i = 0, n = t.length; i < n; ++i) {\n        t[i].value.apply(that, args);\n      }\n    },\n    apply: function apply(type, that, args) {\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n\n      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) {\n        t[i].value.apply(that, args);\n      }\n    }\n  };\n\n  function get(type, name) {\n    for (var i = 0, n = type.length, c; i < n; ++i) {\n      if ((c = type[i]).name === name) {\n        return c.value;\n      }\n    }\n  }\n\n  function set(type, name, callback) {\n    for (var i = 0, n = type.length; i < n; ++i) {\n      if (type[i].name === name) {\n        type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n        break;\n      }\n    }\n\n    if (callback != null) type.push({\n      name: name,\n      value: callback\n    });\n    return type;\n  }\n\n  var frame = 0,\n      // is an animation frame pending?\n  timeout = 0,\n      // is a timeout pending?\n  interval = 0,\n      // are any timers active?\n  pokeDelay = 1000,\n      // how frequently we check for clock skew\n  taskHead,\n      taskTail,\n      clockLast = 0,\n      clockNow = 0,\n      clockSkew = 0,\n      clock = (typeof performance === \"undefined\" ? \"undefined\" : _typeof2(performance)) === \"object\" && performance.now ? performance : Date,\n      setFrame = (typeof window === \"undefined\" ? \"undefined\" : _typeof2(window)) === \"object\" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {\n    setTimeout(f, 17);\n  };\n\n  function now() {\n    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n  }\n\n  function clearNow() {\n    clockNow = 0;\n  }\n\n  function Timer() {\n    this._call = this._time = this._next = null;\n  }\n\n  Timer.prototype = timer.prototype = {\n    constructor: Timer,\n    restart: function restart(callback, delay, time) {\n      if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n\n      if (!this._next && taskTail !== this) {\n        if (taskTail) taskTail._next = this;else taskHead = this;\n        taskTail = this;\n      }\n\n      this._call = callback;\n      this._time = time;\n      sleep();\n    },\n    stop: function stop() {\n      if (this._call) {\n        this._call = null;\n        this._time = Infinity;\n        sleep();\n      }\n    }\n  };\n\n  function timer(callback, delay, time) {\n    var t = new Timer();\n    t.restart(callback, delay, time);\n    return t;\n  }\n\n  function timerFlush() {\n    now(); // Get the current time, if not already set.\n\n    ++frame; // Pretend we’ve set an alarm, if we haven’t already.\n\n    var t = taskHead,\n        e;\n\n    while (t) {\n      if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\n      t = t._next;\n    }\n\n    --frame;\n  }\n\n  function wake() {\n    clockNow = (clockLast = clock.now()) + clockSkew;\n    frame = timeout = 0;\n\n    try {\n      timerFlush();\n    } finally {\n      frame = 0;\n      nap();\n      clockNow = 0;\n    }\n  }\n\n  function poke() {\n    var now = clock.now(),\n        delay = now - clockLast;\n    if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n  }\n\n  function nap() {\n    var t0,\n        t1 = taskHead,\n        t2,\n        time = Infinity;\n\n    while (t1) {\n      if (t1._call) {\n        if (time > t1._time) time = t1._time;\n        t0 = t1, t1 = t1._next;\n      } else {\n        t2 = t1._next, t1._next = null;\n        t1 = t0 ? t0._next = t2 : taskHead = t2;\n      }\n    }\n\n    taskTail = t0;\n    sleep(time);\n  }\n\n  function sleep(time) {\n    if (frame) return; // Soonest alarm already set, or will be.\n\n    if (timeout) timeout = clearTimeout(timeout);\n    var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\n\n    if (delay > 24) {\n      if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);\n      if (interval) interval = clearInterval(interval);\n    } else {\n      if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);\n      frame = 1, setFrame(wake);\n    }\n  }\n\n  function timeout$1(callback, delay, time) {\n    var t = new Timer();\n    delay = delay == null ? 0 : +delay;\n    t.restart(function (elapsed) {\n      t.stop();\n      callback(elapsed + delay);\n    }, delay, time);\n    return t;\n  }\n\n  var emptyOn = dispatch(\"start\", \"end\", \"cancel\", \"interrupt\");\n  var emptyTween = [];\n  var CREATED = 0;\n  var SCHEDULED = 1;\n  var STARTING = 2;\n  var STARTED = 3;\n  var RUNNING = 4;\n  var ENDING = 5;\n  var ENDED = 6;\n\n  function schedule(node, name, id, index, group, timing) {\n    var schedules = node.__transition;\n    if (!schedules) node.__transition = {};else if (id in schedules) return;\n    create(node, id, {\n      name: name,\n      index: index,\n      // For context during callback.\n      group: group,\n      // For context during callback.\n      on: emptyOn,\n      tween: emptyTween,\n      time: timing.time,\n      delay: timing.delay,\n      duration: timing.duration,\n      ease: timing.ease,\n      timer: null,\n      state: CREATED\n    });\n  }\n\n  function init(node, id) {\n    var schedule = get$1(node, id);\n    if (schedule.state > CREATED) throw new Error(\"too late; already scheduled\");\n    return schedule;\n  }\n\n  function set$1(node, id) {\n    var schedule = get$1(node, id);\n    if (schedule.state > STARTED) throw new Error(\"too late; already running\");\n    return schedule;\n  }\n\n  function get$1(node, id) {\n    var schedule = node.__transition;\n    if (!schedule || !(schedule = schedule[id])) throw new Error(\"transition not found\");\n    return schedule;\n  }\n\n  function create(node, id, self) {\n    var schedules = node.__transition,\n        tween; // Initialize the self timer when the transition is created.\n    // Note the actual delay is not known until the first callback!\n\n    schedules[id] = self;\n    self.timer = timer(schedule, 0, self.time);\n\n    function schedule(elapsed) {\n      self.state = SCHEDULED;\n      self.timer.restart(start, self.delay, self.time); // If the elapsed delay is less than our first sleep, start immediately.\n\n      if (self.delay <= elapsed) start(elapsed - self.delay);\n    }\n\n    function start(elapsed) {\n      var i, j, n, o; // If the state is not SCHEDULED, then we previously errored on start.\n\n      if (self.state !== SCHEDULED) return stop();\n\n      for (i in schedules) {\n        o = schedules[i];\n        if (o.name !== self.name) continue; // While this element already has a starting transition during this frame,\n        // defer starting an interrupting transition until that transition has a\n        // chance to tick (and possibly end); see d3/d3-transition#54!\n\n        if (o.state === STARTED) return timeout$1(start); // Interrupt the active transition, if any.\n\n        if (o.state === RUNNING) {\n          o.state = ENDED;\n          o.timer.stop();\n          o.on.call(\"interrupt\", node, node.__data__, o.index, o.group);\n          delete schedules[i];\n        } // Cancel any pre-empted transitions.\n        else if (+i < id) {\n            o.state = ENDED;\n            o.timer.stop();\n            o.on.call(\"cancel\", node, node.__data__, o.index, o.group);\n            delete schedules[i];\n          }\n      } // Defer the first tick to end of the current frame; see d3/d3#1576.\n      // Note the transition may be canceled after start and before the first tick!\n      // Note this must be scheduled before the start event; see d3/d3-transition#16!\n      // Assuming this is successful, subsequent callbacks go straight to tick.\n\n\n      timeout$1(function () {\n        if (self.state === STARTED) {\n          self.state = RUNNING;\n          self.timer.restart(tick, self.delay, self.time);\n          tick(elapsed);\n        }\n      }); // Dispatch the start event.\n      // Note this must be done before the tween are initialized.\n\n      self.state = STARTING;\n      self.on.call(\"start\", node, node.__data__, self.index, self.group);\n      if (self.state !== STARTING) return; // interrupted\n\n      self.state = STARTED; // Initialize the tween, deleting null tween.\n\n      tween = new Array(n = self.tween.length);\n\n      for (i = 0, j = -1; i < n; ++i) {\n        if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {\n          tween[++j] = o;\n        }\n      }\n\n      tween.length = j + 1;\n    }\n\n    function tick(elapsed) {\n      var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),\n          i = -1,\n          n = tween.length;\n\n      while (++i < n) {\n        tween[i].call(node, t);\n      } // Dispatch the end event.\n\n\n      if (self.state === ENDING) {\n        self.on.call(\"end\", node, node.__data__, self.index, self.group);\n        stop();\n      }\n    }\n\n    function stop() {\n      self.state = ENDED;\n      self.timer.stop();\n      delete schedules[id];\n\n      for (var i in schedules) {\n        return;\n      } // eslint-disable-line no-unused-vars\n\n\n      delete node.__transition;\n    }\n  }\n\n  function interrupt(node, name) {\n    var schedules = node.__transition,\n        schedule,\n        active,\n        empty = true,\n        i;\n    if (!schedules) return;\n    name = name == null ? null : name + \"\";\n\n    for (i in schedules) {\n      if ((schedule = schedules[i]).name !== name) {\n        empty = false;\n        continue;\n      }\n\n      active = schedule.state > STARTING && schedule.state < ENDING;\n      schedule.state = ENDED;\n      schedule.timer.stop();\n      schedule.on.call(active ? \"interrupt\" : \"cancel\", node, node.__data__, schedule.index, schedule.group);\n      delete schedules[i];\n    }\n\n    if (empty) delete node.__transition;\n  }\n\n  function selection_interrupt(name) {\n    return this.each(function () {\n      interrupt(this, name);\n    });\n  }\n\n  function define(constructor, factory, prototype) {\n    constructor.prototype = factory.prototype = prototype;\n    prototype.constructor = constructor;\n  }\n\n  function extend(parent, definition) {\n    var prototype = Object.create(parent.prototype);\n\n    for (var key in definition) {\n      prototype[key] = definition[key];\n    }\n\n    return prototype;\n  }\n\n  function Color() {}\n\n  var _darker = 0.7;\n\n  var _brighter = 1 / _darker;\n\n  var reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n      reN = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n      reP = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n      reHex = /^#([0-9a-f]{3,8})$/,\n      reRgbInteger = new RegExp(\"^rgb\\\\(\" + [reI, reI, reI] + \"\\\\)$\"),\n      reRgbPercent = new RegExp(\"^rgb\\\\(\" + [reP, reP, reP] + \"\\\\)$\"),\n      reRgbaInteger = new RegExp(\"^rgba\\\\(\" + [reI, reI, reI, reN] + \"\\\\)$\"),\n      reRgbaPercent = new RegExp(\"^rgba\\\\(\" + [reP, reP, reP, reN] + \"\\\\)$\"),\n      reHslPercent = new RegExp(\"^hsl\\\\(\" + [reN, reP, reP] + \"\\\\)$\"),\n      reHslaPercent = new RegExp(\"^hsla\\\\(\" + [reN, reP, reP, reN] + \"\\\\)$\");\n  var named = {\n    aliceblue: 0xf0f8ff,\n    antiquewhite: 0xfaebd7,\n    aqua: 0x00ffff,\n    aquamarine: 0x7fffd4,\n    azure: 0xf0ffff,\n    beige: 0xf5f5dc,\n    bisque: 0xffe4c4,\n    black: 0x000000,\n    blanchedalmond: 0xffebcd,\n    blue: 0x0000ff,\n    blueviolet: 0x8a2be2,\n    brown: 0xa52a2a,\n    burlywood: 0xdeb887,\n    cadetblue: 0x5f9ea0,\n    chartreuse: 0x7fff00,\n    chocolate: 0xd2691e,\n    coral: 0xff7f50,\n    cornflowerblue: 0x6495ed,\n    cornsilk: 0xfff8dc,\n    crimson: 0xdc143c,\n    cyan: 0x00ffff,\n    darkblue: 0x00008b,\n    darkcyan: 0x008b8b,\n    darkgoldenrod: 0xb8860b,\n    darkgray: 0xa9a9a9,\n    darkgreen: 0x006400,\n    darkgrey: 0xa9a9a9,\n    darkkhaki: 0xbdb76b,\n    darkmagenta: 0x8b008b,\n    darkolivegreen: 0x556b2f,\n    darkorange: 0xff8c00,\n    darkorchid: 0x9932cc,\n    darkred: 0x8b0000,\n    darksalmon: 0xe9967a,\n    darkseagreen: 0x8fbc8f,\n    darkslateblue: 0x483d8b,\n    darkslategray: 0x2f4f4f,\n    darkslategrey: 0x2f4f4f,\n    darkturquoise: 0x00ced1,\n    darkviolet: 0x9400d3,\n    deeppink: 0xff1493,\n    deepskyblue: 0x00bfff,\n    dimgray: 0x696969,\n    dimgrey: 0x696969,\n    dodgerblue: 0x1e90ff,\n    firebrick: 0xb22222,\n    floralwhite: 0xfffaf0,\n    forestgreen: 0x228b22,\n    fuchsia: 0xff00ff,\n    gainsboro: 0xdcdcdc,\n    ghostwhite: 0xf8f8ff,\n    gold: 0xffd700,\n    goldenrod: 0xdaa520,\n    gray: 0x808080,\n    green: 0x008000,\n    greenyellow: 0xadff2f,\n    grey: 0x808080,\n    honeydew: 0xf0fff0,\n    hotpink: 0xff69b4,\n    indianred: 0xcd5c5c,\n    indigo: 0x4b0082,\n    ivory: 0xfffff0,\n    khaki: 0xf0e68c,\n    lavender: 0xe6e6fa,\n    lavenderblush: 0xfff0f5,\n    lawngreen: 0x7cfc00,\n    lemonchiffon: 0xfffacd,\n    lightblue: 0xadd8e6,\n    lightcoral: 0xf08080,\n    lightcyan: 0xe0ffff,\n    lightgoldenrodyellow: 0xfafad2,\n    lightgray: 0xd3d3d3,\n    lightgreen: 0x90ee90,\n    lightgrey: 0xd3d3d3,\n    lightpink: 0xffb6c1,\n    lightsalmon: 0xffa07a,\n    lightseagreen: 0x20b2aa,\n    lightskyblue: 0x87cefa,\n    lightslategray: 0x778899,\n    lightslategrey: 0x778899,\n    lightsteelblue: 0xb0c4de,\n    lightyellow: 0xffffe0,\n    lime: 0x00ff00,\n    limegreen: 0x32cd32,\n    linen: 0xfaf0e6,\n    magenta: 0xff00ff,\n    maroon: 0x800000,\n    mediumaquamarine: 0x66cdaa,\n    mediumblue: 0x0000cd,\n    mediumorchid: 0xba55d3,\n    mediumpurple: 0x9370db,\n    mediumseagreen: 0x3cb371,\n    mediumslateblue: 0x7b68ee,\n    mediumspringgreen: 0x00fa9a,\n    mediumturquoise: 0x48d1cc,\n    mediumvioletred: 0xc71585,\n    midnightblue: 0x191970,\n    mintcream: 0xf5fffa,\n    mistyrose: 0xffe4e1,\n    moccasin: 0xffe4b5,\n    navajowhite: 0xffdead,\n    navy: 0x000080,\n    oldlace: 0xfdf5e6,\n    olive: 0x808000,\n    olivedrab: 0x6b8e23,\n    orange: 0xffa500,\n    orangered: 0xff4500,\n    orchid: 0xda70d6,\n    palegoldenrod: 0xeee8aa,\n    palegreen: 0x98fb98,\n    paleturquoise: 0xafeeee,\n    palevioletred: 0xdb7093,\n    papayawhip: 0xffefd5,\n    peachpuff: 0xffdab9,\n    peru: 0xcd853f,\n    pink: 0xffc0cb,\n    plum: 0xdda0dd,\n    powderblue: 0xb0e0e6,\n    purple: 0x800080,\n    rebeccapurple: 0x663399,\n    red: 0xff0000,\n    rosybrown: 0xbc8f8f,\n    royalblue: 0x4169e1,\n    saddlebrown: 0x8b4513,\n    salmon: 0xfa8072,\n    sandybrown: 0xf4a460,\n    seagreen: 0x2e8b57,\n    seashell: 0xfff5ee,\n    sienna: 0xa0522d,\n    silver: 0xc0c0c0,\n    skyblue: 0x87ceeb,\n    slateblue: 0x6a5acd,\n    slategray: 0x708090,\n    slategrey: 0x708090,\n    snow: 0xfffafa,\n    springgreen: 0x00ff7f,\n    steelblue: 0x4682b4,\n    tan: 0xd2b48c,\n    teal: 0x008080,\n    thistle: 0xd8bfd8,\n    tomato: 0xff6347,\n    turquoise: 0x40e0d0,\n    violet: 0xee82ee,\n    wheat: 0xf5deb3,\n    white: 0xffffff,\n    whitesmoke: 0xf5f5f5,\n    yellow: 0xffff00,\n    yellowgreen: 0x9acd32\n  };\n  define(Color, color, {\n    copy: function copy(channels) {\n      return Object.assign(new this.constructor(), this, channels);\n    },\n    displayable: function displayable() {\n      return this.rgb().displayable();\n    },\n    hex: color_formatHex,\n    // Deprecated! Use color.formatHex.\n    formatHex: color_formatHex,\n    formatHsl: color_formatHsl,\n    formatRgb: color_formatRgb,\n    toString: color_formatRgb\n  });\n\n  function color_formatHex() {\n    return this.rgb().formatHex();\n  }\n\n  function color_formatHsl() {\n    return hslConvert(this).formatHsl();\n  }\n\n  function color_formatRgb() {\n    return this.rgb().formatRgb();\n  }\n\n  function color(format) {\n    var m, l;\n    format = (format + \"\").trim().toLowerCase();\n    return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\n    : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00\n    : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\n    : l === 4 ? rgba(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000\n    : null // invalid hex\n    ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n    : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n    : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n    : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n    : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n    : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n    : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\n    : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0) : null;\n  }\n\n  function rgbn(n) {\n    return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n  }\n\n  function rgba(r, g, b, a) {\n    if (a <= 0) r = g = b = NaN;\n    return new Rgb(r, g, b, a);\n  }\n\n  function rgbConvert(o) {\n    if (!(o instanceof Color)) o = color(o);\n    if (!o) return new Rgb();\n    o = o.rgb();\n    return new Rgb(o.r, o.g, o.b, o.opacity);\n  }\n\n  function rgb(r, g, b, opacity) {\n    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n  }\n\n  function Rgb(r, g, b, opacity) {\n    this.r = +r;\n    this.g = +g;\n    this.b = +b;\n    this.opacity = +opacity;\n  }\n\n  define(Rgb, rgb, extend(Color, {\n    brighter: function brighter(k) {\n      k = k == null ? _brighter : Math.pow(_brighter, k);\n      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n    },\n    darker: function darker(k) {\n      k = k == null ? _darker : Math.pow(_darker, k);\n      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n    },\n    rgb: function rgb() {\n      return this;\n    },\n    displayable: function displayable() {\n      return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;\n    },\n    hex: rgb_formatHex,\n    // Deprecated! Use color.formatHex.\n    formatHex: rgb_formatHex,\n    formatRgb: rgb_formatRgb,\n    toString: rgb_formatRgb\n  }));\n\n  function rgb_formatHex() {\n    return \"#\" + hex(this.r) + hex(this.g) + hex(this.b);\n  }\n\n  function rgb_formatRgb() {\n    var a = this.opacity;\n    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n    return (a === 1 ? \"rgb(\" : \"rgba(\") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \" + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \" + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? \")\" : \", \" + a + \")\");\n  }\n\n  function hex(value) {\n    value = Math.max(0, Math.min(255, Math.round(value) || 0));\n    return (value < 16 ? \"0\" : \"\") + value.toString(16);\n  }\n\n  function hsla(h, s, l, a) {\n    if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;\n    return new Hsl(h, s, l, a);\n  }\n\n  function hslConvert(o) {\n    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n    if (!(o instanceof Color)) o = color(o);\n    if (!o) return new Hsl();\n    if (o instanceof Hsl) return o;\n    o = o.rgb();\n    var r = o.r / 255,\n        g = o.g / 255,\n        b = o.b / 255,\n        min = Math.min(r, g, b),\n        max = Math.max(r, g, b),\n        h = NaN,\n        s = max - min,\n        l = (max + min) / 2;\n\n    if (s) {\n      if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;\n      s /= l < 0.5 ? max + min : 2 - max - min;\n      h *= 60;\n    } else {\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n\n    return new Hsl(h, s, l, o.opacity);\n  }\n\n  function hsl(h, s, l, opacity) {\n    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n  }\n\n  function Hsl(h, s, l, opacity) {\n    this.h = +h;\n    this.s = +s;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n\n  define(Hsl, hsl, extend(Color, {\n    brighter: function brighter(k) {\n      k = k == null ? _brighter : Math.pow(_brighter, k);\n      return new Hsl(this.h, this.s, this.l * k, this.opacity);\n    },\n    darker: function darker(k) {\n      k = k == null ? _darker : Math.pow(_darker, k);\n      return new Hsl(this.h, this.s, this.l * k, this.opacity);\n    },\n    rgb: function rgb() {\n      var h = this.h % 360 + (this.h < 0) * 360,\n          s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n          l = this.l,\n          m2 = l + (l < 0.5 ? l : 1 - l) * s,\n          m1 = 2 * l - m2;\n      return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);\n    },\n    displayable: function displayable() {\n      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;\n    },\n    formatHsl: function formatHsl() {\n      var a = this.opacity;\n      a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n      return (a === 1 ? \"hsl(\" : \"hsla(\") + (this.h || 0) + \", \" + (this.s || 0) * 100 + \"%, \" + (this.l || 0) * 100 + \"%\" + (a === 1 ? \")\" : \", \" + a + \")\");\n    }\n  }));\n  /* From FvD 13.37, CSS Color Module Level 3 */\n\n  function hsl2rgb(h, m1, m2) {\n    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;\n  }\n\n  var constant$1 = function constant$1(x) {\n    return function () {\n      return x;\n    };\n  };\n\n  function linear(a, d) {\n    return function (t) {\n      return a + t * d;\n    };\n  }\n\n  function exponential(a, b, y) {\n    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {\n      return Math.pow(a + t * b, y);\n    };\n  }\n\n  function gamma(y) {\n    return (y = +y) === 1 ? nogamma : function (a, b) {\n      return b - a ? exponential(a, b, y) : constant$1(isNaN(a) ? b : a);\n    };\n  }\n\n  function nogamma(a, b) {\n    var d = b - a;\n    return d ? linear(a, d) : constant$1(isNaN(a) ? b : a);\n  }\n\n  var interpolateRgb = function rgbGamma(y) {\n    var color = gamma(y);\n\n    function rgb$1(start, end) {\n      var r = color((start = rgb(start)).r, (end = rgb(end)).r),\n          g = color(start.g, end.g),\n          b = color(start.b, end.b),\n          opacity = nogamma(start.opacity, end.opacity);\n      return function (t) {\n        start.r = r(t);\n        start.g = g(t);\n        start.b = b(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n\n    rgb$1.gamma = rgbGamma;\n    return rgb$1;\n  }(1);\n\n  function interpolateNumber(a, b) {\n    return a = +a, b = +b, function (t) {\n      return a * (1 - t) + b * t;\n    };\n  }\n\n  var reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n      reB = new RegExp(reA.source, \"g\");\n\n  function zero(b) {\n    return function () {\n      return b;\n    };\n  }\n\n  function one(b) {\n    return function (t) {\n      return b(t) + \"\";\n    };\n  }\n\n  function interpolateString(a, b) {\n    var bi = reA.lastIndex = reB.lastIndex = 0,\n        // scan index for next number in b\n    am,\n        // current match in a\n    bm,\n        // current match in b\n    bs,\n        // string preceding current number in b, if any\n    i = -1,\n        // index in s\n    s = [],\n        // string constants and placeholders\n    q = []; // number interpolators\n    // Coerce inputs to strings.\n\n    a = a + \"\", b = b + \"\"; // Interpolate pairs of numbers in a & b.\n\n    while ((am = reA.exec(a)) && (bm = reB.exec(b))) {\n      if ((bs = bm.index) > bi) {\n        // a string precedes the next number in b\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; // coalesce with previous string\n        else s[++i] = bs;\n      }\n\n      if ((am = am[0]) === (bm = bm[0])) {\n        // numbers in a & b match\n        if (s[i]) s[i] += bm; // coalesce with previous string\n        else s[++i] = bm;\n      } else {\n        // interpolate non-matching numbers\n        s[++i] = null;\n        q.push({\n          i: i,\n          x: interpolateNumber(am, bm)\n        });\n      }\n\n      bi = reB.lastIndex;\n    } // Add remains of b.\n\n\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    } // Special optimization for only a single match.\n    // Otherwise, interpolate each of the numbers and rejoin the string.\n\n\n    return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {\n      for (var i = 0, o; i < b; ++i) {\n        s[(o = q[i]).i] = o.x(t);\n      }\n\n      return s.join(\"\");\n    });\n  }\n\n  var degrees = 180 / Math.PI;\n  var identity = {\n    translateX: 0,\n    translateY: 0,\n    rotate: 0,\n    skewX: 0,\n    scaleX: 1,\n    scaleY: 1\n  };\n\n  function decompose(a, b, c, d, e, f) {\n    var scaleX, scaleY, skewX;\n    if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n    if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n    if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n    if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n    return {\n      translateX: e,\n      translateY: f,\n      rotate: Math.atan2(b, a) * degrees,\n      skewX: Math.atan(skewX) * degrees,\n      scaleX: scaleX,\n      scaleY: scaleY\n    };\n  }\n\n  var svgNode;\n  /* eslint-disable no-undef */\n\n  function parseCss(value) {\n    var m = new (typeof DOMMatrix === \"function\" ? DOMMatrix : WebKitCSSMatrix)(value + \"\");\n    return m.isIdentity ? identity : decompose(m.a, m.b, m.c, m.d, m.e, m.f);\n  }\n\n  function parseSvg(value) {\n    if (value == null) return identity;\n    if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n    svgNode.setAttribute(\"transform\", value);\n    if (!(value = svgNode.transform.baseVal.consolidate())) return identity;\n    value = value.matrix;\n    return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\n  }\n\n  function interpolateTransform(parse, pxComma, pxParen, degParen) {\n    function pop(s) {\n      return s.length ? s.pop() + \" \" : \"\";\n    }\n\n    function translate(xa, ya, xb, yb, s, q) {\n      if (xa !== xb || ya !== yb) {\n        var i = s.push(\"translate(\", null, pxComma, null, pxParen);\n        q.push({\n          i: i - 4,\n          x: interpolateNumber(xa, xb)\n        }, {\n          i: i - 2,\n          x: interpolateNumber(ya, yb)\n        });\n      } else if (xb || yb) {\n        s.push(\"translate(\" + xb + pxComma + yb + pxParen);\n      }\n    }\n\n    function rotate(a, b, s, q) {\n      if (a !== b) {\n        if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path\n\n        q.push({\n          i: s.push(pop(s) + \"rotate(\", null, degParen) - 2,\n          x: interpolateNumber(a, b)\n        });\n      } else if (b) {\n        s.push(pop(s) + \"rotate(\" + b + degParen);\n      }\n    }\n\n    function skewX(a, b, s, q) {\n      if (a !== b) {\n        q.push({\n          i: s.push(pop(s) + \"skewX(\", null, degParen) - 2,\n          x: interpolateNumber(a, b)\n        });\n      } else if (b) {\n        s.push(pop(s) + \"skewX(\" + b + degParen);\n      }\n    }\n\n    function scale(xa, ya, xb, yb, s, q) {\n      if (xa !== xb || ya !== yb) {\n        var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\n        q.push({\n          i: i - 4,\n          x: interpolateNumber(xa, xb)\n        }, {\n          i: i - 2,\n          x: interpolateNumber(ya, yb)\n        });\n      } else if (xb !== 1 || yb !== 1) {\n        s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\n      }\n    }\n\n    return function (a, b) {\n      var s = [],\n          // string constants and placeholders\n      q = []; // number interpolators\n\n      a = parse(a), b = parse(b);\n      translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n      rotate(a.rotate, b.rotate, s, q);\n      skewX(a.skewX, b.skewX, s, q);\n      scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n      a = b = null; // gc\n\n      return function (t) {\n        var i = -1,\n            n = q.length,\n            o;\n\n        while (++i < n) {\n          s[(o = q[i]).i] = o.x(t);\n        }\n\n        return s.join(\"\");\n      };\n    };\n  }\n\n  var interpolateTransformCss = interpolateTransform(parseCss, \"px, \", \"px)\", \"deg)\");\n  var interpolateTransformSvg = interpolateTransform(parseSvg, \", \", \")\", \")\");\n\n  function tweenRemove(id, name) {\n    var tween0, tween1;\n    return function () {\n      var schedule = set$1(this, id),\n          tween = schedule.tween; // If this node shared tween with the previous node,\n      // just assign the updated shared tween and we’re done!\n      // Otherwise, copy-on-write.\n\n      if (tween !== tween0) {\n        tween1 = tween0 = tween;\n\n        for (var i = 0, n = tween1.length; i < n; ++i) {\n          if (tween1[i].name === name) {\n            tween1 = tween1.slice();\n            tween1.splice(i, 1);\n            break;\n          }\n        }\n      }\n\n      schedule.tween = tween1;\n    };\n  }\n\n  function tweenFunction(id, name, value) {\n    var tween0, tween1;\n    if (typeof value !== \"function\") throw new Error();\n    return function () {\n      var schedule = set$1(this, id),\n          tween = schedule.tween; // If this node shared tween with the previous node,\n      // just assign the updated shared tween and we’re done!\n      // Otherwise, copy-on-write.\n\n      if (tween !== tween0) {\n        tween1 = (tween0 = tween).slice();\n\n        for (var t = {\n          name: name,\n          value: value\n        }, i = 0, n = tween1.length; i < n; ++i) {\n          if (tween1[i].name === name) {\n            tween1[i] = t;\n            break;\n          }\n        }\n\n        if (i === n) tween1.push(t);\n      }\n\n      schedule.tween = tween1;\n    };\n  }\n\n  function transition_tween(name, value) {\n    var id = this._id;\n    name += \"\";\n\n    if (arguments.length < 2) {\n      var tween = get$1(this.node(), id).tween;\n\n      for (var i = 0, n = tween.length, t; i < n; ++i) {\n        if ((t = tween[i]).name === name) {\n          return t.value;\n        }\n      }\n\n      return null;\n    }\n\n    return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));\n  }\n\n  function tweenValue(transition, name, value) {\n    var id = transition._id;\n    transition.each(function () {\n      var schedule = set$1(this, id);\n      (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);\n    });\n    return function (node) {\n      return get$1(node, id).value[name];\n    };\n  }\n\n  function interpolate(a, b) {\n    var c;\n    return (typeof b === \"number\" ? interpolateNumber : b instanceof color ? interpolateRgb : (c = color(b)) ? (b = c, interpolateRgb) : interpolateString)(a, b);\n  }\n\n  function attrRemove$1(name) {\n    return function () {\n      this.removeAttribute(name);\n    };\n  }\n\n  function attrRemoveNS$1(fullname) {\n    return function () {\n      this.removeAttributeNS(fullname.space, fullname.local);\n    };\n  }\n\n  function attrConstant$1(name, interpolate, value1) {\n    var string00,\n        string1 = value1 + \"\",\n        interpolate0;\n    return function () {\n      var string0 = this.getAttribute(name);\n      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);\n    };\n  }\n\n  function attrConstantNS$1(fullname, interpolate, value1) {\n    var string00,\n        string1 = value1 + \"\",\n        interpolate0;\n    return function () {\n      var string0 = this.getAttributeNS(fullname.space, fullname.local);\n      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);\n    };\n  }\n\n  function attrFunction$1(name, interpolate, value) {\n    var string00, string10, interpolate0;\n    return function () {\n      var string0,\n          value1 = value(this),\n          string1;\n      if (value1 == null) return void this.removeAttribute(name);\n      string0 = this.getAttribute(name);\n      string1 = value1 + \"\";\n      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n    };\n  }\n\n  function attrFunctionNS$1(fullname, interpolate, value) {\n    var string00, string10, interpolate0;\n    return function () {\n      var string0,\n          value1 = value(this),\n          string1;\n      if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);\n      string0 = this.getAttributeNS(fullname.space, fullname.local);\n      string1 = value1 + \"\";\n      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n    };\n  }\n\n  function transition_attr(name, value) {\n    var fullname = namespace(name),\n        i = fullname === \"transform\" ? interpolateTransformSvg : interpolate;\n    return this.attrTween(name, typeof value === \"function\" ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, \"attr.\" + name, value)) : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname) : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value));\n  }\n\n  function attrInterpolate(name, i) {\n    return function (t) {\n      this.setAttribute(name, i.call(this, t));\n    };\n  }\n\n  function attrInterpolateNS(fullname, i) {\n    return function (t) {\n      this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));\n    };\n  }\n\n  function attrTweenNS(fullname, value) {\n    var t0, i0;\n\n    function tween() {\n      var i = value.apply(this, arguments);\n      if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);\n      return t0;\n    }\n\n    tween._value = value;\n    return tween;\n  }\n\n  function attrTween(name, value) {\n    var t0, i0;\n\n    function tween() {\n      var i = value.apply(this, arguments);\n      if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);\n      return t0;\n    }\n\n    tween._value = value;\n    return tween;\n  }\n\n  function transition_attrTween(name, value) {\n    var key = \"attr.\" + name;\n    if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n    if (value == null) return this.tween(key, null);\n    if (typeof value !== \"function\") throw new Error();\n    var fullname = namespace(name);\n    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));\n  }\n\n  function delayFunction(id, value) {\n    return function () {\n      init(this, id).delay = +value.apply(this, arguments);\n    };\n  }\n\n  function delayConstant(id, value) {\n    return value = +value, function () {\n      init(this, id).delay = value;\n    };\n  }\n\n  function transition_delay(value) {\n    var id = this._id;\n    return arguments.length ? this.each((typeof value === \"function\" ? delayFunction : delayConstant)(id, value)) : get$1(this.node(), id).delay;\n  }\n\n  function durationFunction(id, value) {\n    return function () {\n      set$1(this, id).duration = +value.apply(this, arguments);\n    };\n  }\n\n  function durationConstant(id, value) {\n    return value = +value, function () {\n      set$1(this, id).duration = value;\n    };\n  }\n\n  function transition_duration(value) {\n    var id = this._id;\n    return arguments.length ? this.each((typeof value === \"function\" ? durationFunction : durationConstant)(id, value)) : get$1(this.node(), id).duration;\n  }\n\n  function easeConstant(id, value) {\n    if (typeof value !== \"function\") throw new Error();\n    return function () {\n      set$1(this, id).ease = value;\n    };\n  }\n\n  function transition_ease(value) {\n    var id = this._id;\n    return arguments.length ? this.each(easeConstant(id, value)) : get$1(this.node(), id).ease;\n  }\n\n  function easeVarying(id, value) {\n    return function () {\n      var v = value.apply(this, arguments);\n      if (typeof v !== \"function\") throw new Error();\n      set$1(this, id).ease = v;\n    };\n  }\n\n  function transition_easeVarying(value) {\n    if (typeof value !== \"function\") throw new Error();\n    return this.each(easeVarying(this._id, value));\n  }\n\n  function transition_filter(match) {\n    if (typeof match !== \"function\") match = matcher(match);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n          subgroup.push(node);\n        }\n      }\n    }\n\n    return new Transition(subgroups, this._parents, this._name, this._id);\n  }\n\n  function transition_merge(transition) {\n    if (transition._id !== this._id) throw new Error();\n\n    for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group0[i] || group1[i]) {\n          merge[i] = node;\n        }\n      }\n    }\n\n    for (; j < m0; ++j) {\n      merges[j] = groups0[j];\n    }\n\n    return new Transition(merges, this._parents, this._name, this._id);\n  }\n\n  function start(name) {\n    return (name + \"\").trim().split(/^|\\s+/).every(function (t) {\n      var i = t.indexOf(\".\");\n      if (i >= 0) t = t.slice(0, i);\n      return !t || t === \"start\";\n    });\n  }\n\n  function onFunction(id, name, listener) {\n    var on0,\n        on1,\n        sit = start(name) ? init : set$1;\n    return function () {\n      var schedule = sit(this, id),\n          on = schedule.on; // If this node shared a dispatch with the previous node,\n      // just assign the updated shared dispatch and we’re done!\n      // Otherwise, copy-on-write.\n\n      if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);\n      schedule.on = on1;\n    };\n  }\n\n  function transition_on(name, listener) {\n    var id = this._id;\n    return arguments.length < 2 ? get$1(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));\n  }\n\n  function removeFunction(id) {\n    return function () {\n      var parent = this.parentNode;\n\n      for (var i in this.__transition) {\n        if (+i !== id) return;\n      }\n\n      if (parent) parent.removeChild(this);\n    };\n  }\n\n  function transition_remove() {\n    return this.on(\"end.remove\", removeFunction(this._id));\n  }\n\n  function transition_select(select) {\n    var name = this._name,\n        id = this._id;\n    if (typeof select !== \"function\") select = selector(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          subgroup[i] = subnode;\n          schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));\n        }\n      }\n    }\n\n    return new Transition(subgroups, this._parents, name, id);\n  }\n\n  function transition_selectAll(select) {\n    var name = this._name,\n        id = this._id;\n    if (typeof select !== \"function\") select = selectorAll(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          for (var children = select.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {\n            if (child = children[k]) {\n              schedule(child, name, id, k, children, inherit);\n            }\n          }\n\n          subgroups.push(children);\n          parents.push(node);\n        }\n      }\n    }\n\n    return new Transition(subgroups, parents, name, id);\n  }\n\n  var Selection$1 = selection.prototype.constructor;\n\n  function transition_selection() {\n    return new Selection$1(this._groups, this._parents);\n  }\n\n  function styleNull(name, interpolate) {\n    var string00, string10, interpolate0;\n    return function () {\n      var string0 = styleValue(this, name),\n          string1 = (this.style.removeProperty(name), styleValue(this, name));\n      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);\n    };\n  }\n\n  function styleRemove$1(name) {\n    return function () {\n      this.style.removeProperty(name);\n    };\n  }\n\n  function styleConstant$1(name, interpolate, value1) {\n    var string00,\n        string1 = value1 + \"\",\n        interpolate0;\n    return function () {\n      var string0 = styleValue(this, name);\n      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);\n    };\n  }\n\n  function styleFunction$1(name, interpolate, value) {\n    var string00, string10, interpolate0;\n    return function () {\n      var string0 = styleValue(this, name),\n          value1 = value(this),\n          string1 = value1 + \"\";\n      if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));\n      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n    };\n  }\n\n  function styleMaybeRemove(id, name) {\n    var on0,\n        on1,\n        listener0,\n        key = \"style.\" + name,\n        event = \"end.\" + key,\n        remove;\n    return function () {\n      var schedule = set$1(this, id),\n          on = schedule.on,\n          listener = schedule.value[key] == null ? remove || (remove = styleRemove$1(name)) : undefined; // If this node shared a dispatch with the previous node,\n      // just assign the updated shared dispatch and we’re done!\n      // Otherwise, copy-on-write.\n\n      if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);\n      schedule.on = on1;\n    };\n  }\n\n  function transition_style(name, value, priority) {\n    var i = (name += \"\") === \"transform\" ? interpolateTransformCss : interpolate;\n    return value == null ? this.styleTween(name, styleNull(name, i)).on(\"end.style.\" + name, styleRemove$1(name)) : typeof value === \"function\" ? this.styleTween(name, styleFunction$1(name, i, tweenValue(this, \"style.\" + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant$1(name, i, value), priority).on(\"end.style.\" + name, null);\n  }\n\n  function styleInterpolate(name, i, priority) {\n    return function (t) {\n      this.style.setProperty(name, i.call(this, t), priority);\n    };\n  }\n\n  function styleTween(name, value, priority) {\n    var t, i0;\n\n    function tween() {\n      var i = value.apply(this, arguments);\n      if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);\n      return t;\n    }\n\n    tween._value = value;\n    return tween;\n  }\n\n  function transition_styleTween(name, value, priority) {\n    var key = \"style.\" + (name += \"\");\n    if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n    if (value == null) return this.tween(key, null);\n    if (typeof value !== \"function\") throw new Error();\n    return this.tween(key, styleTween(name, value, priority == null ? \"\" : priority));\n  }\n\n  function textConstant$1(value) {\n    return function () {\n      this.textContent = value;\n    };\n  }\n\n  function textFunction$1(value) {\n    return function () {\n      var value1 = value(this);\n      this.textContent = value1 == null ? \"\" : value1;\n    };\n  }\n\n  function transition_text(value) {\n    return this.tween(\"text\", typeof value === \"function\" ? textFunction$1(tweenValue(this, \"text\", value)) : textConstant$1(value == null ? \"\" : value + \"\"));\n  }\n\n  function textInterpolate(i) {\n    return function (t) {\n      this.textContent = i.call(this, t);\n    };\n  }\n\n  function textTween(value) {\n    var t0, i0;\n\n    function tween() {\n      var i = value.apply(this, arguments);\n      if (i !== i0) t0 = (i0 = i) && textInterpolate(i);\n      return t0;\n    }\n\n    tween._value = value;\n    return tween;\n  }\n\n  function transition_textTween(value) {\n    var key = \"text\";\n    if (arguments.length < 1) return (key = this.tween(key)) && key._value;\n    if (value == null) return this.tween(key, null);\n    if (typeof value !== \"function\") throw new Error();\n    return this.tween(key, textTween(value));\n  }\n\n  function transition_transition() {\n    var name = this._name,\n        id0 = this._id,\n        id1 = newId();\n\n    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          var inherit = get$1(node, id0);\n          schedule(node, name, id1, i, group, {\n            time: inherit.time + inherit.delay + inherit.duration,\n            delay: 0,\n            duration: inherit.duration,\n            ease: inherit.ease\n          });\n        }\n      }\n    }\n\n    return new Transition(groups, this._parents, name, id1);\n  }\n\n  function transition_end() {\n    var on0,\n        on1,\n        that = this,\n        id = that._id,\n        size = that.size();\n    return new Promise(function (resolve, reject) {\n      var cancel = {\n        value: reject\n      },\n          end = {\n        value: function value() {\n          if (--size === 0) resolve();\n        }\n      };\n      that.each(function () {\n        var schedule = set$1(this, id),\n            on = schedule.on; // If this node shared a dispatch with the previous node,\n        // just assign the updated shared dispatch and we’re done!\n        // Otherwise, copy-on-write.\n\n        if (on !== on0) {\n          on1 = (on0 = on).copy();\n\n          on1._.cancel.push(cancel);\n\n          on1._.interrupt.push(cancel);\n\n          on1._.end.push(end);\n        }\n\n        schedule.on = on1;\n      }); // The selection was empty, resolve end immediately\n\n      if (size === 0) resolve();\n    });\n  }\n\n  var id = 0;\n\n  function Transition(groups, parents, name, id) {\n    this._groups = groups;\n    this._parents = parents;\n    this._name = name;\n    this._id = id;\n  }\n\n  function transition(name) {\n    return selection().transition(name);\n  }\n\n  function newId() {\n    return ++id;\n  }\n\n  var selection_prototype = selection.prototype;\n  Transition.prototype = transition.prototype = _defineProperty2({\n    constructor: Transition,\n    select: transition_select,\n    selectAll: transition_selectAll,\n    filter: transition_filter,\n    merge: transition_merge,\n    selection: transition_selection,\n    transition: transition_transition,\n    call: selection_prototype.call,\n    nodes: selection_prototype.nodes,\n    node: selection_prototype.node,\n    size: selection_prototype.size,\n    empty: selection_prototype.empty,\n    each: selection_prototype.each,\n    on: transition_on,\n    attr: transition_attr,\n    attrTween: transition_attrTween,\n    style: transition_style,\n    styleTween: transition_styleTween,\n    text: transition_text,\n    textTween: transition_textTween,\n    remove: transition_remove,\n    tween: transition_tween,\n    delay: transition_delay,\n    duration: transition_duration,\n    ease: transition_ease,\n    easeVarying: transition_easeVarying,\n    end: transition_end\n  }, Symbol.iterator, selection_prototype[Symbol.iterator]);\n\n  function cubicInOut(t) {\n    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\n  }\n\n  var defaultTiming = {\n    time: null,\n    // Set on use.\n    delay: 0,\n    duration: 250,\n    ease: cubicInOut\n  };\n\n  function inherit(node, id) {\n    var timing;\n\n    while (!(timing = node.__transition) || !(timing = timing[id])) {\n      if (!(node = node.parentNode)) {\n        throw new Error(\"transition \".concat(id, \" not found\"));\n      }\n    }\n\n    return timing;\n  }\n\n  function selection_transition(name) {\n    var id, timing;\n\n    if (name instanceof Transition) {\n      id = name._id, name = name._name;\n    } else {\n      id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + \"\";\n    }\n\n    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          schedule(node, name, id, i, group, timing || inherit(node, id));\n        }\n      }\n    }\n\n    return new Transition(groups, this._parents, name, id);\n  }\n\n  selection.prototype.interrupt = selection_interrupt;\n  selection.prototype.transition = selection_transition;\n\n  function max(values, valueof) {\n    var max;\n\n    if (valueof === undefined) {\n      var _iterator2 = _createForOfIteratorHelper(values),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var value = _step2.value;\n\n          if (value != null && (max < value || max === undefined && value >= value)) {\n            max = value;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    } else {\n      var index = -1;\n\n      var _iterator3 = _createForOfIteratorHelper(values),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _value = _step3.value;\n\n          if ((_value = valueof(_value, ++index, values)) != null && (max < _value || max === undefined && _value >= _value)) {\n            max = _value;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n\n    return max;\n  }\n\n  function min(values, valueof) {\n    var min;\n\n    if (valueof === undefined) {\n      var _iterator4 = _createForOfIteratorHelper(values),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var value = _step4.value;\n\n          if (value != null && (min > value || min === undefined && value >= value)) {\n            min = value;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    } else {\n      var index = -1;\n\n      var _iterator5 = _createForOfIteratorHelper(values),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _value2 = _step5.value;\n\n          if ((_value2 = valueof(_value2, ++index, values)) != null && (min > _value2 || min === undefined && _value2 >= _value2)) {\n            min = _value2;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n\n    return min;\n  }\n\n  function flatten(arrays) {\n    var _iterator6, _step6, _array;\n\n    return regeneratorRuntime.wrap(function flatten$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _iterator6 = _createForOfIteratorHelper(arrays);\n            _context2.prev = 1;\n\n            _iterator6.s();\n\n          case 3:\n            if ((_step6 = _iterator6.n()).done) {\n              _context2.next = 8;\n              break;\n            }\n\n            _array = _step6.value;\n            return _context2.delegateYield(_array, \"t0\", 6);\n\n          case 6:\n            _context2.next = 3;\n            break;\n\n          case 8:\n            _context2.next = 13;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t1 = _context2[\"catch\"](1);\n\n            _iterator6.e(_context2.t1);\n\n          case 13:\n            _context2.prev = 13;\n\n            _iterator6.f();\n\n            return _context2.finish(13);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _marked2, null, [[1, 10, 13, 16]]);\n  }\n\n  function merge(arrays) {\n    return Array.from(flatten(arrays));\n  }\n\n  function sum(values, valueof) {\n    var sum = 0;\n\n    if (valueof === undefined) {\n      var _iterator7 = _createForOfIteratorHelper(values),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var value = _step7.value;\n\n          if (value = +value) {\n            sum += value;\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    } else {\n      var index = -1;\n\n      var _iterator8 = _createForOfIteratorHelper(values),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _value3 = _step8.value;\n\n          if (_value3 = +valueof(_value3, ++index, values)) {\n            sum += _value3;\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n\n    return sum;\n  }\n  /**\n      @function accessor\n      @desc Wraps an object key in a simple accessor function.\n      @param {String} key The key to be returned from each Object passed to the function.\n      @param {*} [def] A default value to be returned if the key is not present.\n      @example <caption>this</caption>\n  accessor(\"id\");\n      @example <caption>returns this</caption>\n  function(d) {\n    return d[\"id\"];\n  }\n  */\n\n\n  function accessor(key, def) {\n    if (def === void 0) return function (d) {\n      return d[key];\n    };\n    return function (d) {\n      return d[key] === void 0 ? def : d[key];\n    };\n  }\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function _typeof(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n  /**\n      @function isObject\n      @desc Detects if a variable is a javascript Object.\n      @param {*} item\n  */\n\n\n  function isObject(item) {\n    return item && _typeof(item) === \"object\" && (typeof window === \"undefined\" || item !== window && item !== window.document && !(item instanceof Element)) && !Array.isArray(item) ? true : false;\n  }\n  /**\n      @function validObject\n      @desc Determines if the object passed is the document or window.\n      @param {Object} obj\n      @private\n  */\n\n\n  function validObject(obj) {\n    if (typeof window === \"undefined\") return true;else return obj !== window && obj !== document;\n  }\n  /**\n      @function assign\n      @desc A deeply recursive version of `Object.assign`.\n      @param {...Object} objects\n      @example <caption>this</caption>\n  assign({id: \"foo\", deep: {group: \"A\"}}, {id: \"bar\", deep: {value: 20}}));\n      @example <caption>returns this</caption>\n  {id: \"bar\", deep: {group: \"A\", value: 20}}\n  */\n\n\n  function assign() {\n    var _arguments = arguments;\n    var target = arguments.length <= 0 ? undefined : arguments[0];\n\n    var _loop = function _loop(i) {\n      var source = i < 0 || _arguments.length <= i ? undefined : _arguments[i];\n      Object.keys(source).forEach(function (prop) {\n        var value = source[prop];\n\n        if (isObject(value) && validObject(value)) {\n          if (target.hasOwnProperty(prop) && isObject(target[prop])) target[prop] = assign({}, target[prop], value);else target[prop] = assign({}, value);\n        } else if (Array.isArray(value)) target[prop] = value.slice();else target[prop] = value;\n      });\n    };\n\n    for (var i = 1; i < arguments.length; i++) {\n      _loop(i);\n    }\n\n    return target;\n  }\n\n  var aa = {\n    language: \"Afar\",\n    location: null,\n    id: 4096,\n    tag: \"aa\",\n    version: \"Release 10\"\n  };\n  var af = {\n    language: \"Afrikaans\",\n    location: null,\n    id: 54,\n    tag: \"af\",\n    version: \"Release 7\"\n  };\n  var agq = {\n    language: \"Aghem\",\n    location: null,\n    id: 4096,\n    tag: \"agq\",\n    version: \"Release 10\"\n  };\n  var ak = {\n    language: \"Akan\",\n    location: null,\n    id: 4096,\n    tag: \"ak\",\n    version: \"Release 10\"\n  };\n  var sq = {\n    language: \"Albanian\",\n    location: null,\n    id: 28,\n    tag: \"sq\",\n    version: \"Release 7\"\n  };\n  var gsw = {\n    language: \"Alsatian\",\n    location: null,\n    id: 132,\n    tag: \"gsw\",\n    version: \"Release 7\"\n  };\n  var am = {\n    language: \"Amharic\",\n    location: null,\n    id: 94,\n    tag: \"am\",\n    version: \"Release 7\"\n  };\n  var ar = {\n    language: \"Arabic\",\n    location: null,\n    id: 1,\n    tag: \"ar\",\n    version: \"Release 7\"\n  };\n  var hy = {\n    language: \"Armenian\",\n    location: null,\n    id: 43,\n    tag: \"hy\",\n    version: \"Release 7\"\n  };\n  var as = {\n    language: \"Assamese\",\n    location: null,\n    id: 77,\n    tag: \"as\",\n    version: \"Release 7\"\n  };\n  var ast = {\n    language: \"Asturian\",\n    location: null,\n    id: 4096,\n    tag: \"ast\",\n    version: \"Release 10\"\n  };\n  var asa = {\n    language: \"Asu\",\n    location: null,\n    id: 4096,\n    tag: \"asa\",\n    version: \"Release 10\"\n  };\n  var az = {\n    language: \"Azerbaijani (Latin)\",\n    location: null,\n    id: 44,\n    tag: \"az\",\n    version: \"Release 7\"\n  };\n  var ksf = {\n    language: \"Bafia\",\n    location: null,\n    id: 4096,\n    tag: \"ksf\",\n    version: \"Release 10\"\n  };\n  var bm = {\n    language: \"Bamanankan\",\n    location: null,\n    id: 4096,\n    tag: \"bm\",\n    version: \"Release 10\"\n  };\n  var bn = {\n    language: \"Bangla\",\n    location: null,\n    id: 69,\n    tag: \"bn\",\n    version: \"Release 7\"\n  };\n  var bas = {\n    language: \"Basaa\",\n    location: null,\n    id: 4096,\n    tag: \"bas\",\n    version: \"Release 10\"\n  };\n  var ba = {\n    language: \"Bashkir\",\n    location: null,\n    id: 109,\n    tag: \"ba\",\n    version: \"Release 7\"\n  };\n  var eu = {\n    language: \"Basque\",\n    location: null,\n    id: 45,\n    tag: \"eu\",\n    version: \"Release 7\"\n  };\n  var be = {\n    language: \"Belarusian\",\n    location: null,\n    id: 35,\n    tag: \"be\",\n    version: \"Release 7\"\n  };\n  var bem = {\n    language: \"Bemba\",\n    location: null,\n    id: 4096,\n    tag: \"bem\",\n    version: \"Release 10\"\n  };\n  var bez = {\n    language: \"Bena\",\n    location: null,\n    id: 4096,\n    tag: \"bez\",\n    version: \"Release 10\"\n  };\n  var byn = {\n    language: \"Blin\",\n    location: null,\n    id: 4096,\n    tag: \"byn\",\n    version: \"Release 10\"\n  };\n  var brx = {\n    language: \"Bodo\",\n    location: null,\n    id: 4096,\n    tag: \"brx\",\n    version: \"Release 10\"\n  };\n  var bs = {\n    language: \"Bosnian (Latin)\",\n    location: null,\n    id: 30746,\n    tag: \"bs\",\n    version: \"Release 7\"\n  };\n  var br = {\n    language: \"Breton\",\n    location: null,\n    id: 126,\n    tag: \"br\",\n    version: \"Release 7\"\n  };\n  var bg = {\n    language: \"Bulgarian\",\n    location: null,\n    id: 2,\n    tag: \"bg\",\n    version: \"Release 7\"\n  };\n  var my = {\n    language: \"Burmese\",\n    location: null,\n    id: 85,\n    tag: \"my\",\n    version: \"Release 8.1\"\n  };\n  var ca = {\n    language: \"Catalan\",\n    location: null,\n    id: 3,\n    tag: \"ca\",\n    version: \"Release 7\"\n  };\n  var ceb = {\n    language: \"Cebuano\",\n    location: null,\n    id: 4096,\n    tag: \"ceb\",\n    version: \"Release 10.5\"\n  };\n  var ku = {\n    language: \"Central Kurdish\",\n    location: null,\n    id: 146,\n    tag: \"ku\",\n    version: \"Release 8\"\n  };\n  var ccp = {\n    language: \"Chakma\",\n    location: null,\n    id: 4096,\n    tag: \"ccp\",\n    version: \"Release 10.5\"\n  };\n  var chr = {\n    language: \"Cherokee\",\n    location: null,\n    id: 92,\n    tag: \"chr\",\n    version: \"Release 8\"\n  };\n  var cgg = {\n    language: \"Chiga\",\n    location: null,\n    id: 4096,\n    tag: \"cgg\",\n    version: \"Release 10\"\n  };\n  var zh = {\n    language: \"Chinese (Simplified)\",\n    location: null,\n    id: 30724,\n    tag: \"zh\",\n    version: \"Windows 7\"\n  };\n  var swc = {\n    language: \"Congo Swahili\",\n    location: null,\n    id: 4096,\n    tag: \"swc\",\n    version: \"Release 10\"\n  };\n  var kw = {\n    language: \"Cornish\",\n    location: null,\n    id: 4096,\n    tag: \"kw\",\n    version: \"Release 10\"\n  };\n  var co = {\n    language: \"Corsican\",\n    location: null,\n    id: 131,\n    tag: \"co\",\n    version: \"Release 7\"\n  };\n  var cs = {\n    language: \"Czech\",\n    location: null,\n    id: 5,\n    tag: \"cs\",\n    version: \"Release 7\"\n  };\n  var da = {\n    language: \"Danish\",\n    location: null,\n    id: 6,\n    tag: \"da\",\n    version: \"Release 7\"\n  };\n  var prs = {\n    language: \"Dari\",\n    location: null,\n    id: 140,\n    tag: \"prs\",\n    version: \"Release 7\"\n  };\n  var dv = {\n    language: \"Divehi\",\n    location: null,\n    id: 101,\n    tag: \"dv\",\n    version: \"Release 7\"\n  };\n  var dua = {\n    language: \"Duala\",\n    location: null,\n    id: 4096,\n    tag: \"dua\",\n    version: \"Release 10\"\n  };\n  var nl = {\n    language: \"Dutch\",\n    location: null,\n    id: 19,\n    tag: \"nl\",\n    version: \"Release 7\"\n  };\n  var dz = {\n    language: \"Dzongkha\",\n    location: null,\n    id: 4096,\n    tag: \"dz\",\n    version: \"Release 10\"\n  };\n  var ebu = {\n    language: \"Embu\",\n    location: null,\n    id: 4096,\n    tag: \"ebu\",\n    version: \"Release 10\"\n  };\n  var en = {\n    language: \"English\",\n    location: null,\n    id: 9,\n    tag: \"en\",\n    version: \"Release 7\"\n  };\n  var eo = {\n    language: \"Esperanto\",\n    location: null,\n    id: 4096,\n    tag: \"eo\",\n    version: \"Release 10\"\n  };\n  var et = {\n    language: \"Estonian\",\n    location: null,\n    id: 37,\n    tag: \"et\",\n    version: \"Release 7\"\n  };\n  var ee = {\n    language: \"Ewe\",\n    location: null,\n    id: 4096,\n    tag: \"ee\",\n    version: \"Release 10\"\n  };\n  var ewo = {\n    language: \"Ewondo\",\n    location: null,\n    id: 4096,\n    tag: \"ewo\",\n    version: \"Release 10\"\n  };\n  var fo = {\n    language: \"Faroese\",\n    location: null,\n    id: 56,\n    tag: \"fo\",\n    version: \"Release 7\"\n  };\n  var fil = {\n    language: \"Filipino\",\n    location: null,\n    id: 100,\n    tag: \"fil\",\n    version: \"Release 7\"\n  };\n  var fi = {\n    language: \"Finnish\",\n    location: null,\n    id: 11,\n    tag: \"fi\",\n    version: \"Release 7\"\n  };\n  var fr = {\n    language: \"French\",\n    location: null,\n    id: 12,\n    tag: \"fr\",\n    version: \"Release 7\"\n  };\n  var fy = {\n    language: \"Frisian\",\n    location: null,\n    id: 98,\n    tag: \"fy\",\n    version: \"Release 7\"\n  };\n  var fur = {\n    language: \"Friulian\",\n    location: null,\n    id: 4096,\n    tag: \"fur\",\n    version: \"Release 10\"\n  };\n  var ff = {\n    language: \"Fulah\",\n    location: null,\n    id: 103,\n    tag: \"ff\",\n    version: \"Release 8\"\n  };\n  var gl = {\n    language: \"Galician\",\n    location: null,\n    id: 86,\n    tag: \"gl\",\n    version: \"Release 7\"\n  };\n  var lg = {\n    language: \"Ganda\",\n    location: null,\n    id: 4096,\n    tag: \"lg\",\n    version: \"Release 10\"\n  };\n  var ka = {\n    language: \"Georgian\",\n    location: null,\n    id: 55,\n    tag: \"ka\",\n    version: \"Release 7\"\n  };\n  var de = {\n    language: \"German\",\n    location: null,\n    id: 7,\n    tag: \"de\",\n    version: \"Release 7\"\n  };\n  var el = {\n    language: \"Greek\",\n    location: null,\n    id: 8,\n    tag: \"el\",\n    version: \"Release 7\"\n  };\n  var kl = {\n    language: \"Greenlandic\",\n    location: null,\n    id: 111,\n    tag: \"kl\",\n    version: \"Release 7\"\n  };\n  var gn = {\n    language: \"Guarani\",\n    location: null,\n    id: 116,\n    tag: \"gn\",\n    version: \"Release 8.1\"\n  };\n  var gu = {\n    language: \"Gujarati\",\n    location: null,\n    id: 71,\n    tag: \"gu\",\n    version: \"Release 7\"\n  };\n  var guz = {\n    language: \"Gusii\",\n    location: null,\n    id: 4096,\n    tag: \"guz\",\n    version: \"Release 10\"\n  };\n  var ha = {\n    language: \"Hausa (Latin)\",\n    location: null,\n    id: 104,\n    tag: \"ha\",\n    version: \"Release 7\"\n  };\n  var haw = {\n    language: \"Hawaiian\",\n    location: null,\n    id: 117,\n    tag: \"haw\",\n    version: \"Release 8\"\n  };\n  var he = {\n    language: \"Hebrew\",\n    location: null,\n    id: 13,\n    tag: \"he\",\n    version: \"Release 7\"\n  };\n  var hi = {\n    language: \"Hindi\",\n    location: null,\n    id: 57,\n    tag: \"hi\",\n    version: \"Release 7\"\n  };\n  var hu = {\n    language: \"Hungarian\",\n    location: null,\n    id: 14,\n    tag: \"hu\",\n    version: \"Release 7\"\n  };\n  var is = {\n    language: \"Icelandic\",\n    location: null,\n    id: 15,\n    tag: \"is\",\n    version: \"Release 7\"\n  };\n  var ig = {\n    language: \"Igbo\",\n    location: null,\n    id: 112,\n    tag: \"ig\",\n    version: \"Release 7\"\n  };\n  var id$1 = {\n    language: \"Indonesian\",\n    location: null,\n    id: 33,\n    tag: \"id\",\n    version: \"Release 7\"\n  };\n  var ia = {\n    language: \"Interlingua\",\n    location: null,\n    id: 4096,\n    tag: \"ia\",\n    version: \"Release 10\"\n  };\n  var iu = {\n    language: \"Inuktitut (Latin)\",\n    location: null,\n    id: 93,\n    tag: \"iu\",\n    version: \"Release 7\"\n  };\n  var ga = {\n    language: \"Irish\",\n    location: null,\n    id: 60,\n    tag: \"ga\",\n    version: \"Windows 7\"\n  };\n  var it = {\n    language: \"Italian\",\n    location: null,\n    id: 16,\n    tag: \"it\",\n    version: \"Release 7\"\n  };\n  var ja = {\n    language: \"Japanese\",\n    location: null,\n    id: 17,\n    tag: \"ja\",\n    version: \"Release 7\"\n  };\n  var jv = {\n    language: \"Javanese\",\n    location: null,\n    id: 4096,\n    tag: \"jv\",\n    version: \"Release 8.1\"\n  };\n  var dyo = {\n    language: \"Jola-Fonyi\",\n    location: null,\n    id: 4096,\n    tag: \"dyo\",\n    version: \"Release 10\"\n  };\n  var kea = {\n    language: \"Kabuverdianu\",\n    location: null,\n    id: 4096,\n    tag: \"kea\",\n    version: \"Release 10\"\n  };\n  var kab = {\n    language: \"Kabyle\",\n    location: null,\n    id: 4096,\n    tag: \"kab\",\n    version: \"Release 10\"\n  };\n  var kkj = {\n    language: \"Kako\",\n    location: null,\n    id: 4096,\n    tag: \"kkj\",\n    version: \"Release 10\"\n  };\n  var kln = {\n    language: \"Kalenjin\",\n    location: null,\n    id: 4096,\n    tag: \"kln\",\n    version: \"Release 10\"\n  };\n  var kam = {\n    language: \"Kamba\",\n    location: null,\n    id: 4096,\n    tag: \"kam\",\n    version: \"Release 10\"\n  };\n  var kn = {\n    language: \"Kannada\",\n    location: null,\n    id: 75,\n    tag: \"kn\",\n    version: \"Release 7\"\n  };\n  var ks = {\n    language: \"Kashmiri\",\n    location: null,\n    id: 96,\n    tag: \"ks\",\n    version: \"Release 10\"\n  };\n  var kk = {\n    language: \"Kazakh\",\n    location: null,\n    id: 63,\n    tag: \"kk\",\n    version: \"Release 7\"\n  };\n  var km = {\n    language: \"Khmer\",\n    location: null,\n    id: 83,\n    tag: \"km\",\n    version: \"Release 7\"\n  };\n  var quc = {\n    language: \"K'iche\",\n    location: null,\n    id: 134,\n    tag: \"quc\",\n    version: \"Release 10\"\n  };\n  var ki = {\n    language: \"Kikuyu\",\n    location: null,\n    id: 4096,\n    tag: \"ki\",\n    version: \"Release 10\"\n  };\n  var rw = {\n    language: \"Kinyarwanda\",\n    location: null,\n    id: 135,\n    tag: \"rw\",\n    version: \"Release 7\"\n  };\n  var sw = {\n    language: \"Kiswahili\",\n    location: null,\n    id: 65,\n    tag: \"sw\",\n    version: \"Release 7\"\n  };\n  var kok = {\n    language: \"Konkani\",\n    location: null,\n    id: 87,\n    tag: \"kok\",\n    version: \"Release 7\"\n  };\n  var ko = {\n    language: \"Korean\",\n    location: null,\n    id: 18,\n    tag: \"ko\",\n    version: \"Release 7\"\n  };\n  var khq = {\n    language: \"Koyra Chiini\",\n    location: null,\n    id: 4096,\n    tag: \"khq\",\n    version: \"Release 10\"\n  };\n  var ses = {\n    language: \"Koyraboro Senni\",\n    location: null,\n    id: 4096,\n    tag: \"ses\",\n    version: \"Release 10\"\n  };\n  var nmg = {\n    language: \"Kwasio\",\n    location: null,\n    id: 4096,\n    tag: \"nmg\",\n    version: \"Release 10\"\n  };\n  var ky = {\n    language: \"Kyrgyz\",\n    location: null,\n    id: 64,\n    tag: \"ky\",\n    version: \"Release 7\"\n  };\n  var lkt = {\n    language: \"Lakota\",\n    location: null,\n    id: 4096,\n    tag: \"lkt\",\n    version: \"Release 10\"\n  };\n  var lag = {\n    language: \"Langi\",\n    location: null,\n    id: 4096,\n    tag: \"lag\",\n    version: \"Release 10\"\n  };\n  var lo = {\n    language: \"Lao\",\n    location: null,\n    id: 84,\n    tag: \"lo\",\n    version: \"Release 7\"\n  };\n  var lv = {\n    language: \"Latvian\",\n    location: null,\n    id: 38,\n    tag: \"lv\",\n    version: \"Release 7\"\n  };\n  var ln = {\n    language: \"Lingala\",\n    location: null,\n    id: 4096,\n    tag: \"ln\",\n    version: \"Release 10\"\n  };\n  var lt = {\n    language: \"Lithuanian\",\n    location: null,\n    id: 39,\n    tag: \"lt\",\n    version: \"Release 7\"\n  };\n  var nds = {\n    language: \"Low German\",\n    location: null,\n    id: 4096,\n    tag: \"nds\",\n    version: \"Release 10.2\"\n  };\n  var dsb = {\n    language: \"Lower Sorbian\",\n    location: null,\n    id: 31790,\n    tag: \"dsb\",\n    version: \"Windows 7\"\n  };\n  var lu = {\n    language: \"Luba-Katanga\",\n    location: null,\n    id: 4096,\n    tag: \"lu\",\n    version: \"Release 10\"\n  };\n  var luo = {\n    language: \"Luo\",\n    location: null,\n    id: 4096,\n    tag: \"luo\",\n    version: \"Release 10\"\n  };\n  var lb = {\n    language: \"Luxembourgish\",\n    location: null,\n    id: 110,\n    tag: \"lb\",\n    version: \"Release 7\"\n  };\n  var luy = {\n    language: \"Luyia\",\n    location: null,\n    id: 4096,\n    tag: \"luy\",\n    version: \"Release 10\"\n  };\n  var mk = {\n    language: \"Macedonian\",\n    location: null,\n    id: 47,\n    tag: \"mk\",\n    version: \"Release 7\"\n  };\n  var jmc = {\n    language: \"Machame\",\n    location: null,\n    id: 4096,\n    tag: \"jmc\",\n    version: \"Release 10\"\n  };\n  var mgh = {\n    language: \"Makhuwa-Meetto\",\n    location: null,\n    id: 4096,\n    tag: \"mgh\",\n    version: \"Release 10\"\n  };\n  var kde = {\n    language: \"Makonde\",\n    location: null,\n    id: 4096,\n    tag: \"kde\",\n    version: \"Release 10\"\n  };\n  var mg = {\n    language: \"Malagasy\",\n    location: null,\n    id: 4096,\n    tag: \"mg\",\n    version: \"Release 8.1\"\n  };\n  var ms = {\n    language: \"Malay\",\n    location: null,\n    id: 62,\n    tag: \"ms\",\n    version: \"Release 7\"\n  };\n  var ml = {\n    language: \"Malayalam\",\n    location: null,\n    id: 76,\n    tag: \"ml\",\n    version: \"Release 7\"\n  };\n  var mt = {\n    language: \"Maltese\",\n    location: null,\n    id: 58,\n    tag: \"mt\",\n    version: \"Release 7\"\n  };\n  var gv = {\n    language: \"Manx\",\n    location: null,\n    id: 4096,\n    tag: \"gv\",\n    version: \"Release 10\"\n  };\n  var mi = {\n    language: \"Maori\",\n    location: null,\n    id: 129,\n    tag: \"mi\",\n    version: \"Release 7\"\n  };\n  var arn = {\n    language: \"Mapudungun\",\n    location: null,\n    id: 122,\n    tag: \"arn\",\n    version: \"Release 7\"\n  };\n  var mr = {\n    language: \"Marathi\",\n    location: null,\n    id: 78,\n    tag: \"mr\",\n    version: \"Release 7\"\n  };\n  var mas = {\n    language: \"Masai\",\n    location: null,\n    id: 4096,\n    tag: \"mas\",\n    version: \"Release 10\"\n  };\n  var mer = {\n    language: \"Meru\",\n    location: null,\n    id: 4096,\n    tag: \"mer\",\n    version: \"Release 10\"\n  };\n  var mgo = {\n    language: \"Meta'\",\n    location: null,\n    id: 4096,\n    tag: \"mgo\",\n    version: \"Release 10\"\n  };\n  var moh = {\n    language: \"Mohawk\",\n    location: null,\n    id: 124,\n    tag: \"moh\",\n    version: \"Release 7\"\n  };\n  var mn = {\n    language: \"Mongolian (Cyrillic)\",\n    location: null,\n    id: 80,\n    tag: \"mn\",\n    version: \"Release 7\"\n  };\n  var mfe = {\n    language: \"Morisyen\",\n    location: null,\n    id: 4096,\n    tag: \"mfe\",\n    version: \"Release 10\"\n  };\n  var mua = {\n    language: \"Mundang\",\n    location: null,\n    id: 4096,\n    tag: \"mua\",\n    version: \"Release 10\"\n  };\n  var nqo = {\n    language: \"N'ko\",\n    location: null,\n    id: 4096,\n    tag: \"nqo\",\n    version: \"Release 8.1\"\n  };\n  var naq = {\n    language: \"Nama\",\n    location: null,\n    id: 4096,\n    tag: \"naq\",\n    version: \"Release 10\"\n  };\n  var ne = {\n    language: \"Nepali\",\n    location: null,\n    id: 97,\n    tag: \"ne\",\n    version: \"Release 7\"\n  };\n  var nnh = {\n    language: \"Ngiemboon\",\n    location: null,\n    id: 4096,\n    tag: \"nnh\",\n    version: \"Release 10\"\n  };\n  var jgo = {\n    language: \"Ngomba\",\n    location: null,\n    id: 4096,\n    tag: \"jgo\",\n    version: \"Release 10\"\n  };\n  var nd = {\n    language: \"North Ndebele\",\n    location: null,\n    id: 4096,\n    tag: \"nd\",\n    version: \"Release 10\"\n  };\n  var no = {\n    language: \"Norwegian (Bokmal)\",\n    location: null,\n    id: 20,\n    tag: \"no\",\n    version: \"Release 7\"\n  };\n  var nb = {\n    language: \"Norwegian (Bokmal)\",\n    location: null,\n    id: 31764,\n    tag: \"nb\",\n    version: \"Release 7\"\n  };\n  var nn = {\n    language: \"Norwegian (Nynorsk)\",\n    location: null,\n    id: 30740,\n    tag: \"nn\",\n    version: \"Release 7\"\n  };\n  var nus = {\n    language: \"Nuer\",\n    location: null,\n    id: 4096,\n    tag: \"nus\",\n    version: \"Release 10\"\n  };\n  var nyn = {\n    language: \"Nyankole\",\n    location: null,\n    id: 4096,\n    tag: \"nyn\",\n    version: \"Release 10\"\n  };\n  var oc = {\n    language: \"Occitan\",\n    location: null,\n    id: 130,\n    tag: \"oc\",\n    version: \"Release 7\"\n  };\n  var or = {\n    language: \"Odia\",\n    location: null,\n    id: 72,\n    tag: \"or\",\n    version: \"Release 7\"\n  };\n  var om = {\n    language: \"Oromo\",\n    location: null,\n    id: 114,\n    tag: \"om\",\n    version: \"Release 8.1\"\n  };\n  var os = {\n    language: \"Ossetian\",\n    location: null,\n    id: 4096,\n    tag: \"os\",\n    version: \"Release 10\"\n  };\n  var ps = {\n    language: \"Pashto\",\n    location: null,\n    id: 99,\n    tag: \"ps\",\n    version: \"Release 7\"\n  };\n  var fa = {\n    language: \"Persian\",\n    location: null,\n    id: 41,\n    tag: \"fa\",\n    version: \"Release 7\"\n  };\n  var pl = {\n    language: \"Polish\",\n    location: null,\n    id: 21,\n    tag: \"pl\",\n    version: \"Release 7\"\n  };\n  var pt = {\n    language: \"Portuguese\",\n    location: null,\n    id: 22,\n    tag: \"pt\",\n    version: \"Release 7\"\n  };\n  var pa = {\n    language: \"Punjabi\",\n    location: null,\n    id: 70,\n    tag: \"pa\",\n    version: \"Release 7\"\n  };\n  var quz = {\n    language: \"Quechua\",\n    location: null,\n    id: 107,\n    tag: \"quz\",\n    version: \"Release 7\"\n  };\n  var ksh = {\n    language: \"Ripuarian\",\n    location: null,\n    id: 4096,\n    tag: \"ksh\",\n    version: \"Release 10\"\n  };\n  var ro = {\n    language: \"Romanian\",\n    location: null,\n    id: 24,\n    tag: \"ro\",\n    version: \"Release 7\"\n  };\n  var rm = {\n    language: \"Romansh\",\n    location: null,\n    id: 23,\n    tag: \"rm\",\n    version: \"Release 7\"\n  };\n  var rof = {\n    language: \"Rombo\",\n    location: null,\n    id: 4096,\n    tag: \"rof\",\n    version: \"Release 10\"\n  };\n  var rn = {\n    language: \"Rundi\",\n    location: null,\n    id: 4096,\n    tag: \"rn\",\n    version: \"Release 10\"\n  };\n  var ru = {\n    language: \"Russian\",\n    location: null,\n    id: 25,\n    tag: \"ru\",\n    version: \"Release 7\"\n  };\n  var rwk = {\n    language: \"Rwa\",\n    location: null,\n    id: 4096,\n    tag: \"rwk\",\n    version: \"Release 10\"\n  };\n  var ssy = {\n    language: \"Saho\",\n    location: null,\n    id: 4096,\n    tag: \"ssy\",\n    version: \"Release 10\"\n  };\n  var sah = {\n    language: \"Sakha\",\n    location: null,\n    id: 133,\n    tag: \"sah\",\n    version: \"Release 7\"\n  };\n  var saq = {\n    language: \"Samburu\",\n    location: null,\n    id: 4096,\n    tag: \"saq\",\n    version: \"Release 10\"\n  };\n  var smn = {\n    language: \"Sami (Inari)\",\n    location: null,\n    id: 28731,\n    tag: \"smn\",\n    version: \"Windows 7\"\n  };\n  var smj = {\n    language: \"Sami (Lule)\",\n    location: null,\n    id: 31803,\n    tag: \"smj\",\n    version: \"Windows 7\"\n  };\n  var se = {\n    language: \"Sami (Northern)\",\n    location: null,\n    id: 59,\n    tag: \"se\",\n    version: \"Release 7\"\n  };\n  var sms = {\n    language: \"Sami (Skolt)\",\n    location: null,\n    id: 29755,\n    tag: \"sms\",\n    version: \"Windows 7\"\n  };\n  var sma = {\n    language: \"Sami (Southern)\",\n    location: null,\n    id: 30779,\n    tag: \"sma\",\n    version: \"Windows 7\"\n  };\n  var sg = {\n    language: \"Sango\",\n    location: null,\n    id: 4096,\n    tag: \"sg\",\n    version: \"Release 10\"\n  };\n  var sbp = {\n    language: \"Sangu\",\n    location: null,\n    id: 4096,\n    tag: \"sbp\",\n    version: \"Release 10\"\n  };\n  var sa = {\n    language: \"Sanskrit\",\n    location: null,\n    id: 79,\n    tag: \"sa\",\n    version: \"Release 7\"\n  };\n  var gd = {\n    language: \"Scottish Gaelic\",\n    location: null,\n    id: 145,\n    tag: \"gd\",\n    version: \"Windows 7\"\n  };\n  var seh = {\n    language: \"Sena\",\n    location: null,\n    id: 4096,\n    tag: \"seh\",\n    version: \"Release 10\"\n  };\n  var sr = {\n    language: \"Serbian (Latin)\",\n    location: null,\n    id: 31770,\n    tag: \"sr\",\n    version: \"Release 7\"\n  };\n  var nso = {\n    language: \"Sesotho sa Leboa\",\n    location: null,\n    id: 108,\n    tag: \"nso\",\n    version: \"Release 7\"\n  };\n  var tn = {\n    language: \"Setswana\",\n    location: null,\n    id: 50,\n    tag: \"tn\",\n    version: \"Release 7\"\n  };\n  var ksb = {\n    language: \"Shambala\",\n    location: null,\n    id: 4096,\n    tag: \"ksb\",\n    version: \"Release 10\"\n  };\n  var sn = {\n    language: \"Shona\",\n    location: null,\n    id: 4096,\n    tag: \"sn\",\n    version: \"Release 8.1\"\n  };\n  var sd = {\n    language: \"Sindhi\",\n    location: null,\n    id: 89,\n    tag: \"sd\",\n    version: \"Release 8\"\n  };\n  var si = {\n    language: \"Sinhala\",\n    location: null,\n    id: 91,\n    tag: \"si\",\n    version: \"Release 7\"\n  };\n  var sk = {\n    language: \"Slovak\",\n    location: null,\n    id: 27,\n    tag: \"sk\",\n    version: \"Release 7\"\n  };\n  var sl = {\n    language: \"Slovenian\",\n    location: null,\n    id: 36,\n    tag: \"sl\",\n    version: \"Release 7\"\n  };\n  var xog = {\n    language: \"Soga\",\n    location: null,\n    id: 4096,\n    tag: \"xog\",\n    version: \"Release 10\"\n  };\n  var so = {\n    language: \"Somali\",\n    location: null,\n    id: 119,\n    tag: \"so\",\n    version: \"Release 8.1\"\n  };\n  var st = {\n    language: \"Sotho\",\n    location: null,\n    id: 48,\n    tag: \"st\",\n    version: \"Release 8.1\"\n  };\n  var nr = {\n    language: \"South Ndebele\",\n    location: null,\n    id: 4096,\n    tag: \"nr\",\n    version: \"Release 10\"\n  };\n  var es = {\n    language: \"Spanish\",\n    location: null,\n    id: 10,\n    tag: \"es\",\n    version: \"Release 7\"\n  };\n  var zgh = {\n    language: \"Standard Moroccan Tamazight\",\n    location: null,\n    id: 4096,\n    tag: \"zgh\",\n    version: \"Release 8.1\"\n  };\n  var ss = {\n    language: \"Swati\",\n    location: null,\n    id: 4096,\n    tag: \"ss\",\n    version: \"Release 10\"\n  };\n  var sv = {\n    language: \"Swedish\",\n    location: null,\n    id: 29,\n    tag: \"sv\",\n    version: \"Release 7\"\n  };\n  var syr = {\n    language: \"Syriac\",\n    location: null,\n    id: 90,\n    tag: \"syr\",\n    version: \"Release 7\"\n  };\n  var shi = {\n    language: \"Tachelhit\",\n    location: null,\n    id: 4096,\n    tag: \"shi\",\n    version: \"Release 10\"\n  };\n  var dav = {\n    language: \"Taita\",\n    location: null,\n    id: 4096,\n    tag: \"dav\",\n    version: \"Release 10\"\n  };\n  var tg = {\n    language: \"Tajik (Cyrillic)\",\n    location: null,\n    id: 40,\n    tag: \"tg\",\n    version: \"Release 7\"\n  };\n  var tzm = {\n    language: \"Tamazight (Latin)\",\n    location: null,\n    id: 95,\n    tag: \"tzm\",\n    version: \"Release 7\"\n  };\n  var ta = {\n    language: \"Tamil\",\n    location: null,\n    id: 73,\n    tag: \"ta\",\n    version: \"Release 7\"\n  };\n  var twq = {\n    language: \"Tasawaq\",\n    location: null,\n    id: 4096,\n    tag: \"twq\",\n    version: \"Release 10\"\n  };\n  var tt = {\n    language: \"Tatar\",\n    location: null,\n    id: 68,\n    tag: \"tt\",\n    version: \"Release 7\"\n  };\n  var te = {\n    language: \"Telugu\",\n    location: null,\n    id: 74,\n    tag: \"te\",\n    version: \"Release 7\"\n  };\n  var teo = {\n    language: \"Teso\",\n    location: null,\n    id: 4096,\n    tag: \"teo\",\n    version: \"Release 10\"\n  };\n  var th = {\n    language: \"Thai\",\n    location: null,\n    id: 30,\n    tag: \"th\",\n    version: \"Release 7\"\n  };\n  var bo = {\n    language: \"Tibetan\",\n    location: null,\n    id: 81,\n    tag: \"bo\",\n    version: \"Release 7\"\n  };\n  var tig = {\n    language: \"Tigre\",\n    location: null,\n    id: 4096,\n    tag: \"tig\",\n    version: \"Release 10\"\n  };\n  var ti = {\n    language: \"Tigrinya\",\n    location: null,\n    id: 115,\n    tag: \"ti\",\n    version: \"Release 8\"\n  };\n  var to = {\n    language: \"Tongan\",\n    location: null,\n    id: 4096,\n    tag: \"to\",\n    version: \"Release 10\"\n  };\n  var ts = {\n    language: \"Tsonga\",\n    location: null,\n    id: 49,\n    tag: \"ts\",\n    version: \"Release 8.1\"\n  };\n  var tr = {\n    language: \"Turkish\",\n    location: null,\n    id: 31,\n    tag: \"tr\",\n    version: \"Release 7\"\n  };\n  var tk = {\n    language: \"Turkmen\",\n    location: null,\n    id: 66,\n    tag: \"tk\",\n    version: \"Release 7\"\n  };\n  var uk = {\n    language: \"Ukrainian\",\n    location: null,\n    id: 34,\n    tag: \"uk\",\n    version: \"Release 7\"\n  };\n  var hsb = {\n    language: \"Upper Sorbian\",\n    location: null,\n    id: 46,\n    tag: \"hsb\",\n    version: \"Release 7\"\n  };\n  var ur = {\n    language: \"Urdu\",\n    location: null,\n    id: 32,\n    tag: \"ur\",\n    version: \"Release 7\"\n  };\n  var ug = {\n    language: \"Uyghur\",\n    location: null,\n    id: 128,\n    tag: \"ug\",\n    version: \"Release 7\"\n  };\n  var uz = {\n    language: \"Uzbek (Latin)\",\n    location: null,\n    id: 67,\n    tag: \"uz\",\n    version: \"Release 7\"\n  };\n  var vai = {\n    language: \"Vai\",\n    location: null,\n    id: 4096,\n    tag: \"vai\",\n    version: \"Release 10\"\n  };\n  var ve = {\n    language: \"Venda\",\n    location: null,\n    id: 51,\n    tag: \"ve\",\n    version: \"Release 10\"\n  };\n  var vi = {\n    language: \"Vietnamese\",\n    location: null,\n    id: 42,\n    tag: \"vi\",\n    version: \"Release 7\"\n  };\n  var vo = {\n    language: \"Volapük\",\n    location: null,\n    id: 4096,\n    tag: \"vo\",\n    version: \"Release 10\"\n  };\n  var vun = {\n    language: \"Vunjo\",\n    location: null,\n    id: 4096,\n    tag: \"vun\",\n    version: \"Release 10\"\n  };\n  var wae = {\n    language: \"Walser\",\n    location: null,\n    id: 4096,\n    tag: \"wae\",\n    version: \"Release 10\"\n  };\n  var cy = {\n    language: \"Welsh\",\n    location: null,\n    id: 82,\n    tag: \"cy\",\n    version: \"Release 7\"\n  };\n  var wal = {\n    language: \"Wolaytta\",\n    location: null,\n    id: 4096,\n    tag: \"wal\",\n    version: \"Release 10\"\n  };\n  var wo = {\n    language: \"Wolof\",\n    location: null,\n    id: 136,\n    tag: \"wo\",\n    version: \"Release 7\"\n  };\n  var xh = {\n    language: \"Xhosa\",\n    location: null,\n    id: 52,\n    tag: \"xh\",\n    version: \"Release 7\"\n  };\n  var yav = {\n    language: \"Yangben\",\n    location: null,\n    id: 4096,\n    tag: \"yav\",\n    version: \"Release 10\"\n  };\n  var ii = {\n    language: \"Yi\",\n    location: null,\n    id: 120,\n    tag: \"ii\",\n    version: \"Release 7\"\n  };\n  var yo = {\n    language: \"Yoruba\",\n    location: null,\n    id: 106,\n    tag: \"yo\",\n    version: \"Release 7\"\n  };\n  var dje = {\n    language: \"Zarma\",\n    location: null,\n    id: 4096,\n    tag: \"dje\",\n    version: \"Release 10\"\n  };\n  var zu = {\n    language: \"Zulu\",\n    location: null,\n    id: 53,\n    tag: \"zu\",\n    version: \"Release 7\"\n  };\n  var lcid = {\n    aa: aa,\n    \"aa-dj\": {\n      language: \"Afar\",\n      location: \"Djibouti\",\n      id: 4096,\n      tag: \"aa-DJ\",\n      version: \"Release 10\"\n    },\n    \"aa-er\": {\n      language: \"Afar\",\n      location: \"Eritrea\",\n      id: 4096,\n      tag: \"aa-ER\",\n      version: \"Release 10\"\n    },\n    \"aa-et\": {\n      language: \"Afar\",\n      location: \"Ethiopia\",\n      id: 4096,\n      tag: \"aa-ET\",\n      version: \"Release 10\"\n    },\n    af: af,\n    \"af-na\": {\n      language: \"Afrikaans\",\n      location: \"Namibia\",\n      id: 4096,\n      tag: \"af-NA\",\n      version: \"Release 10\"\n    },\n    \"af-za\": {\n      language: \"Afrikaans\",\n      location: \"South Africa\",\n      id: 1078,\n      tag: \"af-ZA\",\n      version: \"Release B\"\n    },\n    agq: agq,\n    \"agq-cm\": {\n      language: \"Aghem\",\n      location: \"Cameroon\",\n      id: 4096,\n      tag: \"agq-CM\",\n      version: \"Release 10\"\n    },\n    ak: ak,\n    \"ak-gh\": {\n      language: \"Akan\",\n      location: \"Ghana\",\n      id: 4096,\n      tag: \"ak-GH\",\n      version: \"Release 10\"\n    },\n    sq: sq,\n    \"sq-al\": {\n      language: \"Albanian\",\n      location: \"Albania\",\n      id: 1052,\n      tag: \"sq-AL\",\n      version: \"Release B\"\n    },\n    \"sq-mk\": {\n      language: \"Albanian\",\n      location: \"North Macedonia\",\n      id: 4096,\n      tag: \"sq-MK\",\n      version: \"Release 10\"\n    },\n    gsw: gsw,\n    \"gsw-fr\": {\n      language: \"Alsatian\",\n      location: \"France\",\n      id: 1156,\n      tag: \"gsw-FR\",\n      version: \"Release V\"\n    },\n    \"gsw-li\": {\n      language: \"Alsatian\",\n      location: \"Liechtenstein\",\n      id: 4096,\n      tag: \"gsw-LI\",\n      version: \"Release 10\"\n    },\n    \"gsw-ch\": {\n      language: \"Alsatian\",\n      location: \"Switzerland\",\n      id: 4096,\n      tag: \"gsw-CH\",\n      version: \"Release 10\"\n    },\n    am: am,\n    \"am-et\": {\n      language: \"Amharic\",\n      location: \"Ethiopia\",\n      id: 1118,\n      tag: \"am-ET\",\n      version: \"Release V\"\n    },\n    ar: ar,\n    \"ar-dz\": {\n      language: \"Arabic\",\n      location: \"Algeria\",\n      id: 5121,\n      tag: \"ar-DZ\",\n      version: \"Release B\"\n    },\n    \"ar-bh\": {\n      language: \"Arabic\",\n      location: \"Bahrain\",\n      id: 15361,\n      tag: \"ar-BH\",\n      version: \"Release B\"\n    },\n    \"ar-td\": {\n      language: \"Arabic\",\n      location: \"Chad\",\n      id: 4096,\n      tag: \"ar-TD\",\n      version: \"Release 10\"\n    },\n    \"ar-km\": {\n      language: \"Arabic\",\n      location: \"Comoros\",\n      id: 4096,\n      tag: \"ar-KM\",\n      version: \"Release 10\"\n    },\n    \"ar-dj\": {\n      language: \"Arabic\",\n      location: \"Djibouti\",\n      id: 4096,\n      tag: \"ar-DJ\",\n      version: \"Release 10\"\n    },\n    \"ar-eg\": {\n      language: \"Arabic\",\n      location: \"Egypt\",\n      id: 3073,\n      tag: \"ar-EG\",\n      version: \"Release B\"\n    },\n    \"ar-er\": {\n      language: \"Arabic\",\n      location: \"Eritrea\",\n      id: 4096,\n      tag: \"ar-ER\",\n      version: \"Release 10\"\n    },\n    \"ar-iq\": {\n      language: \"Arabic\",\n      location: \"Iraq\",\n      id: 2049,\n      tag: \"ar-IQ\",\n      version: \"Release B\"\n    },\n    \"ar-il\": {\n      language: \"Arabic\",\n      location: \"Israel\",\n      id: 4096,\n      tag: \"ar-IL\",\n      version: \"Release 10\"\n    },\n    \"ar-jo\": {\n      language: \"Arabic\",\n      location: \"Jordan\",\n      id: 11265,\n      tag: \"ar-JO\",\n      version: \"Release B\"\n    },\n    \"ar-kw\": {\n      language: \"Arabic\",\n      location: \"Kuwait\",\n      id: 13313,\n      tag: \"ar-KW\",\n      version: \"Release B\"\n    },\n    \"ar-lb\": {\n      language: \"Arabic\",\n      location: \"Lebanon\",\n      id: 12289,\n      tag: \"ar-LB\",\n      version: \"Release B\"\n    },\n    \"ar-ly\": {\n      language: \"Arabic\",\n      location: \"Libya\",\n      id: 4097,\n      tag: \"ar-LY\",\n      version: \"Release B\"\n    },\n    \"ar-mr\": {\n      language: \"Arabic\",\n      location: \"Mauritania\",\n      id: 4096,\n      tag: \"ar-MR\",\n      version: \"Release 10\"\n    },\n    \"ar-ma\": {\n      language: \"Arabic\",\n      location: \"Morocco\",\n      id: 6145,\n      tag: \"ar-MA\",\n      version: \"Release B\"\n    },\n    \"ar-om\": {\n      language: \"Arabic\",\n      location: \"Oman\",\n      id: 8193,\n      tag: \"ar-OM\",\n      version: \"Release B\"\n    },\n    \"ar-ps\": {\n      language: \"Arabic\",\n      location: \"Palestinian Authority\",\n      id: 4096,\n      tag: \"ar-PS\",\n      version: \"Release 10\"\n    },\n    \"ar-qa\": {\n      language: \"Arabic\",\n      location: \"Qatar\",\n      id: 16385,\n      tag: \"ar-QA\",\n      version: \"Release B\"\n    },\n    \"ar-sa\": {\n      language: \"Arabic\",\n      location: \"Saudi Arabia\",\n      id: 1025,\n      tag: \"ar-SA\",\n      version: \"Release B\"\n    },\n    \"ar-so\": {\n      language: \"Arabic\",\n      location: \"Somalia\",\n      id: 4096,\n      tag: \"ar-SO\",\n      version: \"Release 10\"\n    },\n    \"ar-ss\": {\n      language: \"Arabic\",\n      location: \"South Sudan\",\n      id: 4096,\n      tag: \"ar-SS\",\n      version: \"Release 10\"\n    },\n    \"ar-sd\": {\n      language: \"Arabic\",\n      location: \"Sudan\",\n      id: 4096,\n      tag: \"ar-SD\",\n      version: \"Release 10\"\n    },\n    \"ar-sy\": {\n      language: \"Arabic\",\n      location: \"Syria\",\n      id: 10241,\n      tag: \"ar-SY\",\n      version: \"Release B\"\n    },\n    \"ar-tn\": {\n      language: \"Arabic\",\n      location: \"Tunisia\",\n      id: 7169,\n      tag: \"ar-TN\",\n      version: \"Release B\"\n    },\n    \"ar-ae\": {\n      language: \"Arabic\",\n      location: \"U.A.E.\",\n      id: 14337,\n      tag: \"ar-AE\",\n      version: \"Release B\"\n    },\n    \"ar-001\": {\n      language: \"Arabic\",\n      location: \"World\",\n      id: 4096,\n      tag: \"ar-001\",\n      version: \"Release 10\"\n    },\n    \"ar-ye\": {\n      language: \"Arabic\",\n      location: \"Yemen\",\n      id: 9217,\n      tag: \"ar-YE\",\n      version: \"Release B\"\n    },\n    hy: hy,\n    \"hy-am\": {\n      language: \"Armenian\",\n      location: \"Armenia\",\n      id: 1067,\n      tag: \"hy-AM\",\n      version: \"Release C\"\n    },\n    as: as,\n    \"as-in\": {\n      language: \"Assamese\",\n      location: \"India\",\n      id: 1101,\n      tag: \"as-IN\",\n      version: \"Release V\"\n    },\n    ast: ast,\n    \"ast-es\": {\n      language: \"Asturian\",\n      location: \"Spain\",\n      id: 4096,\n      tag: \"ast-ES\",\n      version: \"Release 10\"\n    },\n    asa: asa,\n    \"asa-tz\": {\n      language: \"Asu\",\n      location: \"Tanzania\",\n      id: 4096,\n      tag: \"asa-TZ\",\n      version: \"Release 10\"\n    },\n    \"az-cyrl\": {\n      language: \"Azerbaijani (Cyrillic)\",\n      location: null,\n      id: 29740,\n      tag: \"az-Cyrl\",\n      version: \"Windows 7\"\n    },\n    \"az-cyrl-az\": {\n      language: \"Azerbaijani (Cyrillic)\",\n      location: \"Azerbaijan\",\n      id: 2092,\n      tag: \"az-Cyrl-AZ\",\n      version: \"Release C\"\n    },\n    az: az,\n    \"az-latn\": {\n      language: \"Azerbaijani (Latin)\",\n      location: null,\n      id: 30764,\n      tag: \"az-Latn\",\n      version: \"Windows 7\"\n    },\n    \"az-latn-az\": {\n      language: \"Azerbaijani (Latin)\",\n      location: \"Azerbaijan\",\n      id: 1068,\n      tag: \"az-Latn-AZ\",\n      version: \"Release C\"\n    },\n    ksf: ksf,\n    \"ksf-cm\": {\n      language: \"Bafia\",\n      location: \"Cameroon\",\n      id: 4096,\n      tag: \"ksf-CM\",\n      version: \"Release 10\"\n    },\n    bm: bm,\n    \"bm-latn-ml\": {\n      language: \"Bamanankan (Latin)\",\n      location: \"Mali\",\n      id: 4096,\n      tag: \"bm-Latn-ML\",\n      version: \"Release 10\"\n    },\n    bn: bn,\n    \"bn-bd\": {\n      language: \"Bangla\",\n      location: \"Bangladesh\",\n      id: 2117,\n      tag: \"bn-BD\",\n      version: \"Release V\"\n    },\n    \"bn-in\": {\n      language: \"Bangla\",\n      location: \"India\",\n      id: 1093,\n      tag: \"bn-IN\",\n      version: \"Release E1\"\n    },\n    bas: bas,\n    \"bas-cm\": {\n      language: \"Basaa\",\n      location: \"Cameroon\",\n      id: 4096,\n      tag: \"bas-CM\",\n      version: \"Release 10\"\n    },\n    ba: ba,\n    \"ba-ru\": {\n      language: \"Bashkir\",\n      location: \"Russia\",\n      id: 1133,\n      tag: \"ba-RU\",\n      version: \"Release V\"\n    },\n    eu: eu,\n    \"eu-es\": {\n      language: \"Basque\",\n      location: \"Spain\",\n      id: 1069,\n      tag: \"eu-ES\",\n      version: \"Release B\"\n    },\n    be: be,\n    \"be-by\": {\n      language: \"Belarusian\",\n      location: \"Belarus\",\n      id: 1059,\n      tag: \"be-BY\",\n      version: \"Release B\"\n    },\n    bem: bem,\n    \"bem-zm\": {\n      language: \"Bemba\",\n      location: \"Zambia\",\n      id: 4096,\n      tag: \"bem-ZM\",\n      version: \"Release 10\"\n    },\n    bez: bez,\n    \"bez-tz\": {\n      language: \"Bena\",\n      location: \"Tanzania\",\n      id: 4096,\n      tag: \"bez-TZ\",\n      version: \"Release 10\"\n    },\n    byn: byn,\n    \"byn-er\": {\n      language: \"Blin\",\n      location: \"Eritrea\",\n      id: 4096,\n      tag: \"byn-ER\",\n      version: \"Release 10\"\n    },\n    brx: brx,\n    \"brx-in\": {\n      language: \"Bodo\",\n      location: \"India\",\n      id: 4096,\n      tag: \"brx-IN\",\n      version: \"Release 10\"\n    },\n    \"bs-cyrl\": {\n      language: \"Bosnian (Cyrillic)\",\n      location: null,\n      id: 25626,\n      tag: \"bs-Cyrl\",\n      version: \"Windows 7\"\n    },\n    \"bs-cyrl-ba\": {\n      language: \"Bosnian (Cyrillic)\",\n      location: \"Bosnia and Herzegovina\",\n      id: 8218,\n      tag: \"bs-Cyrl-BA\",\n      version: \"Release E1\"\n    },\n    \"bs-latn\": {\n      language: \"Bosnian (Latin)\",\n      location: null,\n      id: 26650,\n      tag: \"bs-Latn\",\n      version: \"Windows 7\"\n    },\n    bs: bs,\n    \"bs-latn-ba\": {\n      language: \"Bosnian (Latin)\",\n      location: \"Bosnia and Herzegovina\",\n      id: 5146,\n      tag: \"bs-Latn-BA\",\n      version: \"Release E1\"\n    },\n    br: br,\n    \"br-fr\": {\n      language: \"Breton\",\n      location: \"France\",\n      id: 1150,\n      tag: \"br-FR\",\n      version: \"Release V\"\n    },\n    bg: bg,\n    \"bg-bg\": {\n      language: \"Bulgarian\",\n      location: \"Bulgaria\",\n      id: 1026,\n      tag: \"bg-BG\",\n      version: \"Release B\"\n    },\n    my: my,\n    \"my-mm\": {\n      language: \"Burmese\",\n      location: \"Myanmar\",\n      id: 1109,\n      tag: \"my-MM\",\n      version: \"Release 8.1\"\n    },\n    ca: ca,\n    \"ca-ad\": {\n      language: \"Catalan\",\n      location: \"Andorra\",\n      id: 4096,\n      tag: \"ca-AD\",\n      version: \"Release 10\"\n    },\n    \"ca-fr\": {\n      language: \"Catalan\",\n      location: \"France\",\n      id: 4096,\n      tag: \"ca-FR\",\n      version: \"Release 10\"\n    },\n    \"ca-it\": {\n      language: \"Catalan\",\n      location: \"Italy\",\n      id: 4096,\n      tag: \"ca-IT\",\n      version: \"Release 10\"\n    },\n    \"ca-es\": {\n      language: \"Catalan\",\n      location: \"Spain\",\n      id: 1027,\n      tag: \"ca-ES\",\n      version: \"Release B\"\n    },\n    ceb: ceb,\n    \"ceb-latn\": {\n      language: \"Cebuan (Latin)\",\n      location: null,\n      id: 4096,\n      tag: \"ceb-Latn\",\n      version: \"Release 10.5\"\n    },\n    \"ceb-latn-ph\": {\n      language: \"Cebuan (Latin)\",\n      location: \"Philippines\",\n      id: 4096,\n      tag: \"ceb-Latn-PH\",\n      version: \"Release 10.5\"\n    },\n    \"tzm-latn-\": {\n      language: \"Central Atlas Tamazight (Latin)\",\n      location: \"Morocco\",\n      id: 4096,\n      tag: \"tzm-Latn-\",\n      version: \"Release 10\"\n    },\n    ku: ku,\n    \"ku-arab\": {\n      language: \"Central Kurdish\",\n      location: null,\n      id: 31890,\n      tag: \"ku-Arab\",\n      version: \"Release 8\"\n    },\n    \"ku-arab-iq\": {\n      language: \"Central Kurdish\",\n      location: \"Iraq\",\n      id: 1170,\n      tag: \"ku-Arab-IQ\",\n      version: \"Release 8\"\n    },\n    ccp: ccp,\n    \"ccp-cakm\": {\n      language: \"Chakma\",\n      location: \"Chakma\",\n      id: 4096,\n      tag: \"ccp-Cakm\",\n      version: \"Release 10.5\"\n    },\n    \"ccp-cakm-\": {\n      language: \"Chakma\",\n      location: \"India\",\n      id: 4096,\n      tag: \"ccp-Cakm-\",\n      version: \"Release 10.5\"\n    },\n    \"cd-ru\": {\n      language: \"Chechen\",\n      location: \"Russia\",\n      id: 4096,\n      tag: \"cd-RU\",\n      version: \"Release 10.1\"\n    },\n    chr: chr,\n    \"chr-cher\": {\n      language: \"Cherokee\",\n      location: null,\n      id: 31836,\n      tag: \"chr-Cher\",\n      version: \"Release 8\"\n    },\n    \"chr-cher-us\": {\n      language: \"Cherokee\",\n      location: \"United States\",\n      id: 1116,\n      tag: \"chr-Cher-US\",\n      version: \"Release 8\"\n    },\n    cgg: cgg,\n    \"cgg-ug\": {\n      language: \"Chiga\",\n      location: \"Uganda\",\n      id: 4096,\n      tag: \"cgg-UG\",\n      version: \"Release 10\"\n    },\n    \"zh-hans\": {\n      language: \"Chinese (Simplified)\",\n      location: null,\n      id: 4,\n      tag: \"zh-Hans\",\n      version: \"Release A\"\n    },\n    zh: zh,\n    \"zh-cn\": {\n      language: \"Chinese (Simplified)\",\n      location: \"People's Republic of China\",\n      id: 2052,\n      tag: \"zh-CN\",\n      version: \"Release A\"\n    },\n    \"zh-sg\": {\n      language: \"Chinese (Simplified)\",\n      location: \"Singapore\",\n      id: 4100,\n      tag: \"zh-SG\",\n      version: \"Release A\"\n    },\n    \"zh-hant\": {\n      language: \"Chinese (Traditional)\",\n      location: null,\n      id: 31748,\n      tag: \"zh-Hant\",\n      version: \"Release A\"\n    },\n    \"zh-hk\": {\n      language: \"Chinese (Traditional)\",\n      location: \"Hong Kong S.A.R.\",\n      id: 3076,\n      tag: \"zh-HK\",\n      version: \"Release A\"\n    },\n    \"zh-mo\": {\n      language: \"Chinese (Traditional)\",\n      location: \"Macao S.A.R.\",\n      id: 5124,\n      tag: \"zh-MO\",\n      version: \"Release D\"\n    },\n    \"zh-tw\": {\n      language: \"Chinese (Traditional)\",\n      location: \"Taiwan\",\n      id: 1028,\n      tag: \"zh-TW\",\n      version: \"Release A\"\n    },\n    \"cu-ru\": {\n      language: \"Church Slavic\",\n      location: \"Russia\",\n      id: 4096,\n      tag: \"cu-RU\",\n      version: \"Release 10.1\"\n    },\n    swc: swc,\n    \"swc-cd\": {\n      language: \"Congo Swahili\",\n      location: \"Congo DRC\",\n      id: 4096,\n      tag: \"swc-CD\",\n      version: \"Release 10\"\n    },\n    kw: kw,\n    \"kw-gb\": {\n      language: \"Cornish\",\n      location: \"United Kingdom\",\n      id: 4096,\n      tag: \"kw-GB\",\n      version: \"Release 10\"\n    },\n    co: co,\n    \"co-fr\": {\n      language: \"Corsican\",\n      location: \"France\",\n      id: 1155,\n      tag: \"co-FR\",\n      version: \"Release V\"\n    },\n    \"hr,\": {\n      language: \"Croatian\",\n      location: null,\n      id: 26,\n      tag: \"hr,\",\n      version: \"Release 7\"\n    },\n    \"hr-hr\": {\n      language: \"Croatian\",\n      location: \"Croatia\",\n      id: 1050,\n      tag: \"hr-HR\",\n      version: \"Release A\"\n    },\n    \"hr-ba\": {\n      language: \"Croatian (Latin)\",\n      location: \"Bosnia and Herzegovina\",\n      id: 4122,\n      tag: \"hr-BA\",\n      version: \"Release E1\"\n    },\n    cs: cs,\n    \"cs-cz\": {\n      language: \"Czech\",\n      location: \"Czech Republic\",\n      id: 1029,\n      tag: \"cs-CZ\",\n      version: \"Release A\"\n    },\n    da: da,\n    \"da-dk\": {\n      language: \"Danish\",\n      location: \"Denmark\",\n      id: 1030,\n      tag: \"da-DK\",\n      version: \"Release A\"\n    },\n    \"da-gl\": {\n      language: \"Danish\",\n      location: \"Greenland\",\n      id: 4096,\n      tag: \"da-GL\",\n      version: \"Release 10\"\n    },\n    prs: prs,\n    \"prs-af\": {\n      language: \"Dari\",\n      location: \"Afghanistan\",\n      id: 1164,\n      tag: \"prs-AF\",\n      version: \"Release V\"\n    },\n    dv: dv,\n    \"dv-mv\": {\n      language: \"Divehi\",\n      location: \"Maldives\",\n      id: 1125,\n      tag: \"dv-MV\",\n      version: \"Release D\"\n    },\n    dua: dua,\n    \"dua-cm\": {\n      language: \"Duala\",\n      location: \"Cameroon\",\n      id: 4096,\n      tag: \"dua-CM\",\n      version: \"Release 10\"\n    },\n    nl: nl,\n    \"nl-aw\": {\n      language: \"Dutch\",\n      location: \"Aruba\",\n      id: 4096,\n      tag: \"nl-AW\",\n      version: \"Release 10\"\n    },\n    \"nl-be\": {\n      language: \"Dutch\",\n      location: \"Belgium\",\n      id: 2067,\n      tag: \"nl-BE\",\n      version: \"Release A\"\n    },\n    \"nl-bq\": {\n      language: \"Dutch\",\n      location: \"Bonaire, Sint Eustatius and Saba\",\n      id: 4096,\n      tag: \"nl-BQ\",\n      version: \"Release 10\"\n    },\n    \"nl-cw\": {\n      language: \"Dutch\",\n      location: \"Curaçao\",\n      id: 4096,\n      tag: \"nl-CW\",\n      version: \"Release 10\"\n    },\n    \"nl-nl\": {\n      language: \"Dutch\",\n      location: \"Netherlands\",\n      id: 1043,\n      tag: \"nl-NL\",\n      version: \"Release A\"\n    },\n    \"nl-sx\": {\n      language: \"Dutch\",\n      location: \"Sint Maarten\",\n      id: 4096,\n      tag: \"nl-SX\",\n      version: \"Release 10\"\n    },\n    \"nl-sr\": {\n      language: \"Dutch\",\n      location: \"Suriname\",\n      id: 4096,\n      tag: \"nl-SR\",\n      version: \"Release 10\"\n    },\n    dz: dz,\n    \"dz-bt\": {\n      language: \"Dzongkha\",\n      location: \"Bhutan\",\n      id: 3153,\n      tag: \"dz-BT\",\n      version: \"Release 10\"\n    },\n    ebu: ebu,\n    \"ebu-ke\": {\n      language: \"Embu\",\n      location: \"Kenya\",\n      id: 4096,\n      tag: \"ebu-KE\",\n      version: \"Release 10\"\n    },\n    en: en,\n    \"en-as\": {\n      language: \"English\",\n      location: \"American Samoa\",\n      id: 4096,\n      tag: \"en-AS\",\n      version: \"Release 10\"\n    },\n    \"en-ai\": {\n      language: \"English\",\n      location: \"Anguilla\",\n      id: 4096,\n      tag: \"en-AI\",\n      version: \"Release 10\"\n    },\n    \"en-ag\": {\n      language: \"English\",\n      location: \"Antigua and Barbuda\",\n      id: 4096,\n      tag: \"en-AG\",\n      version: \"Release 10\"\n    },\n    \"en-au\": {\n      language: \"English\",\n      location: \"Australia\",\n      id: 3081,\n      tag: \"en-AU\",\n      version: \"Release A\"\n    },\n    \"en-at\": {\n      language: \"English\",\n      location: \"Austria\",\n      id: 4096,\n      tag: \"en-AT\",\n      version: \"Release 10.1\"\n    },\n    \"en-bs\": {\n      language: \"English\",\n      location: \"Bahamas\",\n      id: 4096,\n      tag: \"en-BS\",\n      version: \"Release 10\"\n    },\n    \"en-bb\": {\n      language: \"English\",\n      location: \"Barbados\",\n      id: 4096,\n      tag: \"en-BB\",\n      version: \"Release 10\"\n    },\n    \"en-be\": {\n      language: \"English\",\n      location: \"Belgium\",\n      id: 4096,\n      tag: \"en-BE\",\n      version: \"Release 10\"\n    },\n    \"en-bz\": {\n      language: \"English\",\n      location: \"Belize\",\n      id: 10249,\n      tag: \"en-BZ\",\n      version: \"Release B\"\n    },\n    \"en-bm\": {\n      language: \"English\",\n      location: \"Bermuda\",\n      id: 4096,\n      tag: \"en-BM\",\n      version: \"Release 10\"\n    },\n    \"en-bw\": {\n      language: \"English\",\n      location: \"Botswana\",\n      id: 4096,\n      tag: \"en-BW\",\n      version: \"Release 10\"\n    },\n    \"en-io\": {\n      language: \"English\",\n      location: \"British Indian Ocean Territory\",\n      id: 4096,\n      tag: \"en-IO\",\n      version: \"Release 10\"\n    },\n    \"en-vg\": {\n      language: \"English\",\n      location: \"British Virgin Islands\",\n      id: 4096,\n      tag: \"en-VG\",\n      version: \"Release 10\"\n    },\n    \"en-bi\": {\n      language: \"English\",\n      location: \"Burundi\",\n      id: 4096,\n      tag: \"en-BI\",\n      version: \"Release 10.1\"\n    },\n    \"en-cm\": {\n      language: \"English\",\n      location: \"Cameroon\",\n      id: 4096,\n      tag: \"en-CM\",\n      version: \"Release 10\"\n    },\n    \"en-ca\": {\n      language: \"English\",\n      location: \"Canada\",\n      id: 4105,\n      tag: \"en-CA\",\n      version: \"Release A\"\n    },\n    \"en-029\": {\n      language: \"English\",\n      location: \"Caribbean\",\n      id: 9225,\n      tag: \"en-029\",\n      version: \"Release B\"\n    },\n    \"en-ky\": {\n      language: \"English\",\n      location: \"Cayman Islands\",\n      id: 4096,\n      tag: \"en-KY\",\n      version: \"Release 10\"\n    },\n    \"en-cx\": {\n      language: \"English\",\n      location: \"Christmas Island\",\n      id: 4096,\n      tag: \"en-CX\",\n      version: \"Release 10\"\n    },\n    \"en-cc\": {\n      language: \"English\",\n      location: \"Cocos [Keeling] Islands\",\n      id: 4096,\n      tag: \"en-CC\",\n      version: \"Release 10\"\n    },\n    \"en-ck\": {\n      language: \"English\",\n      location: \"Cook Islands\",\n      id: 4096,\n      tag: \"en-CK\",\n      version: \"Release 10\"\n    },\n    \"en-cy\": {\n      language: \"English\",\n      location: \"Cyprus\",\n      id: 4096,\n      tag: \"en-CY\",\n      version: \"Release 10.1\"\n    },\n    \"en-dk\": {\n      language: \"English\",\n      location: \"Denmark\",\n      id: 4096,\n      tag: \"en-DK\",\n      version: \"Release 10.1\"\n    },\n    \"en-dm\": {\n      language: \"English\",\n      location: \"Dominica\",\n      id: 4096,\n      tag: \"en-DM\",\n      version: \"Release 10\"\n    },\n    \"en-er\": {\n      language: \"English\",\n      location: \"Eritrea\",\n      id: 4096,\n      tag: \"en-ER\",\n      version: \"Release 10\"\n    },\n    \"en-150\": {\n      language: \"English\",\n      location: \"Europe\",\n      id: 4096,\n      tag: \"en-150\",\n      version: \"Release 10\"\n    },\n    \"en-fk\": {\n      language: \"English\",\n      location: \"Falkland Islands\",\n      id: 4096,\n      tag: \"en-FK\",\n      version: \"Release 10\"\n    },\n    \"en-fi\": {\n      language: \"English\",\n      location: \"Finland\",\n      id: 4096,\n      tag: \"en-FI\",\n      version: \"Release 10.1\"\n    },\n    \"en-fj\": {\n      language: \"English\",\n      location: \"Fiji\",\n      id: 4096,\n      tag: \"en-FJ\",\n      version: \"Release 10\"\n    },\n    \"en-gm\": {\n      language: \"English\",\n      location: \"Gambia\",\n      id: 4096,\n      tag: \"en-GM\",\n      version: \"Release 10\"\n    },\n    \"en-de\": {\n      language: \"English\",\n      location: \"Germany\",\n      id: 4096,\n      tag: \"en-DE\",\n      version: \"Release 10.1\"\n    },\n    \"en-gh\": {\n      language: \"English\",\n      location: \"Ghana\",\n      id: 4096,\n      tag: \"en-GH\",\n      version: \"Release 10\"\n    },\n    \"en-gi\": {\n      language: \"English\",\n      location: \"Gibraltar\",\n      id: 4096,\n      tag: \"en-GI\",\n      version: \"Release 10\"\n    },\n    \"en-gd\": {\n      language: \"English\",\n      location: \"Grenada\",\n      id: 4096,\n      tag: \"en-GD\",\n      version: \"Release 10\"\n    },\n    \"en-gu\": {\n      language: \"English\",\n      location: \"Guam\",\n      id: 4096,\n      tag: \"en-GU\",\n      version: \"Release 10\"\n    },\n    \"en-gg\": {\n      language: \"English\",\n      location: \"Guernsey\",\n      id: 4096,\n      tag: \"en-GG\",\n      version: \"Release 10\"\n    },\n    \"en-gy\": {\n      language: \"English\",\n      location: \"Guyana\",\n      id: 4096,\n      tag: \"en-GY\",\n      version: \"Release 10\"\n    },\n    \"en-hk\": {\n      language: \"English\",\n      location: \"Hong Kong\",\n      id: 15369,\n      tag: \"en-HK\",\n      version: \"Release 8.1\"\n    },\n    \"en-in\": {\n      language: \"English\",\n      location: \"India\",\n      id: 16393,\n      tag: \"en-IN\",\n      version: \"Release V\"\n    },\n    \"en-ie\": {\n      language: \"English\",\n      location: \"Ireland\",\n      id: 6153,\n      tag: \"en-IE\",\n      version: \"Release A\"\n    },\n    \"en-im\": {\n      language: \"English\",\n      location: \"Isle of Man\",\n      id: 4096,\n      tag: \"en-IM\",\n      version: \"Release 10\"\n    },\n    \"en-il\": {\n      language: \"English\",\n      location: \"Israel\",\n      id: 4096,\n      tag: \"en-IL\",\n      version: \"Release 10.1\"\n    },\n    \"en-jm\": {\n      language: \"English\",\n      location: \"Jamaica\",\n      id: 8201,\n      tag: \"en-JM\",\n      version: \"Release B\"\n    },\n    \"en-je\": {\n      language: \"English\",\n      location: \"Jersey\",\n      id: 4096,\n      tag: \"en-JE\",\n      version: \"Release 10\"\n    },\n    \"en-ke\": {\n      language: \"English\",\n      location: \"Kenya\",\n      id: 4096,\n      tag: \"en-KE\",\n      version: \"Release 10\"\n    },\n    \"en-ki\": {\n      language: \"English\",\n      location: \"Kiribati\",\n      id: 4096,\n      tag: \"en-KI\",\n      version: \"Release 10\"\n    },\n    \"en-ls\": {\n      language: \"English\",\n      location: \"Lesotho\",\n      id: 4096,\n      tag: \"en-LS\",\n      version: \"Release 10\"\n    },\n    \"en-lr\": {\n      language: \"English\",\n      location: \"Liberia\",\n      id: 4096,\n      tag: \"en-LR\",\n      version: \"Release 10\"\n    },\n    \"en-mo\": {\n      language: \"English\",\n      location: \"Macao SAR\",\n      id: 4096,\n      tag: \"en-MO\",\n      version: \"Release 10\"\n    },\n    \"en-mg\": {\n      language: \"English\",\n      location: \"Madagascar\",\n      id: 4096,\n      tag: \"en-MG\",\n      version: \"Release 10\"\n    },\n    \"en-mw\": {\n      language: \"English\",\n      location: \"Malawi\",\n      id: 4096,\n      tag: \"en-MW\",\n      version: \"Release 10\"\n    },\n    \"en-my\": {\n      language: \"English\",\n      location: \"Malaysia\",\n      id: 17417,\n      tag: \"en-MY\",\n      version: \"Release V\"\n    },\n    \"en-mt\": {\n      language: \"English\",\n      location: \"Malta\",\n      id: 4096,\n      tag: \"en-MT\",\n      version: \"Release 10\"\n    },\n    \"en-mh\": {\n      language: \"English\",\n      location: \"Marshall Islands\",\n      id: 4096,\n      tag: \"en-MH\",\n      version: \"Release 10\"\n    },\n    \"en-mu\": {\n      language: \"English\",\n      location: \"Mauritius\",\n      id: 4096,\n      tag: \"en-MU\",\n      version: \"Release 10\"\n    },\n    \"en-fm\": {\n      language: \"English\",\n      location: \"Micronesia\",\n      id: 4096,\n      tag: \"en-FM\",\n      version: \"Release 10\"\n    },\n    \"en-ms\": {\n      language: \"English\",\n      location: \"Montserrat\",\n      id: 4096,\n      tag: \"en-MS\",\n      version: \"Release 10\"\n    },\n    \"en-na\": {\n      language: \"English\",\n      location: \"Namibia\",\n      id: 4096,\n      tag: \"en-NA\",\n      version: \"Release 10\"\n    },\n    \"en-nr\": {\n      language: \"English\",\n      location: \"Nauru\",\n      id: 4096,\n      tag: \"en-NR\",\n      version: \"Release 10\"\n    },\n    \"en-nl\": {\n      language: \"English\",\n      location: \"Netherlands\",\n      id: 4096,\n      tag: \"en-NL\",\n      version: \"Release 10.1\"\n    },\n    \"en-nz\": {\n      language: \"English\",\n      location: \"New Zealand\",\n      id: 5129,\n      tag: \"en-NZ\",\n      version: \"Release A\"\n    },\n    \"en-ng\": {\n      language: \"English\",\n      location: \"Nigeria\",\n      id: 4096,\n      tag: \"en-NG\",\n      version: \"Release 10\"\n    },\n    \"en-nu\": {\n      language: \"English\",\n      location: \"Niue\",\n      id: 4096,\n      tag: \"en-NU\",\n      version: \"Release 10\"\n    },\n    \"en-nf\": {\n      language: \"English\",\n      location: \"Norfolk Island\",\n      id: 4096,\n      tag: \"en-NF\",\n      version: \"Release 10\"\n    },\n    \"en-mp\": {\n      language: \"English\",\n      location: \"Northern Mariana Islands\",\n      id: 4096,\n      tag: \"en-MP\",\n      version: \"Release 10\"\n    },\n    \"en-pk\": {\n      language: \"English\",\n      location: \"Pakistan\",\n      id: 4096,\n      tag: \"en-PK\",\n      version: \"Release 10\"\n    },\n    \"en-pw\": {\n      language: \"English\",\n      location: \"Palau\",\n      id: 4096,\n      tag: \"en-PW\",\n      version: \"Release 10\"\n    },\n    \"en-pg\": {\n      language: \"English\",\n      location: \"Papua New Guinea\",\n      id: 4096,\n      tag: \"en-PG\",\n      version: \"Release 10\"\n    },\n    \"en-pn\": {\n      language: \"English\",\n      location: \"Pitcairn Islands\",\n      id: 4096,\n      tag: \"en-PN\",\n      version: \"Release 10\"\n    },\n    \"en-pr\": {\n      language: \"English\",\n      location: \"Puerto Rico\",\n      id: 4096,\n      tag: \"en-PR\",\n      version: \"Release 10\"\n    },\n    \"en-ph\": {\n      language: \"English\",\n      location: \"Republic of the Philippines\",\n      id: 13321,\n      tag: \"en-PH\",\n      version: \"Release C\"\n    },\n    \"en-rw\": {\n      language: \"English\",\n      location: \"Rwanda\",\n      id: 4096,\n      tag: \"en-RW\",\n      version: \"Release 10\"\n    },\n    \"en-kn\": {\n      language: \"English\",\n      location: \"Saint Kitts and Nevis\",\n      id: 4096,\n      tag: \"en-KN\",\n      version: \"Release 10\"\n    },\n    \"en-lc\": {\n      language: \"English\",\n      location: \"Saint Lucia\",\n      id: 4096,\n      tag: \"en-LC\",\n      version: \"Release 10\"\n    },\n    \"en-vc\": {\n      language: \"English\",\n      location: \"Saint Vincent and the Grenadines\",\n      id: 4096,\n      tag: \"en-VC\",\n      version: \"Release 10\"\n    },\n    \"en-ws\": {\n      language: \"English\",\n      location: \"Samoa\",\n      id: 4096,\n      tag: \"en-WS\",\n      version: \"Release 10\"\n    },\n    \"en-sc\": {\n      language: \"English\",\n      location: \"Seychelles\",\n      id: 4096,\n      tag: \"en-SC\",\n      version: \"Release 10\"\n    },\n    \"en-sl\": {\n      language: \"English\",\n      location: \"Sierra Leone\",\n      id: 4096,\n      tag: \"en-SL\",\n      version: \"Release 10\"\n    },\n    \"en-sg\": {\n      language: \"English\",\n      location: \"Singapore\",\n      id: 18441,\n      tag: \"en-SG\",\n      version: \"Release V\"\n    },\n    \"en-sx\": {\n      language: \"English\",\n      location: \"Sint Maarten\",\n      id: 4096,\n      tag: \"en-SX\",\n      version: \"Release 10\"\n    },\n    \"en-si\": {\n      language: \"English\",\n      location: \"Slovenia\",\n      id: 4096,\n      tag: \"en-SI\",\n      version: \"Release 10.1\"\n    },\n    \"en-sb\": {\n      language: \"English\",\n      location: \"Solomon Islands\",\n      id: 4096,\n      tag: \"en-SB\",\n      version: \"Release 10\"\n    },\n    \"en-za\": {\n      language: \"English\",\n      location: \"South Africa\",\n      id: 7177,\n      tag: \"en-ZA\",\n      version: \"Release B\"\n    },\n    \"en-ss\": {\n      language: \"English\",\n      location: \"South Sudan\",\n      id: 4096,\n      tag: \"en-SS\",\n      version: \"Release 10\"\n    },\n    \"en-sh\": {\n      language: \"English\",\n      location: \"St Helena, Ascension,  Tristan da Cunha\",\n      id: 4096,\n      tag: \"en-SH\",\n      version: \"Release 10\"\n    },\n    \"en-sd\": {\n      language: \"English\",\n      location: \"Sudan\",\n      id: 4096,\n      tag: \"en-SD\",\n      version: \"Release 10\"\n    },\n    \"en-sz\": {\n      language: \"English\",\n      location: \"Swaziland\",\n      id: 4096,\n      tag: \"en-SZ\",\n      version: \"Release 10\"\n    },\n    \"en-se\": {\n      language: \"English\",\n      location: \"Sweden\",\n      id: 4096,\n      tag: \"en-SE\",\n      version: \"Release 10.1\"\n    },\n    \"en-ch\": {\n      language: \"English\",\n      location: \"Switzerland\",\n      id: 4096,\n      tag: \"en-CH\",\n      version: \"Release 10.1\"\n    },\n    \"en-tz\": {\n      language: \"English\",\n      location: \"Tanzania\",\n      id: 4096,\n      tag: \"en-TZ\",\n      version: \"Release 10\"\n    },\n    \"en-tk\": {\n      language: \"English\",\n      location: \"Tokelau\",\n      id: 4096,\n      tag: \"en-TK\",\n      version: \"Release 10\"\n    },\n    \"en-to\": {\n      language: \"English\",\n      location: \"Tonga\",\n      id: 4096,\n      tag: \"en-TO\",\n      version: \"Release 10\"\n    },\n    \"en-tt\": {\n      language: \"English\",\n      location: \"Trinidad and Tobago\",\n      id: 11273,\n      tag: \"en-TT\",\n      version: \"Release B\"\n    },\n    \"en-tc\": {\n      language: \"English\",\n      location: \"Turks and Caicos Islands\",\n      id: 4096,\n      tag: \"en-TC\",\n      version: \"Release 10\"\n    },\n    \"en-tv\": {\n      language: \"English\",\n      location: \"Tuvalu\",\n      id: 4096,\n      tag: \"en-TV\",\n      version: \"Release 10\"\n    },\n    \"en-ug\": {\n      language: \"English\",\n      location: \"Uganda\",\n      id: 4096,\n      tag: \"en-UG\",\n      version: \"Release 10\"\n    },\n    \"en-ae\": {\n      language: \"English\",\n      location: \"United Arab Emirates\",\n      id: 19465,\n      tag: \"en-AE\",\n      version: \"Release 10.5\"\n    },\n    \"en-gb\": {\n      language: \"English\",\n      location: \"United Kingdom\",\n      id: 2057,\n      tag: \"en-GB\",\n      version: \"Release A\"\n    },\n    \"en-us\": {\n      language: \"English\",\n      location: \"United States\",\n      id: 1033,\n      tag: \"en-US\",\n      version: \"Release A\"\n    },\n    \"en-um\": {\n      language: \"English\",\n      location: \"US Minor Outlying Islands\",\n      id: 4096,\n      tag: \"en-UM\",\n      version: \"Release 10\"\n    },\n    \"en-vi\": {\n      language: \"English\",\n      location: \"US Virgin Islands\",\n      id: 4096,\n      tag: \"en-VI\",\n      version: \"Release 10\"\n    },\n    \"en-vu\": {\n      language: \"English\",\n      location: \"Vanuatu\",\n      id: 4096,\n      tag: \"en-VU\",\n      version: \"Release 10\"\n    },\n    \"en-001\": {\n      language: \"English\",\n      location: \"World\",\n      id: 4096,\n      tag: \"en-001\",\n      version: \"Release 10\"\n    },\n    \"en-zm\": {\n      language: \"English\",\n      location: \"Zambia\",\n      id: 4096,\n      tag: \"en-ZM\",\n      version: \"Release 10\"\n    },\n    \"en-zw\": {\n      language: \"English\",\n      location: \"Zimbabwe\",\n      id: 12297,\n      tag: \"en-ZW\",\n      version: \"Release C\"\n    },\n    eo: eo,\n    \"eo-001\": {\n      language: \"Esperanto\",\n      location: \"World\",\n      id: 4096,\n      tag: \"eo-001\",\n      version: \"Release 10\"\n    },\n    et: et,\n    \"et-ee\": {\n      language: \"Estonian\",\n      location: \"Estonia\",\n      id: 1061,\n      tag: \"et-EE\",\n      version: \"Release B\"\n    },\n    ee: ee,\n    \"ee-gh\": {\n      language: \"Ewe\",\n      location: \"Ghana\",\n      id: 4096,\n      tag: \"ee-GH\",\n      version: \"Release 10\"\n    },\n    \"ee-tg\": {\n      language: \"Ewe\",\n      location: \"Togo\",\n      id: 4096,\n      tag: \"ee-TG\",\n      version: \"Release 10\"\n    },\n    ewo: ewo,\n    \"ewo-cm\": {\n      language: \"Ewondo\",\n      location: \"Cameroon\",\n      id: 4096,\n      tag: \"ewo-CM\",\n      version: \"Release 10\"\n    },\n    fo: fo,\n    \"fo-dk\": {\n      language: \"Faroese\",\n      location: \"Denmark\",\n      id: 4096,\n      tag: \"fo-DK\",\n      version: \"Release 10.1\"\n    },\n    \"fo-fo\": {\n      language: \"Faroese\",\n      location: \"Faroe Islands\",\n      id: 1080,\n      tag: \"fo-FO\",\n      version: \"Release B\"\n    },\n    fil: fil,\n    \"fil-ph\": {\n      language: \"Filipino\",\n      location: \"Philippines\",\n      id: 1124,\n      tag: \"fil-PH\",\n      version: \"Release E2\"\n    },\n    fi: fi,\n    \"fi-fi\": {\n      language: \"Finnish\",\n      location: \"Finland\",\n      id: 1035,\n      tag: \"fi-FI\",\n      version: \"Release A\"\n    },\n    fr: fr,\n    \"fr-dz\": {\n      language: \"French\",\n      location: \"Algeria\",\n      id: 4096,\n      tag: \"fr-DZ\",\n      version: \"Release 10\"\n    },\n    \"fr-be\": {\n      language: \"French\",\n      location: \"Belgium\",\n      id: 2060,\n      tag: \"fr-BE\",\n      version: \"Release A\"\n    },\n    \"fr-bj\": {\n      language: \"French\",\n      location: \"Benin\",\n      id: 4096,\n      tag: \"fr-BJ\",\n      version: \"Release 10\"\n    },\n    \"fr-bf\": {\n      language: \"French\",\n      location: \"Burkina Faso\",\n      id: 4096,\n      tag: \"fr-BF\",\n      version: \"Release 10\"\n    },\n    \"fr-bi\": {\n      language: \"French\",\n      location: \"Burundi\",\n      id: 4096,\n      tag: \"fr-BI\",\n      version: \"Release 10\"\n    },\n    \"fr-cm\": {\n      language: \"French\",\n      location: \"Cameroon\",\n      id: 11276,\n      tag: \"fr-CM\",\n      version: \"Release 8.1\"\n    },\n    \"fr-ca\": {\n      language: \"French\",\n      location: \"Canada\",\n      id: 3084,\n      tag: \"fr-CA\",\n      version: \"Release A\"\n    },\n    \"fr-cf\": {\n      language: \"French\",\n      location: \"Central African Republic\",\n      id: 4096,\n      tag: \"fr-CF\",\n      version: \"Release10\"\n    },\n    \"fr-td\": {\n      language: \"French\",\n      location: \"Chad\",\n      id: 4096,\n      tag: \"fr-TD\",\n      version: \"Release 10\"\n    },\n    \"fr-km\": {\n      language: \"French\",\n      location: \"Comoros\",\n      id: 4096,\n      tag: \"fr-KM\",\n      version: \"Release 10\"\n    },\n    \"fr-cg\": {\n      language: \"French\",\n      location: \"Congo\",\n      id: 4096,\n      tag: \"fr-CG\",\n      version: \"Release 10\"\n    },\n    \"fr-cd\": {\n      language: \"French\",\n      location: \"Congo, DRC\",\n      id: 9228,\n      tag: \"fr-CD\",\n      version: \"Release 8.1\"\n    },\n    \"fr-ci\": {\n      language: \"French\",\n      location: \"Côte d'Ivoire\",\n      id: 12300,\n      tag: \"fr-CI\",\n      version: \"Release 8.1\"\n    },\n    \"fr-dj\": {\n      language: \"French\",\n      location: \"Djibouti\",\n      id: 4096,\n      tag: \"fr-DJ\",\n      version: \"Release 10\"\n    },\n    \"fr-gq\": {\n      language: \"French\",\n      location: \"Equatorial Guinea\",\n      id: 4096,\n      tag: \"fr-GQ\",\n      version: \"Release 10\"\n    },\n    \"fr-fr\": {\n      language: \"French\",\n      location: \"France\",\n      id: 1036,\n      tag: \"fr-FR\",\n      version: \"Release A\"\n    },\n    \"fr-gf\": {\n      language: \"French\",\n      location: \"French Guiana\",\n      id: 4096,\n      tag: \"fr-GF\",\n      version: \"Release 10\"\n    },\n    \"fr-pf\": {\n      language: \"French\",\n      location: \"French Polynesia\",\n      id: 4096,\n      tag: \"fr-PF\",\n      version: \"Release 10\"\n    },\n    \"fr-ga\": {\n      language: \"French\",\n      location: \"Gabon\",\n      id: 4096,\n      tag: \"fr-GA\",\n      version: \"Release 10\"\n    },\n    \"fr-gp\": {\n      language: \"French\",\n      location: \"Guadeloupe\",\n      id: 4096,\n      tag: \"fr-GP\",\n      version: \"Release 10\"\n    },\n    \"fr-gn\": {\n      language: \"French\",\n      location: \"Guinea\",\n      id: 4096,\n      tag: \"fr-GN\",\n      version: \"Release 10\"\n    },\n    \"fr-ht\": {\n      language: \"French\",\n      location: \"Haiti\",\n      id: 15372,\n      tag: \"fr-HT\",\n      version: \"Release 8.1\"\n    },\n    \"fr-lu\": {\n      language: \"French\",\n      location: \"Luxembourg\",\n      id: 5132,\n      tag: \"fr-LU\",\n      version: \"Release A\"\n    },\n    \"fr-mg\": {\n      language: \"French\",\n      location: \"Madagascar\",\n      id: 4096,\n      tag: \"fr-MG\",\n      version: \"Release 10\"\n    },\n    \"fr-ml\": {\n      language: \"French\",\n      location: \"Mali\",\n      id: 13324,\n      tag: \"fr-ML\",\n      version: \"Release 8.1\"\n    },\n    \"fr-mq\": {\n      language: \"French\",\n      location: \"Martinique\",\n      id: 4096,\n      tag: \"fr-MQ\",\n      version: \"Release 10\"\n    },\n    \"fr-mr\": {\n      language: \"French\",\n      location: \"Mauritania\",\n      id: 4096,\n      tag: \"fr-MR\",\n      version: \"Release 10\"\n    },\n    \"fr-mu\": {\n      language: \"French\",\n      location: \"Mauritius\",\n      id: 4096,\n      tag: \"fr-MU\",\n      version: \"Release 10\"\n    },\n    \"fr-yt\": {\n      language: \"French\",\n      location: \"Mayotte\",\n      id: 4096,\n      tag: \"fr-YT\",\n      version: \"Release 10\"\n    },\n    \"fr-ma\": {\n      language: \"French\",\n      location: \"Morocco\",\n      id: 14348,\n      tag: \"fr-MA\",\n      version: \"Release 8.1\"\n    },\n    \"fr-nc\": {\n      language: \"French\",\n      location: \"New Caledonia\",\n      id: 4096,\n      tag: \"fr-NC\",\n      version: \"Release 10\"\n    },\n    \"fr-ne\": {\n      language: \"French\",\n      location: \"Niger\",\n      id: 4096,\n      tag: \"fr-NE\",\n      version: \"Release 10\"\n    },\n    \"fr-mc\": {\n      language: \"French\",\n      location: \"Principality of Monaco\",\n      id: 6156,\n      tag: \"fr-MC\",\n      version: \"Release A\"\n    },\n    \"fr-re\": {\n      language: \"French\",\n      location: \"Reunion\",\n      id: 8204,\n      tag: \"fr-RE\",\n      version: \"Release 8.1\"\n    },\n    \"fr-rw\": {\n      language: \"French\",\n      location: \"Rwanda\",\n      id: 4096,\n      tag: \"fr-RW\",\n      version: \"Release 10\"\n    },\n    \"fr-bl\": {\n      language: \"French\",\n      location: \"Saint Barthélemy\",\n      id: 4096,\n      tag: \"fr-BL\",\n      version: \"Release 10\"\n    },\n    \"fr-mf\": {\n      language: \"French\",\n      location: \"Saint Martin\",\n      id: 4096,\n      tag: \"fr-MF\",\n      version: \"Release 10\"\n    },\n    \"fr-pm\": {\n      language: \"French\",\n      location: \"Saint Pierre and Miquelon\",\n      id: 4096,\n      tag: \"fr-PM\",\n      version: \"Release 10\"\n    },\n    \"fr-sn\": {\n      language: \"French\",\n      location: \"Senegal\",\n      id: 10252,\n      tag: \"fr-SN\",\n      version: \"Release 8.1\"\n    },\n    \"fr-sc\": {\n      language: \"French\",\n      location: \"Seychelles\",\n      id: 4096,\n      tag: \"fr-SC\",\n      version: \"Release 10\"\n    },\n    \"fr-ch\": {\n      language: \"French\",\n      location: \"Switzerland\",\n      id: 4108,\n      tag: \"fr-CH\",\n      version: \"Release A\"\n    },\n    \"fr-sy\": {\n      language: \"French\",\n      location: \"Syria\",\n      id: 4096,\n      tag: \"fr-SY\",\n      version: \"Release 10\"\n    },\n    \"fr-tg\": {\n      language: \"French\",\n      location: \"Togo\",\n      id: 4096,\n      tag: \"fr-TG\",\n      version: \"Release 10\"\n    },\n    \"fr-tn\": {\n      language: \"French\",\n      location: \"Tunisia\",\n      id: 4096,\n      tag: \"fr-TN\",\n      version: \"Release 10\"\n    },\n    \"fr-vu\": {\n      language: \"French\",\n      location: \"Vanuatu\",\n      id: 4096,\n      tag: \"fr-VU\",\n      version: \"Release 10\"\n    },\n    \"fr-wf\": {\n      language: \"French\",\n      location: \"Wallis and Futuna\",\n      id: 4096,\n      tag: \"fr-WF\",\n      version: \"Release 10\"\n    },\n    fy: fy,\n    \"fy-nl\": {\n      language: \"Frisian\",\n      location: \"Netherlands\",\n      id: 1122,\n      tag: \"fy-NL\",\n      version: \"Release E2\"\n    },\n    fur: fur,\n    \"fur-it\": {\n      language: \"Friulian\",\n      location: \"Italy\",\n      id: 4096,\n      tag: \"fur-IT\",\n      version: \"Release 10\"\n    },\n    ff: ff,\n    \"ff-latn\": {\n      language: \"Fulah (Latin)\",\n      location: null,\n      id: 31847,\n      tag: \"ff-Latn\",\n      version: \"Release 8\"\n    },\n    \"ff-latn-bf\": {\n      language: \"Fulah (Latin)\",\n      location: \"Burkina Faso\",\n      id: 4096,\n      tag: \"ff-Latn-BF\",\n      version: \"Release 10.4\"\n    },\n    \"ff-cm\": {\n      language: \"Fulah\",\n      location: \"Cameroon\",\n      id: 4096,\n      tag: \"ff-CM\",\n      version: \"Release 10\"\n    },\n    \"ff-latn-cm\": {\n      language: \"Fulah (Latin)\",\n      location: \"Cameroon\",\n      id: 4096,\n      tag: \"ff-Latn-CM\",\n      version: \"Release 10.4\"\n    },\n    \"ff-latn-gm\": {\n      language: \"Fulah (Latin)\",\n      location: \"Gambia\",\n      id: 4096,\n      tag: \"ff-Latn-GM\",\n      version: \"Release 10.4\"\n    },\n    \"ff-latn-gh\": {\n      language: \"Fulah (Latin)\",\n      location: \"Ghana\",\n      id: 4096,\n      tag: \"ff-Latn-GH\",\n      version: \"Release 10.4\"\n    },\n    \"ff-gn\": {\n      language: \"Fulah\",\n      location: \"Guinea\",\n      id: 4096,\n      tag: \"ff-GN\",\n      version: \"Release 10\"\n    },\n    \"ff-latn-gn\": {\n      language: \"Fulah (Latin)\",\n      location: \"Guinea\",\n      id: 4096,\n      tag: \"ff-Latn-GN\",\n      version: \"Release 10.4\"\n    },\n    \"ff-latn-gw\": {\n      language: \"Fulah (Latin)\",\n      location: \"Guinea-Bissau\",\n      id: 4096,\n      tag: \"ff-Latn-GW\",\n      version: \"Release 10.4\"\n    },\n    \"ff-latn-lr\": {\n      language: \"Fulah (Latin)\",\n      location: \"Liberia\",\n      id: 4096,\n      tag: \"ff-Latn-LR\",\n      version: \"Release 10.4\"\n    },\n    \"ff-mr\": {\n      language: \"Fulah\",\n      location: \"Mauritania\",\n      id: 4096,\n      tag: \"ff-MR\",\n      version: \"Release 10\"\n    },\n    \"ff-latn-mr\": {\n      language: \"Fulah (Latin)\",\n      location: \"Mauritania\",\n      id: 4096,\n      tag: \"ff-Latn-MR\",\n      version: \"Release 10.4\"\n    },\n    \"ff-latn-ne\": {\n      language: \"Fulah (Latin)\",\n      location: \"Niger\",\n      id: 4096,\n      tag: \"ff-Latn-NE\",\n      version: \"Release 10.4\"\n    },\n    \"ff-ng\": {\n      language: \"Fulah\",\n      location: \"Nigeria\",\n      id: 4096,\n      tag: \"ff-NG\",\n      version: \"Release 10\"\n    },\n    \"ff-latn-ng\": {\n      language: \"Fulah (Latin)\",\n      location: \"Nigeria\",\n      id: 4096,\n      tag: \"ff-Latn-NG\",\n      version: \"Release 10.4\"\n    },\n    \"ff-latn-sn\": {\n      language: \"Fulah\",\n      location: \"Senegal\",\n      id: 2151,\n      tag: \"ff-Latn-SN\",\n      version: \"Release 8\"\n    },\n    \"ff-latn-sl\": {\n      language: \"Fulah (Latin)\",\n      location: \"Sierra Leone\",\n      id: 4096,\n      tag: \"ff-Latn-SL\",\n      version: \"Release 10.4\"\n    },\n    gl: gl,\n    \"gl-es\": {\n      language: \"Galician\",\n      location: \"Spain\",\n      id: 1110,\n      tag: \"gl-ES\",\n      version: \"Release D\"\n    },\n    lg: lg,\n    \"lg-ug\": {\n      language: \"Ganda\",\n      location: \"Uganda\",\n      id: 4096,\n      tag: \"lg-UG\",\n      version: \"Release 10\"\n    },\n    ka: ka,\n    \"ka-ge\": {\n      language: \"Georgian\",\n      location: \"Georgia\",\n      id: 1079,\n      tag: \"ka-GE\",\n      version: \"Release C\"\n    },\n    de: de,\n    \"de-at\": {\n      language: \"German\",\n      location: \"Austria\",\n      id: 3079,\n      tag: \"de-AT\",\n      version: \"Release A\"\n    },\n    \"de-be\": {\n      language: \"German\",\n      location: \"Belgium\",\n      id: 4096,\n      tag: \"de-BE\",\n      version: \"Release 10\"\n    },\n    \"de-de\": {\n      language: \"German\",\n      location: \"Germany\",\n      id: 1031,\n      tag: \"de-DE\",\n      version: \"Release A\"\n    },\n    \"de-it\": {\n      language: \"German\",\n      location: \"Italy\",\n      id: 4096,\n      tag: \"de-IT\",\n      version: \"Release 10.2\"\n    },\n    \"de-li\": {\n      language: \"German\",\n      location: \"Liechtenstein\",\n      id: 5127,\n      tag: \"de-LI\",\n      version: \"Release B\"\n    },\n    \"de-lu\": {\n      language: \"German\",\n      location: \"Luxembourg\",\n      id: 4103,\n      tag: \"de-LU\",\n      version: \"Release B\"\n    },\n    \"de-ch\": {\n      language: \"German\",\n      location: \"Switzerland\",\n      id: 2055,\n      tag: \"de-CH\",\n      version: \"Release A\"\n    },\n    el: el,\n    \"el-cy\": {\n      language: \"Greek\",\n      location: \"Cyprus\",\n      id: 4096,\n      tag: \"el-CY\",\n      version: \"Release 10\"\n    },\n    \"el-gr\": {\n      language: \"Greek\",\n      location: \"Greece\",\n      id: 1032,\n      tag: \"el-GR\",\n      version: \"Release A\"\n    },\n    kl: kl,\n    \"kl-gl\": {\n      language: \"Greenlandic\",\n      location: \"Greenland\",\n      id: 1135,\n      tag: \"kl-GL\",\n      version: \"Release V\"\n    },\n    gn: gn,\n    \"gn-py\": {\n      language: \"Guarani\",\n      location: \"Paraguay\",\n      id: 1140,\n      tag: \"gn-PY\",\n      version: \"Release 8.1\"\n    },\n    gu: gu,\n    \"gu-in\": {\n      language: \"Gujarati\",\n      location: \"India\",\n      id: 1095,\n      tag: \"gu-IN\",\n      version: \"Release D\"\n    },\n    guz: guz,\n    \"guz-ke\": {\n      language: \"Gusii\",\n      location: \"Kenya\",\n      id: 4096,\n      tag: \"guz-KE\",\n      version: \"Release 10\"\n    },\n    ha: ha,\n    \"ha-latn\": {\n      language: \"Hausa (Latin)\",\n      location: null,\n      id: 31848,\n      tag: \"ha-Latn\",\n      version: \"Windows 7\"\n    },\n    \"ha-latn-gh\": {\n      language: \"Hausa (Latin)\",\n      location: \"Ghana\",\n      id: 4096,\n      tag: \"ha-Latn-GH\",\n      version: \"Release 10\"\n    },\n    \"ha-latn-ne\": {\n      language: \"Hausa (Latin)\",\n      location: \"Niger\",\n      id: 4096,\n      tag: \"ha-Latn-NE\",\n      version: \"Release 10\"\n    },\n    \"ha-latn-ng\": {\n      language: \"Hausa (Latin)\",\n      location: \"Nigeria\",\n      id: 1128,\n      tag: \"ha-Latn-NG\",\n      version: \"Release V\"\n    },\n    haw: haw,\n    \"haw-us\": {\n      language: \"Hawaiian\",\n      location: \"United States\",\n      id: 1141,\n      tag: \"haw-US\",\n      version: \"Release 8\"\n    },\n    he: he,\n    \"he-il\": {\n      language: \"Hebrew\",\n      location: \"Israel\",\n      id: 1037,\n      tag: \"he-IL\",\n      version: \"Release B\"\n    },\n    hi: hi,\n    \"hi-in\": {\n      language: \"Hindi\",\n      location: \"India\",\n      id: 1081,\n      tag: \"hi-IN\",\n      version: \"Release C\"\n    },\n    hu: hu,\n    \"hu-hu\": {\n      language: \"Hungarian\",\n      location: \"Hungary\",\n      id: 1038,\n      tag: \"hu-HU\",\n      version: \"Release A\"\n    },\n    is: is,\n    \"is-is\": {\n      language: \"Icelandic\",\n      location: \"Iceland\",\n      id: 1039,\n      tag: \"is-IS\",\n      version: \"Release A\"\n    },\n    ig: ig,\n    \"ig-ng\": {\n      language: \"Igbo\",\n      location: \"Nigeria\",\n      id: 1136,\n      tag: \"ig-NG\",\n      version: \"Release V\"\n    },\n    id: id$1,\n    \"id-id\": {\n      language: \"Indonesian\",\n      location: \"Indonesia\",\n      id: 1057,\n      tag: \"id-ID\",\n      version: \"Release B\"\n    },\n    ia: ia,\n    \"ia-fr\": {\n      language: \"Interlingua\",\n      location: \"France\",\n      id: 4096,\n      tag: \"ia-FR\",\n      version: \"Release 10\"\n    },\n    \"ia-001\": {\n      language: \"Interlingua\",\n      location: \"World\",\n      id: 4096,\n      tag: \"ia-001\",\n      version: \"Release 10\"\n    },\n    iu: iu,\n    \"iu-latn\": {\n      language: \"Inuktitut (Latin)\",\n      location: null,\n      id: 31837,\n      tag: \"iu-Latn\",\n      version: \"Windows 7\"\n    },\n    \"iu-latn-ca\": {\n      language: \"Inuktitut (Latin)\",\n      location: \"Canada\",\n      id: 2141,\n      tag: \"iu-Latn-CA\",\n      version: \"Release E2\"\n    },\n    \"iu-cans\": {\n      language: \"Inuktitut (Syllabics)\",\n      location: null,\n      id: 30813,\n      tag: \"iu-Cans\",\n      version: \"Windows 7\"\n    },\n    \"iu-cans-ca\": {\n      language: \"Inuktitut (Syllabics)\",\n      location: \"Canada\",\n      id: 1117,\n      tag: \"iu-Cans-CA\",\n      version: \"Release V\"\n    },\n    ga: ga,\n    \"ga-ie\": {\n      language: \"Irish\",\n      location: \"Ireland\",\n      id: 2108,\n      tag: \"ga-IE\",\n      version: \"Release E2\"\n    },\n    it: it,\n    \"it-it\": {\n      language: \"Italian\",\n      location: \"Italy\",\n      id: 1040,\n      tag: \"it-IT\",\n      version: \"Release A\"\n    },\n    \"it-sm\": {\n      language: \"Italian\",\n      location: \"San Marino\",\n      id: 4096,\n      tag: \"it-SM\",\n      version: \"Release 10\"\n    },\n    \"it-ch\": {\n      language: \"Italian\",\n      location: \"Switzerland\",\n      id: 2064,\n      tag: \"it-CH\",\n      version: \"Release A\"\n    },\n    \"it-va\": {\n      language: \"Italian\",\n      location: \"Vatican City\",\n      id: 4096,\n      tag: \"it-VA\",\n      version: \"Release 10.3\"\n    },\n    ja: ja,\n    \"ja-jp\": {\n      language: \"Japanese\",\n      location: \"Japan\",\n      id: 1041,\n      tag: \"ja-JP\",\n      version: \"Release A\"\n    },\n    jv: jv,\n    \"jv-latn\": {\n      language: \"Javanese\",\n      location: \"Latin\",\n      id: 4096,\n      tag: \"jv-Latn\",\n      version: \"Release 8.1\"\n    },\n    \"jv-latn-id\": {\n      language: \"Javanese\",\n      location: \"Latin, Indonesia\",\n      id: 4096,\n      tag: \"jv-Latn-ID\",\n      version: \"Release 8.1\"\n    },\n    dyo: dyo,\n    \"dyo-sn\": {\n      language: \"Jola-Fonyi\",\n      location: \"Senegal\",\n      id: 4096,\n      tag: \"dyo-SN\",\n      version: \"Release 10\"\n    },\n    kea: kea,\n    \"kea-cv\": {\n      language: \"Kabuverdianu\",\n      location: \"Cabo Verde\",\n      id: 4096,\n      tag: \"kea-CV\",\n      version: \"Release 10\"\n    },\n    kab: kab,\n    \"kab-dz\": {\n      language: \"Kabyle\",\n      location: \"Algeria\",\n      id: 4096,\n      tag: \"kab-DZ\",\n      version: \"Release 10\"\n    },\n    kkj: kkj,\n    \"kkj-cm\": {\n      language: \"Kako\",\n      location: \"Cameroon\",\n      id: 4096,\n      tag: \"kkj-CM\",\n      version: \"Release 10\"\n    },\n    kln: kln,\n    \"kln-ke\": {\n      language: \"Kalenjin\",\n      location: \"Kenya\",\n      id: 4096,\n      tag: \"kln-KE\",\n      version: \"Release 10\"\n    },\n    kam: kam,\n    \"kam-ke\": {\n      language: \"Kamba\",\n      location: \"Kenya\",\n      id: 4096,\n      tag: \"kam-KE\",\n      version: \"Release 10\"\n    },\n    kn: kn,\n    \"kn-in\": {\n      language: \"Kannada\",\n      location: \"India\",\n      id: 1099,\n      tag: \"kn-IN\",\n      version: \"Release D\"\n    },\n    ks: ks,\n    \"ks-arab\": {\n      language: \"Kashmiri\",\n      location: \"Perso-Arabic\",\n      id: 1120,\n      tag: \"ks-Arab\",\n      version: \"Release 10\"\n    },\n    \"ks-arab-in\": {\n      language: \"Kashmiri\",\n      location: \"Perso-Arabic\",\n      id: 4096,\n      tag: \"ks-Arab-IN\",\n      version: \"Release 10\"\n    },\n    kk: kk,\n    \"kk-kz\": {\n      language: \"Kazakh\",\n      location: \"Kazakhstan\",\n      id: 1087,\n      tag: \"kk-KZ\",\n      version: \"Release C\"\n    },\n    km: km,\n    \"km-kh\": {\n      language: \"Khmer\",\n      location: \"Cambodia\",\n      id: 1107,\n      tag: \"km-KH\",\n      version: \"Release V\"\n    },\n    quc: quc,\n    \"quc-latn-gt\": {\n      language: \"K'iche\",\n      location: \"Guatemala\",\n      id: 1158,\n      tag: \"quc-Latn-GT\",\n      version: \"Release 10\"\n    },\n    ki: ki,\n    \"ki-ke\": {\n      language: \"Kikuyu\",\n      location: \"Kenya\",\n      id: 4096,\n      tag: \"ki-KE\",\n      version: \"Release 10\"\n    },\n    rw: rw,\n    \"rw-rw\": {\n      language: \"Kinyarwanda\",\n      location: \"Rwanda\",\n      id: 1159,\n      tag: \"rw-RW\",\n      version: \"Release V\"\n    },\n    sw: sw,\n    \"sw-ke\": {\n      language: \"Kiswahili\",\n      location: \"Kenya\",\n      id: 1089,\n      tag: \"sw-KE\",\n      version: \"Release C\"\n    },\n    \"sw-tz\": {\n      language: \"Kiswahili\",\n      location: \"Tanzania\",\n      id: 4096,\n      tag: \"sw-TZ\",\n      version: \"Release 10\"\n    },\n    \"sw-ug\": {\n      language: \"Kiswahili\",\n      location: \"Uganda\",\n      id: 4096,\n      tag: \"sw-UG\",\n      version: \"Release 10\"\n    },\n    kok: kok,\n    \"kok-in\": {\n      language: \"Konkani\",\n      location: \"India\",\n      id: 1111,\n      tag: \"kok-IN\",\n      version: \"Release C\"\n    },\n    ko: ko,\n    \"ko-kr\": {\n      language: \"Korean\",\n      location: \"Korea\",\n      id: 1042,\n      tag: \"ko-KR\",\n      version: \"Release A\"\n    },\n    \"ko-kp\": {\n      language: \"Korean\",\n      location: \"North Korea\",\n      id: 4096,\n      tag: \"ko-KP\",\n      version: \"Release 10.1\"\n    },\n    khq: khq,\n    \"khq-ml\": {\n      language: \"Koyra Chiini\",\n      location: \"Mali\",\n      id: 4096,\n      tag: \"khq-ML\",\n      version: \"Release 10\"\n    },\n    ses: ses,\n    \"ses-ml\": {\n      language: \"Koyraboro Senni\",\n      location: \"Mali\",\n      id: 4096,\n      tag: \"ses-ML\",\n      version: \"Release 10\"\n    },\n    nmg: nmg,\n    \"nmg-cm\": {\n      language: \"Kwasio\",\n      location: \"Cameroon\",\n      id: 4096,\n      tag: \"nmg-CM\",\n      version: \"Release 10\"\n    },\n    ky: ky,\n    \"ky-kg\": {\n      language: \"Kyrgyz\",\n      location: \"Kyrgyzstan\",\n      id: 1088,\n      tag: \"ky-KG\",\n      version: \"Release D\"\n    },\n    \"ku-arab-ir\": {\n      language: \"Kurdish\",\n      location: \"Perso-Arabic, Iran\",\n      id: 4096,\n      tag: \"ku-Arab-IR\",\n      version: \"Release 10.1\"\n    },\n    lkt: lkt,\n    \"lkt-us\": {\n      language: \"Lakota\",\n      location: \"United States\",\n      id: 4096,\n      tag: \"lkt-US\",\n      version: \"Release 10\"\n    },\n    lag: lag,\n    \"lag-tz\": {\n      language: \"Langi\",\n      location: \"Tanzania\",\n      id: 4096,\n      tag: \"lag-TZ\",\n      version: \"Release 10\"\n    },\n    lo: lo,\n    \"lo-la\": {\n      language: \"Lao\",\n      location: \"Lao P.D.R.\",\n      id: 1108,\n      tag: \"lo-LA\",\n      version: \"Release V\"\n    },\n    lv: lv,\n    \"lv-lv\": {\n      language: \"Latvian\",\n      location: \"Latvia\",\n      id: 1062,\n      tag: \"lv-LV\",\n      version: \"Release B\"\n    },\n    ln: ln,\n    \"ln-ao\": {\n      language: \"Lingala\",\n      location: \"Angola\",\n      id: 4096,\n      tag: \"ln-AO\",\n      version: \"Release 10\"\n    },\n    \"ln-cf\": {\n      language: \"Lingala\",\n      location: \"Central African Republic\",\n      id: 4096,\n      tag: \"ln-CF\",\n      version: \"Release 10\"\n    },\n    \"ln-cg\": {\n      language: \"Lingala\",\n      location: \"Congo\",\n      id: 4096,\n      tag: \"ln-CG\",\n      version: \"Release 10\"\n    },\n    \"ln-cd\": {\n      language: \"Lingala\",\n      location: \"Congo DRC\",\n      id: 4096,\n      tag: \"ln-CD\",\n      version: \"Release 10\"\n    },\n    lt: lt,\n    \"lt-lt\": {\n      language: \"Lithuanian\",\n      location: \"Lithuania\",\n      id: 1063,\n      tag: \"lt-LT\",\n      version: \"Release B\"\n    },\n    nds: nds,\n    \"nds-de\": {\n      language: \"Low German\",\n      location: \"Germany\",\n      id: 4096,\n      tag: \"nds-DE\",\n      version: \"Release 10.2\"\n    },\n    \"nds-nl\": {\n      language: \"Low German\",\n      location: \"Netherlands\",\n      id: 4096,\n      tag: \"nds-NL\",\n      version: \"Release 10.2\"\n    },\n    dsb: dsb,\n    \"dsb-de\": {\n      language: \"Lower Sorbian\",\n      location: \"Germany\",\n      id: 2094,\n      tag: \"dsb-DE\",\n      version: \"Release V\"\n    },\n    lu: lu,\n    \"lu-cd\": {\n      language: \"Luba-Katanga\",\n      location: \"Congo DRC\",\n      id: 4096,\n      tag: \"lu-CD\",\n      version: \"Release 10\"\n    },\n    luo: luo,\n    \"luo-ke\": {\n      language: \"Luo\",\n      location: \"Kenya\",\n      id: 4096,\n      tag: \"luo-KE\",\n      version: \"Release 10\"\n    },\n    lb: lb,\n    \"lb-lu\": {\n      language: \"Luxembourgish\",\n      location: \"Luxembourg\",\n      id: 1134,\n      tag: \"lb-LU\",\n      version: \"Release E2\"\n    },\n    luy: luy,\n    \"luy-ke\": {\n      language: \"Luyia\",\n      location: \"Kenya\",\n      id: 4096,\n      tag: \"luy-KE\",\n      version: \"Release 10\"\n    },\n    mk: mk,\n    \"mk-mk\": {\n      language: \"Macedonian\",\n      location: \"North Macedonia\",\n      id: 1071,\n      tag: \"mk-MK\",\n      version: \"Release C\"\n    },\n    jmc: jmc,\n    \"jmc-tz\": {\n      language: \"Machame\",\n      location: \"Tanzania\",\n      id: 4096,\n      tag: \"jmc-TZ\",\n      version: \"Release 10\"\n    },\n    mgh: mgh,\n    \"mgh-mz\": {\n      language: \"Makhuwa-Meetto\",\n      location: \"Mozambique\",\n      id: 4096,\n      tag: \"mgh-MZ\",\n      version: \"Release 10\"\n    },\n    kde: kde,\n    \"kde-tz\": {\n      language: \"Makonde\",\n      location: \"Tanzania\",\n      id: 4096,\n      tag: \"kde-TZ\",\n      version: \"Release 10\"\n    },\n    mg: mg,\n    \"mg-mg\": {\n      language: \"Malagasy\",\n      location: \"Madagascar\",\n      id: 4096,\n      tag: \"mg-MG\",\n      version: \"Release 8.1\"\n    },\n    ms: ms,\n    \"ms-bn\": {\n      language: \"Malay\",\n      location: \"Brunei Darussalam\",\n      id: 2110,\n      tag: \"ms-BN\",\n      version: \"Release C\"\n    },\n    \"ms-my\": {\n      language: \"Malay\",\n      location: \"Malaysia\",\n      id: 1086,\n      tag: \"ms-MY\",\n      version: \"Release C\"\n    },\n    ml: ml,\n    \"ml-in\": {\n      language: \"Malayalam\",\n      location: \"India\",\n      id: 1100,\n      tag: \"ml-IN\",\n      version: \"Release E1\"\n    },\n    mt: mt,\n    \"mt-mt\": {\n      language: \"Maltese\",\n      location: \"Malta\",\n      id: 1082,\n      tag: \"mt-MT\",\n      version: \"Release E1\"\n    },\n    gv: gv,\n    \"gv-im\": {\n      language: \"Manx\",\n      location: \"Isle of Man\",\n      id: 4096,\n      tag: \"gv-IM\",\n      version: \"Release 10\"\n    },\n    mi: mi,\n    \"mi-nz\": {\n      language: \"Maori\",\n      location: \"New Zealand\",\n      id: 1153,\n      tag: \"mi-NZ\",\n      version: \"Release E1\"\n    },\n    arn: arn,\n    \"arn-cl\": {\n      language: \"Mapudungun\",\n      location: \"Chile\",\n      id: 1146,\n      tag: \"arn-CL\",\n      version: \"Release E2\"\n    },\n    mr: mr,\n    \"mr-in\": {\n      language: \"Marathi\",\n      location: \"India\",\n      id: 1102,\n      tag: \"mr-IN\",\n      version: \"Release C\"\n    },\n    mas: mas,\n    \"mas-ke\": {\n      language: \"Masai\",\n      location: \"Kenya\",\n      id: 4096,\n      tag: \"mas-KE\",\n      version: \"Release 10\"\n    },\n    \"mas-tz\": {\n      language: \"Masai\",\n      location: \"Tanzania\",\n      id: 4096,\n      tag: \"mas-TZ\",\n      version: \"Release 10\"\n    },\n    \"mzn-ir\": {\n      language: \"Mazanderani\",\n      location: \"Iran\",\n      id: 4096,\n      tag: \"mzn-IR\",\n      version: \"Release 10.1\"\n    },\n    mer: mer,\n    \"mer-ke\": {\n      language: \"Meru\",\n      location: \"Kenya\",\n      id: 4096,\n      tag: \"mer-KE\",\n      version: \"Release 10\"\n    },\n    mgo: mgo,\n    \"mgo-cm\": {\n      language: \"Meta'\",\n      location: \"Cameroon\",\n      id: 4096,\n      tag: \"mgo-CM\",\n      version: \"Release 10\"\n    },\n    moh: moh,\n    \"moh-ca\": {\n      language: \"Mohawk\",\n      location: \"Canada\",\n      id: 1148,\n      tag: \"moh-CA\",\n      version: \"Release E2\"\n    },\n    mn: mn,\n    \"mn-cyrl\": {\n      language: \"Mongolian (Cyrillic)\",\n      location: null,\n      id: 30800,\n      tag: \"mn-Cyrl\",\n      version: \"Windows 7\"\n    },\n    \"mn-mn\": {\n      language: \"Mongolian (Cyrillic)\",\n      location: \"Mongolia\",\n      id: 1104,\n      tag: \"mn-MN\",\n      version: \"Release D\"\n    },\n    \"mn-mong\": {\n      language: \"Mongolian (Traditional Mongolian)\",\n      location: null,\n      id: 31824,\n      tag: \"mn-Mong\",\n      version: \"Windows 7\"\n    },\n    \"mn-mong-cn\": {\n      language: \"Mongolian (Traditional Mongolian)\",\n      location: \"People's Republic of China\",\n      id: 2128,\n      tag: \"mn-Mong-CN\",\n      version: \"Windows V\"\n    },\n    \"mn-mong-mn\": {\n      language: \"Mongolian (Traditional Mongolian)\",\n      location: \"Mongolia\",\n      id: 3152,\n      tag: \"mn-Mong-MN\",\n      version: \"Windows 7\"\n    },\n    mfe: mfe,\n    \"mfe-mu\": {\n      language: \"Morisyen\",\n      location: \"Mauritius\",\n      id: 4096,\n      tag: \"mfe-MU\",\n      version: \"Release 10\"\n    },\n    mua: mua,\n    \"mua-cm\": {\n      language: \"Mundang\",\n      location: \"Cameroon\",\n      id: 4096,\n      tag: \"mua-CM\",\n      version: \"Release 10\"\n    },\n    nqo: nqo,\n    \"nqo-gn\": {\n      language: \"N'ko\",\n      location: \"Guinea\",\n      id: 4096,\n      tag: \"nqo-GN\",\n      version: \"Release 8.1\"\n    },\n    naq: naq,\n    \"naq-na\": {\n      language: \"Nama\",\n      location: \"Namibia\",\n      id: 4096,\n      tag: \"naq-NA\",\n      version: \"Release 10\"\n    },\n    ne: ne,\n    \"ne-in\": {\n      language: \"Nepali\",\n      location: \"India\",\n      id: 2145,\n      tag: \"ne-IN\",\n      version: \"Release 8.1\"\n    },\n    \"ne-np\": {\n      language: \"Nepali\",\n      location: \"Nepal\",\n      id: 1121,\n      tag: \"ne-NP\",\n      version: \"Release E2\"\n    },\n    nnh: nnh,\n    \"nnh-cm\": {\n      language: \"Ngiemboon\",\n      location: \"Cameroon\",\n      id: 4096,\n      tag: \"nnh-CM\",\n      version: \"Release 10\"\n    },\n    jgo: jgo,\n    \"jgo-cm\": {\n      language: \"Ngomba\",\n      location: \"Cameroon\",\n      id: 4096,\n      tag: \"jgo-CM\",\n      version: \"Release 10\"\n    },\n    \"lrc-iq\": {\n      language: \"Northern Luri\",\n      location: \"Iraq\",\n      id: 4096,\n      tag: \"lrc-IQ\",\n      version: \"Release 10.1\"\n    },\n    \"lrc-ir\": {\n      language: \"Northern Luri\",\n      location: \"Iran\",\n      id: 4096,\n      tag: \"lrc-IR\",\n      version: \"Release 10.1\"\n    },\n    nd: nd,\n    \"nd-zw\": {\n      language: \"North Ndebele\",\n      location: \"Zimbabwe\",\n      id: 4096,\n      tag: \"nd-ZW\",\n      version: \"Release 10\"\n    },\n    no: no,\n    nb: nb,\n    \"nb-no\": {\n      language: \"Norwegian (Bokmal)\",\n      location: \"Norway\",\n      id: 1044,\n      tag: \"nb-NO\",\n      version: \"Release A\"\n    },\n    nn: nn,\n    \"nn-no\": {\n      language: \"Norwegian (Nynorsk)\",\n      location: \"Norway\",\n      id: 2068,\n      tag: \"nn-NO\",\n      version: \"Release A\"\n    },\n    \"nb-sj\": {\n      language: \"Norwegian Bokmål\",\n      location: \"Svalbard and Jan Mayen\",\n      id: 4096,\n      tag: \"nb-SJ\",\n      version: \"Release 10\"\n    },\n    nus: nus,\n    \"nus-sd\": {\n      language: \"Nuer\",\n      location: \"Sudan\",\n      id: 4096,\n      tag: \"nus-SD\",\n      version: \"Release 10\"\n    },\n    \"nus-ss\": {\n      language: \"Nuer\",\n      location: \"South Sudan\",\n      id: 4096,\n      tag: \"nus-SS\",\n      version: \"Release 10.1\"\n    },\n    nyn: nyn,\n    \"nyn-ug\": {\n      language: \"Nyankole\",\n      location: \"Uganda\",\n      id: 4096,\n      tag: \"nyn-UG\",\n      version: \"Release 10\"\n    },\n    oc: oc,\n    \"oc-fr\": {\n      language: \"Occitan\",\n      location: \"France\",\n      id: 1154,\n      tag: \"oc-FR\",\n      version: \"Release V\"\n    },\n    or: or,\n    \"or-in\": {\n      language: \"Odia\",\n      location: \"India\",\n      id: 1096,\n      tag: \"or-IN\",\n      version: \"Release V\"\n    },\n    om: om,\n    \"om-et\": {\n      language: \"Oromo\",\n      location: \"Ethiopia\",\n      id: 1138,\n      tag: \"om-ET\",\n      version: \"Release 8.1\"\n    },\n    \"om-ke\": {\n      language: \"Oromo\",\n      location: \"Kenya\",\n      id: 4096,\n      tag: \"om-KE\",\n      version: \"Release 10\"\n    },\n    os: os,\n    \"os-ge\": {\n      language: \"Ossetian\",\n      location: \"Cyrillic, Georgia\",\n      id: 4096,\n      tag: \"os-GE\",\n      version: \"Release 10\"\n    },\n    \"os-ru\": {\n      language: \"Ossetian\",\n      location: \"Cyrillic, Russia\",\n      id: 4096,\n      tag: \"os-RU\",\n      version: \"Release 10\"\n    },\n    ps: ps,\n    \"ps-af\": {\n      language: \"Pashto\",\n      location: \"Afghanistan\",\n      id: 1123,\n      tag: \"ps-AF\",\n      version: \"Release E2\"\n    },\n    \"ps-pk\": {\n      language: \"Pashto\",\n      location: \"Pakistan\",\n      id: 4096,\n      tag: \"ps-PK\",\n      version: \"Release 10.5\"\n    },\n    fa: fa,\n    \"fa-af\": {\n      language: \"Persian\",\n      location: \"Afghanistan\",\n      id: 4096,\n      tag: \"fa-AF\",\n      version: \"Release 10\"\n    },\n    \"fa-ir\": {\n      language: \"Persian\",\n      location: \"Iran\",\n      id: 1065,\n      tag: \"fa-IR\",\n      version: \"Release B\"\n    },\n    pl: pl,\n    \"pl-pl\": {\n      language: \"Polish\",\n      location: \"Poland\",\n      id: 1045,\n      tag: \"pl-PL\",\n      version: \"Release A\"\n    },\n    pt: pt,\n    \"pt-ao\": {\n      language: \"Portuguese\",\n      location: \"Angola\",\n      id: 4096,\n      tag: \"pt-AO\",\n      version: \"Release 8.1\"\n    },\n    \"pt-br\": {\n      language: \"Portuguese\",\n      location: \"Brazil\",\n      id: 1046,\n      tag: \"pt-BR\",\n      version: \"Release A\"\n    },\n    \"pt-cv\": {\n      language: \"Portuguese\",\n      location: \"Cabo Verde\",\n      id: 4096,\n      tag: \"pt-CV\",\n      version: \"Release 10\"\n    },\n    \"pt-gq\": {\n      language: \"Portuguese\",\n      location: \"Equatorial Guinea\",\n      id: 4096,\n      tag: \"pt-GQ\",\n      version: \"Release 10.2\"\n    },\n    \"pt-gw\": {\n      language: \"Portuguese\",\n      location: \"Guinea-Bissau\",\n      id: 4096,\n      tag: \"pt-GW\",\n      version: \"Release 10\"\n    },\n    \"pt-lu\": {\n      language: \"Portuguese\",\n      location: \"Luxembourg\",\n      id: 4096,\n      tag: \"pt-LU\",\n      version: \"Release 10.2\"\n    },\n    \"pt-mo\": {\n      language: \"Portuguese\",\n      location: \"Macao SAR\",\n      id: 4096,\n      tag: \"pt-MO\",\n      version: \"Release 10\"\n    },\n    \"pt-mz\": {\n      language: \"Portuguese\",\n      location: \"Mozambique\",\n      id: 4096,\n      tag: \"pt-MZ\",\n      version: \"Release 10\"\n    },\n    \"pt-pt\": {\n      language: \"Portuguese\",\n      location: \"Portugal\",\n      id: 2070,\n      tag: \"pt-PT\",\n      version: \"Release A\"\n    },\n    \"pt-st\": {\n      language: \"Portuguese\",\n      location: \"São Tomé and Príncipe\",\n      id: 4096,\n      tag: \"pt-ST\",\n      version: \"Release 10\"\n    },\n    \"pt-ch\": {\n      language: \"Portuguese\",\n      location: \"Switzerland\",\n      id: 4096,\n      tag: \"pt-CH\",\n      version: \"Release 10.2\"\n    },\n    \"pt-tl\": {\n      language: \"Portuguese\",\n      location: \"Timor-Leste\",\n      id: 4096,\n      tag: \"pt-TL\",\n      version: \"Release 10\"\n    },\n    \"prg-001\": {\n      language: \"Prussian\",\n      location: null,\n      id: 4096,\n      tag: \"prg-001\",\n      version: \"Release 10.1\"\n    },\n    \"qps-ploca\": {\n      language: \"Pseudo Language\",\n      location: \"Pseudo locale for east Asian/complex script localization testing\",\n      id: 1534,\n      tag: \"qps-ploca\",\n      version: \"Release 7\"\n    },\n    \"qps-ploc\": {\n      language: \"Pseudo Language\",\n      location: \"Pseudo locale used for localization testing\",\n      id: 1281,\n      tag: \"qps-ploc\",\n      version: \"Release 7\"\n    },\n    \"qps-plocm\": {\n      language: \"Pseudo Language\",\n      location: \"Pseudo locale used for localization testing of mirrored locales\",\n      id: 2559,\n      tag: \"qps-plocm\",\n      version: \"Release 7\"\n    },\n    pa: pa,\n    \"pa-arab\": {\n      language: \"Punjabi\",\n      location: null,\n      id: 31814,\n      tag: \"pa-Arab\",\n      version: \"Release 8\"\n    },\n    \"pa-in\": {\n      language: \"Punjabi\",\n      location: \"India\",\n      id: 1094,\n      tag: \"pa-IN\",\n      version: \"Release D\"\n    },\n    \"pa-arab-pk\": {\n      language: \"Punjabi\",\n      location: \"Islamic Republic of Pakistan\",\n      id: 2118,\n      tag: \"pa-Arab-PK\",\n      version: \"Release 8\"\n    },\n    quz: quz,\n    \"quz-bo\": {\n      language: \"Quechua\",\n      location: \"Bolivia\",\n      id: 1131,\n      tag: \"quz-BO\",\n      version: \"Release E1\"\n    },\n    \"quz-ec\": {\n      language: \"Quechua\",\n      location: \"Ecuador\",\n      id: 2155,\n      tag: \"quz-EC\",\n      version: \"Release E1\"\n    },\n    \"quz-pe\": {\n      language: \"Quechua\",\n      location: \"Peru\",\n      id: 3179,\n      tag: \"quz-PE\",\n      version: \"Release E1\"\n    },\n    ksh: ksh,\n    \"ksh-de\": {\n      language: \"Ripuarian\",\n      location: \"Germany\",\n      id: 4096,\n      tag: \"ksh-DE\",\n      version: \"Release 10\"\n    },\n    ro: ro,\n    \"ro-md\": {\n      language: \"Romanian\",\n      location: \"Moldova\",\n      id: 2072,\n      tag: \"ro-MD\",\n      version: \"Release 8.1\"\n    },\n    \"ro-ro\": {\n      language: \"Romanian\",\n      location: \"Romania\",\n      id: 1048,\n      tag: \"ro-RO\",\n      version: \"Release A\"\n    },\n    rm: rm,\n    \"rm-ch\": {\n      language: \"Romansh\",\n      location: \"Switzerland\",\n      id: 1047,\n      tag: \"rm-CH\",\n      version: \"Release E2\"\n    },\n    rof: rof,\n    \"rof-tz\": {\n      language: \"Rombo\",\n      location: \"Tanzania\",\n      id: 4096,\n      tag: \"rof-TZ\",\n      version: \"Release 10\"\n    },\n    rn: rn,\n    \"rn-bi\": {\n      language: \"Rundi\",\n      location: \"Burundi\",\n      id: 4096,\n      tag: \"rn-BI\",\n      version: \"Release 10\"\n    },\n    ru: ru,\n    \"ru-by\": {\n      language: \"Russian\",\n      location: \"Belarus\",\n      id: 4096,\n      tag: \"ru-BY\",\n      version: \"Release 10\"\n    },\n    \"ru-kz\": {\n      language: \"Russian\",\n      location: \"Kazakhstan\",\n      id: 4096,\n      tag: \"ru-KZ\",\n      version: \"Release 10\"\n    },\n    \"ru-kg\": {\n      language: \"Russian\",\n      location: \"Kyrgyzstan\",\n      id: 4096,\n      tag: \"ru-KG\",\n      version: \"Release 10\"\n    },\n    \"ru-md\": {\n      language: \"Russian\",\n      location: \"Moldova\",\n      id: 2073,\n      tag: \"ru-MD\",\n      version: \"Release 10\"\n    },\n    \"ru-ru\": {\n      language: \"Russian\",\n      location: \"Russia\",\n      id: 1049,\n      tag: \"ru-RU\",\n      version: \"Release A\"\n    },\n    \"ru-ua\": {\n      language: \"Russian\",\n      location: \"Ukraine\",\n      id: 4096,\n      tag: \"ru-UA\",\n      version: \"Release 10\"\n    },\n    rwk: rwk,\n    \"rwk-tz\": {\n      language: \"Rwa\",\n      location: \"Tanzania\",\n      id: 4096,\n      tag: \"rwk-TZ\",\n      version: \"Release 10\"\n    },\n    ssy: ssy,\n    \"ssy-er\": {\n      language: \"Saho\",\n      location: \"Eritrea\",\n      id: 4096,\n      tag: \"ssy-ER\",\n      version: \"Release 10\"\n    },\n    sah: sah,\n    \"sah-ru\": {\n      language: \"Sakha\",\n      location: \"Russia\",\n      id: 1157,\n      tag: \"sah-RU\",\n      version: \"Release V\"\n    },\n    saq: saq,\n    \"saq-ke\": {\n      language: \"Samburu\",\n      location: \"Kenya\",\n      id: 4096,\n      tag: \"saq-KE\",\n      version: \"Release 10\"\n    },\n    smn: smn,\n    \"smn-fi\": {\n      language: \"Sami (Inari)\",\n      location: \"Finland\",\n      id: 9275,\n      tag: \"smn-FI\",\n      version: \"Release E1\"\n    },\n    smj: smj,\n    \"smj-no\": {\n      language: \"Sami (Lule)\",\n      location: \"Norway\",\n      id: 4155,\n      tag: \"smj-NO\",\n      version: \"Release E1\"\n    },\n    \"smj-se\": {\n      language: \"Sami (Lule)\",\n      location: \"Sweden\",\n      id: 5179,\n      tag: \"smj-SE\",\n      version: \"Release E1\"\n    },\n    se: se,\n    \"se-fi\": {\n      language: \"Sami (Northern)\",\n      location: \"Finland\",\n      id: 3131,\n      tag: \"se-FI\",\n      version: \"Release E1\"\n    },\n    \"se-no\": {\n      language: \"Sami (Northern)\",\n      location: \"Norway\",\n      id: 1083,\n      tag: \"se-NO\",\n      version: \"Release E1\"\n    },\n    \"se-se\": {\n      language: \"Sami (Northern)\",\n      location: \"Sweden\",\n      id: 2107,\n      tag: \"se-SE\",\n      version: \"Release E1\"\n    },\n    sms: sms,\n    \"sms-fi\": {\n      language: \"Sami (Skolt)\",\n      location: \"Finland\",\n      id: 8251,\n      tag: \"sms-FI\",\n      version: \"Release E1\"\n    },\n    sma: sma,\n    \"sma-no\": {\n      language: \"Sami (Southern)\",\n      location: \"Norway\",\n      id: 6203,\n      tag: \"sma-NO\",\n      version: \"Release E1\"\n    },\n    \"sma-se\": {\n      language: \"Sami (Southern)\",\n      location: \"Sweden\",\n      id: 7227,\n      tag: \"sma-SE\",\n      version: \"Release E1\"\n    },\n    sg: sg,\n    \"sg-cf\": {\n      language: \"Sango\",\n      location: \"Central African Republic\",\n      id: 4096,\n      tag: \"sg-CF\",\n      version: \"Release 10\"\n    },\n    sbp: sbp,\n    \"sbp-tz\": {\n      language: \"Sangu\",\n      location: \"Tanzania\",\n      id: 4096,\n      tag: \"sbp-TZ\",\n      version: \"Release 10\"\n    },\n    sa: sa,\n    \"sa-in\": {\n      language: \"Sanskrit\",\n      location: \"India\",\n      id: 1103,\n      tag: \"sa-IN\",\n      version: \"Release C\"\n    },\n    gd: gd,\n    \"gd-gb\": {\n      language: \"Scottish Gaelic\",\n      location: \"United Kingdom\",\n      id: 1169,\n      tag: \"gd-GB\",\n      version: \"Release 7\"\n    },\n    seh: seh,\n    \"seh-mz\": {\n      language: \"Sena\",\n      location: \"Mozambique\",\n      id: 4096,\n      tag: \"seh-MZ\",\n      version: \"Release 10\"\n    },\n    \"sr-cyrl\": {\n      language: \"Serbian (Cyrillic)\",\n      location: null,\n      id: 27674,\n      tag: \"sr-Cyrl\",\n      version: \"Windows 7\"\n    },\n    \"sr-cyrl-ba\": {\n      language: \"Serbian (Cyrillic)\",\n      location: \"Bosnia and Herzegovina\",\n      id: 7194,\n      tag: \"sr-Cyrl-BA\",\n      version: \"Release E1\"\n    },\n    \"sr-cyrl-me\": {\n      language: \"Serbian (Cyrillic)\",\n      location: \"Montenegro\",\n      id: 12314,\n      tag: \"sr-Cyrl-ME\",\n      version: \"Release 7\"\n    },\n    \"sr-cyrl-rs\": {\n      language: \"Serbian (Cyrillic)\",\n      location: \"Serbia\",\n      id: 10266,\n      tag: \"sr-Cyrl-RS\",\n      version: \"Release 7\"\n    },\n    \"sr-cyrl-cs\": {\n      language: \"Serbian (Cyrillic)\",\n      location: \"Serbia and Montenegro (Former)\",\n      id: 3098,\n      tag: \"sr-Cyrl-CS\",\n      version: \"Release B\"\n    },\n    \"sr-latn\": {\n      language: \"Serbian (Latin)\",\n      location: null,\n      id: 28698,\n      tag: \"sr-Latn\",\n      version: \"Windows 7\"\n    },\n    sr: sr,\n    \"sr-latn-ba\": {\n      language: \"Serbian (Latin)\",\n      location: \"Bosnia and Herzegovina\",\n      id: 6170,\n      tag: \"sr-Latn-BA\",\n      version: \"Release E1\"\n    },\n    \"sr-latn-me\": {\n      language: \"Serbian (Latin)\",\n      location: \"Montenegro\",\n      id: 11290,\n      tag: \"sr-Latn-ME\",\n      version: \"Release 7\"\n    },\n    \"sr-latn-rs\": {\n      language: \"Serbian (Latin)\",\n      location: \"Serbia\",\n      id: 9242,\n      tag: \"sr-Latn-RS\",\n      version: \"Release 7\"\n    },\n    \"sr-latn-cs\": {\n      language: \"Serbian (Latin)\",\n      location: \"Serbia and Montenegro (Former)\",\n      id: 2074,\n      tag: \"sr-Latn-CS\",\n      version: \"Release B\"\n    },\n    nso: nso,\n    \"nso-za\": {\n      language: \"Sesotho sa Leboa\",\n      location: \"South Africa\",\n      id: 1132,\n      tag: \"nso-ZA\",\n      version: \"Release E1\"\n    },\n    tn: tn,\n    \"tn-bw\": {\n      language: \"Setswana\",\n      location: \"Botswana\",\n      id: 2098,\n      tag: \"tn-BW\",\n      version: \"Release 8\"\n    },\n    \"tn-za\": {\n      language: \"Setswana\",\n      location: \"South Africa\",\n      id: 1074,\n      tag: \"tn-ZA\",\n      version: \"Release E1\"\n    },\n    ksb: ksb,\n    \"ksb-tz\": {\n      language: \"Shambala\",\n      location: \"Tanzania\",\n      id: 4096,\n      tag: \"ksb-TZ\",\n      version: \"Release 10\"\n    },\n    sn: sn,\n    \"sn-latn\": {\n      language: \"Shona\",\n      location: \"Latin\",\n      id: 4096,\n      tag: \"sn-Latn\",\n      version: \"Release 8.1\"\n    },\n    \"sn-latn-zw\": {\n      language: \"Shona\",\n      location: \"Zimbabwe\",\n      id: 4096,\n      tag: \"sn-Latn-ZW\",\n      version: \"Release 8.1\"\n    },\n    sd: sd,\n    \"sd-arab\": {\n      language: \"Sindhi\",\n      location: null,\n      id: 31833,\n      tag: \"sd-Arab\",\n      version: \"Release 8\"\n    },\n    \"sd-arab-pk\": {\n      language: \"Sindhi\",\n      location: \"Islamic Republic of Pakistan\",\n      id: 2137,\n      tag: \"sd-Arab-PK\",\n      version: \"Release 8\"\n    },\n    si: si,\n    \"si-lk\": {\n      language: \"Sinhala\",\n      location: \"Sri Lanka\",\n      id: 1115,\n      tag: \"si-LK\",\n      version: \"Release V\"\n    },\n    sk: sk,\n    \"sk-sk\": {\n      language: \"Slovak\",\n      location: \"Slovakia\",\n      id: 1051,\n      tag: \"sk-SK\",\n      version: \"Release A\"\n    },\n    sl: sl,\n    \"sl-si\": {\n      language: \"Slovenian\",\n      location: \"Slovenia\",\n      id: 1060,\n      tag: \"sl-SI\",\n      version: \"Release A\"\n    },\n    xog: xog,\n    \"xog-ug\": {\n      language: \"Soga\",\n      location: \"Uganda\",\n      id: 4096,\n      tag: \"xog-UG\",\n      version: \"Release 10\"\n    },\n    so: so,\n    \"so-dj\": {\n      language: \"Somali\",\n      location: \"Djibouti\",\n      id: 4096,\n      tag: \"so-DJ\",\n      version: \"Release 10\"\n    },\n    \"so-et\": {\n      language: \"Somali\",\n      location: \"Ethiopia\",\n      id: 4096,\n      tag: \"so-ET\",\n      version: \"Release 10\"\n    },\n    \"so-ke\": {\n      language: \"Somali\",\n      location: \"Kenya\",\n      id: 4096,\n      tag: \"so-KE\",\n      version: \"Release 10\"\n    },\n    \"so-so\": {\n      language: \"Somali\",\n      location: \"Somalia\",\n      id: 1143,\n      tag: \"so-SO\",\n      version: \"Release 8.1\"\n    },\n    st: st,\n    \"st-za\": {\n      language: \"Sotho\",\n      location: \"South Africa\",\n      id: 1072,\n      tag: \"st-ZA\",\n      version: \"Release 8.1\"\n    },\n    nr: nr,\n    \"nr-za\": {\n      language: \"South Ndebele\",\n      location: \"South Africa\",\n      id: 4096,\n      tag: \"nr-ZA\",\n      version: \"Release 10\"\n    },\n    \"st-ls\": {\n      language: \"Southern Sotho\",\n      location: \"Lesotho\",\n      id: 4096,\n      tag: \"st-LS\",\n      version: \"Release 10\"\n    },\n    es: es,\n    \"es-ar\": {\n      language: \"Spanish\",\n      location: \"Argentina\",\n      id: 11274,\n      tag: \"es-AR\",\n      version: \"Release B\"\n    },\n    \"es-bz\": {\n      language: \"Spanish\",\n      location: \"Belize\",\n      id: 4096,\n      tag: \"es-BZ\",\n      version: \"Release 10.3\"\n    },\n    \"es-ve\": {\n      language: \"Spanish\",\n      location: \"Bolivarian Republic of Venezuela\",\n      id: 8202,\n      tag: \"es-VE\",\n      version: \"Release B\"\n    },\n    \"es-bo\": {\n      language: \"Spanish\",\n      location: \"Bolivia\",\n      id: 16394,\n      tag: \"es-BO\",\n      version: \"Release B\"\n    },\n    \"es-br\": {\n      language: \"Spanish\",\n      location: \"Brazil\",\n      id: 4096,\n      tag: \"es-BR\",\n      version: \"Release 10.2\"\n    },\n    \"es-cl\": {\n      language: \"Spanish\",\n      location: \"Chile\",\n      id: 13322,\n      tag: \"es-CL\",\n      version: \"Release B\"\n    },\n    \"es-co\": {\n      language: \"Spanish\",\n      location: \"Colombia\",\n      id: 9226,\n      tag: \"es-CO\",\n      version: \"Release B\"\n    },\n    \"es-cr\": {\n      language: \"Spanish\",\n      location: \"Costa Rica\",\n      id: 5130,\n      tag: \"es-CR\",\n      version: \"Release B\"\n    },\n    \"es-cu\": {\n      language: \"Spanish\",\n      location: \"Cuba\",\n      id: 23562,\n      tag: \"es-CU\",\n      version: \"Release 10\"\n    },\n    \"es-do\": {\n      language: \"Spanish\",\n      location: \"Dominican Republic\",\n      id: 7178,\n      tag: \"es-DO\",\n      version: \"Release B\"\n    },\n    \"es-ec\": {\n      language: \"Spanish\",\n      location: \"Ecuador\",\n      id: 12298,\n      tag: \"es-EC\",\n      version: \"Release B\"\n    },\n    \"es-sv\": {\n      language: \"Spanish\",\n      location: \"El Salvador\",\n      id: 17418,\n      tag: \"es-SV\",\n      version: \"Release B\"\n    },\n    \"es-gq\": {\n      language: \"Spanish\",\n      location: \"Equatorial Guinea\",\n      id: 4096,\n      tag: \"es-GQ\",\n      version: \"Release 10\"\n    },\n    \"es-gt\": {\n      language: \"Spanish\",\n      location: \"Guatemala\",\n      id: 4106,\n      tag: \"es-GT\",\n      version: \"Release B\"\n    },\n    \"es-hn\": {\n      language: \"Spanish\",\n      location: \"Honduras\",\n      id: 18442,\n      tag: \"es-HN\",\n      version: \"Release B\"\n    },\n    \"es-419\": {\n      language: \"Spanish\",\n      location: \"Latin America\",\n      id: 22538,\n      tag: \"es-419\",\n      version: \"Release 8.1\"\n    },\n    \"es-mx\": {\n      language: \"Spanish\",\n      location: \"Mexico\",\n      id: 2058,\n      tag: \"es-MX\",\n      version: \"Release A\"\n    },\n    \"es-ni\": {\n      language: \"Spanish\",\n      location: \"Nicaragua\",\n      id: 19466,\n      tag: \"es-NI\",\n      version: \"Release B\"\n    },\n    \"es-pa\": {\n      language: \"Spanish\",\n      location: \"Panama\",\n      id: 6154,\n      tag: \"es-PA\",\n      version: \"Release B\"\n    },\n    \"es-py\": {\n      language: \"Spanish\",\n      location: \"Paraguay\",\n      id: 15370,\n      tag: \"es-PY\",\n      version: \"Release B\"\n    },\n    \"es-pe\": {\n      language: \"Spanish\",\n      location: \"Peru\",\n      id: 10250,\n      tag: \"es-PE\",\n      version: \"Release B\"\n    },\n    \"es-ph\": {\n      language: \"Spanish\",\n      location: \"Philippines\",\n      id: 4096,\n      tag: \"es-PH\",\n      version: \"Release 10\"\n    },\n    \"es-pr\": {\n      language: \"Spanish\",\n      location: \"Puerto Rico\",\n      id: 20490,\n      tag: \"es-PR\",\n      version: \"Release B\"\n    },\n    \"es-es_tradnl\": {\n      language: \"Spanish\",\n      location: \"Spain\",\n      id: 1034,\n      tag: \"es-ES_tradnl\",\n      version: \"Release A\"\n    },\n    \"es-es\": {\n      language: \"Spanish\",\n      location: \"Spain\",\n      id: 3082,\n      tag: \"es-ES\",\n      version: \"Release A\"\n    },\n    \"es-us\": {\n      language: \"Spanish\",\n      location: \"UnitedStates\",\n      id: 21514,\n      tag: \"es-US\",\n      version: \"Release V\"\n    },\n    \"es-uy\": {\n      language: \"Spanish\",\n      location: \"Uruguay\",\n      id: 14346,\n      tag: \"es-UY\",\n      version: \"Release B\"\n    },\n    zgh: zgh,\n    \"zgh-tfng-ma\": {\n      language: \"Standard Moroccan Tamazight\",\n      location: \"Morocco\",\n      id: 4096,\n      tag: \"zgh-Tfng-MA\",\n      version: \"Release 8.1\"\n    },\n    \"zgh-tfng\": {\n      language: \"Standard Moroccan Tamazight\",\n      location: \"Tifinagh\",\n      id: 4096,\n      tag: \"zgh-Tfng\",\n      version: \"Release 8.1\"\n    },\n    ss: ss,\n    \"ss-za\": {\n      language: \"Swati\",\n      location: \"South Africa\",\n      id: 4096,\n      tag: \"ss-ZA\",\n      version: \"Release 10\"\n    },\n    \"ss-sz\": {\n      language: \"Swati\",\n      location: \"Swaziland\",\n      id: 4096,\n      tag: \"ss-SZ\",\n      version: \"Release 10\"\n    },\n    sv: sv,\n    \"sv-ax\": {\n      language: \"Swedish\",\n      location: \"Åland Islands\",\n      id: 4096,\n      tag: \"sv-AX\",\n      version: \"Release 10\"\n    },\n    \"sv-fi\": {\n      language: \"Swedish\",\n      location: \"Finland\",\n      id: 2077,\n      tag: \"sv-FI\",\n      version: \"Release B\"\n    },\n    \"sv-se\": {\n      language: \"Swedish\",\n      location: \"Sweden\",\n      id: 1053,\n      tag: \"sv-SE\",\n      version: \"Release A\"\n    },\n    syr: syr,\n    \"syr-sy\": {\n      language: \"Syriac\",\n      location: \"Syria\",\n      id: 1114,\n      tag: \"syr-SY\",\n      version: \"Release D\"\n    },\n    shi: shi,\n    \"shi-tfng\": {\n      language: \"Tachelhit\",\n      location: \"Tifinagh\",\n      id: 4096,\n      tag: \"shi-Tfng\",\n      version: \"Release 10\"\n    },\n    \"shi-tfng-ma\": {\n      language: \"Tachelhit\",\n      location: \"Tifinagh, Morocco\",\n      id: 4096,\n      tag: \"shi-Tfng-MA\",\n      version: \"Release 10\"\n    },\n    \"shi-latn\": {\n      language: \"Tachelhit (Latin)\",\n      location: null,\n      id: 4096,\n      tag: \"shi-Latn\",\n      version: \"Release 10\"\n    },\n    \"shi-latn-ma\": {\n      language: \"Tachelhit (Latin)\",\n      location: \"Morocco\",\n      id: 4096,\n      tag: \"shi-Latn-MA\",\n      version: \"Release 10\"\n    },\n    dav: dav,\n    \"dav-ke\": {\n      language: \"Taita\",\n      location: \"Kenya\",\n      id: 4096,\n      tag: \"dav-KE\",\n      version: \"Release 10\"\n    },\n    tg: tg,\n    \"tg-cyrl\": {\n      language: \"Tajik (Cyrillic)\",\n      location: null,\n      id: 31784,\n      tag: \"tg-Cyrl\",\n      version: \"Windows 7\"\n    },\n    \"tg-cyrl-tj\": {\n      language: \"Tajik (Cyrillic)\",\n      location: \"Tajikistan\",\n      id: 1064,\n      tag: \"tg-Cyrl-TJ\",\n      version: \"Release V\"\n    },\n    tzm: tzm,\n    \"tzm-latn\": {\n      language: \"Tamazight (Latin)\",\n      location: null,\n      id: 31839,\n      tag: \"tzm-Latn\",\n      version: \"Windows 7\"\n    },\n    \"tzm-latn-dz\": {\n      language: \"Tamazight (Latin)\",\n      location: \"Algeria\",\n      id: 2143,\n      tag: \"tzm-Latn-DZ\",\n      version: \"Release V\"\n    },\n    ta: ta,\n    \"ta-in\": {\n      language: \"Tamil\",\n      location: \"India\",\n      id: 1097,\n      tag: \"ta-IN\",\n      version: \"Release C\"\n    },\n    \"ta-my\": {\n      language: \"Tamil\",\n      location: \"Malaysia\",\n      id: 4096,\n      tag: \"ta-MY\",\n      version: \"Release 10\"\n    },\n    \"ta-sg\": {\n      language: \"Tamil\",\n      location: \"Singapore\",\n      id: 4096,\n      tag: \"ta-SG\",\n      version: \"Release 10\"\n    },\n    \"ta-lk\": {\n      language: \"Tamil\",\n      location: \"Sri Lanka\",\n      id: 2121,\n      tag: \"ta-LK\",\n      version: \"Release 8\"\n    },\n    twq: twq,\n    \"twq-ne\": {\n      language: \"Tasawaq\",\n      location: \"Niger\",\n      id: 4096,\n      tag: \"twq-NE\",\n      version: \"Release 10\"\n    },\n    tt: tt,\n    \"tt-ru\": {\n      language: \"Tatar\",\n      location: \"Russia\",\n      id: 1092,\n      tag: \"tt-RU\",\n      version: \"Release D\"\n    },\n    te: te,\n    \"te-in\": {\n      language: \"Telugu\",\n      location: \"India\",\n      id: 1098,\n      tag: \"te-IN\",\n      version: \"Release D\"\n    },\n    teo: teo,\n    \"teo-ke\": {\n      language: \"Teso\",\n      location: \"Kenya\",\n      id: 4096,\n      tag: \"teo-KE\",\n      version: \"Release 10\"\n    },\n    \"teo-ug\": {\n      language: \"Teso\",\n      location: \"Uganda\",\n      id: 4096,\n      tag: \"teo-UG\",\n      version: \"Release 10\"\n    },\n    th: th,\n    \"th-th\": {\n      language: \"Thai\",\n      location: \"Thailand\",\n      id: 1054,\n      tag: \"th-TH\",\n      version: \"Release B\"\n    },\n    bo: bo,\n    \"bo-in\": {\n      language: \"Tibetan\",\n      location: \"India\",\n      id: 4096,\n      tag: \"bo-IN\",\n      version: \"Release 10\"\n    },\n    \"bo-cn\": {\n      language: \"Tibetan\",\n      location: \"People's Republic of China\",\n      id: 1105,\n      tag: \"bo-CN\",\n      version: \"Release V\"\n    },\n    tig: tig,\n    \"tig-er\": {\n      language: \"Tigre\",\n      location: \"Eritrea\",\n      id: 4096,\n      tag: \"tig-ER\",\n      version: \"Release 10\"\n    },\n    ti: ti,\n    \"ti-er\": {\n      language: \"Tigrinya\",\n      location: \"Eritrea\",\n      id: 2163,\n      tag: \"ti-ER\",\n      version: \"Release 8\"\n    },\n    \"ti-et\": {\n      language: \"Tigrinya\",\n      location: \"Ethiopia\",\n      id: 1139,\n      tag: \"ti-ET\",\n      version: \"Release 8\"\n    },\n    to: to,\n    \"to-to\": {\n      language: \"Tongan\",\n      location: \"Tonga\",\n      id: 4096,\n      tag: \"to-TO\",\n      version: \"Release 10\"\n    },\n    ts: ts,\n    \"ts-za\": {\n      language: \"Tsonga\",\n      location: \"South Africa\",\n      id: 1073,\n      tag: \"ts-ZA\",\n      version: \"Release 8.1\"\n    },\n    tr: tr,\n    \"tr-cy\": {\n      language: \"Turkish\",\n      location: \"Cyprus\",\n      id: 4096,\n      tag: \"tr-CY\",\n      version: \"Release 10\"\n    },\n    \"tr-tr\": {\n      language: \"Turkish\",\n      location: \"Turkey\",\n      id: 1055,\n      tag: \"tr-TR\",\n      version: \"Release A\"\n    },\n    tk: tk,\n    \"tk-tm\": {\n      language: \"Turkmen\",\n      location: \"Turkmenistan\",\n      id: 1090,\n      tag: \"tk-TM\",\n      version: \"Release V\"\n    },\n    uk: uk,\n    \"uk-ua\": {\n      language: \"Ukrainian\",\n      location: \"Ukraine\",\n      id: 1058,\n      tag: \"uk-UA\",\n      version: \"Release B\"\n    },\n    hsb: hsb,\n    \"hsb-de\": {\n      language: \"Upper Sorbian\",\n      location: \"Germany\",\n      id: 1070,\n      tag: \"hsb-DE\",\n      version: \"Release V\"\n    },\n    ur: ur,\n    \"ur-in\": {\n      language: \"Urdu\",\n      location: \"India\",\n      id: 2080,\n      tag: \"ur-IN\",\n      version: \"Release 8.1\"\n    },\n    \"ur-pk\": {\n      language: \"Urdu\",\n      location: \"Islamic Republic of Pakistan\",\n      id: 1056,\n      tag: \"ur-PK\",\n      version: \"Release C\"\n    },\n    ug: ug,\n    \"ug-cn\": {\n      language: \"Uyghur\",\n      location: \"People's Republic of China\",\n      id: 1152,\n      tag: \"ug-CN\",\n      version: \"Release V\"\n    },\n    \"uz-arab\": {\n      language: \"Uzbek\",\n      location: \"Perso-Arabic\",\n      id: 4096,\n      tag: \"uz-Arab\",\n      version: \"Release 10\"\n    },\n    \"uz-arab-af\": {\n      language: \"Uzbek\",\n      location: \"Perso-Arabic, Afghanistan\",\n      id: 4096,\n      tag: \"uz-Arab-AF\",\n      version: \"Release 10\"\n    },\n    \"uz-cyrl\": {\n      language: \"Uzbek (Cyrillic)\",\n      location: null,\n      id: 30787,\n      tag: \"uz-Cyrl\",\n      version: \"Windows 7\"\n    },\n    \"uz-cyrl-uz\": {\n      language: \"Uzbek (Cyrillic)\",\n      location: \"Uzbekistan\",\n      id: 2115,\n      tag: \"uz-Cyrl-UZ\",\n      version: \"Release C\"\n    },\n    uz: uz,\n    \"uz-latn\": {\n      language: \"Uzbek (Latin)\",\n      location: null,\n      id: 31811,\n      tag: \"uz-Latn\",\n      version: \"Windows7\"\n    },\n    \"uz-latn-uz\": {\n      language: \"Uzbek (Latin)\",\n      location: \"Uzbekistan\",\n      id: 1091,\n      tag: \"uz-Latn-UZ\",\n      version: \"Release C\"\n    },\n    vai: vai,\n    \"vai-vaii\": {\n      language: \"Vai\",\n      location: null,\n      id: 4096,\n      tag: \"vai-Vaii\",\n      version: \"Release 10\"\n    },\n    \"vai-vaii-lr\": {\n      language: \"Vai\",\n      location: \"Liberia\",\n      id: 4096,\n      tag: \"vai-Vaii-LR\",\n      version: \"Release 10\"\n    },\n    \"vai-latn-lr\": {\n      language: \"Vai (Latin)\",\n      location: \"Liberia\",\n      id: 4096,\n      tag: \"vai-Latn-LR\",\n      version: \"Release 10\"\n    },\n    \"vai-latn\": {\n      language: \"Vai (Latin)\",\n      location: null,\n      id: 4096,\n      tag: \"vai-Latn\",\n      version: \"Release 10\"\n    },\n    \"ca-es-\": {\n      language: \"Valencian\",\n      location: \"Spain\",\n      id: 2051,\n      tag: \"ca-ES-\",\n      version: \"Release 8\"\n    },\n    ve: ve,\n    \"ve-za\": {\n      language: \"Venda\",\n      location: \"South Africa\",\n      id: 1075,\n      tag: \"ve-ZA\",\n      version: \"Release 10\"\n    },\n    vi: vi,\n    \"vi-vn\": {\n      language: \"Vietnamese\",\n      location: \"Vietnam\",\n      id: 1066,\n      tag: \"vi-VN\",\n      version: \"Release B\"\n    },\n    vo: vo,\n    \"vo-001\": {\n      language: \"Volapük\",\n      location: \"World\",\n      id: 4096,\n      tag: \"vo-001\",\n      version: \"Release 10\"\n    },\n    vun: vun,\n    \"vun-tz\": {\n      language: \"Vunjo\",\n      location: \"Tanzania\",\n      id: 4096,\n      tag: \"vun-TZ\",\n      version: \"Release 10\"\n    },\n    wae: wae,\n    \"wae-ch\": {\n      language: \"Walser\",\n      location: \"Switzerland\",\n      id: 4096,\n      tag: \"wae-CH\",\n      version: \"Release 10\"\n    },\n    cy: cy,\n    \"cy-gb\": {\n      language: \"Welsh\",\n      location: \"United Kingdom\",\n      id: 1106,\n      tag: \"cy-GB\",\n      version: \"ReleaseE1\"\n    },\n    wal: wal,\n    \"wal-et\": {\n      language: \"Wolaytta\",\n      location: \"Ethiopia\",\n      id: 4096,\n      tag: \"wal-ET\",\n      version: \"Release 10\"\n    },\n    wo: wo,\n    \"wo-sn\": {\n      language: \"Wolof\",\n      location: \"Senegal\",\n      id: 1160,\n      tag: \"wo-SN\",\n      version: \"Release V\"\n    },\n    xh: xh,\n    \"xh-za\": {\n      language: \"Xhosa\",\n      location: \"South Africa\",\n      id: 1076,\n      tag: \"xh-ZA\",\n      version: \"Release E1\"\n    },\n    yav: yav,\n    \"yav-cm\": {\n      language: \"Yangben\",\n      location: \"Cameroon\",\n      id: 4096,\n      tag: \"yav-CM\",\n      version: \"Release 10\"\n    },\n    ii: ii,\n    \"ii-cn\": {\n      language: \"Yi\",\n      location: \"People's Republic of China\",\n      id: 1144,\n      tag: \"ii-CN\",\n      version: \"Release V\"\n    },\n    yo: yo,\n    \"yo-bj\": {\n      language: \"Yoruba\",\n      location: \"Benin\",\n      id: 4096,\n      tag: \"yo-BJ\",\n      version: \"Release 10\"\n    },\n    \"yo-ng\": {\n      language: \"Yoruba\",\n      location: \"Nigeria\",\n      id: 1130,\n      tag: \"yo-NG\",\n      version: \"Release V\"\n    },\n    dje: dje,\n    \"dje-ne\": {\n      language: \"Zarma\",\n      location: \"Niger\",\n      id: 4096,\n      tag: \"dje-NE\",\n      version: \"Release 10\"\n    },\n    zu: zu,\n    \"zu-za\": {\n      language: \"Zulu\",\n      location: \"South Africa\",\n      id: 1077,\n      tag: \"zu-ZA\",\n      version: \"Release E1\"\n    }\n  };\n  var Abkhazian = {\n    name: \"Abkhazian\",\n    names: [\"Abkhazian\"],\n    \"iso639-2\": \"abk\",\n    \"iso639-1\": \"ab\"\n  };\n  var Achinese = {\n    name: \"Achinese\",\n    names: [\"Achinese\"],\n    \"iso639-2\": \"ace\",\n    \"iso639-1\": null\n  };\n  var Acoli = {\n    name: \"Acoli\",\n    names: [\"Acoli\"],\n    \"iso639-2\": \"ach\",\n    \"iso639-1\": null\n  };\n  var Adangme = {\n    name: \"Adangme\",\n    names: [\"Adangme\"],\n    \"iso639-2\": \"ada\",\n    \"iso639-1\": null\n  };\n  var Adygei = {\n    name: \"Adygei\",\n    names: [\"Adyghe\", \"Adygei\"],\n    \"iso639-2\": \"ady\",\n    \"iso639-1\": null\n  };\n  var Adyghe = {\n    name: \"Adyghe\",\n    names: [\"Adyghe\", \"Adygei\"],\n    \"iso639-2\": \"ady\",\n    \"iso639-1\": null\n  };\n  var Afar = {\n    name: \"Afar\",\n    names: [\"Afar\"],\n    \"iso639-2\": \"aar\",\n    \"iso639-1\": \"aa\"\n  };\n  var Afrihili = {\n    name: \"Afrihili\",\n    names: [\"Afrihili\"],\n    \"iso639-2\": \"afh\",\n    \"iso639-1\": null\n  };\n  var Afrikaans = {\n    name: \"Afrikaans\",\n    names: [\"Afrikaans\"],\n    \"iso639-2\": \"afr\",\n    \"iso639-1\": \"af\"\n  };\n  var Ainu = {\n    name: \"Ainu\",\n    names: [\"Ainu\"],\n    \"iso639-2\": \"ain\",\n    \"iso639-1\": null\n  };\n  var Akan = {\n    name: \"Akan\",\n    names: [\"Akan\"],\n    \"iso639-2\": \"aka\",\n    \"iso639-1\": \"ak\"\n  };\n  var Akkadian = {\n    name: \"Akkadian\",\n    names: [\"Akkadian\"],\n    \"iso639-2\": \"akk\",\n    \"iso639-1\": null\n  };\n  var Albanian = {\n    name: \"Albanian\",\n    names: [\"Albanian\"],\n    \"iso639-2\": \"alb/sqi\",\n    \"iso639-1\": \"sq\"\n  };\n  var Alemannic = {\n    name: \"Alemannic\",\n    names: [\"Swiss German\", \"Alemannic\", \"Alsatian\"],\n    \"iso639-2\": \"gsw\",\n    \"iso639-1\": null\n  };\n  var Aleut = {\n    name: \"Aleut\",\n    names: [\"Aleut\"],\n    \"iso639-2\": \"ale\",\n    \"iso639-1\": null\n  };\n  var Alsatian = {\n    name: \"Alsatian\",\n    names: [\"Swiss German\", \"Alemannic\", \"Alsatian\"],\n    \"iso639-2\": \"gsw\",\n    \"iso639-1\": null\n  };\n  var Amharic = {\n    name: \"Amharic\",\n    names: [\"Amharic\"],\n    \"iso639-2\": \"amh\",\n    \"iso639-1\": \"am\"\n  };\n  var Angika = {\n    name: \"Angika\",\n    names: [\"Angika\"],\n    \"iso639-2\": \"anp\",\n    \"iso639-1\": null\n  };\n  var Arabic = {\n    name: \"Arabic\",\n    names: [\"Arabic\"],\n    \"iso639-2\": \"ara\",\n    \"iso639-1\": \"ar\"\n  };\n  var Aragonese = {\n    name: \"Aragonese\",\n    names: [\"Aragonese\"],\n    \"iso639-2\": \"arg\",\n    \"iso639-1\": \"an\"\n  };\n  var Arapaho = {\n    name: \"Arapaho\",\n    names: [\"Arapaho\"],\n    \"iso639-2\": \"arp\",\n    \"iso639-1\": null\n  };\n  var Arawak = {\n    name: \"Arawak\",\n    names: [\"Arawak\"],\n    \"iso639-2\": \"arw\",\n    \"iso639-1\": null\n  };\n  var Armenian = {\n    name: \"Armenian\",\n    names: [\"Armenian\"],\n    \"iso639-2\": \"arm/hye\",\n    \"iso639-1\": \"hy\"\n  };\n  var Aromanian = {\n    name: \"Aromanian\",\n    names: [\"Aromanian\", \"Arumanian\", \"Macedo-Romanian\"],\n    \"iso639-2\": \"rup\",\n    \"iso639-1\": null\n  };\n  var Arumanian = {\n    name: \"Arumanian\",\n    names: [\"Aromanian\", \"Arumanian\", \"Macedo-Romanian\"],\n    \"iso639-2\": \"rup\",\n    \"iso639-1\": null\n  };\n  var Assamese = {\n    name: \"Assamese\",\n    names: [\"Assamese\"],\n    \"iso639-2\": \"asm\",\n    \"iso639-1\": \"as\"\n  };\n  var Asturian = {\n    name: \"Asturian\",\n    names: [\"Asturian\", \"Bable\", \"Leonese\", \"Asturleonese\"],\n    \"iso639-2\": \"ast\",\n    \"iso639-1\": null\n  };\n  var Asturleonese = {\n    name: \"Asturleonese\",\n    names: [\"Asturian\", \"Bable\", \"Leonese\", \"Asturleonese\"],\n    \"iso639-2\": \"ast\",\n    \"iso639-1\": null\n  };\n  var Avaric = {\n    name: \"Avaric\",\n    names: [\"Avaric\"],\n    \"iso639-2\": \"ava\",\n    \"iso639-1\": \"av\"\n  };\n  var Avestan = {\n    name: \"Avestan\",\n    names: [\"Avestan\"],\n    \"iso639-2\": \"ave\",\n    \"iso639-1\": \"ae\"\n  };\n  var Awadhi = {\n    name: \"Awadhi\",\n    names: [\"Awadhi\"],\n    \"iso639-2\": \"awa\",\n    \"iso639-1\": null\n  };\n  var Aymara = {\n    name: \"Aymara\",\n    names: [\"Aymara\"],\n    \"iso639-2\": \"aym\",\n    \"iso639-1\": \"ay\"\n  };\n  var Azerbaijani = {\n    name: \"Azerbaijani\",\n    names: [\"Azerbaijani\"],\n    \"iso639-2\": \"aze\",\n    \"iso639-1\": \"az\"\n  };\n  var Bable = {\n    name: \"Bable\",\n    names: [\"Asturian\", \"Bable\", \"Leonese\", \"Asturleonese\"],\n    \"iso639-2\": \"ast\",\n    \"iso639-1\": null\n  };\n  var Balinese = {\n    name: \"Balinese\",\n    names: [\"Balinese\"],\n    \"iso639-2\": \"ban\",\n    \"iso639-1\": null\n  };\n  var Baluchi = {\n    name: \"Baluchi\",\n    names: [\"Baluchi\"],\n    \"iso639-2\": \"bal\",\n    \"iso639-1\": null\n  };\n  var Bambara = {\n    name: \"Bambara\",\n    names: [\"Bambara\"],\n    \"iso639-2\": \"bam\",\n    \"iso639-1\": \"bm\"\n  };\n  var Basa = {\n    name: \"Basa\",\n    names: [\"Basa\"],\n    \"iso639-2\": \"bas\",\n    \"iso639-1\": null\n  };\n  var Bashkir = {\n    name: \"Bashkir\",\n    names: [\"Bashkir\"],\n    \"iso639-2\": \"bak\",\n    \"iso639-1\": \"ba\"\n  };\n  var Basque = {\n    name: \"Basque\",\n    names: [\"Basque\"],\n    \"iso639-2\": \"baq/eus\",\n    \"iso639-1\": \"eu\"\n  };\n  var Bedawiyet = {\n    name: \"Bedawiyet\",\n    names: [\"Beja\", \"Bedawiyet\"],\n    \"iso639-2\": \"bej\",\n    \"iso639-1\": null\n  };\n  var Beja = {\n    name: \"Beja\",\n    names: [\"Beja\", \"Bedawiyet\"],\n    \"iso639-2\": \"bej\",\n    \"iso639-1\": null\n  };\n  var Belarusian = {\n    name: \"Belarusian\",\n    names: [\"Belarusian\"],\n    \"iso639-2\": \"bel\",\n    \"iso639-1\": \"be\"\n  };\n  var Bemba = {\n    name: \"Bemba\",\n    names: [\"Bemba\"],\n    \"iso639-2\": \"bem\",\n    \"iso639-1\": null\n  };\n  var Bengali = {\n    name: \"Bengali\",\n    names: [\"Bengali\"],\n    \"iso639-2\": \"ben\",\n    \"iso639-1\": \"bn\"\n  };\n  var Bhojpuri = {\n    name: \"Bhojpuri\",\n    names: [\"Bhojpuri\"],\n    \"iso639-2\": \"bho\",\n    \"iso639-1\": null\n  };\n  var Bikol = {\n    name: \"Bikol\",\n    names: [\"Bikol\"],\n    \"iso639-2\": \"bik\",\n    \"iso639-1\": null\n  };\n  var Bilin = {\n    name: \"Bilin\",\n    names: [\"Blin\", \"Bilin\"],\n    \"iso639-2\": \"byn\",\n    \"iso639-1\": null\n  };\n  var Bini = {\n    name: \"Bini\",\n    names: [\"Bini\", \"Edo\"],\n    \"iso639-2\": \"bin\",\n    \"iso639-1\": null\n  };\n  var Bislama = {\n    name: \"Bislama\",\n    names: [\"Bislama\"],\n    \"iso639-2\": \"bis\",\n    \"iso639-1\": \"bi\"\n  };\n  var Blin = {\n    name: \"Blin\",\n    names: [\"Blin\", \"Bilin\"],\n    \"iso639-2\": \"byn\",\n    \"iso639-1\": null\n  };\n  var Bliss = {\n    name: \"Bliss\",\n    names: [\"Blissymbols\", \"Blissymbolics\", \"Bliss\"],\n    \"iso639-2\": \"zbl\",\n    \"iso639-1\": null\n  };\n  var Blissymbolics = {\n    name: \"Blissymbolics\",\n    names: [\"Blissymbols\", \"Blissymbolics\", \"Bliss\"],\n    \"iso639-2\": \"zbl\",\n    \"iso639-1\": null\n  };\n  var Blissymbols = {\n    name: \"Blissymbols\",\n    names: [\"Blissymbols\", \"Blissymbolics\", \"Bliss\"],\n    \"iso639-2\": \"zbl\",\n    \"iso639-1\": null\n  };\n  var Bosnian = {\n    name: \"Bosnian\",\n    names: [\"Bosnian\"],\n    \"iso639-2\": \"bos\",\n    \"iso639-1\": \"bs\"\n  };\n  var Braj = {\n    name: \"Braj\",\n    names: [\"Braj\"],\n    \"iso639-2\": \"bra\",\n    \"iso639-1\": null\n  };\n  var Breton = {\n    name: \"Breton\",\n    names: [\"Breton\"],\n    \"iso639-2\": \"bre\",\n    \"iso639-1\": \"br\"\n  };\n  var Buginese = {\n    name: \"Buginese\",\n    names: [\"Buginese\"],\n    \"iso639-2\": \"bug\",\n    \"iso639-1\": null\n  };\n  var Bulgarian = {\n    name: \"Bulgarian\",\n    names: [\"Bulgarian\"],\n    \"iso639-2\": \"bul\",\n    \"iso639-1\": \"bg\"\n  };\n  var Buriat = {\n    name: \"Buriat\",\n    names: [\"Buriat\"],\n    \"iso639-2\": \"bua\",\n    \"iso639-1\": null\n  };\n  var Burmese = {\n    name: \"Burmese\",\n    names: [\"Burmese\"],\n    \"iso639-2\": \"bur/mya\",\n    \"iso639-1\": \"my\"\n  };\n  var Caddo = {\n    name: \"Caddo\",\n    names: [\"Caddo\"],\n    \"iso639-2\": \"cad\",\n    \"iso639-1\": null\n  };\n  var Castilian = {\n    name: \"Castilian\",\n    names: [\"Spanish\", \"Castilian\"],\n    \"iso639-2\": \"spa\",\n    \"iso639-1\": \"es\"\n  };\n  var Catalan = {\n    name: \"Catalan\",\n    names: [\"Catalan\", \"Valencian\"],\n    \"iso639-2\": \"cat\",\n    \"iso639-1\": \"ca\"\n  };\n  var Cebuano = {\n    name: \"Cebuano\",\n    names: [\"Cebuano\"],\n    \"iso639-2\": \"ceb\",\n    \"iso639-1\": null\n  };\n  var Chagatai = {\n    name: \"Chagatai\",\n    names: [\"Chagatai\"],\n    \"iso639-2\": \"chg\",\n    \"iso639-1\": null\n  };\n  var Chamorro = {\n    name: \"Chamorro\",\n    names: [\"Chamorro\"],\n    \"iso639-2\": \"cha\",\n    \"iso639-1\": \"ch\"\n  };\n  var Chechen = {\n    name: \"Chechen\",\n    names: [\"Chechen\"],\n    \"iso639-2\": \"che\",\n    \"iso639-1\": \"ce\"\n  };\n  var Cherokee = {\n    name: \"Cherokee\",\n    names: [\"Cherokee\"],\n    \"iso639-2\": \"chr\",\n    \"iso639-1\": null\n  };\n  var Chewa = {\n    name: \"Chewa\",\n    names: [\"Chichewa\", \"Chewa\", \"Nyanja\"],\n    \"iso639-2\": \"nya\",\n    \"iso639-1\": \"ny\"\n  };\n  var Cheyenne = {\n    name: \"Cheyenne\",\n    names: [\"Cheyenne\"],\n    \"iso639-2\": \"chy\",\n    \"iso639-1\": null\n  };\n  var Chibcha = {\n    name: \"Chibcha\",\n    names: [\"Chibcha\"],\n    \"iso639-2\": \"chb\",\n    \"iso639-1\": null\n  };\n  var Chichewa = {\n    name: \"Chichewa\",\n    names: [\"Chichewa\", \"Chewa\", \"Nyanja\"],\n    \"iso639-2\": \"nya\",\n    \"iso639-1\": \"ny\"\n  };\n  var Chinese = {\n    name: \"Chinese\",\n    names: [\"Chinese\"],\n    \"iso639-2\": \"chi/zho\",\n    \"iso639-1\": \"zh\"\n  };\n  var Chipewyan = {\n    name: \"Chipewyan\",\n    names: [\"Chipewyan\", \"Dene Suline\"],\n    \"iso639-2\": \"chp\",\n    \"iso639-1\": null\n  };\n  var Choctaw = {\n    name: \"Choctaw\",\n    names: [\"Choctaw\"],\n    \"iso639-2\": \"cho\",\n    \"iso639-1\": null\n  };\n  var Chuang = {\n    name: \"Chuang\",\n    names: [\"Zhuang\", \"Chuang\"],\n    \"iso639-2\": \"zha\",\n    \"iso639-1\": \"za\"\n  };\n  var Chuukese = {\n    name: \"Chuukese\",\n    names: [\"Chuukese\"],\n    \"iso639-2\": \"chk\",\n    \"iso639-1\": null\n  };\n  var Chuvash = {\n    name: \"Chuvash\",\n    names: [\"Chuvash\"],\n    \"iso639-2\": \"chv\",\n    \"iso639-1\": \"cv\"\n  };\n  var Coptic = {\n    name: \"Coptic\",\n    names: [\"Coptic\"],\n    \"iso639-2\": \"cop\",\n    \"iso639-1\": null\n  };\n  var Cornish = {\n    name: \"Cornish\",\n    names: [\"Cornish\"],\n    \"iso639-2\": \"cor\",\n    \"iso639-1\": \"kw\"\n  };\n  var Corsican = {\n    name: \"Corsican\",\n    names: [\"Corsican\"],\n    \"iso639-2\": \"cos\",\n    \"iso639-1\": \"co\"\n  };\n  var Cree = {\n    name: \"Cree\",\n    names: [\"Cree\"],\n    \"iso639-2\": \"cre\",\n    \"iso639-1\": \"cr\"\n  };\n  var Creek = {\n    name: \"Creek\",\n    names: [\"Creek\"],\n    \"iso639-2\": \"mus\",\n    \"iso639-1\": null\n  };\n  var Croatian = {\n    name: \"Croatian\",\n    names: [\"Croatian\"],\n    \"iso639-2\": \"hrv\",\n    \"iso639-1\": \"hr\"\n  };\n  var Czech = {\n    name: \"Czech\",\n    names: [\"Czech\"],\n    \"iso639-2\": \"cze/ces\",\n    \"iso639-1\": \"cs\"\n  };\n  var Dakota = {\n    name: \"Dakota\",\n    names: [\"Dakota\"],\n    \"iso639-2\": \"dak\",\n    \"iso639-1\": null\n  };\n  var Danish = {\n    name: \"Danish\",\n    names: [\"Danish\"],\n    \"iso639-2\": \"dan\",\n    \"iso639-1\": \"da\"\n  };\n  var Dargwa = {\n    name: \"Dargwa\",\n    names: [\"Dargwa\"],\n    \"iso639-2\": \"dar\",\n    \"iso639-1\": null\n  };\n  var Delaware = {\n    name: \"Delaware\",\n    names: [\"Delaware\"],\n    \"iso639-2\": \"del\",\n    \"iso639-1\": null\n  };\n  var Dhivehi = {\n    name: \"Dhivehi\",\n    names: [\"Divehi\", \"Dhivehi\", \"Maldivian\"],\n    \"iso639-2\": \"div\",\n    \"iso639-1\": \"dv\"\n  };\n  var Dimili = {\n    name: \"Dimili\",\n    names: [\"Zaza\", \"Dimili\", \"Dimli\", \"Kirdki\", \"Kirmanjki\", \"Zazaki\"],\n    \"iso639-2\": \"zza\",\n    \"iso639-1\": null\n  };\n  var Dimli = {\n    name: \"Dimli\",\n    names: [\"Zaza\", \"Dimili\", \"Dimli\", \"Kirdki\", \"Kirmanjki\", \"Zazaki\"],\n    \"iso639-2\": \"zza\",\n    \"iso639-1\": null\n  };\n  var Dinka = {\n    name: \"Dinka\",\n    names: [\"Dinka\"],\n    \"iso639-2\": \"din\",\n    \"iso639-1\": null\n  };\n  var Divehi = {\n    name: \"Divehi\",\n    names: [\"Divehi\", \"Dhivehi\", \"Maldivian\"],\n    \"iso639-2\": \"div\",\n    \"iso639-1\": \"dv\"\n  };\n  var Dogri = {\n    name: \"Dogri\",\n    names: [\"Dogri\"],\n    \"iso639-2\": \"doi\",\n    \"iso639-1\": null\n  };\n  var Dogrib = {\n    name: \"Dogrib\",\n    names: [\"Dogrib\"],\n    \"iso639-2\": \"dgr\",\n    \"iso639-1\": null\n  };\n  var Duala = {\n    name: \"Duala\",\n    names: [\"Duala\"],\n    \"iso639-2\": \"dua\",\n    \"iso639-1\": null\n  };\n  var Dutch = {\n    name: \"Dutch\",\n    names: [\"Dutch\", \"Flemish\"],\n    \"iso639-2\": \"dut/nld\",\n    \"iso639-1\": \"nl\"\n  };\n  var Dyula = {\n    name: \"Dyula\",\n    names: [\"Dyula\"],\n    \"iso639-2\": \"dyu\",\n    \"iso639-1\": null\n  };\n  var Dzongkha = {\n    name: \"Dzongkha\",\n    names: [\"Dzongkha\"],\n    \"iso639-2\": \"dzo\",\n    \"iso639-1\": \"dz\"\n  };\n  var Edo = {\n    name: \"Edo\",\n    names: [\"Bini\", \"Edo\"],\n    \"iso639-2\": \"bin\",\n    \"iso639-1\": null\n  };\n  var Efik = {\n    name: \"Efik\",\n    names: [\"Efik\"],\n    \"iso639-2\": \"efi\",\n    \"iso639-1\": null\n  };\n  var Ekajuk = {\n    name: \"Ekajuk\",\n    names: [\"Ekajuk\"],\n    \"iso639-2\": \"eka\",\n    \"iso639-1\": null\n  };\n  var Elamite = {\n    name: \"Elamite\",\n    names: [\"Elamite\"],\n    \"iso639-2\": \"elx\",\n    \"iso639-1\": null\n  };\n  var English = {\n    name: \"English\",\n    names: [\"English\"],\n    \"iso639-2\": \"eng\",\n    \"iso639-1\": \"en\"\n  };\n  var Erzya = {\n    name: \"Erzya\",\n    names: [\"Erzya\"],\n    \"iso639-2\": \"myv\",\n    \"iso639-1\": null\n  };\n  var Esperanto = {\n    name: \"Esperanto\",\n    names: [\"Esperanto\"],\n    \"iso639-2\": \"epo\",\n    \"iso639-1\": \"eo\"\n  };\n  var Estonian = {\n    name: \"Estonian\",\n    names: [\"Estonian\"],\n    \"iso639-2\": \"est\",\n    \"iso639-1\": \"et\"\n  };\n  var Ewe = {\n    name: \"Ewe\",\n    names: [\"Ewe\"],\n    \"iso639-2\": \"ewe\",\n    \"iso639-1\": \"ee\"\n  };\n  var Ewondo = {\n    name: \"Ewondo\",\n    names: [\"Ewondo\"],\n    \"iso639-2\": \"ewo\",\n    \"iso639-1\": null\n  };\n  var Fang = {\n    name: \"Fang\",\n    names: [\"Fang\"],\n    \"iso639-2\": \"fan\",\n    \"iso639-1\": null\n  };\n  var Fanti = {\n    name: \"Fanti\",\n    names: [\"Fanti\"],\n    \"iso639-2\": \"fat\",\n    \"iso639-1\": null\n  };\n  var Faroese = {\n    name: \"Faroese\",\n    names: [\"Faroese\"],\n    \"iso639-2\": \"fao\",\n    \"iso639-1\": \"fo\"\n  };\n  var Fijian = {\n    name: \"Fijian\",\n    names: [\"Fijian\"],\n    \"iso639-2\": \"fij\",\n    \"iso639-1\": \"fj\"\n  };\n  var Filipino = {\n    name: \"Filipino\",\n    names: [\"Filipino\", \"Pilipino\"],\n    \"iso639-2\": \"fil\",\n    \"iso639-1\": null\n  };\n  var Finnish = {\n    name: \"Finnish\",\n    names: [\"Finnish\"],\n    \"iso639-2\": \"fin\",\n    \"iso639-1\": \"fi\"\n  };\n  var Flemish = {\n    name: \"Flemish\",\n    names: [\"Dutch\", \"Flemish\"],\n    \"iso639-2\": \"dut/nld\",\n    \"iso639-1\": \"nl\"\n  };\n  var Fon = {\n    name: \"Fon\",\n    names: [\"Fon\"],\n    \"iso639-2\": \"fon\",\n    \"iso639-1\": null\n  };\n  var French = {\n    name: \"French\",\n    names: [\"French\"],\n    \"iso639-2\": \"fre/fra\",\n    \"iso639-1\": \"fr\"\n  };\n  var Friulian = {\n    name: \"Friulian\",\n    names: [\"Friulian\"],\n    \"iso639-2\": \"fur\",\n    \"iso639-1\": null\n  };\n  var Fulah = {\n    name: \"Fulah\",\n    names: [\"Fulah\"],\n    \"iso639-2\": \"ful\",\n    \"iso639-1\": \"ff\"\n  };\n  var Ga = {\n    name: \"Ga\",\n    names: [\"Ga\"],\n    \"iso639-2\": \"gaa\",\n    \"iso639-1\": null\n  };\n  var Gaelic = {\n    name: \"Gaelic\",\n    names: [\"Gaelic\", \"Scottish Gaelic\"],\n    \"iso639-2\": \"gla\",\n    \"iso639-1\": \"gd\"\n  };\n  var Galician = {\n    name: \"Galician\",\n    names: [\"Galician\"],\n    \"iso639-2\": \"glg\",\n    \"iso639-1\": \"gl\"\n  };\n  var Ganda = {\n    name: \"Ganda\",\n    names: [\"Ganda\"],\n    \"iso639-2\": \"lug\",\n    \"iso639-1\": \"lg\"\n  };\n  var Gayo = {\n    name: \"Gayo\",\n    names: [\"Gayo\"],\n    \"iso639-2\": \"gay\",\n    \"iso639-1\": null\n  };\n  var Gbaya = {\n    name: \"Gbaya\",\n    names: [\"Gbaya\"],\n    \"iso639-2\": \"gba\",\n    \"iso639-1\": null\n  };\n  var Geez = {\n    name: \"Geez\",\n    names: [\"Geez\"],\n    \"iso639-2\": \"gez\",\n    \"iso639-1\": null\n  };\n  var Georgian = {\n    name: \"Georgian\",\n    names: [\"Georgian\"],\n    \"iso639-2\": \"geo/kat\",\n    \"iso639-1\": \"ka\"\n  };\n  var German = {\n    name: \"German\",\n    names: [\"German\"],\n    \"iso639-2\": \"ger/deu\",\n    \"iso639-1\": \"de\"\n  };\n  var Gikuyu = {\n    name: \"Gikuyu\",\n    names: [\"Kikuyu\", \"Gikuyu\"],\n    \"iso639-2\": \"kik\",\n    \"iso639-1\": \"ki\"\n  };\n  var Gilbertese = {\n    name: \"Gilbertese\",\n    names: [\"Gilbertese\"],\n    \"iso639-2\": \"gil\",\n    \"iso639-1\": null\n  };\n  var Gondi = {\n    name: \"Gondi\",\n    names: [\"Gondi\"],\n    \"iso639-2\": \"gon\",\n    \"iso639-1\": null\n  };\n  var Gorontalo = {\n    name: \"Gorontalo\",\n    names: [\"Gorontalo\"],\n    \"iso639-2\": \"gor\",\n    \"iso639-1\": null\n  };\n  var Gothic = {\n    name: \"Gothic\",\n    names: [\"Gothic\"],\n    \"iso639-2\": \"got\",\n    \"iso639-1\": null\n  };\n  var Grebo = {\n    name: \"Grebo\",\n    names: [\"Grebo\"],\n    \"iso639-2\": \"grb\",\n    \"iso639-1\": null\n  };\n  var Greenlandic = {\n    name: \"Greenlandic\",\n    names: [\"Kalaallisut\", \"Greenlandic\"],\n    \"iso639-2\": \"kal\",\n    \"iso639-1\": \"kl\"\n  };\n  var Guarani = {\n    name: \"Guarani\",\n    names: [\"Guarani\"],\n    \"iso639-2\": \"grn\",\n    \"iso639-1\": \"gn\"\n  };\n  var Gujarati = {\n    name: \"Gujarati\",\n    names: [\"Gujarati\"],\n    \"iso639-2\": \"guj\",\n    \"iso639-1\": \"gu\"\n  };\n  var Haida = {\n    name: \"Haida\",\n    names: [\"Haida\"],\n    \"iso639-2\": \"hai\",\n    \"iso639-1\": null\n  };\n  var Haitian = {\n    name: \"Haitian\",\n    names: [\"Haitian\", \"Haitian Creole\"],\n    \"iso639-2\": \"hat\",\n    \"iso639-1\": \"ht\"\n  };\n  var Hausa = {\n    name: \"Hausa\",\n    names: [\"Hausa\"],\n    \"iso639-2\": \"hau\",\n    \"iso639-1\": \"ha\"\n  };\n  var Hawaiian = {\n    name: \"Hawaiian\",\n    names: [\"Hawaiian\"],\n    \"iso639-2\": \"haw\",\n    \"iso639-1\": null\n  };\n  var Hebrew = {\n    name: \"Hebrew\",\n    names: [\"Hebrew\"],\n    \"iso639-2\": \"heb\",\n    \"iso639-1\": \"he\"\n  };\n  var Herero = {\n    name: \"Herero\",\n    names: [\"Herero\"],\n    \"iso639-2\": \"her\",\n    \"iso639-1\": \"hz\"\n  };\n  var Hiligaynon = {\n    name: \"Hiligaynon\",\n    names: [\"Hiligaynon\"],\n    \"iso639-2\": \"hil\",\n    \"iso639-1\": null\n  };\n  var Hindi = {\n    name: \"Hindi\",\n    names: [\"Hindi\"],\n    \"iso639-2\": \"hin\",\n    \"iso639-1\": \"hi\"\n  };\n  var Hittite = {\n    name: \"Hittite\",\n    names: [\"Hittite\"],\n    \"iso639-2\": \"hit\",\n    \"iso639-1\": null\n  };\n  var Hmong = {\n    name: \"Hmong\",\n    names: [\"Hmong\", \"Mong\"],\n    \"iso639-2\": \"hmn\",\n    \"iso639-1\": null\n  };\n  var Hungarian = {\n    name: \"Hungarian\",\n    names: [\"Hungarian\"],\n    \"iso639-2\": \"hun\",\n    \"iso639-1\": \"hu\"\n  };\n  var Hupa = {\n    name: \"Hupa\",\n    names: [\"Hupa\"],\n    \"iso639-2\": \"hup\",\n    \"iso639-1\": null\n  };\n  var Iban = {\n    name: \"Iban\",\n    names: [\"Iban\"],\n    \"iso639-2\": \"iba\",\n    \"iso639-1\": null\n  };\n  var Icelandic = {\n    name: \"Icelandic\",\n    names: [\"Icelandic\"],\n    \"iso639-2\": \"ice/isl\",\n    \"iso639-1\": \"is\"\n  };\n  var Ido = {\n    name: \"Ido\",\n    names: [\"Ido\"],\n    \"iso639-2\": \"ido\",\n    \"iso639-1\": \"io\"\n  };\n  var Igbo = {\n    name: \"Igbo\",\n    names: [\"Igbo\"],\n    \"iso639-2\": \"ibo\",\n    \"iso639-1\": \"ig\"\n  };\n  var Iloko = {\n    name: \"Iloko\",\n    names: [\"Iloko\"],\n    \"iso639-2\": \"ilo\",\n    \"iso639-1\": null\n  };\n  var Indonesian = {\n    name: \"Indonesian\",\n    names: [\"Indonesian\"],\n    \"iso639-2\": \"ind\",\n    \"iso639-1\": \"id\"\n  };\n  var Ingush = {\n    name: \"Ingush\",\n    names: [\"Ingush\"],\n    \"iso639-2\": \"inh\",\n    \"iso639-1\": null\n  };\n  var Interlingue = {\n    name: \"Interlingue\",\n    names: [\"Interlingue\", \"Occidental\"],\n    \"iso639-2\": \"ile\",\n    \"iso639-1\": \"ie\"\n  };\n  var Inuktitut = {\n    name: \"Inuktitut\",\n    names: [\"Inuktitut\"],\n    \"iso639-2\": \"iku\",\n    \"iso639-1\": \"iu\"\n  };\n  var Inupiaq = {\n    name: \"Inupiaq\",\n    names: [\"Inupiaq\"],\n    \"iso639-2\": \"ipk\",\n    \"iso639-1\": \"ik\"\n  };\n  var Irish = {\n    name: \"Irish\",\n    names: [\"Irish\"],\n    \"iso639-2\": \"gle\",\n    \"iso639-1\": \"ga\"\n  };\n  var Italian = {\n    name: \"Italian\",\n    names: [\"Italian\"],\n    \"iso639-2\": \"ita\",\n    \"iso639-1\": \"it\"\n  };\n  var Japanese = {\n    name: \"Japanese\",\n    names: [\"Japanese\"],\n    \"iso639-2\": \"jpn\",\n    \"iso639-1\": \"ja\"\n  };\n  var Javanese = {\n    name: \"Javanese\",\n    names: [\"Javanese\"],\n    \"iso639-2\": \"jav\",\n    \"iso639-1\": \"jv\"\n  };\n  var Jingpho = {\n    name: \"Jingpho\",\n    names: [\"Kachin\", \"Jingpho\"],\n    \"iso639-2\": \"kac\",\n    \"iso639-1\": null\n  };\n  var Kabardian = {\n    name: \"Kabardian\",\n    names: [\"Kabardian\"],\n    \"iso639-2\": \"kbd\",\n    \"iso639-1\": null\n  };\n  var Kabyle = {\n    name: \"Kabyle\",\n    names: [\"Kabyle\"],\n    \"iso639-2\": \"kab\",\n    \"iso639-1\": null\n  };\n  var Kachin = {\n    name: \"Kachin\",\n    names: [\"Kachin\", \"Jingpho\"],\n    \"iso639-2\": \"kac\",\n    \"iso639-1\": null\n  };\n  var Kalaallisut = {\n    name: \"Kalaallisut\",\n    names: [\"Kalaallisut\", \"Greenlandic\"],\n    \"iso639-2\": \"kal\",\n    \"iso639-1\": \"kl\"\n  };\n  var Kalmyk = {\n    name: \"Kalmyk\",\n    names: [\"Kalmyk\", \"Oirat\"],\n    \"iso639-2\": \"xal\",\n    \"iso639-1\": null\n  };\n  var Kamba = {\n    name: \"Kamba\",\n    names: [\"Kamba\"],\n    \"iso639-2\": \"kam\",\n    \"iso639-1\": null\n  };\n  var Kannada = {\n    name: \"Kannada\",\n    names: [\"Kannada\"],\n    \"iso639-2\": \"kan\",\n    \"iso639-1\": \"kn\"\n  };\n  var Kanuri = {\n    name: \"Kanuri\",\n    names: [\"Kanuri\"],\n    \"iso639-2\": \"kau\",\n    \"iso639-1\": \"kr\"\n  };\n  var Kapampangan = {\n    name: \"Kapampangan\",\n    names: [\"Pampanga\", \"Kapampangan\"],\n    \"iso639-2\": \"pam\",\n    \"iso639-1\": null\n  };\n  var Karelian = {\n    name: \"Karelian\",\n    names: [\"Karelian\"],\n    \"iso639-2\": \"krl\",\n    \"iso639-1\": null\n  };\n  var Kashmiri = {\n    name: \"Kashmiri\",\n    names: [\"Kashmiri\"],\n    \"iso639-2\": \"kas\",\n    \"iso639-1\": \"ks\"\n  };\n  var Kashubian = {\n    name: \"Kashubian\",\n    names: [\"Kashubian\"],\n    \"iso639-2\": \"csb\",\n    \"iso639-1\": null\n  };\n  var Kawi = {\n    name: \"Kawi\",\n    names: [\"Kawi\"],\n    \"iso639-2\": \"kaw\",\n    \"iso639-1\": null\n  };\n  var Kazakh = {\n    name: \"Kazakh\",\n    names: [\"Kazakh\"],\n    \"iso639-2\": \"kaz\",\n    \"iso639-1\": \"kk\"\n  };\n  var Khasi = {\n    name: \"Khasi\",\n    names: [\"Khasi\"],\n    \"iso639-2\": \"kha\",\n    \"iso639-1\": null\n  };\n  var Khotanese = {\n    name: \"Khotanese\",\n    names: [\"Khotanese\", \"Sakan\"],\n    \"iso639-2\": \"kho\",\n    \"iso639-1\": null\n  };\n  var Kikuyu = {\n    name: \"Kikuyu\",\n    names: [\"Kikuyu\", \"Gikuyu\"],\n    \"iso639-2\": \"kik\",\n    \"iso639-1\": \"ki\"\n  };\n  var Kimbundu = {\n    name: \"Kimbundu\",\n    names: [\"Kimbundu\"],\n    \"iso639-2\": \"kmb\",\n    \"iso639-1\": null\n  };\n  var Kinyarwanda = {\n    name: \"Kinyarwanda\",\n    names: [\"Kinyarwanda\"],\n    \"iso639-2\": \"kin\",\n    \"iso639-1\": \"rw\"\n  };\n  var Kirdki = {\n    name: \"Kirdki\",\n    names: [\"Zaza\", \"Dimili\", \"Dimli\", \"Kirdki\", \"Kirmanjki\", \"Zazaki\"],\n    \"iso639-2\": \"zza\",\n    \"iso639-1\": null\n  };\n  var Kirghiz = {\n    name: \"Kirghiz\",\n    names: [\"Kirghiz\", \"Kyrgyz\"],\n    \"iso639-2\": \"kir\",\n    \"iso639-1\": \"ky\"\n  };\n  var Kirmanjki = {\n    name: \"Kirmanjki\",\n    names: [\"Zaza\", \"Dimili\", \"Dimli\", \"Kirdki\", \"Kirmanjki\", \"Zazaki\"],\n    \"iso639-2\": \"zza\",\n    \"iso639-1\": null\n  };\n  var Klingon = {\n    name: \"Klingon\",\n    names: [\"Klingon\", \"tlhIngan-Hol\"],\n    \"iso639-2\": \"tlh\",\n    \"iso639-1\": null\n  };\n  var Komi = {\n    name: \"Komi\",\n    names: [\"Komi\"],\n    \"iso639-2\": \"kom\",\n    \"iso639-1\": \"kv\"\n  };\n  var Kongo = {\n    name: \"Kongo\",\n    names: [\"Kongo\"],\n    \"iso639-2\": \"kon\",\n    \"iso639-1\": \"kg\"\n  };\n  var Konkani = {\n    name: \"Konkani\",\n    names: [\"Konkani\"],\n    \"iso639-2\": \"kok\",\n    \"iso639-1\": null\n  };\n  var Korean = {\n    name: \"Korean\",\n    names: [\"Korean\"],\n    \"iso639-2\": \"kor\",\n    \"iso639-1\": \"ko\"\n  };\n  var Kosraean = {\n    name: \"Kosraean\",\n    names: [\"Kosraean\"],\n    \"iso639-2\": \"kos\",\n    \"iso639-1\": null\n  };\n  var Kpelle = {\n    name: \"Kpelle\",\n    names: [\"Kpelle\"],\n    \"iso639-2\": \"kpe\",\n    \"iso639-1\": null\n  };\n  var Kuanyama = {\n    name: \"Kuanyama\",\n    names: [\"Kuanyama\", \"Kwanyama\"],\n    \"iso639-2\": \"kua\",\n    \"iso639-1\": \"kj\"\n  };\n  var Kumyk = {\n    name: \"Kumyk\",\n    names: [\"Kumyk\"],\n    \"iso639-2\": \"kum\",\n    \"iso639-1\": null\n  };\n  var Kurdish = {\n    name: \"Kurdish\",\n    names: [\"Kurdish\"],\n    \"iso639-2\": \"kur\",\n    \"iso639-1\": \"ku\"\n  };\n  var Kurukh = {\n    name: \"Kurukh\",\n    names: [\"Kurukh\"],\n    \"iso639-2\": \"kru\",\n    \"iso639-1\": null\n  };\n  var Kutenai = {\n    name: \"Kutenai\",\n    names: [\"Kutenai\"],\n    \"iso639-2\": \"kut\",\n    \"iso639-1\": null\n  };\n  var Kwanyama = {\n    name: \"Kwanyama\",\n    names: [\"Kuanyama\", \"Kwanyama\"],\n    \"iso639-2\": \"kua\",\n    \"iso639-1\": \"kj\"\n  };\n  var Kyrgyz = {\n    name: \"Kyrgyz\",\n    names: [\"Kirghiz\", \"Kyrgyz\"],\n    \"iso639-2\": \"kir\",\n    \"iso639-1\": \"ky\"\n  };\n  var Ladino = {\n    name: \"Ladino\",\n    names: [\"Ladino\"],\n    \"iso639-2\": \"lad\",\n    \"iso639-1\": null\n  };\n  var Lahnda = {\n    name: \"Lahnda\",\n    names: [\"Lahnda\"],\n    \"iso639-2\": \"lah\",\n    \"iso639-1\": null\n  };\n  var Lamba = {\n    name: \"Lamba\",\n    names: [\"Lamba\"],\n    \"iso639-2\": \"lam\",\n    \"iso639-1\": null\n  };\n  var Lao = {\n    name: \"Lao\",\n    names: [\"Lao\"],\n    \"iso639-2\": \"lao\",\n    \"iso639-1\": \"lo\"\n  };\n  var Latin = {\n    name: \"Latin\",\n    names: [\"Latin\"],\n    \"iso639-2\": \"lat\",\n    \"iso639-1\": \"la\"\n  };\n  var Latvian = {\n    name: \"Latvian\",\n    names: [\"Latvian\"],\n    \"iso639-2\": \"lav\",\n    \"iso639-1\": \"lv\"\n  };\n  var Leonese = {\n    name: \"Leonese\",\n    names: [\"Asturian\", \"Bable\", \"Leonese\", \"Asturleonese\"],\n    \"iso639-2\": \"ast\",\n    \"iso639-1\": null\n  };\n  var Letzeburgesch = {\n    name: \"Letzeburgesch\",\n    names: [\"Luxembourgish\", \"Letzeburgesch\"],\n    \"iso639-2\": \"ltz\",\n    \"iso639-1\": \"lb\"\n  };\n  var Lezghian = {\n    name: \"Lezghian\",\n    names: [\"Lezghian\"],\n    \"iso639-2\": \"lez\",\n    \"iso639-1\": null\n  };\n  var Limburgan = {\n    name: \"Limburgan\",\n    names: [\"Limburgan\", \"Limburger\", \"Limburgish\"],\n    \"iso639-2\": \"lim\",\n    \"iso639-1\": \"li\"\n  };\n  var Limburger = {\n    name: \"Limburger\",\n    names: [\"Limburgan\", \"Limburger\", \"Limburgish\"],\n    \"iso639-2\": \"lim\",\n    \"iso639-1\": \"li\"\n  };\n  var Limburgish = {\n    name: \"Limburgish\",\n    names: [\"Limburgan\", \"Limburger\", \"Limburgish\"],\n    \"iso639-2\": \"lim\",\n    \"iso639-1\": \"li\"\n  };\n  var Lingala = {\n    name: \"Lingala\",\n    names: [\"Lingala\"],\n    \"iso639-2\": \"lin\",\n    \"iso639-1\": \"ln\"\n  };\n  var Lithuanian = {\n    name: \"Lithuanian\",\n    names: [\"Lithuanian\"],\n    \"iso639-2\": \"lit\",\n    \"iso639-1\": \"lt\"\n  };\n  var Lojban = {\n    name: \"Lojban\",\n    names: [\"Lojban\"],\n    \"iso639-2\": \"jbo\",\n    \"iso639-1\": null\n  };\n  var Lozi = {\n    name: \"Lozi\",\n    names: [\"Lozi\"],\n    \"iso639-2\": \"loz\",\n    \"iso639-1\": null\n  };\n  var Luiseno = {\n    name: \"Luiseno\",\n    names: [\"Luiseno\"],\n    \"iso639-2\": \"lui\",\n    \"iso639-1\": null\n  };\n  var Lunda = {\n    name: \"Lunda\",\n    names: [\"Lunda\"],\n    \"iso639-2\": \"lun\",\n    \"iso639-1\": null\n  };\n  var Lushai = {\n    name: \"Lushai\",\n    names: [\"Lushai\"],\n    \"iso639-2\": \"lus\",\n    \"iso639-1\": null\n  };\n  var Luxembourgish = {\n    name: \"Luxembourgish\",\n    names: [\"Luxembourgish\", \"Letzeburgesch\"],\n    \"iso639-2\": \"ltz\",\n    \"iso639-1\": \"lb\"\n  };\n  var Macedonian = {\n    name: \"Macedonian\",\n    names: [\"Macedonian\"],\n    \"iso639-2\": \"mac/mkd\",\n    \"iso639-1\": \"mk\"\n  };\n  var Madurese = {\n    name: \"Madurese\",\n    names: [\"Madurese\"],\n    \"iso639-2\": \"mad\",\n    \"iso639-1\": null\n  };\n  var Magahi = {\n    name: \"Magahi\",\n    names: [\"Magahi\"],\n    \"iso639-2\": \"mag\",\n    \"iso639-1\": null\n  };\n  var Maithili = {\n    name: \"Maithili\",\n    names: [\"Maithili\"],\n    \"iso639-2\": \"mai\",\n    \"iso639-1\": null\n  };\n  var Makasar = {\n    name: \"Makasar\",\n    names: [\"Makasar\"],\n    \"iso639-2\": \"mak\",\n    \"iso639-1\": null\n  };\n  var Malagasy = {\n    name: \"Malagasy\",\n    names: [\"Malagasy\"],\n    \"iso639-2\": \"mlg\",\n    \"iso639-1\": \"mg\"\n  };\n  var Malay = {\n    name: \"Malay\",\n    names: [\"Malay\"],\n    \"iso639-2\": \"may/msa\",\n    \"iso639-1\": \"ms\"\n  };\n  var Malayalam = {\n    name: \"Malayalam\",\n    names: [\"Malayalam\"],\n    \"iso639-2\": \"mal\",\n    \"iso639-1\": \"ml\"\n  };\n  var Maldivian = {\n    name: \"Maldivian\",\n    names: [\"Divehi\", \"Dhivehi\", \"Maldivian\"],\n    \"iso639-2\": \"div\",\n    \"iso639-1\": \"dv\"\n  };\n  var Maltese = {\n    name: \"Maltese\",\n    names: [\"Maltese\"],\n    \"iso639-2\": \"mlt\",\n    \"iso639-1\": \"mt\"\n  };\n  var Manchu = {\n    name: \"Manchu\",\n    names: [\"Manchu\"],\n    \"iso639-2\": \"mnc\",\n    \"iso639-1\": null\n  };\n  var Mandar = {\n    name: \"Mandar\",\n    names: [\"Mandar\"],\n    \"iso639-2\": \"mdr\",\n    \"iso639-1\": null\n  };\n  var Mandingo = {\n    name: \"Mandingo\",\n    names: [\"Mandingo\"],\n    \"iso639-2\": \"man\",\n    \"iso639-1\": null\n  };\n  var Manipuri = {\n    name: \"Manipuri\",\n    names: [\"Manipuri\"],\n    \"iso639-2\": \"mni\",\n    \"iso639-1\": null\n  };\n  var Manx = {\n    name: \"Manx\",\n    names: [\"Manx\"],\n    \"iso639-2\": \"glv\",\n    \"iso639-1\": \"gv\"\n  };\n  var Maori = {\n    name: \"Maori\",\n    names: [\"Maori\"],\n    \"iso639-2\": \"mao/mri\",\n    \"iso639-1\": \"mi\"\n  };\n  var Mapuche = {\n    name: \"Mapuche\",\n    names: [\"Mapudungun\", \"Mapuche\"],\n    \"iso639-2\": \"arn\",\n    \"iso639-1\": null\n  };\n  var Mapudungun = {\n    name: \"Mapudungun\",\n    names: [\"Mapudungun\", \"Mapuche\"],\n    \"iso639-2\": \"arn\",\n    \"iso639-1\": null\n  };\n  var Marathi = {\n    name: \"Marathi\",\n    names: [\"Marathi\"],\n    \"iso639-2\": \"mar\",\n    \"iso639-1\": \"mr\"\n  };\n  var Mari = {\n    name: \"Mari\",\n    names: [\"Mari\"],\n    \"iso639-2\": \"chm\",\n    \"iso639-1\": null\n  };\n  var Marshallese = {\n    name: \"Marshallese\",\n    names: [\"Marshallese\"],\n    \"iso639-2\": \"mah\",\n    \"iso639-1\": \"mh\"\n  };\n  var Marwari = {\n    name: \"Marwari\",\n    names: [\"Marwari\"],\n    \"iso639-2\": \"mwr\",\n    \"iso639-1\": null\n  };\n  var Masai = {\n    name: \"Masai\",\n    names: [\"Masai\"],\n    \"iso639-2\": \"mas\",\n    \"iso639-1\": null\n  };\n  var Mende = {\n    name: \"Mende\",\n    names: [\"Mende\"],\n    \"iso639-2\": \"men\",\n    \"iso639-1\": null\n  };\n  var Micmac = {\n    name: \"Micmac\",\n    names: [\"Mi'kmaq\", \"Micmac\"],\n    \"iso639-2\": \"mic\",\n    \"iso639-1\": null\n  };\n  var Minangkabau = {\n    name: \"Minangkabau\",\n    names: [\"Minangkabau\"],\n    \"iso639-2\": \"min\",\n    \"iso639-1\": null\n  };\n  var Mirandese = {\n    name: \"Mirandese\",\n    names: [\"Mirandese\"],\n    \"iso639-2\": \"mwl\",\n    \"iso639-1\": null\n  };\n  var Mohawk = {\n    name: \"Mohawk\",\n    names: [\"Mohawk\"],\n    \"iso639-2\": \"moh\",\n    \"iso639-1\": null\n  };\n  var Moksha = {\n    name: \"Moksha\",\n    names: [\"Moksha\"],\n    \"iso639-2\": \"mdf\",\n    \"iso639-1\": null\n  };\n  var Moldavian = {\n    name: \"Moldavian\",\n    names: [\"Romanian\", \"Moldavian\", \"Moldovan\"],\n    \"iso639-2\": \"rum/ron\",\n    \"iso639-1\": \"ro\"\n  };\n  var Moldovan = {\n    name: \"Moldovan\",\n    names: [\"Romanian\", \"Moldavian\", \"Moldovan\"],\n    \"iso639-2\": \"rum/ron\",\n    \"iso639-1\": \"ro\"\n  };\n  var Mong = {\n    name: \"Mong\",\n    names: [\"Hmong\", \"Mong\"],\n    \"iso639-2\": \"hmn\",\n    \"iso639-1\": null\n  };\n  var Mongo = {\n    name: \"Mongo\",\n    names: [\"Mongo\"],\n    \"iso639-2\": \"lol\",\n    \"iso639-1\": null\n  };\n  var Mongolian = {\n    name: \"Mongolian\",\n    names: [\"Mongolian\"],\n    \"iso639-2\": \"mon\",\n    \"iso639-1\": \"mn\"\n  };\n  var Montenegrin = {\n    name: \"Montenegrin\",\n    names: [\"Montenegrin\"],\n    \"iso639-2\": \"cnr\",\n    \"iso639-1\": null\n  };\n  var Mossi = {\n    name: \"Mossi\",\n    names: [\"Mossi\"],\n    \"iso639-2\": \"mos\",\n    \"iso639-1\": null\n  };\n  var Nauru = {\n    name: \"Nauru\",\n    names: [\"Nauru\"],\n    \"iso639-2\": \"nau\",\n    \"iso639-1\": \"na\"\n  };\n  var Navaho = {\n    name: \"Navaho\",\n    names: [\"Navajo\", \"Navaho\"],\n    \"iso639-2\": \"nav\",\n    \"iso639-1\": \"nv\"\n  };\n  var Navajo = {\n    name: \"Navajo\",\n    names: [\"Navajo\", \"Navaho\"],\n    \"iso639-2\": \"nav\",\n    \"iso639-1\": \"nv\"\n  };\n  var Ndonga = {\n    name: \"Ndonga\",\n    names: [\"Ndonga\"],\n    \"iso639-2\": \"ndo\",\n    \"iso639-1\": \"ng\"\n  };\n  var Neapolitan = {\n    name: \"Neapolitan\",\n    names: [\"Neapolitan\"],\n    \"iso639-2\": \"nap\",\n    \"iso639-1\": null\n  };\n  var Nepali = {\n    name: \"Nepali\",\n    names: [\"Nepali\"],\n    \"iso639-2\": \"nep\",\n    \"iso639-1\": \"ne\"\n  };\n  var Newari = {\n    name: \"Newari\",\n    names: [\"Nepal Bhasa\", \"Newari\"],\n    \"iso639-2\": \"new\",\n    \"iso639-1\": null\n  };\n  var Nias = {\n    name: \"Nias\",\n    names: [\"Nias\"],\n    \"iso639-2\": \"nia\",\n    \"iso639-1\": null\n  };\n  var Niuean = {\n    name: \"Niuean\",\n    names: [\"Niuean\"],\n    \"iso639-2\": \"niu\",\n    \"iso639-1\": null\n  };\n  var Nogai = {\n    name: \"Nogai\",\n    names: [\"Nogai\"],\n    \"iso639-2\": \"nog\",\n    \"iso639-1\": null\n  };\n  var Norwegian = {\n    name: \"Norwegian\",\n    names: [\"Norwegian\"],\n    \"iso639-2\": \"nor\",\n    \"iso639-1\": \"no\"\n  };\n  var Nuosu = {\n    name: \"Nuosu\",\n    names: [\"Sichuan Yi\", \"Nuosu\"],\n    \"iso639-2\": \"iii\",\n    \"iso639-1\": \"ii\"\n  };\n  var Nyamwezi = {\n    name: \"Nyamwezi\",\n    names: [\"Nyamwezi\"],\n    \"iso639-2\": \"nym\",\n    \"iso639-1\": null\n  };\n  var Nyanja = {\n    name: \"Nyanja\",\n    names: [\"Chichewa\", \"Chewa\", \"Nyanja\"],\n    \"iso639-2\": \"nya\",\n    \"iso639-1\": \"ny\"\n  };\n  var Nyankole = {\n    name: \"Nyankole\",\n    names: [\"Nyankole\"],\n    \"iso639-2\": \"nyn\",\n    \"iso639-1\": null\n  };\n  var Nyoro = {\n    name: \"Nyoro\",\n    names: [\"Nyoro\"],\n    \"iso639-2\": \"nyo\",\n    \"iso639-1\": null\n  };\n  var Nzima = {\n    name: \"Nzima\",\n    names: [\"Nzima\"],\n    \"iso639-2\": \"nzi\",\n    \"iso639-1\": null\n  };\n  var Occidental = {\n    name: \"Occidental\",\n    names: [\"Interlingue\", \"Occidental\"],\n    \"iso639-2\": \"ile\",\n    \"iso639-1\": \"ie\"\n  };\n  var Oirat = {\n    name: \"Oirat\",\n    names: [\"Kalmyk\", \"Oirat\"],\n    \"iso639-2\": \"xal\",\n    \"iso639-1\": null\n  };\n  var Ojibwa = {\n    name: \"Ojibwa\",\n    names: [\"Ojibwa\"],\n    \"iso639-2\": \"oji\",\n    \"iso639-1\": \"oj\"\n  };\n  var Oriya = {\n    name: \"Oriya\",\n    names: [\"Oriya\"],\n    \"iso639-2\": \"ori\",\n    \"iso639-1\": \"or\"\n  };\n  var Oromo = {\n    name: \"Oromo\",\n    names: [\"Oromo\"],\n    \"iso639-2\": \"orm\",\n    \"iso639-1\": \"om\"\n  };\n  var Osage = {\n    name: \"Osage\",\n    names: [\"Osage\"],\n    \"iso639-2\": \"osa\",\n    \"iso639-1\": null\n  };\n  var Ossetian = {\n    name: \"Ossetian\",\n    names: [\"Ossetian\", \"Ossetic\"],\n    \"iso639-2\": \"oss\",\n    \"iso639-1\": \"os\"\n  };\n  var Ossetic = {\n    name: \"Ossetic\",\n    names: [\"Ossetian\", \"Ossetic\"],\n    \"iso639-2\": \"oss\",\n    \"iso639-1\": \"os\"\n  };\n  var Pahlavi = {\n    name: \"Pahlavi\",\n    names: [\"Pahlavi\"],\n    \"iso639-2\": \"pal\",\n    \"iso639-1\": null\n  };\n  var Palauan = {\n    name: \"Palauan\",\n    names: [\"Palauan\"],\n    \"iso639-2\": \"pau\",\n    \"iso639-1\": null\n  };\n  var Pali = {\n    name: \"Pali\",\n    names: [\"Pali\"],\n    \"iso639-2\": \"pli\",\n    \"iso639-1\": \"pi\"\n  };\n  var Pampanga = {\n    name: \"Pampanga\",\n    names: [\"Pampanga\", \"Kapampangan\"],\n    \"iso639-2\": \"pam\",\n    \"iso639-1\": null\n  };\n  var Pangasinan = {\n    name: \"Pangasinan\",\n    names: [\"Pangasinan\"],\n    \"iso639-2\": \"pag\",\n    \"iso639-1\": null\n  };\n  var Panjabi = {\n    name: \"Panjabi\",\n    names: [\"Panjabi\", \"Punjabi\"],\n    \"iso639-2\": \"pan\",\n    \"iso639-1\": \"pa\"\n  };\n  var Papiamento = {\n    name: \"Papiamento\",\n    names: [\"Papiamento\"],\n    \"iso639-2\": \"pap\",\n    \"iso639-1\": null\n  };\n  var Pashto = {\n    name: \"Pashto\",\n    names: [\"Pushto\", \"Pashto\"],\n    \"iso639-2\": \"pus\",\n    \"iso639-1\": \"ps\"\n  };\n  var Pedi = {\n    name: \"Pedi\",\n    names: [\"Pedi\", \"Sepedi\", \"Northern Sotho\"],\n    \"iso639-2\": \"nso\",\n    \"iso639-1\": null\n  };\n  var Persian = {\n    name: \"Persian\",\n    names: [\"Persian\"],\n    \"iso639-2\": \"per/fas\",\n    \"iso639-1\": \"fa\"\n  };\n  var Phoenician = {\n    name: \"Phoenician\",\n    names: [\"Phoenician\"],\n    \"iso639-2\": \"phn\",\n    \"iso639-1\": null\n  };\n  var Pilipino = {\n    name: \"Pilipino\",\n    names: [\"Filipino\", \"Pilipino\"],\n    \"iso639-2\": \"fil\",\n    \"iso639-1\": null\n  };\n  var Pohnpeian = {\n    name: \"Pohnpeian\",\n    names: [\"Pohnpeian\"],\n    \"iso639-2\": \"pon\",\n    \"iso639-1\": null\n  };\n  var Polish = {\n    name: \"Polish\",\n    names: [\"Polish\"],\n    \"iso639-2\": \"pol\",\n    \"iso639-1\": \"pl\"\n  };\n  var Portuguese = {\n    name: \"Portuguese\",\n    names: [\"Portuguese\"],\n    \"iso639-2\": \"por\",\n    \"iso639-1\": \"pt\"\n  };\n  var Punjabi = {\n    name: \"Punjabi\",\n    names: [\"Panjabi\", \"Punjabi\"],\n    \"iso639-2\": \"pan\",\n    \"iso639-1\": \"pa\"\n  };\n  var Pushto = {\n    name: \"Pushto\",\n    names: [\"Pushto\", \"Pashto\"],\n    \"iso639-2\": \"pus\",\n    \"iso639-1\": \"ps\"\n  };\n  var Quechua = {\n    name: \"Quechua\",\n    names: [\"Quechua\"],\n    \"iso639-2\": \"que\",\n    \"iso639-1\": \"qu\"\n  };\n  var Rajasthani = {\n    name: \"Rajasthani\",\n    names: [\"Rajasthani\"],\n    \"iso639-2\": \"raj\",\n    \"iso639-1\": null\n  };\n  var Rapanui = {\n    name: \"Rapanui\",\n    names: [\"Rapanui\"],\n    \"iso639-2\": \"rap\",\n    \"iso639-1\": null\n  };\n  var Rarotongan = {\n    name: \"Rarotongan\",\n    names: [\"Rarotongan\", \"Cook Islands Maori\"],\n    \"iso639-2\": \"rar\",\n    \"iso639-1\": null\n  };\n  var Romanian = {\n    name: \"Romanian\",\n    names: [\"Romanian\", \"Moldavian\", \"Moldovan\"],\n    \"iso639-2\": \"rum/ron\",\n    \"iso639-1\": \"ro\"\n  };\n  var Romansh = {\n    name: \"Romansh\",\n    names: [\"Romansh\"],\n    \"iso639-2\": \"roh\",\n    \"iso639-1\": \"rm\"\n  };\n  var Romany = {\n    name: \"Romany\",\n    names: [\"Romany\"],\n    \"iso639-2\": \"rom\",\n    \"iso639-1\": null\n  };\n  var Rundi = {\n    name: \"Rundi\",\n    names: [\"Rundi\"],\n    \"iso639-2\": \"run\",\n    \"iso639-1\": \"rn\"\n  };\n  var Russian = {\n    name: \"Russian\",\n    names: [\"Russian\"],\n    \"iso639-2\": \"rus\",\n    \"iso639-1\": \"ru\"\n  };\n  var Sakan = {\n    name: \"Sakan\",\n    names: [\"Khotanese\", \"Sakan\"],\n    \"iso639-2\": \"kho\",\n    \"iso639-1\": null\n  };\n  var Samoan = {\n    name: \"Samoan\",\n    names: [\"Samoan\"],\n    \"iso639-2\": \"smo\",\n    \"iso639-1\": \"sm\"\n  };\n  var Sandawe = {\n    name: \"Sandawe\",\n    names: [\"Sandawe\"],\n    \"iso639-2\": \"sad\",\n    \"iso639-1\": null\n  };\n  var Sango = {\n    name: \"Sango\",\n    names: [\"Sango\"],\n    \"iso639-2\": \"sag\",\n    \"iso639-1\": \"sg\"\n  };\n  var Sanskrit = {\n    name: \"Sanskrit\",\n    names: [\"Sanskrit\"],\n    \"iso639-2\": \"san\",\n    \"iso639-1\": \"sa\"\n  };\n  var Santali = {\n    name: \"Santali\",\n    names: [\"Santali\"],\n    \"iso639-2\": \"sat\",\n    \"iso639-1\": null\n  };\n  var Sardinian = {\n    name: \"Sardinian\",\n    names: [\"Sardinian\"],\n    \"iso639-2\": \"srd\",\n    \"iso639-1\": \"sc\"\n  };\n  var Sasak = {\n    name: \"Sasak\",\n    names: [\"Sasak\"],\n    \"iso639-2\": \"sas\",\n    \"iso639-1\": null\n  };\n  var Scots = {\n    name: \"Scots\",\n    names: [\"Scots\"],\n    \"iso639-2\": \"sco\",\n    \"iso639-1\": null\n  };\n  var Selkup = {\n    name: \"Selkup\",\n    names: [\"Selkup\"],\n    \"iso639-2\": \"sel\",\n    \"iso639-1\": null\n  };\n  var Sepedi = {\n    name: \"Sepedi\",\n    names: [\"Pedi\", \"Sepedi\", \"Northern Sotho\"],\n    \"iso639-2\": \"nso\",\n    \"iso639-1\": null\n  };\n  var Serbian = {\n    name: \"Serbian\",\n    names: [\"Serbian\"],\n    \"iso639-2\": \"srp\",\n    \"iso639-1\": \"sr\"\n  };\n  var Serer = {\n    name: \"Serer\",\n    names: [\"Serer\"],\n    \"iso639-2\": \"srr\",\n    \"iso639-1\": null\n  };\n  var Shan = {\n    name: \"Shan\",\n    names: [\"Shan\"],\n    \"iso639-2\": \"shn\",\n    \"iso639-1\": null\n  };\n  var Shona = {\n    name: \"Shona\",\n    names: [\"Shona\"],\n    \"iso639-2\": \"sna\",\n    \"iso639-1\": \"sn\"\n  };\n  var Sicilian = {\n    name: \"Sicilian\",\n    names: [\"Sicilian\"],\n    \"iso639-2\": \"scn\",\n    \"iso639-1\": null\n  };\n  var Sidamo = {\n    name: \"Sidamo\",\n    names: [\"Sidamo\"],\n    \"iso639-2\": \"sid\",\n    \"iso639-1\": null\n  };\n  var Siksika = {\n    name: \"Siksika\",\n    names: [\"Siksika\"],\n    \"iso639-2\": \"bla\",\n    \"iso639-1\": null\n  };\n  var Sindhi = {\n    name: \"Sindhi\",\n    names: [\"Sindhi\"],\n    \"iso639-2\": \"snd\",\n    \"iso639-1\": \"sd\"\n  };\n  var Sinhala = {\n    name: \"Sinhala\",\n    names: [\"Sinhala\", \"Sinhalese\"],\n    \"iso639-2\": \"sin\",\n    \"iso639-1\": \"si\"\n  };\n  var Sinhalese = {\n    name: \"Sinhalese\",\n    names: [\"Sinhala\", \"Sinhalese\"],\n    \"iso639-2\": \"sin\",\n    \"iso639-1\": \"si\"\n  };\n  var Slovak = {\n    name: \"Slovak\",\n    names: [\"Slovak\"],\n    \"iso639-2\": \"slo/slk\",\n    \"iso639-1\": \"sk\"\n  };\n  var Slovenian = {\n    name: \"Slovenian\",\n    names: [\"Slovenian\"],\n    \"iso639-2\": \"slv\",\n    \"iso639-1\": \"sl\"\n  };\n  var Sogdian = {\n    name: \"Sogdian\",\n    names: [\"Sogdian\"],\n    \"iso639-2\": \"sog\",\n    \"iso639-1\": null\n  };\n  var Somali = {\n    name: \"Somali\",\n    names: [\"Somali\"],\n    \"iso639-2\": \"som\",\n    \"iso639-1\": \"so\"\n  };\n  var Soninke = {\n    name: \"Soninke\",\n    names: [\"Soninke\"],\n    \"iso639-2\": \"snk\",\n    \"iso639-1\": null\n  };\n  var Spanish = {\n    name: \"Spanish\",\n    names: [\"Spanish\", \"Castilian\"],\n    \"iso639-2\": \"spa\",\n    \"iso639-1\": \"es\"\n  };\n  var Sukuma = {\n    name: \"Sukuma\",\n    names: [\"Sukuma\"],\n    \"iso639-2\": \"suk\",\n    \"iso639-1\": null\n  };\n  var Sumerian = {\n    name: \"Sumerian\",\n    names: [\"Sumerian\"],\n    \"iso639-2\": \"sux\",\n    \"iso639-1\": null\n  };\n  var Sundanese = {\n    name: \"Sundanese\",\n    names: [\"Sundanese\"],\n    \"iso639-2\": \"sun\",\n    \"iso639-1\": \"su\"\n  };\n  var Susu = {\n    name: \"Susu\",\n    names: [\"Susu\"],\n    \"iso639-2\": \"sus\",\n    \"iso639-1\": null\n  };\n  var Swahili = {\n    name: \"Swahili\",\n    names: [\"Swahili\"],\n    \"iso639-2\": \"swa\",\n    \"iso639-1\": \"sw\"\n  };\n  var Swati = {\n    name: \"Swati\",\n    names: [\"Swati\"],\n    \"iso639-2\": \"ssw\",\n    \"iso639-1\": \"ss\"\n  };\n  var Swedish = {\n    name: \"Swedish\",\n    names: [\"Swedish\"],\n    \"iso639-2\": \"swe\",\n    \"iso639-1\": \"sv\"\n  };\n  var Syriac = {\n    name: \"Syriac\",\n    names: [\"Syriac\"],\n    \"iso639-2\": \"syr\",\n    \"iso639-1\": null\n  };\n  var Tagalog = {\n    name: \"Tagalog\",\n    names: [\"Tagalog\"],\n    \"iso639-2\": \"tgl\",\n    \"iso639-1\": \"tl\"\n  };\n  var Tahitian = {\n    name: \"Tahitian\",\n    names: [\"Tahitian\"],\n    \"iso639-2\": \"tah\",\n    \"iso639-1\": \"ty\"\n  };\n  var Tajik = {\n    name: \"Tajik\",\n    names: [\"Tajik\"],\n    \"iso639-2\": \"tgk\",\n    \"iso639-1\": \"tg\"\n  };\n  var Tamashek = {\n    name: \"Tamashek\",\n    names: [\"Tamashek\"],\n    \"iso639-2\": \"tmh\",\n    \"iso639-1\": null\n  };\n  var Tamil = {\n    name: \"Tamil\",\n    names: [\"Tamil\"],\n    \"iso639-2\": \"tam\",\n    \"iso639-1\": \"ta\"\n  };\n  var Tatar = {\n    name: \"Tatar\",\n    names: [\"Tatar\"],\n    \"iso639-2\": \"tat\",\n    \"iso639-1\": \"tt\"\n  };\n  var Telugu = {\n    name: \"Telugu\",\n    names: [\"Telugu\"],\n    \"iso639-2\": \"tel\",\n    \"iso639-1\": \"te\"\n  };\n  var Tereno = {\n    name: \"Tereno\",\n    names: [\"Tereno\"],\n    \"iso639-2\": \"ter\",\n    \"iso639-1\": null\n  };\n  var Tetum = {\n    name: \"Tetum\",\n    names: [\"Tetum\"],\n    \"iso639-2\": \"tet\",\n    \"iso639-1\": null\n  };\n  var Thai = {\n    name: \"Thai\",\n    names: [\"Thai\"],\n    \"iso639-2\": \"tha\",\n    \"iso639-1\": \"th\"\n  };\n  var Tibetan = {\n    name: \"Tibetan\",\n    names: [\"Tibetan\"],\n    \"iso639-2\": \"tib/bod\",\n    \"iso639-1\": \"bo\"\n  };\n  var Tigre = {\n    name: \"Tigre\",\n    names: [\"Tigre\"],\n    \"iso639-2\": \"tig\",\n    \"iso639-1\": null\n  };\n  var Tigrinya = {\n    name: \"Tigrinya\",\n    names: [\"Tigrinya\"],\n    \"iso639-2\": \"tir\",\n    \"iso639-1\": \"ti\"\n  };\n  var Timne = {\n    name: \"Timne\",\n    names: [\"Timne\"],\n    \"iso639-2\": \"tem\",\n    \"iso639-1\": null\n  };\n  var Tiv = {\n    name: \"Tiv\",\n    names: [\"Tiv\"],\n    \"iso639-2\": \"tiv\",\n    \"iso639-1\": null\n  };\n  var Tlingit = {\n    name: \"Tlingit\",\n    names: [\"Tlingit\"],\n    \"iso639-2\": \"tli\",\n    \"iso639-1\": null\n  };\n  var Tokelau = {\n    name: \"Tokelau\",\n    names: [\"Tokelau\"],\n    \"iso639-2\": \"tkl\",\n    \"iso639-1\": null\n  };\n  var Tsimshian = {\n    name: \"Tsimshian\",\n    names: [\"Tsimshian\"],\n    \"iso639-2\": \"tsi\",\n    \"iso639-1\": null\n  };\n  var Tsonga = {\n    name: \"Tsonga\",\n    names: [\"Tsonga\"],\n    \"iso639-2\": \"tso\",\n    \"iso639-1\": \"ts\"\n  };\n  var Tswana = {\n    name: \"Tswana\",\n    names: [\"Tswana\"],\n    \"iso639-2\": \"tsn\",\n    \"iso639-1\": \"tn\"\n  };\n  var Tumbuka = {\n    name: \"Tumbuka\",\n    names: [\"Tumbuka\"],\n    \"iso639-2\": \"tum\",\n    \"iso639-1\": null\n  };\n  var Turkish = {\n    name: \"Turkish\",\n    names: [\"Turkish\"],\n    \"iso639-2\": \"tur\",\n    \"iso639-1\": \"tr\"\n  };\n  var Turkmen = {\n    name: \"Turkmen\",\n    names: [\"Turkmen\"],\n    \"iso639-2\": \"tuk\",\n    \"iso639-1\": \"tk\"\n  };\n  var Tuvalu = {\n    name: \"Tuvalu\",\n    names: [\"Tuvalu\"],\n    \"iso639-2\": \"tvl\",\n    \"iso639-1\": null\n  };\n  var Tuvinian = {\n    name: \"Tuvinian\",\n    names: [\"Tuvinian\"],\n    \"iso639-2\": \"tyv\",\n    \"iso639-1\": null\n  };\n  var Twi = {\n    name: \"Twi\",\n    names: [\"Twi\"],\n    \"iso639-2\": \"twi\",\n    \"iso639-1\": \"tw\"\n  };\n  var Udmurt = {\n    name: \"Udmurt\",\n    names: [\"Udmurt\"],\n    \"iso639-2\": \"udm\",\n    \"iso639-1\": null\n  };\n  var Ugaritic = {\n    name: \"Ugaritic\",\n    names: [\"Ugaritic\"],\n    \"iso639-2\": \"uga\",\n    \"iso639-1\": null\n  };\n  var Uighur = {\n    name: \"Uighur\",\n    names: [\"Uighur\", \"Uyghur\"],\n    \"iso639-2\": \"uig\",\n    \"iso639-1\": \"ug\"\n  };\n  var Ukrainian = {\n    name: \"Ukrainian\",\n    names: [\"Ukrainian\"],\n    \"iso639-2\": \"ukr\",\n    \"iso639-1\": \"uk\"\n  };\n  var Umbundu = {\n    name: \"Umbundu\",\n    names: [\"Umbundu\"],\n    \"iso639-2\": \"umb\",\n    \"iso639-1\": null\n  };\n  var Undetermined = {\n    name: \"Undetermined\",\n    names: [\"Undetermined\"],\n    \"iso639-2\": \"und\",\n    \"iso639-1\": null\n  };\n  var Urdu = {\n    name: \"Urdu\",\n    names: [\"Urdu\"],\n    \"iso639-2\": \"urd\",\n    \"iso639-1\": \"ur\"\n  };\n  var Uyghur = {\n    name: \"Uyghur\",\n    names: [\"Uighur\", \"Uyghur\"],\n    \"iso639-2\": \"uig\",\n    \"iso639-1\": \"ug\"\n  };\n  var Uzbek = {\n    name: \"Uzbek\",\n    names: [\"Uzbek\"],\n    \"iso639-2\": \"uzb\",\n    \"iso639-1\": \"uz\"\n  };\n  var Vai = {\n    name: \"Vai\",\n    names: [\"Vai\"],\n    \"iso639-2\": \"vai\",\n    \"iso639-1\": null\n  };\n  var Valencian = {\n    name: \"Valencian\",\n    names: [\"Catalan\", \"Valencian\"],\n    \"iso639-2\": \"cat\",\n    \"iso639-1\": \"ca\"\n  };\n  var Venda = {\n    name: \"Venda\",\n    names: [\"Venda\"],\n    \"iso639-2\": \"ven\",\n    \"iso639-1\": \"ve\"\n  };\n  var Vietnamese = {\n    name: \"Vietnamese\",\n    names: [\"Vietnamese\"],\n    \"iso639-2\": \"vie\",\n    \"iso639-1\": \"vi\"\n  };\n  var Votic = {\n    name: \"Votic\",\n    names: [\"Votic\"],\n    \"iso639-2\": \"vot\",\n    \"iso639-1\": null\n  };\n  var Walloon = {\n    name: \"Walloon\",\n    names: [\"Walloon\"],\n    \"iso639-2\": \"wln\",\n    \"iso639-1\": \"wa\"\n  };\n  var Waray = {\n    name: \"Waray\",\n    names: [\"Waray\"],\n    \"iso639-2\": \"war\",\n    \"iso639-1\": null\n  };\n  var Washo = {\n    name: \"Washo\",\n    names: [\"Washo\"],\n    \"iso639-2\": \"was\",\n    \"iso639-1\": null\n  };\n  var Welsh = {\n    name: \"Welsh\",\n    names: [\"Welsh\"],\n    \"iso639-2\": \"wel/cym\",\n    \"iso639-1\": \"cy\"\n  };\n  var Wolaitta = {\n    name: \"Wolaitta\",\n    names: [\"Wolaitta\", \"Wolaytta\"],\n    \"iso639-2\": \"wal\",\n    \"iso639-1\": null\n  };\n  var Wolaytta = {\n    name: \"Wolaytta\",\n    names: [\"Wolaitta\", \"Wolaytta\"],\n    \"iso639-2\": \"wal\",\n    \"iso639-1\": null\n  };\n  var Wolof = {\n    name: \"Wolof\",\n    names: [\"Wolof\"],\n    \"iso639-2\": \"wol\",\n    \"iso639-1\": \"wo\"\n  };\n  var Xhosa = {\n    name: \"Xhosa\",\n    names: [\"Xhosa\"],\n    \"iso639-2\": \"xho\",\n    \"iso639-1\": \"xh\"\n  };\n  var Yakut = {\n    name: \"Yakut\",\n    names: [\"Yakut\"],\n    \"iso639-2\": \"sah\",\n    \"iso639-1\": null\n  };\n  var Yao = {\n    name: \"Yao\",\n    names: [\"Yao\"],\n    \"iso639-2\": \"yao\",\n    \"iso639-1\": null\n  };\n  var Yapese = {\n    name: \"Yapese\",\n    names: [\"Yapese\"],\n    \"iso639-2\": \"yap\",\n    \"iso639-1\": null\n  };\n  var Yiddish = {\n    name: \"Yiddish\",\n    names: [\"Yiddish\"],\n    \"iso639-2\": \"yid\",\n    \"iso639-1\": \"yi\"\n  };\n  var Yoruba = {\n    name: \"Yoruba\",\n    names: [\"Yoruba\"],\n    \"iso639-2\": \"yor\",\n    \"iso639-1\": \"yo\"\n  };\n  var Zapotec = {\n    name: \"Zapotec\",\n    names: [\"Zapotec\"],\n    \"iso639-2\": \"zap\",\n    \"iso639-1\": null\n  };\n  var Zaza = {\n    name: \"Zaza\",\n    names: [\"Zaza\", \"Dimili\", \"Dimli\", \"Kirdki\", \"Kirmanjki\", \"Zazaki\"],\n    \"iso639-2\": \"zza\",\n    \"iso639-1\": null\n  };\n  var Zazaki = {\n    name: \"Zazaki\",\n    names: [\"Zaza\", \"Dimili\", \"Dimli\", \"Kirdki\", \"Kirmanjki\", \"Zazaki\"],\n    \"iso639-2\": \"zza\",\n    \"iso639-1\": null\n  };\n  var Zenaga = {\n    name: \"Zenaga\",\n    names: [\"Zenaga\"],\n    \"iso639-2\": \"zen\",\n    \"iso639-1\": null\n  };\n  var Zhuang = {\n    name: \"Zhuang\",\n    names: [\"Zhuang\", \"Chuang\"],\n    \"iso639-2\": \"zha\",\n    \"iso639-1\": \"za\"\n  };\n  var Zulu = {\n    name: \"Zulu\",\n    names: [\"Zulu\"],\n    \"iso639-2\": \"zul\",\n    \"iso639-1\": \"zu\"\n  };\n  var Zuni = {\n    name: \"Zuni\",\n    names: [\"Zuni\"],\n    \"iso639-2\": \"zun\",\n    \"iso639-1\": null\n  };\n  var iso = {\n    Abkhazian: Abkhazian,\n    Achinese: Achinese,\n    Acoli: Acoli,\n    Adangme: Adangme,\n    Adygei: Adygei,\n    Adyghe: Adyghe,\n    Afar: Afar,\n    Afrihili: Afrihili,\n    Afrikaans: Afrikaans,\n    \"Afro-Asiatic languages\": {\n      name: \"Afro-Asiatic languages\",\n      names: [\"Afro-Asiatic languages\"],\n      \"iso639-2\": \"afa\",\n      \"iso639-1\": null\n    },\n    Ainu: Ainu,\n    Akan: Akan,\n    Akkadian: Akkadian,\n    Albanian: Albanian,\n    Alemannic: Alemannic,\n    Aleut: Aleut,\n    \"Algonquian languages\": {\n      name: \"Algonquian languages\",\n      names: [\"Algonquian languages\"],\n      \"iso639-2\": \"alg\",\n      \"iso639-1\": null\n    },\n    Alsatian: Alsatian,\n    \"Altaic languages\": {\n      name: \"Altaic languages\",\n      names: [\"Altaic languages\"],\n      \"iso639-2\": \"tut\",\n      \"iso639-1\": null\n    },\n    Amharic: Amharic,\n    Angika: Angika,\n    \"Apache languages\": {\n      name: \"Apache languages\",\n      names: [\"Apache languages\"],\n      \"iso639-2\": \"apa\",\n      \"iso639-1\": null\n    },\n    Arabic: Arabic,\n    Aragonese: Aragonese,\n    Arapaho: Arapaho,\n    Arawak: Arawak,\n    Armenian: Armenian,\n    Aromanian: Aromanian,\n    \"Artificial languages\": {\n      name: \"Artificial languages\",\n      names: [\"Artificial languages\"],\n      \"iso639-2\": \"art\",\n      \"iso639-1\": null\n    },\n    Arumanian: Arumanian,\n    Assamese: Assamese,\n    Asturian: Asturian,\n    Asturleonese: Asturleonese,\n    \"Athapascan languages\": {\n      name: \"Athapascan languages\",\n      names: [\"Athapascan languages\"],\n      \"iso639-2\": \"ath\",\n      \"iso639-1\": null\n    },\n    \"Australian languages\": {\n      name: \"Australian languages\",\n      names: [\"Australian languages\"],\n      \"iso639-2\": \"aus\",\n      \"iso639-1\": null\n    },\n    \"Austronesian languages\": {\n      name: \"Austronesian languages\",\n      names: [\"Austronesian languages\"],\n      \"iso639-2\": \"map\",\n      \"iso639-1\": null\n    },\n    Avaric: Avaric,\n    Avestan: Avestan,\n    Awadhi: Awadhi,\n    Aymara: Aymara,\n    Azerbaijani: Azerbaijani,\n    Bable: Bable,\n    Balinese: Balinese,\n    \"Baltic languages\": {\n      name: \"Baltic languages\",\n      names: [\"Baltic languages\"],\n      \"iso639-2\": \"bat\",\n      \"iso639-1\": null\n    },\n    Baluchi: Baluchi,\n    Bambara: Bambara,\n    \"Bamileke languages\": {\n      name: \"Bamileke languages\",\n      names: [\"Bamileke languages\"],\n      \"iso639-2\": \"bai\",\n      \"iso639-1\": null\n    },\n    \"Banda languages\": {\n      name: \"Banda languages\",\n      names: [\"Banda languages\"],\n      \"iso639-2\": \"bad\",\n      \"iso639-1\": null\n    },\n    \"Bantu languages\": {\n      name: \"Bantu languages\",\n      names: [\"Bantu languages\"],\n      \"iso639-2\": \"bnt\",\n      \"iso639-1\": null\n    },\n    Basa: Basa,\n    Bashkir: Bashkir,\n    Basque: Basque,\n    \"Batak languages\": {\n      name: \"Batak languages\",\n      names: [\"Batak languages\"],\n      \"iso639-2\": \"btk\",\n      \"iso639-1\": null\n    },\n    Bedawiyet: Bedawiyet,\n    Beja: Beja,\n    Belarusian: Belarusian,\n    Bemba: Bemba,\n    Bengali: Bengali,\n    \"Berber languages\": {\n      name: \"Berber languages\",\n      names: [\"Berber languages\"],\n      \"iso639-2\": \"ber\",\n      \"iso639-1\": null\n    },\n    Bhojpuri: Bhojpuri,\n    \"Bihari languages\": {\n      name: \"Bihari languages\",\n      names: [\"Bihari languages\"],\n      \"iso639-2\": \"bih\",\n      \"iso639-1\": \"bh\"\n    },\n    Bikol: Bikol,\n    Bilin: Bilin,\n    Bini: Bini,\n    Bislama: Bislama,\n    Blin: Blin,\n    Bliss: Bliss,\n    Blissymbolics: Blissymbolics,\n    Blissymbols: Blissymbols,\n    \"Bokmål, Norwegian\": {\n      name: \"Bokmål, Norwegian\",\n      names: [\"Bokmål, Norwegian\", \"Norwegian Bokmål\"],\n      \"iso639-2\": \"nob\",\n      \"iso639-1\": \"nb\"\n    },\n    Bosnian: Bosnian,\n    Braj: Braj,\n    Breton: Breton,\n    Buginese: Buginese,\n    Bulgarian: Bulgarian,\n    Buriat: Buriat,\n    Burmese: Burmese,\n    Caddo: Caddo,\n    Castilian: Castilian,\n    Catalan: Catalan,\n    \"Caucasian languages\": {\n      name: \"Caucasian languages\",\n      names: [\"Caucasian languages\"],\n      \"iso639-2\": \"cau\",\n      \"iso639-1\": null\n    },\n    Cebuano: Cebuano,\n    \"Celtic languages\": {\n      name: \"Celtic languages\",\n      names: [\"Celtic languages\"],\n      \"iso639-2\": \"cel\",\n      \"iso639-1\": null\n    },\n    \"Central American Indian languages\": {\n      name: \"Central American Indian languages\",\n      names: [\"Central American Indian languages\"],\n      \"iso639-2\": \"cai\",\n      \"iso639-1\": null\n    },\n    \"Central Khmer\": {\n      name: \"Central Khmer\",\n      names: [\"Central Khmer\"],\n      \"iso639-2\": \"khm\",\n      \"iso639-1\": \"km\"\n    },\n    Chagatai: Chagatai,\n    \"Chamic languages\": {\n      name: \"Chamic languages\",\n      names: [\"Chamic languages\"],\n      \"iso639-2\": \"cmc\",\n      \"iso639-1\": null\n    },\n    Chamorro: Chamorro,\n    Chechen: Chechen,\n    Cherokee: Cherokee,\n    Chewa: Chewa,\n    Cheyenne: Cheyenne,\n    Chibcha: Chibcha,\n    Chichewa: Chichewa,\n    Chinese: Chinese,\n    \"Chinook jargon\": {\n      name: \"Chinook jargon\",\n      names: [\"Chinook jargon\"],\n      \"iso639-2\": \"chn\",\n      \"iso639-1\": null\n    },\n    Chipewyan: Chipewyan,\n    Choctaw: Choctaw,\n    Chuang: Chuang,\n    \"Church Slavic\": {\n      name: \"Church Slavic\",\n      names: [\"Church Slavic\", \"Old Slavonic\", \"Church Slavonic\", \"Old Bulgarian\", \"Old Church Slavonic\"],\n      \"iso639-2\": \"chu\",\n      \"iso639-1\": \"cu\"\n    },\n    \"Church Slavonic\": {\n      name: \"Church Slavonic\",\n      names: [\"Church Slavic\", \"Old Slavonic\", \"Church Slavonic\", \"Old Bulgarian\", \"Old Church Slavonic\"],\n      \"iso639-2\": \"chu\",\n      \"iso639-1\": \"cu\"\n    },\n    Chuukese: Chuukese,\n    Chuvash: Chuvash,\n    \"Classical Nepal Bhasa\": {\n      name: \"Classical Nepal Bhasa\",\n      names: [\"Classical Newari\", \"Old Newari\", \"Classical Nepal Bhasa\"],\n      \"iso639-2\": \"nwc\",\n      \"iso639-1\": null\n    },\n    \"Classical Newari\": {\n      name: \"Classical Newari\",\n      names: [\"Classical Newari\", \"Old Newari\", \"Classical Nepal Bhasa\"],\n      \"iso639-2\": \"nwc\",\n      \"iso639-1\": null\n    },\n    \"Classical Syriac\": {\n      name: \"Classical Syriac\",\n      names: [\"Classical Syriac\"],\n      \"iso639-2\": \"syc\",\n      \"iso639-1\": null\n    },\n    \"Cook Islands Maori\": {\n      name: \"Cook Islands Maori\",\n      names: [\"Rarotongan\", \"Cook Islands Maori\"],\n      \"iso639-2\": \"rar\",\n      \"iso639-1\": null\n    },\n    Coptic: Coptic,\n    Cornish: Cornish,\n    Corsican: Corsican,\n    Cree: Cree,\n    Creek: Creek,\n    \"Creoles and pidgins\": {\n      name: \"Creoles and pidgins\",\n      names: [\"Creoles and pidgins\"],\n      \"iso639-2\": \"crp\",\n      \"iso639-1\": null\n    },\n    \"Creoles and pidgins, English based\": {\n      name: \"Creoles and pidgins, English based\",\n      names: [\"Creoles and pidgins, English based\"],\n      \"iso639-2\": \"cpe\",\n      \"iso639-1\": null\n    },\n    \"Creoles and pidgins, French-based\": {\n      name: \"Creoles and pidgins, French-based\",\n      names: [\"Creoles and pidgins, French-based\"],\n      \"iso639-2\": \"cpf\",\n      \"iso639-1\": null\n    },\n    \"Creoles and pidgins, Portuguese-based\": {\n      name: \"Creoles and pidgins, Portuguese-based\",\n      names: [\"Creoles and pidgins, Portuguese-based\"],\n      \"iso639-2\": \"cpp\",\n      \"iso639-1\": null\n    },\n    \"Crimean Tatar\": {\n      name: \"Crimean Tatar\",\n      names: [\"Crimean Tatar\", \"Crimean Turkish\"],\n      \"iso639-2\": \"crh\",\n      \"iso639-1\": null\n    },\n    \"Crimean Turkish\": {\n      name: \"Crimean Turkish\",\n      names: [\"Crimean Tatar\", \"Crimean Turkish\"],\n      \"iso639-2\": \"crh\",\n      \"iso639-1\": null\n    },\n    Croatian: Croatian,\n    \"Cushitic languages\": {\n      name: \"Cushitic languages\",\n      names: [\"Cushitic languages\"],\n      \"iso639-2\": \"cus\",\n      \"iso639-1\": null\n    },\n    Czech: Czech,\n    Dakota: Dakota,\n    Danish: Danish,\n    Dargwa: Dargwa,\n    Delaware: Delaware,\n    \"Dene Suline\": {\n      name: \"Dene Suline\",\n      names: [\"Chipewyan\", \"Dene Suline\"],\n      \"iso639-2\": \"chp\",\n      \"iso639-1\": null\n    },\n    Dhivehi: Dhivehi,\n    Dimili: Dimili,\n    Dimli: Dimli,\n    Dinka: Dinka,\n    Divehi: Divehi,\n    Dogri: Dogri,\n    Dogrib: Dogrib,\n    \"Dravidian languages\": {\n      name: \"Dravidian languages\",\n      names: [\"Dravidian languages\"],\n      \"iso639-2\": \"dra\",\n      \"iso639-1\": null\n    },\n    Duala: Duala,\n    Dutch: Dutch,\n    \"Dutch, Middle (ca.1050-1350)\": {\n      name: \"Dutch, Middle (ca.1050-1350)\",\n      names: [\"Dutch, Middle (ca.1050-1350)\"],\n      \"iso639-2\": \"dum\",\n      \"iso639-1\": null\n    },\n    Dyula: Dyula,\n    Dzongkha: Dzongkha,\n    \"Eastern Frisian\": {\n      name: \"Eastern Frisian\",\n      names: [\"Eastern Frisian\"],\n      \"iso639-2\": \"frs\",\n      \"iso639-1\": null\n    },\n    Edo: Edo,\n    Efik: Efik,\n    \"Egyptian (Ancient)\": {\n      name: \"Egyptian (Ancient)\",\n      names: [\"Egyptian (Ancient)\"],\n      \"iso639-2\": \"egy\",\n      \"iso639-1\": null\n    },\n    Ekajuk: Ekajuk,\n    Elamite: Elamite,\n    English: English,\n    \"English, Middle (1100-1500)\": {\n      name: \"English, Middle (1100-1500)\",\n      names: [\"English, Middle (1100-1500)\"],\n      \"iso639-2\": \"enm\",\n      \"iso639-1\": null\n    },\n    \"English, Old (ca.450-1100)\": {\n      name: \"English, Old (ca.450-1100)\",\n      names: [\"English, Old (ca.450-1100)\"],\n      \"iso639-2\": \"ang\",\n      \"iso639-1\": null\n    },\n    Erzya: Erzya,\n    Esperanto: Esperanto,\n    Estonian: Estonian,\n    Ewe: Ewe,\n    Ewondo: Ewondo,\n    Fang: Fang,\n    Fanti: Fanti,\n    Faroese: Faroese,\n    Fijian: Fijian,\n    Filipino: Filipino,\n    Finnish: Finnish,\n    \"Finno-Ugrian languages\": {\n      name: \"Finno-Ugrian languages\",\n      names: [\"Finno-Ugrian languages\"],\n      \"iso639-2\": \"fiu\",\n      \"iso639-1\": null\n    },\n    Flemish: Flemish,\n    Fon: Fon,\n    French: French,\n    \"French, Middle (ca.1400-1600)\": {\n      name: \"French, Middle (ca.1400-1600)\",\n      names: [\"French, Middle (ca.1400-1600)\"],\n      \"iso639-2\": \"frm\",\n      \"iso639-1\": null\n    },\n    \"French, Old (842-ca.1400)\": {\n      name: \"French, Old (842-ca.1400)\",\n      names: [\"French, Old (842-ca.1400)\"],\n      \"iso639-2\": \"fro\",\n      \"iso639-1\": null\n    },\n    Friulian: Friulian,\n    Fulah: Fulah,\n    Ga: Ga,\n    Gaelic: Gaelic,\n    \"Galibi Carib\": {\n      name: \"Galibi Carib\",\n      names: [\"Galibi Carib\"],\n      \"iso639-2\": \"car\",\n      \"iso639-1\": null\n    },\n    Galician: Galician,\n    Ganda: Ganda,\n    Gayo: Gayo,\n    Gbaya: Gbaya,\n    Geez: Geez,\n    Georgian: Georgian,\n    German: German,\n    \"German, Low\": {\n      name: \"German, Low\",\n      names: [\"Low German\", \"Low Saxon\", \"German, Low\", \"Saxon, Low\"],\n      \"iso639-2\": \"nds\",\n      \"iso639-1\": null\n    },\n    \"German, Middle High (ca.1050-1500)\": {\n      name: \"German, Middle High (ca.1050-1500)\",\n      names: [\"German, Middle High (ca.1050-1500)\"],\n      \"iso639-2\": \"gmh\",\n      \"iso639-1\": null\n    },\n    \"German, Old High (ca.750-1050)\": {\n      name: \"German, Old High (ca.750-1050)\",\n      names: [\"German, Old High (ca.750-1050)\"],\n      \"iso639-2\": \"goh\",\n      \"iso639-1\": null\n    },\n    \"Germanic languages\": {\n      name: \"Germanic languages\",\n      names: [\"Germanic languages\"],\n      \"iso639-2\": \"gem\",\n      \"iso639-1\": null\n    },\n    Gikuyu: Gikuyu,\n    Gilbertese: Gilbertese,\n    Gondi: Gondi,\n    Gorontalo: Gorontalo,\n    Gothic: Gothic,\n    Grebo: Grebo,\n    \"Greek, Ancient (to 1453)\": {\n      name: \"Greek, Ancient (to 1453)\",\n      names: [\"Greek, Ancient (to 1453)\"],\n      \"iso639-2\": \"grc\",\n      \"iso639-1\": null\n    },\n    \"Greek, Modern (1453-)\": {\n      name: \"Greek, Modern (1453-)\",\n      names: [\"Greek, Modern (1453-)\"],\n      \"iso639-2\": \"gre/ell\",\n      \"iso639-1\": \"el\"\n    },\n    Greenlandic: Greenlandic,\n    Guarani: Guarani,\n    Gujarati: Gujarati,\n    \"Gwich'in\": {\n      name: \"Gwich'in\",\n      names: [\"Gwich'in\"],\n      \"iso639-2\": \"gwi\",\n      \"iso639-1\": null\n    },\n    Haida: Haida,\n    Haitian: Haitian,\n    \"Haitian Creole\": {\n      name: \"Haitian Creole\",\n      names: [\"Haitian\", \"Haitian Creole\"],\n      \"iso639-2\": \"hat\",\n      \"iso639-1\": \"ht\"\n    },\n    Hausa: Hausa,\n    Hawaiian: Hawaiian,\n    Hebrew: Hebrew,\n    Herero: Herero,\n    Hiligaynon: Hiligaynon,\n    \"Himachali languages\": {\n      name: \"Himachali languages\",\n      names: [\"Himachali languages\", \"Western Pahari languages\"],\n      \"iso639-2\": \"him\",\n      \"iso639-1\": null\n    },\n    Hindi: Hindi,\n    \"Hiri Motu\": {\n      name: \"Hiri Motu\",\n      names: [\"Hiri Motu\"],\n      \"iso639-2\": \"hmo\",\n      \"iso639-1\": \"ho\"\n    },\n    Hittite: Hittite,\n    Hmong: Hmong,\n    Hungarian: Hungarian,\n    Hupa: Hupa,\n    Iban: Iban,\n    Icelandic: Icelandic,\n    Ido: Ido,\n    Igbo: Igbo,\n    \"Ijo languages\": {\n      name: \"Ijo languages\",\n      names: [\"Ijo languages\"],\n      \"iso639-2\": \"ijo\",\n      \"iso639-1\": null\n    },\n    Iloko: Iloko,\n    \"Imperial Aramaic (700-300 BCE)\": {\n      name: \"Imperial Aramaic (700-300 BCE)\",\n      names: [\"Official Aramaic (700-300 BCE)\", \"Imperial Aramaic (700-300 BCE)\"],\n      \"iso639-2\": \"arc\",\n      \"iso639-1\": null\n    },\n    \"Inari Sami\": {\n      name: \"Inari Sami\",\n      names: [\"Inari Sami\"],\n      \"iso639-2\": \"smn\",\n      \"iso639-1\": null\n    },\n    \"Indic languages\": {\n      name: \"Indic languages\",\n      names: [\"Indic languages\"],\n      \"iso639-2\": \"inc\",\n      \"iso639-1\": null\n    },\n    \"Indo-European languages\": {\n      name: \"Indo-European languages\",\n      names: [\"Indo-European languages\"],\n      \"iso639-2\": \"ine\",\n      \"iso639-1\": null\n    },\n    Indonesian: Indonesian,\n    Ingush: Ingush,\n    \"Interlingua (International Auxiliary Language Association)\": {\n      name: \"Interlingua (International Auxiliary Language Association)\",\n      names: [\"Interlingua (International Auxiliary Language Association)\"],\n      \"iso639-2\": \"ina\",\n      \"iso639-1\": \"ia\"\n    },\n    Interlingue: Interlingue,\n    Inuktitut: Inuktitut,\n    Inupiaq: Inupiaq,\n    \"Iranian languages\": {\n      name: \"Iranian languages\",\n      names: [\"Iranian languages\"],\n      \"iso639-2\": \"ira\",\n      \"iso639-1\": null\n    },\n    Irish: Irish,\n    \"Irish, Middle (900-1200)\": {\n      name: \"Irish, Middle (900-1200)\",\n      names: [\"Irish, Middle (900-1200)\"],\n      \"iso639-2\": \"mga\",\n      \"iso639-1\": null\n    },\n    \"Irish, Old (to 900)\": {\n      name: \"Irish, Old (to 900)\",\n      names: [\"Irish, Old (to 900)\"],\n      \"iso639-2\": \"sga\",\n      \"iso639-1\": null\n    },\n    \"Iroquoian languages\": {\n      name: \"Iroquoian languages\",\n      names: [\"Iroquoian languages\"],\n      \"iso639-2\": \"iro\",\n      \"iso639-1\": null\n    },\n    Italian: Italian,\n    Japanese: Japanese,\n    Javanese: Javanese,\n    Jingpho: Jingpho,\n    \"Judeo-Arabic\": {\n      name: \"Judeo-Arabic\",\n      names: [\"Judeo-Arabic\"],\n      \"iso639-2\": \"jrb\",\n      \"iso639-1\": null\n    },\n    \"Judeo-Persian\": {\n      name: \"Judeo-Persian\",\n      names: [\"Judeo-Persian\"],\n      \"iso639-2\": \"jpr\",\n      \"iso639-1\": null\n    },\n    Kabardian: Kabardian,\n    Kabyle: Kabyle,\n    Kachin: Kachin,\n    Kalaallisut: Kalaallisut,\n    Kalmyk: Kalmyk,\n    Kamba: Kamba,\n    Kannada: Kannada,\n    Kanuri: Kanuri,\n    Kapampangan: Kapampangan,\n    \"Kara-Kalpak\": {\n      name: \"Kara-Kalpak\",\n      names: [\"Kara-Kalpak\"],\n      \"iso639-2\": \"kaa\",\n      \"iso639-1\": null\n    },\n    \"Karachay-Balkar\": {\n      name: \"Karachay-Balkar\",\n      names: [\"Karachay-Balkar\"],\n      \"iso639-2\": \"krc\",\n      \"iso639-1\": null\n    },\n    Karelian: Karelian,\n    \"Karen languages\": {\n      name: \"Karen languages\",\n      names: [\"Karen languages\"],\n      \"iso639-2\": \"kar\",\n      \"iso639-1\": null\n    },\n    Kashmiri: Kashmiri,\n    Kashubian: Kashubian,\n    Kawi: Kawi,\n    Kazakh: Kazakh,\n    Khasi: Khasi,\n    \"Khoisan languages\": {\n      name: \"Khoisan languages\",\n      names: [\"Khoisan languages\"],\n      \"iso639-2\": \"khi\",\n      \"iso639-1\": null\n    },\n    Khotanese: Khotanese,\n    Kikuyu: Kikuyu,\n    Kimbundu: Kimbundu,\n    Kinyarwanda: Kinyarwanda,\n    Kirdki: Kirdki,\n    Kirghiz: Kirghiz,\n    Kirmanjki: Kirmanjki,\n    Klingon: Klingon,\n    Komi: Komi,\n    Kongo: Kongo,\n    Konkani: Konkani,\n    Korean: Korean,\n    Kosraean: Kosraean,\n    Kpelle: Kpelle,\n    \"Kru languages\": {\n      name: \"Kru languages\",\n      names: [\"Kru languages\"],\n      \"iso639-2\": \"kro\",\n      \"iso639-1\": null\n    },\n    Kuanyama: Kuanyama,\n    Kumyk: Kumyk,\n    Kurdish: Kurdish,\n    Kurukh: Kurukh,\n    Kutenai: Kutenai,\n    Kwanyama: Kwanyama,\n    Kyrgyz: Kyrgyz,\n    Ladino: Ladino,\n    Lahnda: Lahnda,\n    Lamba: Lamba,\n    \"Land Dayak languages\": {\n      name: \"Land Dayak languages\",\n      names: [\"Land Dayak languages\"],\n      \"iso639-2\": \"day\",\n      \"iso639-1\": null\n    },\n    Lao: Lao,\n    Latin: Latin,\n    Latvian: Latvian,\n    Leonese: Leonese,\n    Letzeburgesch: Letzeburgesch,\n    Lezghian: Lezghian,\n    Limburgan: Limburgan,\n    Limburger: Limburger,\n    Limburgish: Limburgish,\n    Lingala: Lingala,\n    Lithuanian: Lithuanian,\n    Lojban: Lojban,\n    \"Low German\": {\n      name: \"Low German\",\n      names: [\"Low German\", \"Low Saxon\", \"German, Low\", \"Saxon, Low\"],\n      \"iso639-2\": \"nds\",\n      \"iso639-1\": null\n    },\n    \"Low Saxon\": {\n      name: \"Low Saxon\",\n      names: [\"Low German\", \"Low Saxon\", \"German, Low\", \"Saxon, Low\"],\n      \"iso639-2\": \"nds\",\n      \"iso639-1\": null\n    },\n    \"Lower Sorbian\": {\n      name: \"Lower Sorbian\",\n      names: [\"Lower Sorbian\"],\n      \"iso639-2\": \"dsb\",\n      \"iso639-1\": null\n    },\n    Lozi: Lozi,\n    \"Luba-Katanga\": {\n      name: \"Luba-Katanga\",\n      names: [\"Luba-Katanga\"],\n      \"iso639-2\": \"lub\",\n      \"iso639-1\": \"lu\"\n    },\n    \"Luba-Lulua\": {\n      name: \"Luba-Lulua\",\n      names: [\"Luba-Lulua\"],\n      \"iso639-2\": \"lua\",\n      \"iso639-1\": null\n    },\n    Luiseno: Luiseno,\n    \"Lule Sami\": {\n      name: \"Lule Sami\",\n      names: [\"Lule Sami\"],\n      \"iso639-2\": \"smj\",\n      \"iso639-1\": null\n    },\n    Lunda: Lunda,\n    \"Luo (Kenya and Tanzania)\": {\n      name: \"Luo (Kenya and Tanzania)\",\n      names: [\"Luo (Kenya and Tanzania)\"],\n      \"iso639-2\": \"luo\",\n      \"iso639-1\": null\n    },\n    Lushai: Lushai,\n    Luxembourgish: Luxembourgish,\n    \"Macedo-Romanian\": {\n      name: \"Macedo-Romanian\",\n      names: [\"Aromanian\", \"Arumanian\", \"Macedo-Romanian\"],\n      \"iso639-2\": \"rup\",\n      \"iso639-1\": null\n    },\n    Macedonian: Macedonian,\n    Madurese: Madurese,\n    Magahi: Magahi,\n    Maithili: Maithili,\n    Makasar: Makasar,\n    Malagasy: Malagasy,\n    Malay: Malay,\n    Malayalam: Malayalam,\n    Maldivian: Maldivian,\n    Maltese: Maltese,\n    Manchu: Manchu,\n    Mandar: Mandar,\n    Mandingo: Mandingo,\n    Manipuri: Manipuri,\n    \"Manobo languages\": {\n      name: \"Manobo languages\",\n      names: [\"Manobo languages\"],\n      \"iso639-2\": \"mno\",\n      \"iso639-1\": null\n    },\n    Manx: Manx,\n    Maori: Maori,\n    Mapuche: Mapuche,\n    Mapudungun: Mapudungun,\n    Marathi: Marathi,\n    Mari: Mari,\n    Marshallese: Marshallese,\n    Marwari: Marwari,\n    Masai: Masai,\n    \"Mayan languages\": {\n      name: \"Mayan languages\",\n      names: [\"Mayan languages\"],\n      \"iso639-2\": \"myn\",\n      \"iso639-1\": null\n    },\n    Mende: Mende,\n    \"Mi'kmaq\": {\n      name: \"Mi'kmaq\",\n      names: [\"Mi'kmaq\", \"Micmac\"],\n      \"iso639-2\": \"mic\",\n      \"iso639-1\": null\n    },\n    Micmac: Micmac,\n    Minangkabau: Minangkabau,\n    Mirandese: Mirandese,\n    Mohawk: Mohawk,\n    Moksha: Moksha,\n    Moldavian: Moldavian,\n    Moldovan: Moldovan,\n    \"Mon-Khmer languages\": {\n      name: \"Mon-Khmer languages\",\n      names: [\"Mon-Khmer languages\"],\n      \"iso639-2\": \"mkh\",\n      \"iso639-1\": null\n    },\n    Mong: Mong,\n    Mongo: Mongo,\n    Mongolian: Mongolian,\n    Montenegrin: Montenegrin,\n    Mossi: Mossi,\n    \"Multiple languages\": {\n      name: \"Multiple languages\",\n      names: [\"Multiple languages\"],\n      \"iso639-2\": \"mul\",\n      \"iso639-1\": null\n    },\n    \"Munda languages\": {\n      name: \"Munda languages\",\n      names: [\"Munda languages\"],\n      \"iso639-2\": \"mun\",\n      \"iso639-1\": null\n    },\n    \"N'Ko\": {\n      name: \"N'Ko\",\n      names: [\"N'Ko\"],\n      \"iso639-2\": \"nqo\",\n      \"iso639-1\": null\n    },\n    \"Nahuatl languages\": {\n      name: \"Nahuatl languages\",\n      names: [\"Nahuatl languages\"],\n      \"iso639-2\": \"nah\",\n      \"iso639-1\": null\n    },\n    Nauru: Nauru,\n    Navaho: Navaho,\n    Navajo: Navajo,\n    \"Ndebele, North\": {\n      name: \"Ndebele, North\",\n      names: [\"Ndebele, North\", \"North Ndebele\"],\n      \"iso639-2\": \"nde\",\n      \"iso639-1\": \"nd\"\n    },\n    \"Ndebele, South\": {\n      name: \"Ndebele, South\",\n      names: [\"Ndebele, South\", \"South Ndebele\"],\n      \"iso639-2\": \"nbl\",\n      \"iso639-1\": \"nr\"\n    },\n    Ndonga: Ndonga,\n    Neapolitan: Neapolitan,\n    \"Nepal Bhasa\": {\n      name: \"Nepal Bhasa\",\n      names: [\"Nepal Bhasa\", \"Newari\"],\n      \"iso639-2\": \"new\",\n      \"iso639-1\": null\n    },\n    Nepali: Nepali,\n    Newari: Newari,\n    Nias: Nias,\n    \"Niger-Kordofanian languages\": {\n      name: \"Niger-Kordofanian languages\",\n      names: [\"Niger-Kordofanian languages\"],\n      \"iso639-2\": \"nic\",\n      \"iso639-1\": null\n    },\n    \"Nilo-Saharan languages\": {\n      name: \"Nilo-Saharan languages\",\n      names: [\"Nilo-Saharan languages\"],\n      \"iso639-2\": \"ssa\",\n      \"iso639-1\": null\n    },\n    Niuean: Niuean,\n    \"No linguistic content\": {\n      name: \"No linguistic content\",\n      names: [\"No linguistic content\", \"Not applicable\"],\n      \"iso639-2\": \"zxx\",\n      \"iso639-1\": null\n    },\n    Nogai: Nogai,\n    \"Norse, Old\": {\n      name: \"Norse, Old\",\n      names: [\"Norse, Old\"],\n      \"iso639-2\": \"non\",\n      \"iso639-1\": null\n    },\n    \"North American Indian languages\": {\n      name: \"North American Indian languages\",\n      names: [\"North American Indian languages\"],\n      \"iso639-2\": \"nai\",\n      \"iso639-1\": null\n    },\n    \"North Ndebele\": {\n      name: \"North Ndebele\",\n      names: [\"Ndebele, North\", \"North Ndebele\"],\n      \"iso639-2\": \"nde\",\n      \"iso639-1\": \"nd\"\n    },\n    \"Northern Frisian\": {\n      name: \"Northern Frisian\",\n      names: [\"Northern Frisian\"],\n      \"iso639-2\": \"frr\",\n      \"iso639-1\": null\n    },\n    \"Northern Sami\": {\n      name: \"Northern Sami\",\n      names: [\"Northern Sami\"],\n      \"iso639-2\": \"sme\",\n      \"iso639-1\": \"se\"\n    },\n    \"Northern Sotho\": {\n      name: \"Northern Sotho\",\n      names: [\"Pedi\", \"Sepedi\", \"Northern Sotho\"],\n      \"iso639-2\": \"nso\",\n      \"iso639-1\": null\n    },\n    Norwegian: Norwegian,\n    \"Norwegian Bokmål\": {\n      name: \"Norwegian Bokmål\",\n      names: [\"Bokmål, Norwegian\", \"Norwegian Bokmål\"],\n      \"iso639-2\": \"nob\",\n      \"iso639-1\": \"nb\"\n    },\n    \"Norwegian Nynorsk\": {\n      name: \"Norwegian Nynorsk\",\n      names: [\"Norwegian Nynorsk\", \"Nynorsk, Norwegian\"],\n      \"iso639-2\": \"nno\",\n      \"iso639-1\": \"nn\"\n    },\n    \"Not applicable\": {\n      name: \"Not applicable\",\n      names: [\"No linguistic content\", \"Not applicable\"],\n      \"iso639-2\": \"zxx\",\n      \"iso639-1\": null\n    },\n    \"Nubian languages\": {\n      name: \"Nubian languages\",\n      names: [\"Nubian languages\"],\n      \"iso639-2\": \"nub\",\n      \"iso639-1\": null\n    },\n    Nuosu: Nuosu,\n    Nyamwezi: Nyamwezi,\n    Nyanja: Nyanja,\n    Nyankole: Nyankole,\n    \"Nynorsk, Norwegian\": {\n      name: \"Nynorsk, Norwegian\",\n      names: [\"Norwegian Nynorsk\", \"Nynorsk, Norwegian\"],\n      \"iso639-2\": \"nno\",\n      \"iso639-1\": \"nn\"\n    },\n    Nyoro: Nyoro,\n    Nzima: Nzima,\n    Occidental: Occidental,\n    \"Occitan (post 1500)\": {\n      name: \"Occitan (post 1500)\",\n      names: [\"Occitan (post 1500)\"],\n      \"iso639-2\": \"oci\",\n      \"iso639-1\": \"oc\"\n    },\n    \"Occitan, Old (to 1500)\": {\n      name: \"Occitan, Old (to 1500)\",\n      names: [\"Provençal, Old (to 1500)\", \"Occitan, Old (to 1500)\"],\n      \"iso639-2\": \"pro\",\n      \"iso639-1\": null\n    },\n    \"Official Aramaic (700-300 BCE)\": {\n      name: \"Official Aramaic (700-300 BCE)\",\n      names: [\"Official Aramaic (700-300 BCE)\", \"Imperial Aramaic (700-300 BCE)\"],\n      \"iso639-2\": \"arc\",\n      \"iso639-1\": null\n    },\n    Oirat: Oirat,\n    Ojibwa: Ojibwa,\n    \"Old Bulgarian\": {\n      name: \"Old Bulgarian\",\n      names: [\"Church Slavic\", \"Old Slavonic\", \"Church Slavonic\", \"Old Bulgarian\", \"Old Church Slavonic\"],\n      \"iso639-2\": \"chu\",\n      \"iso639-1\": \"cu\"\n    },\n    \"Old Church Slavonic\": {\n      name: \"Old Church Slavonic\",\n      names: [\"Church Slavic\", \"Old Slavonic\", \"Church Slavonic\", \"Old Bulgarian\", \"Old Church Slavonic\"],\n      \"iso639-2\": \"chu\",\n      \"iso639-1\": \"cu\"\n    },\n    \"Old Newari\": {\n      name: \"Old Newari\",\n      names: [\"Classical Newari\", \"Old Newari\", \"Classical Nepal Bhasa\"],\n      \"iso639-2\": \"nwc\",\n      \"iso639-1\": null\n    },\n    \"Old Slavonic\": {\n      name: \"Old Slavonic\",\n      names: [\"Church Slavic\", \"Old Slavonic\", \"Church Slavonic\", \"Old Bulgarian\", \"Old Church Slavonic\"],\n      \"iso639-2\": \"chu\",\n      \"iso639-1\": \"cu\"\n    },\n    Oriya: Oriya,\n    Oromo: Oromo,\n    Osage: Osage,\n    Ossetian: Ossetian,\n    Ossetic: Ossetic,\n    \"Otomian languages\": {\n      name: \"Otomian languages\",\n      names: [\"Otomian languages\"],\n      \"iso639-2\": \"oto\",\n      \"iso639-1\": null\n    },\n    Pahlavi: Pahlavi,\n    Palauan: Palauan,\n    Pali: Pali,\n    Pampanga: Pampanga,\n    Pangasinan: Pangasinan,\n    Panjabi: Panjabi,\n    Papiamento: Papiamento,\n    \"Papuan languages\": {\n      name: \"Papuan languages\",\n      names: [\"Papuan languages\"],\n      \"iso639-2\": \"paa\",\n      \"iso639-1\": null\n    },\n    Pashto: Pashto,\n    Pedi: Pedi,\n    Persian: Persian,\n    \"Persian, Old (ca.600-400 B.C.)\": {\n      name: \"Persian, Old (ca.600-400 B.C.)\",\n      names: [\"Persian, Old (ca.600-400 B.C.)\"],\n      \"iso639-2\": \"peo\",\n      \"iso639-1\": null\n    },\n    \"Philippine languages\": {\n      name: \"Philippine languages\",\n      names: [\"Philippine languages\"],\n      \"iso639-2\": \"phi\",\n      \"iso639-1\": null\n    },\n    Phoenician: Phoenician,\n    Pilipino: Pilipino,\n    Pohnpeian: Pohnpeian,\n    Polish: Polish,\n    Portuguese: Portuguese,\n    \"Prakrit languages\": {\n      name: \"Prakrit languages\",\n      names: [\"Prakrit languages\"],\n      \"iso639-2\": \"pra\",\n      \"iso639-1\": null\n    },\n    \"Provençal, Old (to 1500)\": {\n      name: \"Provençal, Old (to 1500)\",\n      names: [\"Provençal, Old (to 1500)\", \"Occitan, Old (to 1500)\"],\n      \"iso639-2\": \"pro\",\n      \"iso639-1\": null\n    },\n    Punjabi: Punjabi,\n    Pushto: Pushto,\n    Quechua: Quechua,\n    Rajasthani: Rajasthani,\n    Rapanui: Rapanui,\n    Rarotongan: Rarotongan,\n    \"Reserved for local use\": {\n      name: \"Reserved for local use\",\n      names: [\"Reserved for local use\"],\n      \"iso639-2\": \"qaa-qtz\",\n      \"iso639-1\": null\n    },\n    \"Romance languages\": {\n      name: \"Romance languages\",\n      names: [\"Romance languages\"],\n      \"iso639-2\": \"roa\",\n      \"iso639-1\": null\n    },\n    Romanian: Romanian,\n    Romansh: Romansh,\n    Romany: Romany,\n    Rundi: Rundi,\n    Russian: Russian,\n    Sakan: Sakan,\n    \"Salishan languages\": {\n      name: \"Salishan languages\",\n      names: [\"Salishan languages\"],\n      \"iso639-2\": \"sal\",\n      \"iso639-1\": null\n    },\n    \"Samaritan Aramaic\": {\n      name: \"Samaritan Aramaic\",\n      names: [\"Samaritan Aramaic\"],\n      \"iso639-2\": \"sam\",\n      \"iso639-1\": null\n    },\n    \"Sami languages\": {\n      name: \"Sami languages\",\n      names: [\"Sami languages\"],\n      \"iso639-2\": \"smi\",\n      \"iso639-1\": null\n    },\n    Samoan: Samoan,\n    Sandawe: Sandawe,\n    Sango: Sango,\n    Sanskrit: Sanskrit,\n    Santali: Santali,\n    Sardinian: Sardinian,\n    Sasak: Sasak,\n    \"Saxon, Low\": {\n      name: \"Saxon, Low\",\n      names: [\"Low German\", \"Low Saxon\", \"German, Low\", \"Saxon, Low\"],\n      \"iso639-2\": \"nds\",\n      \"iso639-1\": null\n    },\n    Scots: Scots,\n    \"Scottish Gaelic\": {\n      name: \"Scottish Gaelic\",\n      names: [\"Gaelic\", \"Scottish Gaelic\"],\n      \"iso639-2\": \"gla\",\n      \"iso639-1\": \"gd\"\n    },\n    Selkup: Selkup,\n    \"Semitic languages\": {\n      name: \"Semitic languages\",\n      names: [\"Semitic languages\"],\n      \"iso639-2\": \"sem\",\n      \"iso639-1\": null\n    },\n    Sepedi: Sepedi,\n    Serbian: Serbian,\n    Serer: Serer,\n    Shan: Shan,\n    Shona: Shona,\n    \"Sichuan Yi\": {\n      name: \"Sichuan Yi\",\n      names: [\"Sichuan Yi\", \"Nuosu\"],\n      \"iso639-2\": \"iii\",\n      \"iso639-1\": \"ii\"\n    },\n    Sicilian: Sicilian,\n    Sidamo: Sidamo,\n    \"Sign Languages\": {\n      name: \"Sign Languages\",\n      names: [\"Sign Languages\"],\n      \"iso639-2\": \"sgn\",\n      \"iso639-1\": null\n    },\n    Siksika: Siksika,\n    Sindhi: Sindhi,\n    Sinhala: Sinhala,\n    Sinhalese: Sinhalese,\n    \"Sino-Tibetan languages\": {\n      name: \"Sino-Tibetan languages\",\n      names: [\"Sino-Tibetan languages\"],\n      \"iso639-2\": \"sit\",\n      \"iso639-1\": null\n    },\n    \"Siouan languages\": {\n      name: \"Siouan languages\",\n      names: [\"Siouan languages\"],\n      \"iso639-2\": \"sio\",\n      \"iso639-1\": null\n    },\n    \"Skolt Sami\": {\n      name: \"Skolt Sami\",\n      names: [\"Skolt Sami\"],\n      \"iso639-2\": \"sms\",\n      \"iso639-1\": null\n    },\n    \"Slave (Athapascan)\": {\n      name: \"Slave (Athapascan)\",\n      names: [\"Slave (Athapascan)\"],\n      \"iso639-2\": \"den\",\n      \"iso639-1\": null\n    },\n    \"Slavic languages\": {\n      name: \"Slavic languages\",\n      names: [\"Slavic languages\"],\n      \"iso639-2\": \"sla\",\n      \"iso639-1\": null\n    },\n    Slovak: Slovak,\n    Slovenian: Slovenian,\n    Sogdian: Sogdian,\n    Somali: Somali,\n    \"Songhai languages\": {\n      name: \"Songhai languages\",\n      names: [\"Songhai languages\"],\n      \"iso639-2\": \"son\",\n      \"iso639-1\": null\n    },\n    Soninke: Soninke,\n    \"Sorbian languages\": {\n      name: \"Sorbian languages\",\n      names: [\"Sorbian languages\"],\n      \"iso639-2\": \"wen\",\n      \"iso639-1\": null\n    },\n    \"Sotho, Northern\": {\n      name: \"Sotho, Northern\",\n      names: [\"Pedi\", \"Sepedi\", \"Northern Sotho\"],\n      \"iso639-2\": \"nso\",\n      \"iso639-1\": null\n    },\n    \"Sotho, Southern\": {\n      name: \"Sotho, Southern\",\n      names: [\"Sotho, Southern\"],\n      \"iso639-2\": \"sot\",\n      \"iso639-1\": \"st\"\n    },\n    \"South American Indian languages\": {\n      name: \"South American Indian languages\",\n      names: [\"South American Indian languages\"],\n      \"iso639-2\": \"sai\",\n      \"iso639-1\": null\n    },\n    \"South Ndebele\": {\n      name: \"South Ndebele\",\n      names: [\"Ndebele, South\", \"South Ndebele\"],\n      \"iso639-2\": \"nbl\",\n      \"iso639-1\": \"nr\"\n    },\n    \"Southern Altai\": {\n      name: \"Southern Altai\",\n      names: [\"Southern Altai\"],\n      \"iso639-2\": \"alt\",\n      \"iso639-1\": null\n    },\n    \"Southern Sami\": {\n      name: \"Southern Sami\",\n      names: [\"Southern Sami\"],\n      \"iso639-2\": \"sma\",\n      \"iso639-1\": null\n    },\n    Spanish: Spanish,\n    \"Sranan Tongo\": {\n      name: \"Sranan Tongo\",\n      names: [\"Sranan Tongo\"],\n      \"iso639-2\": \"srn\",\n      \"iso639-1\": null\n    },\n    \"Standard Moroccan Tamazight\": {\n      name: \"Standard Moroccan Tamazight\",\n      names: [\"Standard Moroccan Tamazight\"],\n      \"iso639-2\": \"zgh\",\n      \"iso639-1\": null\n    },\n    Sukuma: Sukuma,\n    Sumerian: Sumerian,\n    Sundanese: Sundanese,\n    Susu: Susu,\n    Swahili: Swahili,\n    Swati: Swati,\n    Swedish: Swedish,\n    \"Swiss German\": {\n      name: \"Swiss German\",\n      names: [\"Swiss German\", \"Alemannic\", \"Alsatian\"],\n      \"iso639-2\": \"gsw\",\n      \"iso639-1\": null\n    },\n    Syriac: Syriac,\n    Tagalog: Tagalog,\n    Tahitian: Tahitian,\n    \"Tai languages\": {\n      name: \"Tai languages\",\n      names: [\"Tai languages\"],\n      \"iso639-2\": \"tai\",\n      \"iso639-1\": null\n    },\n    Tajik: Tajik,\n    Tamashek: Tamashek,\n    Tamil: Tamil,\n    Tatar: Tatar,\n    Telugu: Telugu,\n    Tereno: Tereno,\n    Tetum: Tetum,\n    Thai: Thai,\n    Tibetan: Tibetan,\n    Tigre: Tigre,\n    Tigrinya: Tigrinya,\n    Timne: Timne,\n    Tiv: Tiv,\n    \"tlhIngan-Hol\": {\n      name: \"tlhIngan-Hol\",\n      names: [\"Klingon\", \"tlhIngan-Hol\"],\n      \"iso639-2\": \"tlh\",\n      \"iso639-1\": null\n    },\n    Tlingit: Tlingit,\n    \"Tok Pisin\": {\n      name: \"Tok Pisin\",\n      names: [\"Tok Pisin\"],\n      \"iso639-2\": \"tpi\",\n      \"iso639-1\": null\n    },\n    Tokelau: Tokelau,\n    \"Tonga (Nyasa)\": {\n      name: \"Tonga (Nyasa)\",\n      names: [\"Tonga (Nyasa)\"],\n      \"iso639-2\": \"tog\",\n      \"iso639-1\": null\n    },\n    \"Tonga (Tonga Islands)\": {\n      name: \"Tonga (Tonga Islands)\",\n      names: [\"Tonga (Tonga Islands)\"],\n      \"iso639-2\": \"ton\",\n      \"iso639-1\": \"to\"\n    },\n    Tsimshian: Tsimshian,\n    Tsonga: Tsonga,\n    Tswana: Tswana,\n    Tumbuka: Tumbuka,\n    \"Tupi languages\": {\n      name: \"Tupi languages\",\n      names: [\"Tupi languages\"],\n      \"iso639-2\": \"tup\",\n      \"iso639-1\": null\n    },\n    Turkish: Turkish,\n    \"Turkish, Ottoman (1500-1928)\": {\n      name: \"Turkish, Ottoman (1500-1928)\",\n      names: [\"Turkish, Ottoman (1500-1928)\"],\n      \"iso639-2\": \"ota\",\n      \"iso639-1\": null\n    },\n    Turkmen: Turkmen,\n    Tuvalu: Tuvalu,\n    Tuvinian: Tuvinian,\n    Twi: Twi,\n    Udmurt: Udmurt,\n    Ugaritic: Ugaritic,\n    Uighur: Uighur,\n    Ukrainian: Ukrainian,\n    Umbundu: Umbundu,\n    \"Uncoded languages\": {\n      name: \"Uncoded languages\",\n      names: [\"Uncoded languages\"],\n      \"iso639-2\": \"mis\",\n      \"iso639-1\": null\n    },\n    Undetermined: Undetermined,\n    \"Upper Sorbian\": {\n      name: \"Upper Sorbian\",\n      names: [\"Upper Sorbian\"],\n      \"iso639-2\": \"hsb\",\n      \"iso639-1\": null\n    },\n    Urdu: Urdu,\n    Uyghur: Uyghur,\n    Uzbek: Uzbek,\n    Vai: Vai,\n    Valencian: Valencian,\n    Venda: Venda,\n    Vietnamese: Vietnamese,\n    \"Volapük\": {\n      name: \"Volapük\",\n      names: [\"Volapük\"],\n      \"iso639-2\": \"vol\",\n      \"iso639-1\": \"vo\"\n    },\n    Votic: Votic,\n    \"Wakashan languages\": {\n      name: \"Wakashan languages\",\n      names: [\"Wakashan languages\"],\n      \"iso639-2\": \"wak\",\n      \"iso639-1\": null\n    },\n    Walloon: Walloon,\n    Waray: Waray,\n    Washo: Washo,\n    Welsh: Welsh,\n    \"Western Frisian\": {\n      name: \"Western Frisian\",\n      names: [\"Western Frisian\"],\n      \"iso639-2\": \"fry\",\n      \"iso639-1\": \"fy\"\n    },\n    \"Western Pahari languages\": {\n      name: \"Western Pahari languages\",\n      names: [\"Himachali languages\", \"Western Pahari languages\"],\n      \"iso639-2\": \"him\",\n      \"iso639-1\": null\n    },\n    Wolaitta: Wolaitta,\n    Wolaytta: Wolaytta,\n    Wolof: Wolof,\n    Xhosa: Xhosa,\n    Yakut: Yakut,\n    Yao: Yao,\n    Yapese: Yapese,\n    Yiddish: Yiddish,\n    Yoruba: Yoruba,\n    \"Yupik languages\": {\n      name: \"Yupik languages\",\n      names: [\"Yupik languages\"],\n      \"iso639-2\": \"ypk\",\n      \"iso639-1\": null\n    },\n    \"Zande languages\": {\n      name: \"Zande languages\",\n      names: [\"Zande languages\"],\n      \"iso639-2\": \"znd\",\n      \"iso639-1\": null\n    },\n    Zapotec: Zapotec,\n    Zaza: Zaza,\n    Zazaki: Zazaki,\n    Zenaga: Zenaga,\n    Zhuang: Zhuang,\n    Zulu: Zulu,\n    Zuni: Zuni\n  };\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  var locales = [];\n  var isoKeys = Object.keys(iso);\n  Object.keys(lcid).map(function (id) {\n    var locale = lcid[id];\n    var isoLanguage = isoKeys.find(function (name) {\n      return name.toLowerCase() === locale.language.toLowerCase();\n    });\n\n    if (locale.location && isoLanguage) {\n      var _locales$push;\n\n      locales.push((_locales$push = {}, _defineProperty(_locales$push, \"name\", locale.language), _defineProperty(_locales$push, \"location\", locale.location), _defineProperty(_locales$push, \"tag\", locale.tag), _defineProperty(_locales$push, \"lcid\", locale.id), _defineProperty(_locales$push, \"iso639-2\", iso[isoLanguage][\"iso639-2\"]), _defineProperty(_locales$push, \"iso639-1\", iso[isoLanguage][\"iso639-1\"]), _locales$push));\n    }\n  });\n  var defaultLocales = {\n    ar: \"ar-SA\",\n    ca: \"ca-ES\",\n    da: \"da-DK\",\n    en: \"en-US\",\n    ko: \"ko-KR\",\n    pa: \"pa-IN\",\n    pt: \"pt-BR\",\n    sv: \"sv-SE\"\n  };\n  /**\n   * Converts a 2-digit language into a full language-LOCATION locale.\n   * @param {String} locale\n   */\n\n  function findLocale(locale) {\n    if (typeof locale !== \"string\" || locale.length === 5) return locale;\n    if (defaultLocales[locale]) return defaultLocales[locale];\n    var list = locales.filter(function (d) {\n      return d[\"iso639-1\"] === locale;\n    });\n    if (!list.length) return locale;else if (list.length === 1) return list[0].tag;else if (list.find(function (d) {\n      return d.tag === \"\".concat(locale, \"-\").concat(locale.toUpperCase());\n    })) return \"\".concat(locale, \"-\").concat(locale.toUpperCase());else return list[0].tag;\n  }\n  /**\n      @function s\n      @desc Returns 4 random characters, used for constructing unique identifiers.\n      @private\n  */\n\n\n  function s() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n  /**\n      @function uuid\n      @summary Returns a unique identifier.\n  */\n\n\n  function uuid() {\n    return \"\".concat(s()).concat(s(), \"-\").concat(s(), \"-\").concat(s(), \"-\").concat(s(), \"-\").concat(s()).concat(s()).concat(s());\n  }\n  /**\n      @constant RESET\n      @desc String constant used to reset an individual config property.\n  */\n\n\n  var RESET = \"D3PLUS-COMMON-RESET\";\n  var esES = {\n    \"and\": \"y\",\n    \"Back\": \"Atrás\",\n    \"Click to Expand\": \"Clic para Ampliar\",\n    \"Click to Hide\": \"Clic para Ocultar\",\n    \"Click to Highlight\": \"Clic para Resaltar\",\n    \"Click to Reset\": \"Clic para Restablecer\",\n    \"Download\": \"Descargar\",\n    \"Loading Visualization\": \"Cargando Visualización\",\n    \"No Data Available\": \"Datos No Disponibles\",\n    \"Powered by D3plus\": \"Funciona con D3plus\",\n    \"Share\": \"Porcentaje\",\n    \"Shift+Click to Hide\": \"Mayús+Clic para Ocultar\",\n    \"Total\": \"Total\",\n    \"Values\": \"Valores\"\n  };\n  var dictionaries = {\n    \"es-ES\": esES\n  };\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n  /**\n      @desc Recursive function that resets nested Object configs.\n      @param {Object} obj\n      @param {Object} defaults\n      @private\n  */\n\n\n  function nestedReset(obj, defaults) {\n    if (isObject(obj)) {\n      for (var nestedKey in obj) {\n        if ({}.hasOwnProperty.call(obj, nestedKey) && !nestedKey.startsWith(\"_\")) {\n          var defaultValue = defaults && isObject(defaults) ? defaults[nestedKey] : undefined;\n\n          if (obj[nestedKey] === RESET) {\n            if (defaultValue) obj[nestedKey] = defaultValue;else delete obj[nestedKey];\n          } else if (isObject(obj[nestedKey])) {\n            nestedReset(obj[nestedKey], defaultValue);\n          }\n        }\n      }\n    }\n  }\n  /**\n   * @desc finds all prototype methods of a class and it's parent classes\n   * @param {*} obj\n   * @private\n   */\n\n\n  function getAllMethods(obj) {\n    var props = [];\n\n    do {\n      props = props.concat(Object.getOwnPropertyNames(obj));\n      obj = Object.getPrototypeOf(obj);\n    } while (obj && obj !== Object.prototype);\n\n    return props.filter(function (e) {\n      return e.indexOf(\"_\") !== 0 && ![\"config\", \"constructor\", \"parent\", \"render\"].includes(e);\n    });\n  }\n  /**\n      @class BaseClass\n      @summary An abstract class that contains some global methods and functionality.\n  */\n\n\n  var BaseClass = /*#__PURE__*/function () {\n    /**\n        @memberof BaseClass\n        @desc Invoked when creating a new class instance, and sets any default parameters.\n        @private\n    */\n    function BaseClass() {\n      var _this = this;\n\n      _classCallCheck(this, BaseClass);\n\n      this._locale = \"en-US\";\n      this._on = {};\n      this._parent = {};\n\n      this._translate = function (d) {\n        var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this._locale;\n        var dictionary = dictionaries[locale];\n        return dictionary && dictionary[d] ? dictionary[d] : d;\n      };\n\n      this._uuid = uuid();\n    }\n    /**\n        @memberof BaseClass\n        @desc If *value* is specified, sets the methods that correspond to the key/value pairs and returns this class. If *value* is not specified, returns the current configuration.\n        @param {Object} [*value*]\n        @chainable\n    */\n\n\n    _createClass(BaseClass, [{\n      key: \"config\",\n      value: function config(_) {\n        var _this2 = this;\n\n        if (!this._configDefault) {\n          var config = {};\n          getAllMethods(this.__proto__).forEach(function (k) {\n            var v = _this2[k]();\n\n            if (v !== _this2) config[k] = isObject(v) ? assign({}, v) : v;\n          });\n          this._configDefault = config;\n        }\n\n        if (arguments.length) {\n          for (var k in _) {\n            if ({}.hasOwnProperty.call(_, k) && k in this) {\n              var v = _[k];\n\n              if (v === RESET) {\n                if (k === \"on\") this._on = this._configDefault[k];else this[k](this._configDefault[k]);\n              } else {\n                nestedReset(v, this._configDefault[k]);\n                this[k](v);\n              }\n            }\n          }\n\n          return this;\n        } else {\n          var _config = {};\n          getAllMethods(this.__proto__).forEach(function (k) {\n            _config[k] = _this2[k]();\n          });\n          return _config;\n        }\n      }\n      /**\n          @memberof BaseClass\n          @desc Sets the locale used for all text and number formatting. This method supports the locales defined in [d3plus-format](https://github.com/d3plus/d3plus-format/blob/master/src/locale.js). The locale can be defined as a complex Object (like in d3plus-format), a locale code (like \"en-US\"), or a 2-digit language code (like \"en\"). If a 2-digit code is provided, the \"findLocale\" function is used to identify the most approximate locale from d3plus-format.\n          @param {Object|String} [*value* = \"en-US\"]\n          @chainable\n          @example\n          {\n            separator: \"\",\n            suffixes: [\"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"B\", \"t\", \"q\", \"Q\", \"Z\", \"Y\"],\n            grouping: [3],\n            delimiters: {\n              thousands: \",\",\n              decimal: \".\"\n            },\n            currency: [\"$\", \"\"]\n          }\n      */\n\n    }, {\n      key: \"locale\",\n      value: function locale(_) {\n        return arguments.length ? (this._locale = findLocale(_), this) : this._locale;\n      }\n      /**\n          @memberof BaseClass\n          @desc Adds or removes a *listener* to each object for the specified event *typenames*. If a *listener* is not specified, returns the currently assigned listener for the specified event *typename*. Mirrors the core [d3-selection](https://github.com/d3/d3-selection#selection_on) behavior.\n          @param {String} [*typenames*]\n          @param {Function} [*listener*]\n          @chainable\n          @example <caption>By default, listeners apply globally to all objects, however, passing a namespace with the class name gives control over specific elements:</caption>\n      new Plot\n      .on(\"click.Shape\", function(d) {\n        console.log(\"data for shape clicked:\", d);\n      })\n      .on(\"click.Legend\", function(d) {\n        console.log(\"data for legend clicked:\", d);\n      })\n      */\n\n    }, {\n      key: \"on\",\n      value: function on(_, f) {\n        return arguments.length === 2 ? (this._on[_] = f, this) : arguments.length ? typeof _ === \"string\" ? this._on[_] : (this._on = Object.assign({}, this._on, _), this) : this._on;\n      }\n      /**\n          @memberof Viz\n          @desc If *value* is specified, sets the parent config used by the wrapper and returns the current class instance.\n          @param {Object} [*value*]\n          @chainable\n      */\n\n    }, {\n      key: \"parent\",\n      value: function parent(_) {\n        return arguments.length ? (this._parent = _, this) : this._parent;\n      }\n      /**\n          @memberof BaseClass\n          @desc Defines how informational text strings should be displayed. By default, this function will try to find the string in question (which is the first argument provided to this function) inside of an internally managed translation Object. If you'd like to override to use custom text, simply pass this method your own custom formatting function.\n          @param {Function} [*value*]\n          @chainable\n          @example <caption>For example, if we wanted to only change the string \"Back\" and allow all other string to return in English:</caption>\n      .translate(function(d) {\n      return d === \"Back\" ? \"Get outta here\" : d;\n      })\n      */\n\n    }, {\n      key: \"translate\",\n      value: function translate(_) {\n        return arguments.length ? (this._translate = _, this) : this._translate;\n      }\n      /**\n          @memberof Viz\n          @desc If *value* is specified, sets the config method for each shape and returns the current class instance.\n          @param {Object} [*value*]\n          @chainable\n      */\n\n    }, {\n      key: \"shapeConfig\",\n      value: function shapeConfig(_) {\n        return arguments.length ? (this._shapeConfig = assign(this._shapeConfig, _), this) : this._shapeConfig;\n      }\n    }]);\n\n    return BaseClass;\n  }();\n  /**\n      @function constant\n      @desc Wraps non-function variables in a simple return function.\n      @param {Array|Number|Object|String} value The value to be returned from the function.\n      @example <caption>this</caption>\n  constant(42);\n      @example <caption>returns this</caption>\n  function() {\n    return 42;\n  }\n  */\n\n\n  function constant$2(value) {\n    return function constant() {\n      return value;\n    };\n  }\n  /**\n   @function parseSides\n   @desc Converts a string of directional CSS shorthand values into an object with the values expanded.\n   @param {String|Number} sides The CSS shorthand string to expand.\n   */\n\n\n  function parseSides(sides) {\n    var values;\n    if (typeof sides === \"number\") values = [sides];else values = sides.split(/\\s+/);\n    if (values.length === 1) values = [values[0], values[0], values[0], values[0]];else if (values.length === 2) values = values.concat(values);else if (values.length === 3) values.push(values[1]);\n    return [\"top\", \"right\", \"bottom\", \"left\"].reduce(function (acc, direction, i) {\n      var value = parseFloat(values[i]);\n      acc[direction] = value || 0;\n      return acc;\n    }, {});\n  } // scraped from http://www.fileformat.info/info/unicode/category/Mc/list.htm\n  // and http://www.fileformat.info/info/unicode/category/Mn/list.htm\n  // JSON.stringify([].slice.call(document.getElementsByClassName(\"table-list\")[0].getElementsByTagName(\"tr\")).filter(function(d){ return d.getElementsByTagName(\"a\").length && d.getElementsByTagName(\"a\")[0].innerHTML.length === 6; }).map(function(d){ return d.getElementsByTagName(\"a\")[0].innerHTML.replace(\"U\", \"u\").replace(\"+\", \"\"); }).sort());\n  // The following unicode characters combine to form new characters and should never be split from surrounding characters.\n\n\n  var a = [\"u0903\", \"u093B\", \"u093E\", \"u093F\", \"u0940\", \"u0949\", \"u094A\", \"u094B\", \"u094C\", \"u094E\", \"u094F\", \"u0982\", \"u0983\", \"u09BE\", \"u09BF\", \"u09C0\", \"u09C7\", \"u09C8\", \"u09CB\", \"u09CC\", \"u09D7\", \"u0A03\", \"u0A3E\", \"u0A3F\", \"u0A40\", \"u0A83\", \"u0ABE\", \"u0ABF\", \"u0AC0\", \"u0AC9\", \"u0ACB\", \"u0ACC\", \"u0B02\", \"u0B03\", \"u0B3E\", \"u0B40\", \"u0B47\", \"u0B48\", \"u0B4B\", \"u0B4C\", \"u0B57\", \"u0BBE\", \"u0BBF\", \"u0BC1\", \"u0BC2\", \"u0BC6\", \"u0BC7\", \"u0BC8\", \"u0BCA\", \"u0BCB\", \"u0BCC\", \"u0BD7\", \"u0C01\", \"u0C02\", \"u0C03\", \"u0C41\", \"u0C42\", \"u0C43\", \"u0C44\", \"u0C82\", \"u0C83\", \"u0CBE\", \"u0CC0\", \"u0CC1\", \"u0CC2\", \"u0CC3\", \"u0CC4\", \"u0CC7\", \"u0CC8\", \"u0CCA\", \"u0CCB\", \"u0CD5\", \"u0CD6\", \"u0D02\", \"u0D03\", \"u0D3E\", \"u0D3F\", \"u0D40\", \"u0D46\", \"u0D47\", \"u0D48\", \"u0D4A\", \"u0D4B\", \"u0D4C\", \"u0D57\", \"u0D82\", \"u0D83\", \"u0DCF\", \"u0DD0\", \"u0DD1\", \"u0DD8\", \"u0DD9\", \"u0DDA\", \"u0DDB\", \"u0DDC\", \"u0DDD\", \"u0DDE\", \"u0DDF\", \"u0DF2\", \"u0DF3\", \"u0F3E\", \"u0F3F\", \"u0F7F\", \"u102B\", \"u102C\", \"u1031\", \"u1038\", \"u103B\", \"u103C\", \"u1056\", \"u1057\", \"u1062\", \"u1063\", \"u1064\", \"u1067\", \"u1068\", \"u1069\", \"u106A\", \"u106B\", \"u106C\", \"u106D\", \"u1083\", \"u1084\", \"u1087\", \"u1088\", \"u1089\", \"u108A\", \"u108B\", \"u108C\", \"u108F\", \"u109A\", \"u109B\", \"u109C\", \"u17B6\", \"u17BE\", \"u17BF\", \"u17C0\", \"u17C1\", \"u17C2\", \"u17C3\", \"u17C4\", \"u17C5\", \"u17C7\", \"u17C8\", \"u1923\", \"u1924\", \"u1925\", \"u1926\", \"u1929\", \"u192A\", \"u192B\", \"u1930\", \"u1931\", \"u1933\", \"u1934\", \"u1935\", \"u1936\", \"u1937\", \"u1938\", \"u1A19\", \"u1A1A\", \"u1A55\", \"u1A57\", \"u1A61\", \"u1A63\", \"u1A64\", \"u1A6D\", \"u1A6E\", \"u1A6F\", \"u1A70\", \"u1A71\", \"u1A72\", \"u1B04\", \"u1B35\", \"u1B3B\", \"u1B3D\", \"u1B3E\", \"u1B3F\", \"u1B40\", \"u1B41\", \"u1B43\", \"u1B44\", \"u1B82\", \"u1BA1\", \"u1BA6\", \"u1BA7\", \"u1BAA\", \"u1BE7\", \"u1BEA\", \"u1BEB\", \"u1BEC\", \"u1BEE\", \"u1BF2\", \"u1BF3\", \"u1C24\", \"u1C25\", \"u1C26\", \"u1C27\", \"u1C28\", \"u1C29\", \"u1C2A\", \"u1C2B\", \"u1C34\", \"u1C35\", \"u1CE1\", \"u1CF2\", \"u1CF3\", \"u302E\", \"u302F\", \"uA823\", \"uA824\", \"uA827\", \"uA880\", \"uA881\", \"uA8B4\", \"uA8B5\", \"uA8B6\", \"uA8B7\", \"uA8B8\", \"uA8B9\", \"uA8BA\", \"uA8BB\", \"uA8BC\", \"uA8BD\", \"uA8BE\", \"uA8BF\", \"uA8C0\", \"uA8C1\", \"uA8C2\", \"uA8C3\", \"uA952\", \"uA953\", \"uA983\", \"uA9B4\", \"uA9B5\", \"uA9BA\", \"uA9BB\", \"uA9BD\", \"uA9BE\", \"uA9BF\", \"uA9C0\", \"uAA2F\", \"uAA30\", \"uAA33\", \"uAA34\", \"uAA4D\", \"uAA7B\", \"uAA7D\", \"uAAEB\", \"uAAEE\", \"uAAEF\", \"uAAF5\", \"uABE3\", \"uABE4\", \"uABE6\", \"uABE7\", \"uABE9\", \"uABEA\", \"uABEC\"];\n  var b = [\"u0300\", \"u0301\", \"u0302\", \"u0303\", \"u0304\", \"u0305\", \"u0306\", \"u0307\", \"u0308\", \"u0309\", \"u030A\", \"u030B\", \"u030C\", \"u030D\", \"u030E\", \"u030F\", \"u0310\", \"u0311\", \"u0312\", \"u0313\", \"u0314\", \"u0315\", \"u0316\", \"u0317\", \"u0318\", \"u0319\", \"u031A\", \"u031B\", \"u031C\", \"u031D\", \"u031E\", \"u031F\", \"u0320\", \"u0321\", \"u0322\", \"u0323\", \"u0324\", \"u0325\", \"u0326\", \"u0327\", \"u0328\", \"u0329\", \"u032A\", \"u032B\", \"u032C\", \"u032D\", \"u032E\", \"u032F\", \"u0330\", \"u0331\", \"u0332\", \"u0333\", \"u0334\", \"u0335\", \"u0336\", \"u0337\", \"u0338\", \"u0339\", \"u033A\", \"u033B\", \"u033C\", \"u033D\", \"u033E\", \"u033F\", \"u0340\", \"u0341\", \"u0342\", \"u0343\", \"u0344\", \"u0345\", \"u0346\", \"u0347\", \"u0348\", \"u0349\", \"u034A\", \"u034B\", \"u034C\", \"u034D\", \"u034E\", \"u034F\", \"u0350\", \"u0351\", \"u0352\", \"u0353\", \"u0354\", \"u0355\", \"u0356\", \"u0357\", \"u0358\", \"u0359\", \"u035A\", \"u035B\", \"u035C\", \"u035D\", \"u035E\", \"u035F\", \"u0360\", \"u0361\", \"u0362\", \"u0363\", \"u0364\", \"u0365\", \"u0366\", \"u0367\", \"u0368\", \"u0369\", \"u036A\", \"u036B\", \"u036C\", \"u036D\", \"u036E\", \"u036F\", \"u0483\", \"u0484\", \"u0485\", \"u0486\", \"u0487\", \"u0591\", \"u0592\", \"u0593\", \"u0594\", \"u0595\", \"u0596\", \"u0597\", \"u0598\", \"u0599\", \"u059A\", \"u059B\", \"u059C\", \"u059D\", \"u059E\", \"u059F\", \"u05A0\", \"u05A1\", \"u05A2\", \"u05A3\", \"u05A4\", \"u05A5\", \"u05A6\", \"u05A7\", \"u05A8\", \"u05A9\", \"u05AA\", \"u05AB\", \"u05AC\", \"u05AD\", \"u05AE\", \"u05AF\", \"u05B0\", \"u05B1\", \"u05B2\", \"u05B3\", \"u05B4\", \"u05B5\", \"u05B6\", \"u05B7\", \"u05B8\", \"u05B9\", \"u05BA\", \"u05BB\", \"u05BC\", \"u05BD\", \"u05BF\", \"u05C1\", \"u05C2\", \"u05C4\", \"u05C5\", \"u05C7\", \"u0610\", \"u0611\", \"u0612\", \"u0613\", \"u0614\", \"u0615\", \"u0616\", \"u0617\", \"u0618\", \"u0619\", \"u061A\", \"u064B\", \"u064C\", \"u064D\", \"u064E\", \"u064F\", \"u0650\", \"u0651\", \"u0652\", \"u0653\", \"u0654\", \"u0655\", \"u0656\", \"u0657\", \"u0658\", \"u0659\", \"u065A\", \"u065B\", \"u065C\", \"u065D\", \"u065E\", \"u065F\", \"u0670\", \"u06D6\", \"u06D7\", \"u06D8\", \"u06D9\", \"u06DA\", \"u06DB\", \"u06DC\", \"u06DF\", \"u06E0\", \"u06E1\", \"u06E2\", \"u06E3\", \"u06E4\", \"u06E7\", \"u06E8\", \"u06EA\", \"u06EB\", \"u06EC\", \"u06ED\", \"u0711\", \"u0730\", \"u0731\", \"u0732\", \"u0733\", \"u0734\", \"u0735\", \"u0736\", \"u0737\", \"u0738\", \"u0739\", \"u073A\", \"u073B\", \"u073C\", \"u073D\", \"u073E\", \"u073F\", \"u0740\", \"u0741\", \"u0742\", \"u0743\", \"u0744\", \"u0745\", \"u0746\", \"u0747\", \"u0748\", \"u0749\", \"u074A\", \"u07A6\", \"u07A7\", \"u07A8\", \"u07A9\", \"u07AA\", \"u07AB\", \"u07AC\", \"u07AD\", \"u07AE\", \"u07AF\", \"u07B0\", \"u07EB\", \"u07EC\", \"u07ED\", \"u07EE\", \"u07EF\", \"u07F0\", \"u07F1\", \"u07F2\", \"u07F3\", \"u0816\", \"u0817\", \"u0818\", \"u0819\", \"u081B\", \"u081C\", \"u081D\", \"u081E\", \"u081F\", \"u0820\", \"u0821\", \"u0822\", \"u0823\", \"u0825\", \"u0826\", \"u0827\", \"u0829\", \"u082A\", \"u082B\", \"u082C\", \"u082D\", \"u0859\", \"u085A\", \"u085B\", \"u08E3\", \"u08E4\", \"u08E5\", \"u08E6\", \"u08E7\", \"u08E8\", \"u08E9\", \"u08EA\", \"u08EB\", \"u08EC\", \"u08ED\", \"u08EE\", \"u08EF\", \"u08F0\", \"u08F1\", \"u08F2\", \"u08F3\", \"u08F4\", \"u08F5\", \"u08F6\", \"u08F7\", \"u08F8\", \"u08F9\", \"u08FA\", \"u08FB\", \"u08FC\", \"u08FD\", \"u08FE\", \"u08FF\", \"u0900\", \"u0901\", \"u0902\", \"u093A\", \"u093C\", \"u0941\", \"u0942\", \"u0943\", \"u0944\", \"u0945\", \"u0946\", \"u0947\", \"u0948\", \"u094D\", \"u0951\", \"u0952\", \"u0953\", \"u0954\", \"u0955\", \"u0956\", \"u0957\", \"u0962\", \"u0963\", \"u0981\", \"u09BC\", \"u09C1\", \"u09C2\", \"u09C3\", \"u09C4\", \"u09CD\", \"u09E2\", \"u09E3\", \"u0A01\", \"u0A02\", \"u0A3C\", \"u0A41\", \"u0A42\", \"u0A47\", \"u0A48\", \"u0A4B\", \"u0A4C\", \"u0A4D\", \"u0A51\", \"u0A70\", \"u0A71\", \"u0A75\", \"u0A81\", \"u0A82\", \"u0ABC\", \"u0AC1\", \"u0AC2\", \"u0AC3\", \"u0AC4\", \"u0AC5\", \"u0AC7\", \"u0AC8\", \"u0ACD\", \"u0AE2\", \"u0AE3\", \"u0B01\", \"u0B3C\", \"u0B3F\", \"u0B41\", \"u0B42\", \"u0B43\", \"u0B44\", \"u0B4D\", \"u0B56\", \"u0B62\", \"u0B63\", \"u0B82\", \"u0BC0\", \"u0BCD\", \"u0C00\", \"u0C3E\", \"u0C3F\", \"u0C40\", \"u0C46\", \"u0C47\", \"u0C48\", \"u0C4A\", \"u0C4B\", \"u0C4C\", \"u0C4D\", \"u0C55\", \"u0C56\", \"u0C62\", \"u0C63\", \"u0C81\", \"u0CBC\", \"u0CBF\", \"u0CC6\", \"u0CCC\", \"u0CCD\", \"u0CE2\", \"u0CE3\", \"u0D01\", \"u0D41\", \"u0D42\", \"u0D43\", \"u0D44\", \"u0D4D\", \"u0D62\", \"u0D63\", \"u0DCA\", \"u0DD2\", \"u0DD3\", \"u0DD4\", \"u0DD6\", \"u0E31\", \"u0E34\", \"u0E35\", \"u0E36\", \"u0E37\", \"u0E38\", \"u0E39\", \"u0E3A\", \"u0E47\", \"u0E48\", \"u0E49\", \"u0E4A\", \"u0E4B\", \"u0E4C\", \"u0E4D\", \"u0E4E\", \"u0EB1\", \"u0EB4\", \"u0EB5\", \"u0EB6\", \"u0EB7\", \"u0EB8\", \"u0EB9\", \"u0EBB\", \"u0EBC\", \"u0EC8\", \"u0EC9\", \"u0ECA\", \"u0ECB\", \"u0ECC\", \"u0ECD\", \"u0F18\", \"u0F19\", \"u0F35\", \"u0F37\", \"u0F39\", \"u0F71\", \"u0F72\", \"u0F73\", \"u0F74\", \"u0F75\", \"u0F76\", \"u0F77\", \"u0F78\", \"u0F79\", \"u0F7A\", \"u0F7B\", \"u0F7C\", \"u0F7D\", \"u0F7E\", \"u0F80\", \"u0F81\", \"u0F82\", \"u0F83\", \"u0F84\", \"u0F86\", \"u0F87\", \"u0F8D\", \"u0F8E\", \"u0F8F\", \"u0F90\", \"u0F91\", \"u0F92\", \"u0F93\", \"u0F94\", \"u0F95\", \"u0F96\", \"u0F97\", \"u0F99\", \"u0F9A\", \"u0F9B\", \"u0F9C\", \"u0F9D\", \"u0F9E\", \"u0F9F\", \"u0FA0\", \"u0FA1\", \"u0FA2\", \"u0FA3\", \"u0FA4\", \"u0FA5\", \"u0FA6\", \"u0FA7\", \"u0FA8\", \"u0FA9\", \"u0FAA\", \"u0FAB\", \"u0FAC\", \"u0FAD\", \"u0FAE\", \"u0FAF\", \"u0FB0\", \"u0FB1\", \"u0FB2\", \"u0FB3\", \"u0FB4\", \"u0FB5\", \"u0FB6\", \"u0FB7\", \"u0FB8\", \"u0FB9\", \"u0FBA\", \"u0FBB\", \"u0FBC\", \"u0FC6\", \"u102D\", \"u102E\", \"u102F\", \"u1030\", \"u1032\", \"u1033\", \"u1034\", \"u1035\", \"u1036\", \"u1037\", \"u1039\", \"u103A\", \"u103D\", \"u103E\", \"u1058\", \"u1059\", \"u105E\", \"u105F\", \"u1060\", \"u1071\", \"u1072\", \"u1073\", \"u1074\", \"u1082\", \"u1085\", \"u1086\", \"u108D\", \"u109D\", \"u135D\", \"u135E\", \"u135F\", \"u1712\", \"u1713\", \"u1714\", \"u1732\", \"u1733\", \"u1734\", \"u1752\", \"u1753\", \"u1772\", \"u1773\", \"u17B4\", \"u17B5\", \"u17B7\", \"u17B8\", \"u17B9\", \"u17BA\", \"u17BB\", \"u17BC\", \"u17BD\", \"u17C6\", \"u17C9\", \"u17CA\", \"u17CB\", \"u17CC\", \"u17CD\", \"u17CE\", \"u17CF\", \"u17D0\", \"u17D1\", \"u17D2\", \"u17D3\", \"u17DD\", \"u180B\", \"u180C\", \"u180D\", \"u18A9\", \"u1920\", \"u1921\", \"u1922\", \"u1927\", \"u1928\", \"u1932\", \"u1939\", \"u193A\", \"u193B\", \"u1A17\", \"u1A18\", \"u1A1B\", \"u1A56\", \"u1A58\", \"u1A59\", \"u1A5A\", \"u1A5B\", \"u1A5C\", \"u1A5D\", \"u1A5E\", \"u1A60\", \"u1A62\", \"u1A65\", \"u1A66\", \"u1A67\", \"u1A68\", \"u1A69\", \"u1A6A\", \"u1A6B\", \"u1A6C\", \"u1A73\", \"u1A74\", \"u1A75\", \"u1A76\", \"u1A77\", \"u1A78\", \"u1A79\", \"u1A7A\", \"u1A7B\", \"u1A7C\", \"u1A7F\", \"u1AB0\", \"u1AB1\", \"u1AB2\", \"u1AB3\", \"u1AB4\", \"u1AB5\", \"u1AB6\", \"u1AB7\", \"u1AB8\", \"u1AB9\", \"u1ABA\", \"u1ABB\", \"u1ABC\", \"u1ABD\", \"u1B00\", \"u1B01\", \"u1B02\", \"u1B03\", \"u1B34\", \"u1B36\", \"u1B37\", \"u1B38\", \"u1B39\", \"u1B3A\", \"u1B3C\", \"u1B42\", \"u1B6B\", \"u1B6C\", \"u1B6D\", \"u1B6E\", \"u1B6F\", \"u1B70\", \"u1B71\", \"u1B72\", \"u1B73\", \"u1B80\", \"u1B81\", \"u1BA2\", \"u1BA3\", \"u1BA4\", \"u1BA5\", \"u1BA8\", \"u1BA9\", \"u1BAB\", \"u1BAC\", \"u1BAD\", \"u1BE6\", \"u1BE8\", \"u1BE9\", \"u1BED\", \"u1BEF\", \"u1BF0\", \"u1BF1\", \"u1C2C\", \"u1C2D\", \"u1C2E\", \"u1C2F\", \"u1C30\", \"u1C31\", \"u1C32\", \"u1C33\", \"u1C36\", \"u1C37\", \"u1CD0\", \"u1CD1\", \"u1CD2\", \"u1CD4\", \"u1CD5\", \"u1CD6\", \"u1CD7\", \"u1CD8\", \"u1CD9\", \"u1CDA\", \"u1CDB\", \"u1CDC\", \"u1CDD\", \"u1CDE\", \"u1CDF\", \"u1CE0\", \"u1CE2\", \"u1CE3\", \"u1CE4\", \"u1CE5\", \"u1CE6\", \"u1CE7\", \"u1CE8\", \"u1CED\", \"u1CF4\", \"u1CF8\", \"u1CF9\", \"u1DC0\", \"u1DC1\", \"u1DC2\", \"u1DC3\", \"u1DC4\", \"u1DC5\", \"u1DC6\", \"u1DC7\", \"u1DC8\", \"u1DC9\", \"u1DCA\", \"u1DCB\", \"u1DCC\", \"u1DCD\", \"u1DCE\", \"u1DCF\", \"u1DD0\", \"u1DD1\", \"u1DD2\", \"u1DD3\", \"u1DD4\", \"u1DD5\", \"u1DD6\", \"u1DD7\", \"u1DD8\", \"u1DD9\", \"u1DDA\", \"u1DDB\", \"u1DDC\", \"u1DDD\", \"u1DDE\", \"u1DDF\", \"u1DE0\", \"u1DE1\", \"u1DE2\", \"u1DE3\", \"u1DE4\", \"u1DE5\", \"u1DE6\", \"u1DE7\", \"u1DE8\", \"u1DE9\", \"u1DEA\", \"u1DEB\", \"u1DEC\", \"u1DED\", \"u1DEE\", \"u1DEF\", \"u1DF0\", \"u1DF1\", \"u1DF2\", \"u1DF3\", \"u1DF4\", \"u1DF5\", \"u1DFC\", \"u1DFD\", \"u1DFE\", \"u1DFF\", \"u20D0\", \"u20D1\", \"u20D2\", \"u20D3\", \"u20D4\", \"u20D5\", \"u20D6\", \"u20D7\", \"u20D8\", \"u20D9\", \"u20DA\", \"u20DB\", \"u20DC\", \"u20E1\", \"u20E5\", \"u20E6\", \"u20E7\", \"u20E8\", \"u20E9\", \"u20EA\", \"u20EB\", \"u20EC\", \"u20ED\", \"u20EE\", \"u20EF\", \"u20F0\", \"u2CEF\", \"u2CF0\", \"u2CF1\", \"u2D7F\", \"u2DE0\", \"u2DE1\", \"u2DE2\", \"u2DE3\", \"u2DE4\", \"u2DE5\", \"u2DE6\", \"u2DE7\", \"u2DE8\", \"u2DE9\", \"u2DEA\", \"u2DEB\", \"u2DEC\", \"u2DED\", \"u2DEE\", \"u2DEF\", \"u2DF0\", \"u2DF1\", \"u2DF2\", \"u2DF3\", \"u2DF4\", \"u2DF5\", \"u2DF6\", \"u2DF7\", \"u2DF8\", \"u2DF9\", \"u2DFA\", \"u2DFB\", \"u2DFC\", \"u2DFD\", \"u2DFE\", \"u2DFF\", \"u302A\", \"u302B\", \"u302C\", \"u302D\", \"u3099\", \"u309A\", \"uA66F\", \"uA674\", \"uA675\", \"uA676\", \"uA677\", \"uA678\", \"uA679\", \"uA67A\", \"uA67B\", \"uA67C\", \"uA67D\", \"uA69E\", \"uA69F\", \"uA6F0\", \"uA6F1\", \"uA802\", \"uA806\", \"uA80B\", \"uA825\", \"uA826\", \"uA8C4\", \"uA8E0\", \"uA8E1\", \"uA8E2\", \"uA8E3\", \"uA8E4\", \"uA8E5\", \"uA8E6\", \"uA8E7\", \"uA8E8\", \"uA8E9\", \"uA8EA\", \"uA8EB\", \"uA8EC\", \"uA8ED\", \"uA8EE\", \"uA8EF\", \"uA8F0\", \"uA8F1\", \"uA926\", \"uA927\", \"uA928\", \"uA929\", \"uA92A\", \"uA92B\", \"uA92C\", \"uA92D\", \"uA947\", \"uA948\", \"uA949\", \"uA94A\", \"uA94B\", \"uA94C\", \"uA94D\", \"uA94E\", \"uA94F\", \"uA950\", \"uA951\", \"uA980\", \"uA981\", \"uA982\", \"uA9B3\", \"uA9B6\", \"uA9B7\", \"uA9B8\", \"uA9B9\", \"uA9BC\", \"uA9E5\", \"uAA29\", \"uAA2A\", \"uAA2B\", \"uAA2C\", \"uAA2D\", \"uAA2E\", \"uAA31\", \"uAA32\", \"uAA35\", \"uAA36\", \"uAA43\", \"uAA4C\", \"uAA7C\", \"uAAB0\", \"uAAB2\", \"uAAB3\", \"uAAB4\", \"uAAB7\", \"uAAB8\", \"uAABE\", \"uAABF\", \"uAAC1\", \"uAAEC\", \"uAAED\", \"uAAF6\", \"uABE5\", \"uABE8\", \"uABED\", \"uFB1E\", \"uFE00\", \"uFE01\", \"uFE02\", \"uFE03\", \"uFE04\", \"uFE05\", \"uFE06\", \"uFE07\", \"uFE08\", \"uFE09\", \"uFE0A\", \"uFE0B\", \"uFE0C\", \"uFE0D\", \"uFE0E\", \"uFE0F\", \"uFE20\", \"uFE21\", \"uFE22\", \"uFE23\", \"uFE24\", \"uFE25\", \"uFE26\", \"uFE27\", \"uFE28\", \"uFE29\", \"uFE2A\", \"uFE2B\", \"uFE2C\", \"uFE2D\", \"uFE2E\", \"uFE2F\"];\n  var combiningMarks = a.concat(b);\n  var splitChars = [\"-\", \";\", \":\", \"&\", \"|\", \"u0E2F\", // thai character pairannoi\n  \"u0EAF\", // lao ellipsis\n  \"u0EC6\", // lao ko la (word repetition)\n  \"u0ECC\", // lao cancellation mark\n  \"u104A\", // myanmar sign little section\n  \"u104B\", // myanmar sign section\n  \"u104C\", // myanmar symbol locative\n  \"u104D\", // myanmar symbol completed\n  \"u104E\", // myanmar symbol aforementioned\n  \"u104F\", // myanmar symbol genitive\n  \"u2013\", // en dash\n  \"u2014\", // em dash\n  \"u2027\", // simplified chinese hyphenation point\n  \"u3000\", // simplified chinese ideographic space\n  \"u3001\", // simplified chinese ideographic comma\n  \"u3002\", // simplified chinese ideographic full stop\n  \"uFF0C\", // full-width comma\n  \"uFF5E\" // wave dash\n  ];\n  var prefixChars = [\"'\", \"<\", \"(\", \"{\", \"[\", \"u00AB\", // left-pointing double angle quotation mark\n  \"u300A\", // left double angle bracket\n  \"u3008\" // left angle bracket\n  ];\n  var suffixChars = [\"'\", \">\", \")\", \"}\", \"]\", \".\", \"!\", \"?\", \"/\", \"u00BB\", // right-pointing double angle quotation mark\n  \"u300B\", // right double angle bracket\n  \"u3009\" // right angle bracket\n  ].concat(splitChars);\n  var burmeseRange = \"\\u1000-\\u102A\\u103F-\\u1049\\u1050-\\u1055\";\n  var japaneseRange = \"\\u3040-\\u309F\\u30A0-\\u30FF\\uFF00-\\uFF0B\\uFF0D-\\uFF5D\\uFF5F-\\uFF9F\\u3400-\\u4DBF\";\n  var chineseRange = \"\\u3400-\\u9FBF\";\n  var laoRange = \"\\u0E81-\\u0EAE\\u0EB0-\\u0EC4\\u0EC8-\\u0ECB\\u0ECD-\\u0EDD\";\n  var noSpaceRange = burmeseRange + chineseRange + japaneseRange + laoRange;\n  var splitWords = new RegExp(\"(\\\\\".concat(splitChars.join(\"|\\\\\"), \")*[^\\\\s|\\\\\").concat(splitChars.join(\"|\\\\\"), \"]*(\\\\\").concat(splitChars.join(\"|\\\\\"), \")*\"), \"g\");\n  var noSpaceLanguage = new RegExp(\"[\".concat(noSpaceRange, \"]\"));\n  var splitAllChars = new RegExp(\"(\\\\\".concat(prefixChars.join(\"|\\\\\"), \")*[\").concat(noSpaceRange, \"](\\\\\").concat(suffixChars.join(\"|\\\\\"), \"|\\\\\").concat(combiningMarks.join(\"|\\\\\"), \")*|[a-z0-9]+\"), \"gi\");\n  /**\n      @function textSplit\n      @desc Splits a given sentence into an array of words.\n      @param {String} sentence\n  */\n\n  function textSplit(sentence) {\n    if (!noSpaceLanguage.test(sentence)) return stringify(sentence).match(splitWords).filter(function (w) {\n      return w.length;\n    });\n    return merge(stringify(sentence).match(splitWords).map(function (d) {\n      if (noSpaceLanguage.test(d)) return d.match(splitAllChars);\n      return [d];\n    }));\n  }\n  /**\n      @function textWrap\n      @desc Based on the defined styles and dimensions, breaks a string into an array of strings for each line of text.\n  */\n\n\n  function wrap() {\n    var fontFamily = \"sans-serif\",\n        fontSize = 10,\n        fontWeight = 400,\n        height = 200,\n        lineHeight,\n        maxLines = null,\n        overflow = false,\n        split = textSplit,\n        width = 200;\n    /**\n        The inner return object and wraps the text and returns the line data array.\n        @private\n    */\n\n    function textWrap(sentence) {\n      sentence = stringify(sentence);\n      if (lineHeight === void 0) lineHeight = Math.ceil(fontSize * 1.4);\n      var words = split(sentence);\n      var style = {\n        \"font-family\": fontFamily,\n        \"font-size\": fontSize,\n        \"font-weight\": fontWeight,\n        \"line-height\": lineHeight\n      };\n      var line = 1,\n          textProg = \"\",\n          truncated = false,\n          widthProg = 0;\n      var lineData = [],\n          sizes = measure(words, style),\n          space = measure(\" \", style);\n\n      for (var i = 0; i < words.length; i++) {\n        var word = words[i];\n        var wordWidth = sizes[words.indexOf(word)];\n        word += sentence.slice(textProg.length + word.length).match(\"^( |\\n)*\", \"g\")[0];\n\n        if (textProg.slice(-1) === \"\\n\" || widthProg + wordWidth > width) {\n          if (!i && !overflow) {\n            truncated = true;\n            break;\n          }\n\n          if (lineData.length >= line) lineData[line - 1] = trimRight(lineData[line - 1]);\n          line++;\n\n          if (lineHeight * line > height || wordWidth > width && !overflow || maxLines && line > maxLines) {\n            truncated = true;\n            break;\n          }\n\n          widthProg = 0;\n          lineData.push(word);\n        } else if (!i) lineData[0] = word;else lineData[line - 1] += word;\n\n        textProg += word;\n        widthProg += wordWidth;\n        widthProg += word.match(/[\\s]*$/g)[0].length * space;\n      }\n\n      return {\n        lines: lineData,\n        sentence: sentence,\n        truncated: truncated,\n        widths: measure(lineData, style),\n        words: words\n      };\n    }\n    /**\n        @memberof textWrap\n        @desc If *value* is specified, sets the font family accessor to the specified function or string and returns this generator. If *value* is not specified, returns the current font family.\n        @param {Function|String} [*value* = \"sans-serif\"]\n    */\n\n\n    textWrap.fontFamily = function (_) {\n      return arguments.length ? (fontFamily = _, textWrap) : fontFamily;\n    };\n    /**\n        @memberof textWrap\n        @desc If *value* is specified, sets the font size accessor to the specified function or number and returns this generator. If *value* is not specified, returns the current font size.\n        @param {Function|Number} [*value* = 10]\n    */\n\n\n    textWrap.fontSize = function (_) {\n      return arguments.length ? (fontSize = _, textWrap) : fontSize;\n    };\n    /**\n        @memberof textWrap\n        @desc If *value* is specified, sets the font weight accessor to the specified function or number and returns this generator. If *value* is not specified, returns the current font weight.\n        @param {Function|Number|String} [*value* = 400]\n    */\n\n\n    textWrap.fontWeight = function (_) {\n      return arguments.length ? (fontWeight = _, textWrap) : fontWeight;\n    };\n    /**\n        @memberof textWrap\n        @desc If *value* is specified, sets height limit to the specified value and returns this generator. If *value* is not specified, returns the current value.\n        @param {Number} [*value* = 200]\n    */\n\n\n    textWrap.height = function (_) {\n      return arguments.length ? (height = _, textWrap) : height;\n    };\n    /**\n        @memberof textWrap\n        @desc If *value* is specified, sets the line height accessor to the specified function or number and returns this generator. If *value* is not specified, returns the current line height accessor, which is 1.1 times the [font size](#textWrap.fontSize) by default.\n        @param {Function|Number} [*value*]\n    */\n\n\n    textWrap.lineHeight = function (_) {\n      return arguments.length ? (lineHeight = _, textWrap) : lineHeight;\n    };\n    /**\n        @memberof textWrap\n        @desc If *value* is specified, sets the maximum number of lines allowed when wrapping.\n        @param {Function|Number} [*value*]\n    */\n\n\n    textWrap.maxLines = function (_) {\n      return arguments.length ? (maxLines = _, textWrap) : maxLines;\n    };\n    /**\n        @memberof textWrap\n        @desc If *value* is specified, sets the overflow to the specified boolean and returns this generator. If *value* is not specified, returns the current overflow value.\n        @param {Boolean} [*value* = false]\n    */\n\n\n    textWrap.overflow = function (_) {\n      return arguments.length ? (overflow = _, textWrap) : overflow;\n    };\n    /**\n        @memberof textWrap\n        @desc If *value* is specified, sets the word split function to the specified function and returns this generator. If *value* is not specified, returns the current word split function.\n        @param {Function} [*value*] A function that, when passed a string, is expected to return that string split into an array of words to textWrap. The default split function splits strings on the following characters: `-`, `/`, `;`, `:`, `&`\n    */\n\n\n    textWrap.split = function (_) {\n      return arguments.length ? (split = _, textWrap) : split;\n    };\n    /**\n        @memberof textWrap\n        @desc If *value* is specified, sets width limit to the specified value and returns this generator. If *value* is not specified, returns the current value.\n        @param {Number} [*value* = 200]\n    */\n\n\n    textWrap.width = function (_) {\n      return arguments.length ? (width = _, textWrap) : width;\n    };\n\n    return textWrap;\n  }\n  /**\n      @external BaseClass\n      @see https://github.com/d3plus/d3plus-common#BaseClass\n  */\n\n\n  var defaultHtmlLookup = {\n    i: \"font-style: italic;\",\n    em: \"font-style: italic;\",\n    b: \"font-weight: bold;\",\n    strong: \"font-weight: bold;\"\n  };\n  /**\n      @class TextBox\n      @extends external:BaseClass\n      @desc Creates a wrapped text box for each point in an array of data. See [this example](https://d3plus.org/examples/d3plus-text/getting-started/) for help getting started using the TextBox class.\n  */\n\n  var TextBox = /*#__PURE__*/function (_BaseClass) {\n    \"use strict\";\n\n    _inherits(TextBox, _BaseClass);\n\n    var _super = _createSuper(TextBox);\n\n    /**\n        @memberof TextBox\n        @desc Invoked when creating a new class instance, and sets any default parameters.\n        @private\n    */\n    function TextBox() {\n      var _this3;\n\n      _classCallCheck2(this, TextBox);\n\n      _this3 = _super.call(this);\n      _this3._ariaHidden = constant$2(\"false\");\n      _this3._delay = 0;\n      _this3._duration = 0;\n\n      _this3._ellipsis = function (text, line) {\n        return line ? \"\".concat(text.replace(/\\.|,$/g, \"\"), \"...\") : \"\";\n      };\n\n      _this3._fontColor = constant$2(\"black\");\n      _this3._fontFamily = constant$2([\"Roboto\", \"Helvetica Neue\", \"HelveticaNeue\", \"Helvetica\", \"Arial\", \"sans-serif\"]);\n      _this3._fontMax = constant$2(50);\n      _this3._fontMin = constant$2(8);\n      _this3._fontOpacity = constant$2(1);\n      _this3._fontResize = constant$2(false);\n      _this3._fontSize = constant$2(10);\n      _this3._fontStroke = constant$2(\"transparent\");\n      _this3._fontStrokeWidth = constant$2(0);\n      _this3._fontWeight = constant$2(400);\n      _this3._height = accessor(\"height\", 200);\n      _this3._html = defaultHtmlLookup;\n\n      _this3._id = function (d, i) {\n        return d.id || \"\".concat(i);\n      };\n\n      _this3._lineHeight = function (d, i) {\n        return _this3._fontSize(d, i) * 1.2;\n      };\n\n      _this3._maxLines = constant$2(null);\n      _this3._on = {};\n      _this3._overflow = constant$2(false);\n      _this3._padding = constant$2(0);\n      _this3._pointerEvents = constant$2(\"auto\");\n      _this3._rotate = constant$2(0);\n\n      _this3._rotateAnchor = function (d) {\n        return [d.w / 2, d.h / 2];\n      };\n\n      _this3._split = textSplit;\n      _this3._text = accessor(\"text\");\n      _this3._textAnchor = constant$2(\"start\");\n      _this3._verticalAlign = constant$2(\"top\");\n      _this3._width = accessor(\"width\", 200);\n      _this3._x = accessor(\"x\", 0);\n      _this3._y = accessor(\"y\", 0);\n      return _this3;\n    }\n    /**\n        @memberof TextBox\n        @desc Renders the text boxes. If a *callback* is specified, it will be called once the shapes are done drawing.\n        @param {Function} [*callback* = undefined]\n    */\n\n\n    _createClass2(TextBox, [{\n      key: \"render\",\n      value: function render(callback) {\n        var _this4 = this;\n\n        if (this._select === void 0) this.select(_select(\"body\").append(\"svg\").style(\"width\", \"\".concat(window.innerWidth, \"px\")).style(\"height\", \"\".concat(window.innerHeight, \"px\")).node());\n        var that = this;\n\n        var boxes = this._select.selectAll(\".d3plus-textBox\").data(this._data.reduce(function (arr, d, i) {\n          var t = _this4._text(d, i);\n\n          if (t === void 0) return arr;\n          t = trim(t);\n\n          var resize = _this4._fontResize(d, i);\n\n          var lHRatio = _this4._lineHeight(d, i) / _this4._fontSize(d, i);\n\n          var fS = resize ? _this4._fontMax(d, i) : _this4._fontSize(d, i),\n              lH = resize ? fS * lHRatio : _this4._lineHeight(d, i),\n              line = 1,\n              lineData = [],\n              sizes,\n              wrapResults;\n          var style = {\n            \"font-family\": fontExists(_this4._fontFamily(d, i)),\n            \"font-size\": fS,\n            \"font-weight\": _this4._fontWeight(d, i),\n            \"line-height\": lH\n          };\n          var padding = parseSides(_this4._padding(d, i));\n          var h = _this4._height(d, i) - (padding.top + padding.bottom),\n              w = _this4._width(d, i) - (padding.left + padding.right);\n          var wrapper = wrap().fontFamily(style[\"font-family\"]).fontSize(fS).fontWeight(style[\"font-weight\"]).lineHeight(lH).maxLines(_this4._maxLines(d, i)).height(h).overflow(_this4._overflow(d, i)).width(w).split(_this4._split);\n\n          var fMax = _this4._fontMax(d, i),\n              fMin = _this4._fontMin(d, i),\n              vA = _this4._verticalAlign(d, i),\n              words = _this4._split(t, i);\n          /**\n              Figures out the lineData to be used for wrapping.\n              @private\n          */\n\n\n          function checkSize() {\n            var truncate = function truncate() {\n              if (line < 1) lineData = [that._ellipsis(\"\", line)];else lineData[line - 1] = that._ellipsis(lineData[line - 1], line);\n            }; // Constraint the font size\n\n\n            fS = max([fS, fMin]);\n            fS = min([fS, fMax]);\n\n            if (resize) {\n              lH = fS * lHRatio;\n              wrapper.fontSize(fS).lineHeight(lH);\n              style[\"font-size\"] = fS;\n              style[\"line-height\"] = lH;\n            }\n\n            wrapResults = wrapper(t);\n            lineData = wrapResults.lines.filter(function (l) {\n              return l !== \"\";\n            });\n            line = lineData.length;\n\n            if (wrapResults.truncated) {\n              if (resize) {\n                fS--;\n\n                if (fS < fMin) {\n                  fS = fMin;\n                  truncate();\n                  return;\n                } else checkSize();\n              } else truncate();\n            }\n          }\n\n          if (w > fMin && (h > lH || resize && h > fMin * lHRatio)) {\n            if (resize) {\n              sizes = measure(words, style);\n              var areaMod = 1.165 + w / h * 0.1,\n                  boxArea = w * h,\n                  maxWidth = max(sizes),\n                  textArea = sum(sizes, function (d) {\n                return d * lH;\n              }) * areaMod;\n\n              if (maxWidth > w || textArea > boxArea) {\n                var areaRatio = Math.sqrt(boxArea / textArea),\n                    widthRatio = w / maxWidth;\n                var sizeRatio = min([areaRatio, widthRatio]);\n                fS = Math.floor(fS * sizeRatio);\n              }\n\n              var heightMax = Math.floor(h * 0.8);\n              if (fS > heightMax) fS = heightMax;\n            }\n\n            checkSize();\n          }\n\n          if (lineData.length) {\n            var tH = line * lH;\n\n            var r = _this4._rotate(d, i);\n\n            var yP = r === 0 ? vA === \"top\" ? 0 : vA === \"middle\" ? h / 2 - tH / 2 : h - tH : 0;\n            yP -= lH * 0.1;\n            arr.push({\n              aH: _this4._ariaHidden(d, i),\n              data: d,\n              i: i,\n              lines: lineData,\n              fC: _this4._fontColor(d, i),\n              fStroke: _this4._fontStroke(d, i),\n              fSW: _this4._fontStrokeWidth(d, i),\n              fF: style[\"font-family\"],\n              fO: _this4._fontOpacity(d, i),\n              fW: style[\"font-weight\"],\n              id: _this4._id(d, i),\n              tA: _this4._textAnchor(d, i),\n              vA: _this4._verticalAlign(d, i),\n              widths: wrapResults.widths,\n              fS: fS,\n              lH: lH,\n              w: w,\n              h: h,\n              r: r,\n              x: _this4._x(d, i) + padding.left,\n              y: _this4._y(d, i) + yP + padding.top\n            });\n          }\n\n          return arr;\n        }, []), function (d) {\n          return _this4._id(d.data, d.i);\n        });\n\n        var t = transition().duration(this._duration);\n\n        if (this._duration === 0) {\n          boxes.exit().remove();\n        } else {\n          boxes.exit().transition().delay(this._duration).remove();\n          boxes.exit().selectAll(\"text\").transition(t).attr(\"opacity\", 0).style(\"opacity\", 0);\n        }\n        /**\n         * Applies translate and rotate to a text element.\n         * @param {D3Selection} text\n         * @private\n         */\n\n\n        function rotate(text) {\n          text.attr(\"transform\", function (d, i) {\n            var rotateAnchor = that._rotateAnchor(d, i);\n\n            return \"translate(\".concat(d.x, \", \").concat(d.y, \") rotate(\").concat(d.r, \", \").concat(rotateAnchor[0], \", \").concat(rotateAnchor[1], \")\");\n          });\n        }\n\n        var update = boxes.enter().append(\"g\").attr(\"class\", \"d3plus-textBox\").attr(\"id\", function (d) {\n          return \"d3plus-textBox-\".concat(strip(d.id));\n        }).call(rotate).merge(boxes);\n        var rtl = detectRTL();\n        update.order().style(\"pointer-events\", function (d) {\n          return _this4._pointerEvents(d.data, d.i);\n        }).each(function (d) {\n          /**\n              Sets the inner text content of each <text> element.\n              @private\n          */\n          function textContent(text) {\n            var tag = false;\n            text[that._html ? \"html\" : \"text\"](function (t) {\n              var cleaned = trimRight(t).replace(/&([^\\;&]*)/g, function (str, a) {\n                return a === \"amp\" ? str : \"&amp;\".concat(a);\n              }) // replaces all non-HTML ampersands with escaped entity\n              .replace(/<([^A-z^/]+)/g, function (str, a) {\n                return \"&lt;\".concat(a);\n              }).replace(/<$/g, \"&lt;\") // replaces all non-HTML left angle brackets with escaped entity\n              .replace(/(<[^>^\\/]+>)([^<^>]+)$/g, function (str, a, b) {\n                return \"\".concat(a).concat(b).concat(a.replace(\"<\", \"</\"));\n              }) // ands end tag to lines before mid-HTML break\n              .replace(/^([^<^>]+)(<\\/[^>]+>)/g, function (str, a, b) {\n                return \"\".concat(b.replace(\"</\", \"<\")).concat(a).concat(b);\n              }); // ands start tag to lines after mid-HTML break\n\n              var tagRegex = new RegExp(/<([A-z]+)[^>]*>([^<^>]+)<\\/[^>]+>/g);\n\n              if (cleaned.match(tagRegex)) {\n                cleaned = cleaned.replace(tagRegex, function (str, a, b) {\n                  tag = that._html[a] ? a : false;\n\n                  if (tag) {\n                    var style = that._html[tag];\n                    if (t.includes(\"</\".concat(tag, \">\"))) tag = false;\n                    return \"<tspan style=\\\"\".concat(style, \"\\\">\").concat(b, \"</tspan>\");\n                  }\n\n                  return b;\n                });\n              } else if (tag.length) {\n                cleaned = \"<tspan style=\\\"\".concat(that._html[tag], \"\\\">\").concat(cleaned, \"</tspan>\");\n              }\n\n              return cleaned;\n            });\n          }\n          /**\n              Styles to apply to each <text> element.\n              @private\n          */\n\n\n          function textStyle(text) {\n            text.attr(\"aria-hidden\", d.aH).attr(\"dir\", rtl ? \"rtl\" : \"ltr\").attr(\"fill\", d.fC).attr(\"stroke\", d.fStroke).attr(\"stroke-width\", d.fSW).attr(\"text-anchor\", d.tA).attr(\"font-family\", d.fF).style(\"font-family\", d.fF).attr(\"font-size\", \"\".concat(d.fS, \"px\")).style(\"font-size\", \"\".concat(d.fS, \"px\")).attr(\"font-weight\", d.fW).style(\"font-weight\", d.fW).attr(\"x\", \"\".concat(d.tA === \"middle\" ? d.w / 2 : rtl ? d.tA === \"start\" ? d.w : 0 : d.tA === \"end\" ? d.w : 2 * Math.sin(Math.PI * d.r / 180), \"px\")).attr(\"y\", function (t, i) {\n              return d.r === 0 || d.vA === \"top\" ? \"\".concat((i + 1) * d.lH - (d.lH - d.fS), \"px\") : d.vA === \"middle\" ? \"\".concat((d.h + d.fS) / 2 - (d.lH - d.fS) + (i - d.lines.length / 2 + 0.5) * d.lH, \"px\") : \"\".concat(d.h - 2 * (d.lH - d.fS) - (d.lines.length - (i + 1)) * d.lH + 2 * Math.cos(Math.PI * d.r / 180), \"px\");\n            });\n          }\n\n          var texts = _select(this).selectAll(\"text\").data(d.lines);\n\n          if (that._duration === 0) {\n            texts.call(textContent).call(textStyle);\n            texts.exit().remove();\n            texts.enter().append(\"text\").attr(\"dominant-baseline\", \"alphabetic\").style(\"baseline-shift\", \"0%\").attr(\"unicode-bidi\", \"bidi-override\").call(textContent).call(textStyle).attr(\"opacity\", d.fO).style(\"opacity\", d.fO);\n          } else {\n            texts.call(textContent).transition(t).call(textStyle);\n            texts.exit().transition(t).attr(\"opacity\", 0).remove();\n            texts.enter().append(\"text\").attr(\"dominant-baseline\", \"alphabetic\").style(\"baseline-shift\", \"0%\").attr(\"opacity\", 0).style(\"opacity\", 0).call(textContent).call(textStyle).merge(texts).transition(t).delay(that._delay).call(textStyle).attr(\"opacity\", d.fO).style(\"opacity\", d.fO);\n          }\n        }).transition(t).call(rotate);\n        var events = Object.keys(this._on),\n            on = events.reduce(function (obj, e) {\n          obj[e] = function (d, i) {\n            return _this4._on[e](d.data, i);\n          };\n\n          return obj;\n        }, {});\n\n        for (var e = 0; e < events.length; e++) {\n          update.on(events[e], on[events[e]]);\n        }\n\n        if (callback) setTimeout(callback, this._duration + 100);\n        return this;\n      }\n      /**\n          @memberof TextBox\n          @desc If *value* is specified, sets the aria-hidden attribute to the specified function or string and returns the current class instance.\n          @param {Function|String} *value*\n          @chainable\n      */\n\n    }, {\n      key: \"ariaHidden\",\n      value: function ariaHidden(_) {\n        return _ !== undefined ? (this._ariaHidden = typeof _ === \"function\" ? _ : constant$2(_), this) : this._ariaHidden;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the data array to the specified array. A text box will be drawn for each object in the array.\n          @param {Array} [*data* = []]\n          @chainable\n      */\n\n    }, {\n      key: \"data\",\n      value: function data(_) {\n        return arguments.length ? (this._data = _, this) : this._data;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the animation delay to the specified number in milliseconds.\n          @param {Number} [*value* = 0]\n          @chainable\n      */\n\n    }, {\n      key: \"delay\",\n      value: function delay(_) {\n        return arguments.length ? (this._delay = _, this) : this._delay;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the animation duration to the specified number in milliseconds.\n          @param {Number} [*value* = 0]\n          @chainable\n      */\n\n    }, {\n      key: \"duration\",\n      value: function duration(_) {\n        return arguments.length ? (this._duration = _, this) : this._duration;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the function that handles what to do when a line is truncated. It should return the new value for the line, and is passed 2 arguments: the String of text for the line in question, and the number of the line. By default, an ellipsis is added to the end of any line except if it is the first word that cannot fit (in that case, an empty string is returned).\n          @param {Function|String} [*value*]\n          @chainable\n          @example <caption>default accessor</caption>\n      function(text, line) {\n      return line ? text.replace(/\\.|,$/g, \"\") + \"...\" : \"\";\n      }\n      */\n\n    }, {\n      key: \"ellipsis\",\n      value: function ellipsis(_) {\n        return arguments.length ? (this._ellipsis = typeof _ === \"function\" ? _ : constant$2(_), this) : this._ellipsis;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the font color to the specified accessor function or static string, which is inferred from the [DOM selection](#textBox.select) by default.\n          @param {Function|String} [*value* = \"black\"]\n          @chainable\n      */\n\n    }, {\n      key: \"fontColor\",\n      value: function fontColor(_) {\n        return arguments.length ? (this._fontColor = typeof _ === \"function\" ? _ : constant$2(_), this) : this._fontColor;\n      }\n      /**\n          @memberof TextBox\n          @desc Defines the font-family to be used. The value passed can be either a *String* name of a font, a comma-separated list of font-family fallbacks, an *Array* of fallbacks, or a *Function* that returns either a *String* or an *Array*. If supplying multiple fallback fonts, the [fontExists](#fontExists) function will be used to determine the first available font on the client's machine.\n          @param {Array|Function|String} [*value* = [\"Roboto\", \"Helvetica Neue\", \"HelveticaNeue\", \"Helvetica\", \"Arial\", \"sans-serif\"]]\n          @chainable\n      */\n\n    }, {\n      key: \"fontFamily\",\n      value: function fontFamily(_) {\n        return arguments.length ? (this._fontFamily = typeof _ === \"function\" ? _ : constant$2(_), this) : this._fontFamily;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the maximum font size to the specified accessor function or static number (which corresponds to pixel units), which is used when [dynamically resizing fonts](#textBox.fontResize).\n          @param {Function|Number} [*value* = 50]\n          @chainable\n      */\n\n    }, {\n      key: \"fontMax\",\n      value: function fontMax(_) {\n        return arguments.length ? (this._fontMax = typeof _ === \"function\" ? _ : constant$2(_), this) : this._fontMax;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the minimum font size to the specified accessor function or static number (which corresponds to pixel units), which is used when [dynamically resizing fonts](#textBox.fontResize).\n          @param {Function|Number} [*value* = 8]\n          @chainable\n      */\n\n    }, {\n      key: \"fontMin\",\n      value: function fontMin(_) {\n        return arguments.length ? (this._fontMin = typeof _ === \"function\" ? _ : constant$2(_), this) : this._fontMin;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the font opacity to the specified accessor function or static number between 0 and 1.\n          @param {Function|Number} [*value* = 1]\n          @chainable\n       */\n\n    }, {\n      key: \"fontOpacity\",\n      value: function fontOpacity(_) {\n        return arguments.length ? (this._fontOpacity = typeof _ === \"function\" ? _ : constant$2(_), this) : this._fontOpacity;\n      }\n      /**\n          @memberof TextBox\n          @desc Toggles font resizing, which can either be defined as a static boolean for all data points, or an accessor function that returns a boolean. See [this example](http://d3plus.org/examples/d3plus-text/resizing-text/) for a side-by-side comparison.\n          @param {Function|Boolean} [*value* = false]\n          @chainable\n      */\n\n    }, {\n      key: \"fontResize\",\n      value: function fontResize(_) {\n        return arguments.length ? (this._fontResize = typeof _ === \"function\" ? _ : constant$2(_), this) : this._fontResize;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the font size to the specified accessor function or static number (which corresponds to pixel units), which is inferred from the [DOM selection](#textBox.select) by default.\n          @param {Function|Number} [*value* = 10]\n          @chainable\n      */\n\n    }, {\n      key: \"fontSize\",\n      value: function fontSize(_) {\n        return arguments.length ? (this._fontSize = typeof _ === \"function\" ? _ : constant$2(_), this) : this._fontSize;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the font stroke color for the rendered text.\n          @param {Function|String} [*value* = \"transparent\"]\n          @chainable\n      */\n\n    }, {\n      key: \"fontStroke\",\n      value: function fontStroke(_) {\n        return arguments.length ? (this._fontStroke = typeof _ === \"function\" ? _ : constant$2(_), this) : this._fontStroke;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the font stroke width for the rendered text.\n          @param {Function|Number} [*value* = 0]\n          @chainable\n      */\n\n    }, {\n      key: \"fontStrokeWidth\",\n      value: function fontStrokeWidth(_) {\n        return arguments.length ? (this._fontStrokeWidth = typeof _ === \"function\" ? _ : constant$2(_), this) : this._fontStrokeWidth;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the font weight to the specified accessor function or static number, which is inferred from the [DOM selection](#textBox.select) by default.\n          @param {Function|Number|String} [*value* = 400]\n          @chainable\n      */\n\n    }, {\n      key: \"fontWeight\",\n      value: function fontWeight(_) {\n        return arguments.length ? (this._fontWeight = typeof _ === \"function\" ? _ : constant$2(_), this) : this._fontWeight;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the height for each box to the specified accessor function or static number.\n          @param {Function|Number} [*value*]\n          @chainable\n          @example <caption>default accessor</caption>\n      function(d) {\n      return d.height || 200;\n      }\n      */\n\n    }, {\n      key: \"height\",\n      value: function height(_) {\n        return arguments.length ? (this._height = typeof _ === \"function\" ? _ : constant$2(_), this) : this._height;\n      }\n      /**\n          @memberof TextBox\n          @desc Configures the ability to render simple HTML tags. Defaults to supporting `<b>`, `<strong>`, `<i>`, and `<em>`, set to false to disable or provide a mapping of tags to svg styles\n          @param {Object|Boolean} [*value* = {\n                    i: 'font-style: italic;',\n                    em: 'font-style: italic;',\n                    b: 'font-weight: bold;',\n                    strong: 'font-weight: bold;'\n                }]\n          @chainable\n      */\n\n    }, {\n      key: \"html\",\n      value: function html(_) {\n        return arguments.length ? (this._html = typeof _ === \"boolean\" ? _ ? defaultHtmlLookup : false : _, this) : this._html;\n      }\n      /**\n          @memberof TextBox\n          @desc Defines the unique id for each box to the specified accessor function or static number.\n          @param {Function|Number} [*value*]\n          @chainable\n          @example <caption>default accessor</caption>\n      function(d, i) {\n      return d.id || i + \"\";\n      }\n      */\n\n    }, {\n      key: \"id\",\n      value: function id(_) {\n        return arguments.length ? (this._id = typeof _ === \"function\" ? _ : constant$2(_), this) : this._id;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the line height to the specified accessor function or static number, which is 1.2 times the [font size](#textBox.fontSize) by default.\n          @param {Function|Number} [*value*]\n          @chainable\n      */\n\n    }, {\n      key: \"lineHeight\",\n      value: function lineHeight(_) {\n        return arguments.length ? (this._lineHeight = typeof _ === \"function\" ? _ : constant$2(_), this) : this._lineHeight;\n      }\n      /**\n          @memberof TextBox\n          @desc Restricts the maximum number of lines to wrap onto, which is null (unlimited) by default.\n          @param {Function|Number} [*value*]\n          @chainable\n      */\n\n    }, {\n      key: \"maxLines\",\n      value: function maxLines(_) {\n        return arguments.length ? (this._maxLines = typeof _ === \"function\" ? _ : constant$2(_), this) : this._maxLines;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the text overflow to the specified accessor function or static boolean.\n          @param {Function|Boolean} [*value* = false]\n          @chainable\n      */\n\n    }, {\n      key: \"overflow\",\n      value: function overflow(_) {\n        return arguments.length ? (this._overflow = typeof _ === \"function\" ? _ : constant$2(_), this) : this._overflow;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the padding to the specified accessor function, CSS shorthand string, or static number, which is 0 by default.\n          @param {Function|Number|String} [*value*]\n          @chainable\n      */\n\n    }, {\n      key: \"padding\",\n      value: function padding(_) {\n        return arguments.length ? (this._padding = typeof _ === \"function\" ? _ : constant$2(_), this) : this._padding;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the pointer-events to the specified accessor function or static string.\n          @param {Function|String} [*value* = \"auto\"]\n          @chainable\n      */\n\n    }, {\n      key: \"pointerEvents\",\n      value: function pointerEvents(_) {\n        return arguments.length ? (this._pointerEvents = typeof _ === \"function\" ? _ : constant$2(_), this) : this._pointerEvents;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the rotate percentage for each box to the specified accessor function or static string.\n          @param {Function|Number} [*value* = 0]\n          @chainable\n      */\n\n    }, {\n      key: \"rotate\",\n      value: function rotate(_) {\n        return arguments.length ? (this._rotate = typeof _ === \"function\" ? _ : constant$2(_), this) : this._rotate;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the anchor point around which to rotate the text box.\n          @param {Function|Number[]}\n          @chainable\n       */\n\n    }, {\n      key: \"rotateAnchor\",\n      value: function rotateAnchor(_) {\n        return arguments.length ? (this._rotateAnchor = typeof _ === \"function\" ? _ : constant$2(_), this) : this._rotateAnchor;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the SVG container element to the specified d3 selector or DOM element. If not explicitly specified, an SVG element will be added to the page for use.\n          @param {String|HTMLElement} [*selector*]\n          @chainable\n      */\n\n    }, {\n      key: \"select\",\n      value: function select(_) {\n        return arguments.length ? (this._select = _select(_), this) : this._select;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the word split behavior to the specified function, which when passed a string is expected to return that string split into an array of words.\n          @param {Function} [*value*]\n          @chainable\n      */\n\n    }, {\n      key: \"split\",\n      value: function split(_) {\n        return arguments.length ? (this._split = _, this) : this._split;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the text for each box to the specified accessor function or static string.\n          @param {Function|String} [*value*]\n          @chainable\n          @example <caption>default accessor</caption>\n      function(d) {\n      return d.text;\n      }\n      */\n\n    }, {\n      key: \"text\",\n      value: function text(_) {\n        return arguments.length ? (this._text = typeof _ === \"function\" ? _ : constant$2(_), this) : this._text;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the horizontal text anchor to the specified accessor function or static string, whose values are analagous to the SVG [text-anchor](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/text-anchor) property.\n          @param {Function|String} [*value* = \"start\"]\n          @chainable\n      */\n\n    }, {\n      key: \"textAnchor\",\n      value: function textAnchor(_) {\n        return arguments.length ? (this._textAnchor = typeof _ === \"function\" ? _ : constant$2(_), this) : this._textAnchor;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the vertical alignment to the specified accessor function or static string. Accepts `\"top\"`, `\"middle\"`, and `\"bottom\"`.\n          @param {Function|String} [*value* = \"top\"]\n          @chainable\n      */\n\n    }, {\n      key: \"verticalAlign\",\n      value: function verticalAlign(_) {\n        return arguments.length ? (this._verticalAlign = typeof _ === \"function\" ? _ : constant$2(_), this) : this._verticalAlign;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the width for each box to the specified accessor function or static number.\n          @param {Function|Number} [*value*]\n          @chainable\n          @example <caption>default accessor</caption>\n      function(d) {\n      return d.width || 200;\n      }\n      */\n\n    }, {\n      key: \"width\",\n      value: function width(_) {\n        return arguments.length ? (this._width = typeof _ === \"function\" ? _ : constant$2(_), this) : this._width;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the x position for each box to the specified accessor function or static number. The number given should correspond to the left side of the textBox.\n          @param {Function|Number} [*value*]\n          @chainable\n          @example <caption>default accessor</caption>\n      function(d) {\n      return d.x || 0;\n      }\n      */\n\n    }, {\n      key: \"x\",\n      value: function x(_) {\n        return arguments.length ? (this._x = typeof _ === \"function\" ? _ : constant$2(_), this) : this._x;\n      }\n      /**\n          @memberof TextBox\n          @desc Sets the y position for each box to the specified accessor function or static number. The number given should correspond to the top side of the textBox.\n          @param {Function|Number} [*value*]\n          @chainable\n          @example <caption>default accessor</caption>\n      function(d) {\n      return d.y || 0;\n      }\n      */\n\n    }, {\n      key: \"y\",\n      value: function y(_) {\n        return arguments.length ? (this._y = typeof _ === \"function\" ? _ : constant$2(_), this) : this._y;\n      }\n    }]);\n\n    return TextBox;\n  }(BaseClass);\n\n  var lowercase = [\"a\", \"an\", \"and\", \"as\", \"at\", \"but\", \"by\", \"for\", \"from\", \"if\", \"in\", \"into\", \"near\", \"nor\", \"of\", \"on\", \"onto\", \"or\", \"per\", \"that\", \"the\", \"to\", \"with\", \"via\", \"vs\", \"vs.\"];\n  var uppercase = [\"CEO\", \"CFO\", \"CNC\", \"COO\", \"CPU\", \"GDP\", \"HVAC\", \"ID\", \"IT\", \"R&D\", \"TV\", \"UI\"];\n  /**\n      @function titleCase\n      @desc Capitalizes the first letter of each word in a phrase/sentence.\n      @param {String} str The string to apply the title case logic.\n  */\n\n  function titleCase(str) {\n    if (str === void 0) return \"\";\n    var smalls = lowercase.map(function (s) {\n      return s.toLowerCase();\n    });\n    var bigs = uppercase.slice();\n    bigs = bigs.concat(bigs.map(function (b) {\n      return \"\".concat(b, \"s\");\n    }));\n    var biglow = bigs.map(function (b) {\n      return b.toLowerCase();\n    });\n    var split = textSplit(str);\n    return split.map(function (s, i) {\n      if (s) {\n        var _lower = s.toLowerCase();\n\n        var stripped = suffixChars.includes(_lower.charAt(_lower.length - 1)) ? _lower.slice(0, -1) : _lower;\n        var bigindex = biglow.indexOf(stripped);\n        if (bigindex >= 0) return bigs[bigindex];else if (smalls.includes(stripped) && i !== 0 && i !== split.length - 1) return _lower;else return s.charAt(0).toUpperCase() + s.substr(1).toLowerCase();\n      } else return \"\";\n    }).reduce(function (ret, s, i) {\n      if (i && str.charAt(ret.length) === \" \") ret += \" \";\n      ret += s;\n      return ret;\n    }, \"\");\n  }\n\n  exports.TextBox = TextBox;\n  exports.fontExists = fontExists;\n  exports.rtl = detectRTL;\n  exports.stringify = stringify;\n  exports.strip = strip;\n  exports.textSplit = textSplit;\n  exports.textWidth = measure;\n  exports.textWrap = wrap;\n  exports.titleCase = titleCase;\n  exports.trim = trim;\n  exports.trimLeft = trimLeft;\n  exports.trimRight = trimRight;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});\n//# sourceMappingURL=d3plus-text.full.js.map\n","import React from 'react';\n\nconst ChartContext = React.createContext();\n\nexport default ChartContext;","import ChartContext from './ChartContext';\n\nconst React = require('react');\n\nmodule.exports = createReactClass({\n    displayName: 'ChartProvider',\n\n\n    getInitialState() {\n        return {\n          chartStyle:''\n        };\n      },\n\n\n    render() {\n        return (\n            <ChartContext.Provider\n                value={{\n                    chartStyle:this.state.chartStyle,\n                    setChartStyle: style => {\n                        this.setState({\n                            chartStyle:style\n                        });\n                    }\n                }}\n            >\n                {this.props.children}\n\n            </ChartContext.Provider>\n        )\n    }\n})","import ChartContext from './ChartContext';\nconst React = require('react');\n\n/*\n    This components sets context variables.\n    It will be outside of this application after migrate to React function components.\n*/\n\n\nmodule.exports = createReactClass({\n    displayName: 'SetStyle',\n\n    render() {\n\n        this.contextType = ChartContext;\n        const context = this.contextType._currentValue\n        context.setChartStyle(this.props.style)\n\n        return (\n            null\n        )\n    }\n})\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Area',\n\n  propTypes: {\n    path: PropTypes.string,\n    fill: PropTypes.string,\n    handleMouseOver: PropTypes.func,\n    handleMouseLeave: PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: '#3182bd',\n    };\n  },\n\n  render() {\n    return (\n      <path\n        className=\"rd3-areachart-area\"\n        d={this.props.path}\n        fill={this.props.fill}\n        onMouseOver={this.props.handleMouseOver}\n        onMouseLeave={this.props.handleMouseLeave}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\nconst utils = require('../utils');\n\nconst d3 = require('d3');\nconst DataSeries = require('./DataSeries');\nconst { Chart, XAxis, YAxis, XGrid, YGrid } = require('../common');\nconst { CartesianChartPropsMixin, DefaultAccessorsMixin, ViewBoxMixin } = require('../mixins');\n\nmodule.exports = createReactClass({\n\n  displayName: 'AreaChart',\n\n  propTypes: {\n    margins: PropTypes.object,\n    interpolate: PropTypes.bool,\n    interpolationType: PropTypes.string,\n    hoverAnimation: PropTypes.bool,\n    data: PropTypes.array.isRequired,\n    normalize: PropTypes.bool,\n    displayYAxis: PropTypes.bool,\n  },\n\n  mixins: [CartesianChartPropsMixin, DefaultAccessorsMixin, ViewBoxMixin],\n\n  getDefaultProps() {\n    return {\n      colors: d3.scaleOrdinal(d3.schemeBlues[3].reverse()),\n      // colors: d3.scaleOrdinal(d3.schemePastel2),\n\n      margins: { top: 10, right: 20, bottom: 40, left: 45 },\n      yAxisTickCount: 4,\n      interpolate: false,\n      interpolationType: null,\n      className: 'rd3-areachart',\n      hoverAnimation: true,\n      data: [],\n      color: {\n        accessor: 'Sequential',\n        colors: d3.scaleSequential(d3.schemeTableau10),\n      },\n      normalize:false,\n      displayYAxis:true\n    };\n  },\n\n  _rd3FormatInputData: utils.rd3FormatInputData,\n\n  render() {\n    const props = this.props;\n    let data = props.data;\n    const interpolationType =\n      props.interpolationType ||\n      (props.interpolate ? 'cardinal' : 'linear');\n\n\n    if (this.props.data && this.props.data.length < 1) {\n      return null;\n    }\n\n    let series;\n    [data, series] = this._rd3FormatInputData('areachart', props.inputDataLayout, props.data, props.xIsDate, props.strokeWidth)\n\n    const { innerWidth, innerHeight, trans, svgMargins } = this.getDimensions();\n    const yOrient = this.getYOrient();\n\n    if (!Array.isArray(data)) {\n      data = [data];\n    }\n\n    const yScale = d3.scaleLinear()\n      .range([innerHeight, 0]);\n\n    const xValues = [];\n    const yValues = [];\n    // const seriesNames = [];\n    // const yMaxValues = [];\n    const domain = props.domain || {};\n    const xDomain = domain.x || [];\n    const yDomain = domain.y || [];\n    const seriesNames = series\n\n    // let yMaxValues = d3.max(data.map( d => {\n    //   return d3.sum(seriesNames.map( n => { return d[n]}))\n    // }))\n\n    let seriesMaxValues = data.map( d => {\n        return d3.sum(seriesNames.map( n => { return d[n]}))\n    })\n\n    let yMaxValues = d3.max(seriesMaxValues)\n\n\n    if (props.normalize === true){\n    // if ( 1===1 ){\n      const seriesNormalizeFactor = seriesMaxValues.map( s => yMaxValues/s )\n      const dataNormalized = []\n      data = data.map( (d, idx) => {\n        const factor = seriesNormalizeFactor[idx]\n        let dataAux = {}\n        Object.entries(d).map((key, index) => {\n          if (key[0] === 'date'){\n            dataAux[key[0]] = key[1]\n          }\n          else{\n            dataAux[key[0]] = (key[1] *= factor)\n          }\n        })\n        dataNormalized.push(dataAux)\n      })\n      data = dataNormalized\n    }\n\n\n    /* TODO - generalize. Only acceptint field date for x axis*/\n    data.map( d => {\n      xValues.push(d.date);\n    })\n\n    let xScale;\n\n    if (xValues.length > 0 &&\n      Object.prototype.toString.call(xValues[0]) === '[object Date]' &&\n      props.xAxisTickInterval) {\n      xScale = d3.scaleTime()\n        .range([0, innerWidth]);\n    } else {\n      xScale = d3.scaleLinear()\n        .range([0, innerWidth]);\n    }\n\n    const xdomain = d3.extent(xValues);\n    if (xDomain[0] !== undefined && xDomain[0] !== null) xdomain[0] = xDomain[0];\n    if (xDomain[1] !== undefined && xDomain[1] !== null) xdomain[1] = xDomain[1];\n    xScale.domain(xdomain);\n    const ydomain = [0, yMaxValues];\n    if (yDomain[0] !== undefined && yDomain[0] !== null) ydomain[0] = yDomain[0];\n    if (yDomain[1] !== undefined && yDomain[1] !== null) ydomain[1] = yDomain[1];\n    yScale.domain(ydomain);\n\n    // const colorsDomain = Array.from(Array(seriesNames.length).keys())\n    // props.colors.domain(colorsDomain);\n\n    const stack = d3.stack()\n    stack.keys(seriesNames)\n\n    const layers = stack(data)\n\n\n\n\n    let colorsDomain;\n    let colorsAccessor;\n    const origArray = Array.from(series.keys())\n\n    if (this.props.color.accessor === 'Sequential'){\n      colorsDomain = origArray.map(x => x / series.length)\n      colorsAccessor = this.props.colorAccessorSequential\n    }else{\n      colorsDomain = series\n      colorsAccessor = this.props.colorAccessorOrdinal\n    }\n\n\n    const dataSeries = layers.map((d, idx) => (\n      <DataSeries\n      key={idx}\n      fill={props.color.colors(colorsAccessor(colorsDomain, idx))}\n      index={idx}\n      xScale={xScale}\n      yScale={yScale}\n      data={d}\n      xAccessor={props.xAccessor}\n      yAccessor={props.yAccessor}\n      interpolationType={interpolationType}\n      hoverAnimation={props.hoverAnimation}\n      />\n    ));\n\n    return (\n      <Chart\n        viewBox={this.getViewBox()}\n        legend={props.legend}\n        data={data}\n        margins={props.margins}\n\n        color={this.props.color}\n        colorsDomain={colorsDomain}\n        colorsAccessor={colorsAccessor}\n\n        width={props.width}\n        height={props.height}\n        title={props.title}\n\n        series={series}\n        svgLegend={props.svgLegend}\n        svgChart={props.svgChart}\n        legendStyle={props.legendStyle}\n        background={props.background}\n        svgTitle={props.svgTitle}\n      >\n        <g transform={trans} className={props.className}>\n        <XGrid\n            xAxisClassName=\"rd3-areachart-xaxis\"\n            xScale={xScale}\n            xAxisTickValues={props.xAxisTickValues}\n            xAxisTickInterval={props.xAxisTickInterval}\n            xAxisTickCount={props.xAxisTickCount}\n            xAxisLabel={props.xAxisLabel}\n            xAxisLabelOffset={props.xAxisLabelOffset}\n            tickFormatting={props.xAxisFormatter}\n            tickStroke={props.xAxisTickStroke}\n            tickTextStroke={props.xAxisTickTextStroke}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={innerHeight}\n            horizontalChart={props.horizontal}\n            gridVertical={props.gridVertical}\n            gridVerticalStroke={props.gridVerticalStroke}\n            gridVerticalStrokeWidth={props.gridVerticalStrokeWidth}\n            gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n\n\n            xTickFormat={props.xTickFormat}\n            gridText={props.gridText}\n            translateTickLabel_Y_X={props.translateTickLabel_Y_X}\n            translateTickLabel_Y_Y={props.translateTickLabel_Y_Y}\n            translateTickLabel_X_X={props.translateTickLabel_X_X}\n            translateTickLabel_X_Y={props.translateTickLabel_X_Y}\n            xIsDate={props.xIsDate}\n          />\n          { props.displayYAxis &&\n          <YGrid\n            yAxisClassName=\"rd3-areachart-yaxis\"\n            yScale={yScale}\n            yAxisTickValues={props.yAxisTickValues}\n            yAxisTickInterval={props.yAxisTickInterval}\n            yAxisTickCount={props.yAxisTickCount}\n            yAxisLabel={props.yAxisLabel}\n            yAxisLabelOffset={props.yAxisLabelOffset}\n            tickFormatting={props.yAxisFormatter}\n            tickStroke={props.yAxisTickStroke}\n            tickTextStroke={props.yAxisTickTextStroke}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={innerHeight}\n            horizontalChart={props.horizontal}\n            gridHorizontal={props.gridHorizontal}\n            gridHorizontalStroke={props.gridHorizontalStroke}\n            gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n            gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n            xTickFormat={props.xTickFormat}\n            gridText={props.gridText}\n            translateTickLabel_Y_X={props.translateTickLabel_Y_X}\n            translateTickLabel_Y_Y={props.translateTickLabel_Y_Y}\n            translateTickLabel_X_X={props.translateTickLabel_X_X}\n            translateTickLabel_X_Y={props.translateTickLabel_X_Y}\n            xIsDate={props.xIsDate}\n\n          />\n          }\n          {dataSeries}\n          <XAxis\n            xAxisClassName=\"rd3-areachart-xaxis\"\n            xScale={xScale}\n            xAxisTickValues={props.xAxisTickValues}\n            xAxisTickInterval={props.xAxisTickInterval}\n            xAxisTickCount={props.xAxisTickCount}\n            xAxisLabel={props.xAxisLabel}\n            xAxisLabelOffset={props.xAxisLabelOffset}\n            tickFormatting={props.xAxisFormatter}\n            tickStroke={props.xAxisTickStroke}\n            tickTextStroke={props.xAxisTickTextStroke}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={innerHeight}\n            horizontalChart={props.horizontal}\n            gridVertical={props.gridVertical}\n            gridVerticalStroke={props.gridVerticalStroke}\n            gridVerticalStrokeWidth={props.gridVerticalStrokeWidth}\n            gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n          />\n          { props.displayYAxis &&\n          <YAxis\n            yAxisClassName=\"rd3-areachart-yaxis\"\n            yScale={yScale}\n            yAxisTickValues={props.yAxisTickValues}\n            yAxisTickInterval={props.yAxisTickInterval}\n            yAxisTickCount={props.yAxisTickCount}\n            yAxisLabel={props.yAxisLabel}\n            yAxisLabelOffset={props.yAxisLabelOffset}\n            tickFormatting={props.yAxisFormatter}\n            tickStroke={props.yAxisTickStroke}\n            tickTextStroke={props.yAxisTickTextStroke}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={innerHeight}\n            horizontalChart={props.horizontal}\n            gridHorizontal={props.gridHorizontal}\n            gridHorizontalStroke={props.gridHorizontalStroke}\n            gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n            gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n          />}\n        </g>\n      </Chart>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst shade = require('../utils').shade;\nconst Area = require('./Area');\n\nmodule.exports = createReactClass({\n\n  displayName: 'AreaContainer',\n\n  propTypes: {\n    fill: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: '#3182bd',\n    };\n  },\n\n  getInitialState() {\n    return {\n      fill: this.props.fill,\n      fillCtl: this.props.fill,\n    };\n  },\n\n  statics: { getDerivedStateFromProps(props, current_state) {\n    if (current_state.fillCtl !== props.fill) {\n      return {\n        fillCtl:props.fill,\n        fill: props.fill,\n      }\n    }\n    return null\n  }},\n\n  _animateArea() {\n    this.setState({\n      fill: shade(this.props.fill, 0.1),\n    });\n  },\n\n  _restoreArea() {\n    this.setState({\n      fill: this.props.fill,\n    });\n  },\n\n  render() {\n    const props = this.props;\n\n    // animation controller\n    let handleMouseOver;\n    let handleMouseLeave;\n    if (props.hoverAnimation) {\n      handleMouseOver = this._animateArea;\n      handleMouseLeave = this._restoreArea;\n    } else {\n      handleMouseOver = handleMouseLeave = null;\n    }\n\n    return (\n      <Area\n        handleMouseOver={handleMouseOver}\n        handleMouseLeave={handleMouseLeave}\n        {...props}\n        fill={this.state.fill}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst AreaContainer = require('./AreaContainer');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    fill: PropTypes.string,\n    interpolationType: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      interpolationType: 'linear',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const area = d3.area()\n    .x((d) => props.xScale(d.data.date))\n    .y0((d) => props.yScale(d[0]))\n    .y1((d) => props.yScale(d[1]))\n    .curve(d3.curveCatmullRom.alpha(0.5));\n\n    const path = area(props.data);\n\n    return (\n      <AreaContainer\n        fill={props.fill}\n        hoverAnimation={props.hoverAnimation}\n        path={path}\n      />\n    );\n  },\n});\n","\nexports.AreaChart = require('./AreaChart');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  propTypes: {\n    fill: PropTypes.string,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    x: PropTypes.number,\n    y: PropTypes.number,\n    className: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      offset: 0,\n      className: 'rd3-barchart-bar',\n    };\n  },\n\n  render() {\n    return (\n      <rect\n        className=\"rd3-barchart-bar\"\n        {...this.props}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\nconst utils = require('../utils');\n\nconst d3 = require('d3');\nconst DataSeries = require('./DataSeries');\nconst { Chart, XAxis, XGrid, YGrid, YAxis, Tooltip } = require('../common');\nconst {\n  CartesianChartPropsMixin,\n  DefaultAccessorsMixin,\n  ViewBoxMixin,\n  TooltipMixin,\n} = require('../mixins');\n\nmodule.exports = createReactClass({\n\n  displayName: 'BarChart',\n\n  propTypes: {\n    chartClassName: PropTypes.string,\n    data: PropTypes.array.isRequired,\n    hoverAnimation: PropTypes.bool,\n    margins: PropTypes.object,\n    rangeRoundBandsPadding: PropTypes.number,\n    // https://github.com/mbostock/d3/wiki/Stack-Layout#offset\n    stackOffset: PropTypes.oneOf(['silhouette', 'expand', 'wigget', 'zero']),\n    grouped: PropTypes.bool,\n    valuesAccessor: PropTypes.func,\n    xAccessorBar: PropTypes.func,\n    yAccessorBar: PropTypes.func,\n    y0Accessor: PropTypes.func,\n    title: PropTypes.string,\n    xAxisClassName: PropTypes.string,\n    yAxisClassName: PropTypes.string,\n    yAxisTickCount: PropTypes.number,\n    xIsDate: PropTypes.bool,\n    color: PropTypes.object,\n    inputDataLayout: PropTypes.string.isRequired,\n  },\n\n\n\n\n  mixins: [CartesianChartPropsMixin, DefaultAccessorsMixin, ViewBoxMixin, TooltipMixin],\n\n  getDefaultProps() {\n    return {\n      chartClassName: 'rd3-barchart',\n      hoverAnimation: true,\n      margins: { top: 10, right: 20, bottom: 40, left: 45 },\n      rangeRoundBandsPadding: 0.25,\n      stackOffset: 'zero',\n      grouped: false,\n      valuesAccessor: d => d,\n      y0Accessor: d => d[0],\n      xAxisClassName: 'rd3-barchart-xaxis',\n      yAxisClassName: 'rd3-barchart-yaxis',\n      yAxisTickCount: 4,\n      xIsDate: false,\n      color: {\n        accessor: 'Sequential',\n        colors: d3.scaleOrdinal(d3.schemeBlues[9].reverse())\n      }\n    };\n  },\n\n  _formatInputData: utils.formatInputData,\n\n\n  _getLabels(firstSeries) {\n    // we only need first series to get all the labels\n    const { valuesAccessor, xAccessorBar } = this.props;\n    return valuesAccessor(firstSeries).map(xAccessorBar);\n  },\n\n  _stack(seriesNames) {\n    // Only support columns with all positive or all negative values\n    // https://github.com/mbostock/d3/issues/2265\n    const { stackOffset, xAccessorBar, yAccessorBar, valuesAccessor } = this.props;\n    return d3.stack()\n              .keys(seriesNames)\n              .order(d3.stackOrderNone)\n              .offset(d3.stackOffsetNone);\n  },\n\n  render() {\n    const props = this.props;\n    const yOrient = this.getYOrient();\n\n    const domain = props.domain || {};\n\n    if (props.data.length === 0) {\n      return null;\n    }\n\n    let data = props.data\n    let series;\n    [data, series] = this._formatInputData(props.inputDataLayout, data)\n\n    /* d3 */\n    const _data = this._stack(series)(data);\n    const { innerHeight, innerWidth, trans, svgMargins } = this.getDimensions();\n\n    const xScale = d3.scaleBand()\n    .domain(data.map(d => d.x))\n    .paddingInner(0.1)\n    .paddingOuter(0.1)\n    .range([0, innerWidth])\n\n    const minYDomain = Math.min(0, d3.min(_data, (d) => (d[1])))\n    const maxYDomain = d3.max(_data, (d) => (d[1]))\n    const yDomain = ([d3.min(_data, d => d3.min(d, d => d[1])), d3.max(_data, d => d3.max(d, d => d[1]))])\n    const yScale = d3.scaleLinear().range([innerHeight, 0]).domain(yDomain);\n    const maxYObjects = d3.max(data.map( d => Object.keys(d).length))\n    const origArray = [...Array(maxYObjects).keys()]\n\n    let colorsDomain;\n    let colorsAccessor;\n\n\n    if (this.props.color.accessor === 'Sequential'){\n        colorsDomain = origArray.map(x => x / maxYObjects)\n        colorsAccessor = this.props.colorAccessorSequential\n    }else{\n        colorsDomain = series\n        colorsAccessor = this.props.colorAccessorOrdinal\n    }\n\n    return (\n      <span>\n        <Chart\n          viewBox={this.getViewBox()}\n          legend={props.legend}\n          data={props.data}\n          margins={props.margins}\n          color={this.props.color}\n          colorsDomain={colorsDomain}\n          colorsAccessor={colorsAccessor}\n          width={props.width}\n          height={props.height}\n          title={props.title}\n          shouldUpdate={!this.state.changeState}\n          series={series}\n          svgLegend={props.svgLegend}\n          svgChart={props.svgChart}\n          legendStyle={props.legendStyle}\n          background={props.background}\n          svgTitle={props.svgTitle}\n        >\n          <g transform={trans} className={props.chartClassName}>\n            <XGrid\n              xAxisClassName={props.xAxisClassName}\n              xAxisTickValues={props.xAxisTickValues}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              xScale={xScale}\n              margins={svgMargins}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              gridVertical={props.gridVertical}\n              gridVerticalStroke={props.gridVerticalStroke}\n              gridVerticalStrokeWidth={props.gridVerticalStrokeWidth}\n              gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n              gridText={props.gridText}\n              translateTickLabel_Y_X={props.translateTickLabel_Y_X}\n              translateTickLabel_Y_Y={props.translateTickLabel_Y_Y}\n              translateTickLabel_X_X={props.translateTickLabel_X_X}\n              translateTickLabel_X_Y={props.translateTickLabel_X_Y}\n              xIsDate={props.xIsDate}\n            />\n            <YGrid\n              yAxisClassName={props.yAxisClassName}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              yScale={yScale}\n              margins={svgMargins}\n              yAxisTickCount={props.yAxisTickCount}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              gridHorizontal={props.gridHorizontal}\n              gridHorizontalStroke={props.gridHorizontalStroke}\n              gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n              gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n              gridText={props.gridText}\n              translateTickLabel_Y_X={props.translateTickLabel_Y_X}\n              translateTickLabel_Y_Y={props.translateTickLabel_Y_Y}\n              translateTickLabel_X_X={props.translateTickLabel_X_X}\n              translateTickLabel_X_Y={props.translateTickLabel_X_Y}\n            />\n            <DataSeries\n              yScale={yScale}\n              xScale={xScale}\n              margins={svgMargins}\n              _data={_data}\n              series={series}\n              width={innerWidth}\n              height={innerHeight}\n              grouped={props.grouped}\n              color={this.props.color}\n              colorsDomain={colorsDomain}\n              colorsAccessor={colorsAccessor}\n              hoverAnimation={props.hoverAnimation}\n              valuesAccessor={props.valuesAccessor}\n              xAccessorBar={props.xAccessorBar}\n              yAccessorBar={props.yAccessorBar}\n              y0Accessor={props.y0Accessor}\n              onMouseOver={this.onMouseOver}\n              onMouseLeave={this.onMouseLeave}\n            />\n            <YAxis\n              yAxisClassName={props.yAxisClassName}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              yScale={yScale}\n              margins={svgMargins}\n              yAxisTickCount={props.yAxisTickCount}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n            />\n            <XAxis\n              xAxisClassName={props.xAxisClassName}\n              xAxisTickValues={props.xAxisTickValues}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              xScale={xScale}\n              margins={svgMargins}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n            />\n\n\n\n          </g>\n        </Chart>\n        {(props.showTooltip ? <Tooltip {...this.state.tooltip} /> : null)}\n      </span>\n    );\n  },\n});\n","'use strict';\n\nimport * as ReactDOM from 'react-dom'\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\nconst Bar = require('./Bar');\nconst shade = require('../utils').shade;\n\n\nmodule.exports = createReactClass({\n\n  propTypes: {\n    fill: PropTypes.string,\n    onMouseOver: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n  },\n\n\n  getInitialState() {\n    return {\n      // fill is named as fill instead of initialFill to avoid\n      // confusion when passing down props from top parent\n      fill: this.props.fill,\n      fillCtl: this.props.fill,\n    };\n  },\n\n  statics: { getDerivedStateFromProps(props, current_state) {\n    if (current_state.fillCtl !== props.fill) {\n      return {\n        fillCtl:props.fill,\n        fill: props.fill,\n      }\n    }\n    return null\n  }},\n\n  _animateBar() {\n    const rect = ReactDOM.findDOMNode(this).getBoundingClientRect();\n    this.props.onMouseOver.call(this, rect.right, rect.top, this.props.datapoint);\n    this.setState({\n      fill: shade(this.props.fill, 0.2),\n    });\n  },\n\n  _restoreBar() {\n    this.props.onMouseLeave.call(this);\n    this.setState({\n      fill: this.props.fill,\n    });\n  },\n\n  render() {\n    const props = this.props;\n\n    // animation controller\n    let handleMouseOver;\n    let handleMouseLeave;\n    if (props.hoverAnimation) {\n      handleMouseOver = this._animateArea;\n      handleMouseLeave = this._restoreArea;\n    } else {\n      handleMouseOver = handleMouseLeave = null;\n    }\n\n\n    // Remove props\n    const newProps = Object.assign({}, this.props);\n    delete newProps.hoverAnimation;\n\n    return (\n      <Bar\n        {...newProps}\n        fill={this.state.fill}\n        onMouseOver={props.hoverAnimation ? this._animateBar : null}\n        onMouseLeave={props.hoverAnimation ? this._restoreBar : null}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst BarContainer = require('./BarContainer');\n\nconst {\n  CartesianChartPropsMixin,\n} = require('../mixins');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n  mixins: [CartesianChartPropsMixin],\n  propTypes: {\n    _data: PropTypes.array,\n    series: PropTypes.array,\n    grouped: PropTypes.bool,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    height: PropTypes.number,\n    width: PropTypes.number,\n    valuesAccessor: PropTypes.func,\n    xAccessorBar: PropTypes.func,\n    yAccessorBar: PropTypes.func,\n    y0Accessor: PropTypes.func,\n    onMouseOver: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    hoverAnimation: PropTypes.bool, // TODO: prop types?\n    xScale: PropTypes.any,\n    yScale: PropTypes.any,\n  },\n\n  mixins: [CartesianChartPropsMixin],\n\n  _renderBarSeries() {\n    const { _data, valuesAccessor } = this.props;\n    return _data.map((layer, seriesIdx) => {\n      return (valuesAccessor(layer).map(segment => this._renderBarContainer(segment, seriesIdx)))\n      }\n    )\n\n  },\n\n  _renderBarContainer(segment, seriesIdx) {\n\n    const { color, colorsAccessor, colorsDomain, grouped, series, xScale, yScale } = this.props;\n    const barHeight = Math.abs(yScale(this.props.y0Accessor(segment)) - yScale(this.props.yAccessorBar(segment)));\n    const yWidth = yScale(this.props.y0Accessor(segment) + this.props.yAccessorBar(segment));\n    let y = grouped ? yScale(this.props.yAccessorBar(segment)) : yWidth;\n    const key = this.props.series[seriesIdx] + segment.data.x +segment[1];\n    const height = Math.abs(this.props.y0Accessor(segment) - this.props.yAccessorBar(segment))\n\n    y = ((this.props.yAccessorBar(segment) >= 0) ? y : y - barHeight)\n    y = y || 0\n\n\n\n\n    return (\n      <BarContainer\n        key={key}\n        height={barHeight || 0}\n        width={xScale.bandwidth() }\n        x={ xScale(this.props.xAccessorBar(segment)) }\n        y={y}\n        fill={this.props.color.colors(colorsAccessor(colorsDomain, seriesIdx))}\n        hoverAnimation={this.props.hoverAnimation}\n        onMouseOver={this.props.onMouseOver}\n        onMouseLeave={this.props.onMouseLeave}\n        datapoint={{\n          xValue: this.props.xAccessorBar(segment),\n          yValue: this.props.yAccessorBar(segment),\n          seriesName: this.props.series[seriesIdx],\n          height: height || 0\n        }}\n      />\n    );\n  },\n\n  render() {\n    return (\n      <g>{this._renderBarSeries()}</g>\n    );\n  },\n});\n","\nexports.BarChart = require('./BarChart');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Candle',\n\n  propTypes: {\n    className: PropTypes.string,\n    shapeRendering: PropTypes.string,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.number,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-candlestick-candle',\n      shapeRendering: 'crispEdges',\n      stroke: '#000',\n      strokeWidth: 1,\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    return (\n      <rect\n        className={props.className}\n        fill={props.candleFill}\n        x={props.candleX}\n        y={props.candleY}\n        stroke={props.candleFill}\n        strokeWidth={props.strokeWidth}\n        style={{ shapeRendering: props.shapeRendering }}\n        width={props.candleWidth}\n        height={props.candleHeight}\n        onMouseOver={props.handleMouseOver}\n        onMouseLeave={props.handleMouseLeave}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst utils = require('../utils');\nconst DataSeries = require('./DataSeries');\nconst { Chart, XAxis, YAxis, XGrid, YGrid } = require('../common');\nconst { ViewBoxMixin, CartesianChartPropsMixin } = require('../mixins');\n\nmodule.exports = createReactClass({\n\n  displayName: 'CandleStickChart',\n\n  propTypes: {\n    data: PropTypes.oneOfType([\n      PropTypes.array,\n      PropTypes.object,\n    ]),\n    fillUp: PropTypes.func,\n    fillUpAccessor: PropTypes.func,\n    fillDown: PropTypes.func,\n    fillDownAccessor: PropTypes.func,\n    hoverAnimation: PropTypes.bool,\n    xAxisFormatter: PropTypes.func,\n    xAxisTickInterval: PropTypes.object,\n    xAxisTickValues: PropTypes.array,\n    yAxisFormatter: PropTypes.func,\n    yAxisTickCount: PropTypes.number,\n    yAxisTickValues: PropTypes.array,\n  },\n\n  mixins: [CartesianChartPropsMixin, ViewBoxMixin],\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-candlestick',\n      xAxisClassName: 'rd3-candlestick-xaxis',\n      yAxisClassName: 'rd3-candlestick-yaxis',\n      data: [],\n      fillUp: () => '#009900',\n      fillUpAccessor: (d, idx) => idx,\n      // fillDown: d3.scaleOrdinal(d3.schemeCategory10),\n      fillDown: () => '#FF3300',\n      fillDownAccessor: (d, idx) => idx,\n      hoverAnimation: true,\n      margins: { top: 10, right: 20, bottom: 30, left: 45 },\n      xAccessor: (d) => d.x,\n      yAccessor: (d) => ({ open: d.open, high: d.high, low: d.low, close: d.close }),\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const { innerWidth, innerHeight, trans, svgMargins } = this.getDimensions();\n    const yOrient = this.getYOrient();\n    const domain = props.domain || {};\n\n    if (!Array.isArray(props.data)) {\n      props.data = [props.data];\n    }\n    if (this.props.data && this.props.data.length < 1) {\n      return null;\n    }\n    const flattenedData = utils.flattenData(props.data, props.xAccessor, props.yAccessor);\n\n    const xValues = flattenedData.xValues;\n    const yValues = flattenedData.yValues;\n    const scales = utils.calculateScales(\n      innerWidth, innerHeight, xValues, yValues, domain.x, domain.y);\n\n    const dataSeries = props.data.map((series, idx) => (\n        <DataSeries\n          key={idx}\n          seriesName={series.name}\n          index={idx}\n          xScale={scales.xScale}\n          yScale={scales.yScale}\n          data={series.values}\n          fillUp={props.fillUp(props.fillUpAccessor(series, idx))}\n          fillDown={props.fillDown(props.fillDownAccessor(series, idx))}\n          xAccessor={props.xAccessor}\n          yAccessor={props.yAccessor}\n          hoverAnimation={props.hoverAnimation}\n        />\n      )\n    );\n\n    return (\n      <Chart\n        viewBox={this.getViewBox()}\n        width={props.width}\n        height={props.height}\n        margins={props.margins}\n        title={props.title}\n      >\n        <g transform={trans} className={props.className}>\n            <XGrid\n              xAxisClassName={props.xAxisClassName}\n              xAxisTickValues={props.xAxisTickValues}\n              xAxisTickCount={props.xAxisTickCount}\n              xAxisTickInterval={props.xAxisTickInterval}\n              xAxisOffset={props.xAxisOffset}\n              xScale={scales.xScale}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              data={props.data}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridVertical={props.gridVertical}\n              gridVerticalStroke={props.gridVerticalStroke}\n              gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n              xIsDate={props.xIsDate}\n              xTickFormat={props.xTickFormat}\n              gridText={props.gridText}\n\n            />\n            <YGrid\n              yAxisClassName={props.yAxisClassName}\n              yScale={scales.yScale}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisTickCount={props.yAxisTickCount}\n              yAxisOffset={props.yAxisOffset}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridHorizontal={props.gridHorizontal}\n              gridHorizontalStroke={props.gridHorizontalStroke}\n              gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n              gridHorizontalStrokeDash={props.gridVerticalStrokeDash}\n              gridText={props.gridText}\n\n            />\n          {dataSeries}\n          <XAxis\n            xAxisClassName={props.xAxisClassName}\n            xScale={scales.xScale}\n            xAxisTickValues={props.xAxisTickValues}\n            xAxisTickInterval={props.xAxisTickInterval}\n            xAxisOffset={props.xAxisOffset}\n            tickFormatting={props.xAxisFormatter}\n            tickStroke={props.xAxisTickStroke}\n            tickTextStroke={props.xAxisTickTextStroke}\n            xAxisLabel={props.xAxisLabel}\n            xAxisLabelOffset={props.xAxisLabelOffset}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={innerHeight}\n            horizontalChart={props.horizontal}\n          />\n          <YAxis\n            yAxisClassName={props.yAxisClassName}\n            yScale={scales.yScale}\n            yAxisTickValues={props.yAxisTickValues}\n            yAxisOffset={props.yAxisOffset}\n            yAxisTickCount={props.yAxisTickCount}\n            tickFormatting={props.yAxisFormatter}\n            tickStroke={props.yAxisTickStroke}\n            tickTextStroke={props.yAxisTickTextStroke}\n            yAxisLabel={props.yAxisLabel}\n            yAxisLabelOffset={props.yAxisLabelOffset}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={props.height}\n            horizontalChart={props.horizontal}\n          />\n        </g>\n      </Chart>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst utils = require('../utils');\nconst Candle = require('./Candle');\nconst Wick = require('./Wick');\n\nmodule.exports = createReactClass({\n\n  displayName: 'CandleStickContainer',\n\n  propTypes: {\n    candleX: PropTypes.number,\n    candleY: PropTypes.number,\n    className: PropTypes.string,\n    candleFill: PropTypes.string,\n    candleHeight: PropTypes.number,\n    candleWidth: PropTypes.number,\n    wickX1: PropTypes.number,\n    wickX2: PropTypes.number,\n    wickY1: PropTypes.number,\n    wickY2: PropTypes.number,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-candlestick-container',\n    };\n  },\n\n  getInitialState() {\n    // state for animation usage\n    return {\n      candleWidth: this.props.candleWidth,\n      candleFill: this.props.candleFill,\n    };\n  },\n\n  _animateCandle() {\n    this.setState({\n      candleWidth: this.props.candleWidth * 1.5,\n      candleFill: utils.shade(this.props.candleFill, -0.2),\n    });\n  },\n\n  _restoreCandle() {\n    this.setState({\n      candleWidth: this.props.candleWidth,\n      candleFill: this.props.candleFill,\n    });\n  },\n\n  render() {\n    const props = this.props;\n    const state = this.state;\n\n    // animation controller\n    let handleMouseOver;\n    let handleMouseLeave;\n    if (props.hoverAnimation) {\n      handleMouseOver = this._animateCandle;\n      handleMouseLeave = this._restoreCandle;\n    } else {\n      handleMouseOver = handleMouseLeave = null;\n    }\n\n    return (\n      <g className={props.className}>\n       <Wick\n         wickX1={props.wickX1}\n         wickX2={props.wickX2}\n         wickY1={props.wickY1}\n         wickY2={props.wickY2}\n       />\n       <Candle\n         candleFill={state.candleFill}\n         candleWidth={state.candleWidth}\n         candleX={props.candleX - ((state.candleWidth - props.candleWidth) / 2)}\n         candleY={props.candleY}\n         candleHeight={props.candleHeight}\n         handleMouseOver={handleMouseOver}\n         handleMouseLeave={handleMouseLeave}\n       />\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst CandlestickContainer = require('./CandlestickContainer');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    fillUp: PropTypes.string.isRequired,\n    fillDown: PropTypes.string.isRequired,\n  },\n\n  render() {\n    const props = this.props;\n\n    const xRange = props.xScale.range();\n    const width = Math.abs(xRange[0] - xRange[1]);\n    const candleWidth = (width / (props.data.length + 2)) * 0.5;\n\n    const dataSeriesArray = props.data.map((d, idx) => {\n      // Candles\n      const ohlc = props.yAccessor(d);\n      const candleX = props.xScale(props.xAccessor(d)) - 0.5 * candleWidth;\n      const candleY = props.yScale(Math.max(ohlc.open, ohlc.close));\n      const candleHeight = Math.abs(props.yScale(ohlc.open) - props.yScale(ohlc.close));\n      const wickY2 = props.yScale(ohlc.low);\n      const candleFill = (ohlc.open <= ohlc.close) ? props.fillUp : props.fillDown;\n\n      // Wicks\n      const wickX1 = props.xScale(props.xAccessor(d));\n      const wickY1 = props.yScale(ohlc.high);\n      const wickX2 = wickX1;\n\n      return (\n        <CandlestickContainer\n          key={idx}\n          candleFill={candleFill}\n          candleHeight={candleHeight}\n          candleWidth={candleWidth}\n          candleX={candleX}\n          candleY={candleY}\n          wickX1={wickX1}\n          wickX2={wickX2}\n          wickY1={wickY1}\n          wickY2={wickY2}\n          hoverAnimation={props.hoverAnimation}\n        />\n      );\n    }, this);\n\n    return (\n      <g>\n        {dataSeriesArray}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Wick',\n\n  propTypes: {\n    className: PropTypes.string,\n    shapeRendering: PropTypes.string,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.number,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-candlestick-wick',\n      stroke: '#666666',\n      strokeWidth: 1,\n      shapeRendering: 'crispEdges',\n    };\n  },\n\n  render() {\n    const props = this.props;\n    return (<line\n      stroke={props.stroke}\n      strokeWidth={props.strokeWidth}\n      // style={{ shapeRendering: props.shapeRendering }}\n      className={props.className}\n      x1={props.wickX1}\n      y1={props.wickY1}\n      x2={props.wickX2}\n      y2={props.wickY2}\n    />);\n  },\n});\n","\nexports.CandlestickChart = require('./CandlestickChart');\n","'use strict';\n\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n    displayName: 'BreadCrumb',\n    render() {\n        const breadcrumb = [];\n        this.props.breadcrumb.reverse().map( (bc, i, {length}) => {\n            let label = ''\n            bc.label === 'Origin' ? label = this.props.title : label=bc.label\n\n            if (i + 1 === length) {\n                breadcrumb.push(<div key={bc.label} onClick={()=>bc.ev(bc.label, 'up')} style={{\"paddingLeft\":\"4px\"}}> { label } </div>)\n            }else {\n                breadcrumb.push(<div key={bc.label} onClick={()=>bc.ev(bc.label, 'up')} style={{\"paddingLeft\":\"4px\"}}> { label + \" > \"}  </div>)\n            }\n        })\n        return (\n            <div style={{display: \"flex\", \"flexDirection\": \"row\", \"justify-content\":\"center\"}}>\n            {breadcrumb}\n            </div>\n        )\n    }\n})","'use strict';\nimport ChartContext from '../ChartContext';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\n\nmodule.exports = createReactClass({\n\n  displayName: 'Legend',\n\n  propTypes: {\n    className: PropTypes.string,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    data: PropTypes.array.isRequired,\n    itemClassName: PropTypes.string,\n    margins: PropTypes.object,\n    text: PropTypes.string,\n    // width: PropTypes.number.isRequired,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-legend',\n      itemClassName: 'rd3-legend-item',\n      text: '#000',\n      legendStyle: {\n                textStyle:{\n                  fontSize: '50%',\n                  verticalAlign: 'top',\n                },\n                bulletStyle:{\n                  lineHeight: '60%',\n                  fontSize: '200%',\n                }\n              }\n    }\n  },\n\n\n\n  render() {\n\n    /* Context */\n    this.contextType = ChartContext;\n    const { chartStyle }  = this.contextType._currentValue;\n\n\n    const props = this.props;\n    const textStyle = props.legendStyle.textStyle;\n    const legendItems = [];\n\n    const fontSize = props.legendStyle.textStyle.fontSize;\n    const fontWeight = props.legendStyle.textStyle.fontWeight;\n\n    /* TODO - Legado !!!\n      Deixar a entrada de dados flat para todos os graficos.\n    */\n   if (props.series !== undefined){\n     props.series.map( (serie, idx) => {\n       let itemStyle = Object.assign({},props.legendStyle.bulletStyle)\n       itemStyle.color = props.color.colors(props.colorsAccessor(props.colorsDomain, idx));\n\n        const rev_idx = props.series.length - idx\n        legendItems.push(\n          <g key={`series_circle:${idx}`}>\n            <circle cx=\"30\" cy={10 + 15 * rev_idx} r=\"4\" fill={itemStyle.color} id=\"circle\"/>\n            <text\n              className= {`rd3-legend-text ${chartStyle && chartStyle}` }\n              x=\"42\"\n              y={14 + 15 * rev_idx}\n            >\n              {serie}\n            </text>\n          </g>\n        );\n      })\n    }else{\n      if (! props.color){ return []}\n      props.data.forEach((series, idx) => {\n        let itemStyle = Object.assign({},props.legendStyle.bulletStyle)\n        itemStyle.color = props.color.colors(props.colorsAccessor(series, idx));\n\n        const rev_idx = props.series.length - idx\n        legendItems.push(\n          <g key={`circle:${idx}`}>\n            <circle cx=\"30\" cy={10 + 15 * rev_idx} r=\"4\" fill={itemStyle.color} id=\"circle\"/>\n            <text\n              className= {`rd3-legend-text ${chartStyle && chartStyle}` }\n              x=\"50\"\n              y={14 + 15 * rev_idx}\n              // style={{'font-size':'0.8em'}}\n            >\n              {series.name}\n            </text>\n          </g>\n        );\n      });\n    }\n    return (\n      legendItems\n    );\n  },\n});\n\n\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  // TODO: PropTypes.any\n  propTypes: {\n    structure: PropTypes.any,\n    id: PropTypes.any,\n    vnode: PropTypes.any,\n  },\n\n  _animateCircle() {\n    this.props.structure.cursor('voronoi').cursor(this.props.id).update(() => 'active');\n    // this.props.pubsub.emit('animate', this.props.id);\n  },\n\n  _restoreCircle() {\n    this.props.structure.cursor('voronoi').cursor(this.props.id).update(() => 'inactive');\n    // this.props.pubsub.emit('restore', this.props.id);\n  },\n\n  _drawPath(d) {\n    if (d === undefined) {\n      return '';\n    }\n    return `M${d.join(',')}Z`;\n  },\n\n  render() {\n    return (<path\n      onMouseOver={this._animateCircle}\n      onMouseOut={this._restoreCircle}\n      fill=\"white\"\n      opacity=\"0\"\n      d={this._drawPath(this.props.vnode)}\n    />);\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  propTypes: {\n    x: PropTypes.number,\n    y: PropTypes.number,\n    child: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.element,\n    ]),\n    show: PropTypes.bool,\n  },\n\n  render() {\n    const props = this.props;\n    const display = this.props.show ? 'inherit' : 'none';\n    const containerStyles = {\n      position: 'fixed',\n      top: props.y,\n      left: props.x,\n      display,\n      opacity: 0.8,\n      width:'100px'\n    };\n\n    // TODO: add 'right: 0px' style when tooltip is off the chart\n    const tooltipStyles = {\n      position: 'absolute',\n      backgroundColor: 'white',\n      border: '1px solid',\n      borderColor: '#ddd',\n      borderRadius: '4px',\n      padding: '5px',\n      marginLeft: '10px',\n      marginRight: '10px',\n      marginTop: '-15px',\n      width:'100px'\n    };\n    return (\n      <div style={containerStyles}>\n        <div style={tooltipStyles} className=\"rd3-legend-text\">\n          {props.child}\n        </div>\n      </div>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\nconst d3 = require('d3');\nconst Polygon = require('./Polygon');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Voronoi',\n\n  // TODO: PropTypes.any\n  propTypes: {\n    xScale: PropTypes.any,\n    yScale: PropTypes.any,\n    width: PropTypes.any,\n    height: PropTypes.any,\n    structure: PropTypes.any,\n    data: PropTypes.any,\n  },\n\n  render() {\n    const xScale = this.props.xScale;\n    const yScale = this.props.yScale;\n\n    const voronoi = d3.geom.voronoi()\n      .x(d => xScale(d.coord.x))\n      .y(d => yScale(d.coord.y))\n      .clipExtent([[0, 0], [this.props.width, this.props.height]]);\n\n    const regions = voronoi(this.props.data).map((vnode, idx) => (\n      <Polygon structure={this.props.structure} key={idx} id={vnode.point.id} vnode={vnode} />\n    ));\n\n    return (\n      <g>\n        {regions}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nimport ChartContext from '../../ChartContext';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'AxisLine',\n\n  propTypes: {\n    scale: PropTypes.func.isRequired,\n    innerTickSize: PropTypes.number,\n    outerTickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickArguments: PropTypes.array,\n    fill: PropTypes.string,\n    stroke: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      innerTickSize: 6,\n      outerTickSize: 6,\n      tickPadding: 3,\n      fill: 'none',\n      tickArguments: [10],\n      tickValues: null,\n      tickFormat: null,\n    };\n  },\n\n\n  _d3_scaleExtent(domain) {\n    const start = domain[0];\n    const stop = domain[domain.length - 1];\n    return start < stop ? [start, stop] : [stop, start];\n  },\n\n  _d3_scaleRange(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : this._d3_scaleExtent(scale.range());\n  },\n\n  render() {\n    const props = this.props;\n    const sign = props.orient === 'top' || props.orient === 'left' ? -1 : 1;\n\n    /* Context */\n    this.contextType = ChartContext;\n    const { chartStyle }  = this.contextType._currentValue;\n\n    const range = this._d3_scaleRange(props.scale);\n\n    let d;\n    if (props.orient === 'bottom' || props.orient === 'top') {\n      d = `M${range[0]},${sign * props.outerTickSize}V0H${range[1]}V${sign * props.outerTickSize}`;\n    } else {\n      d = `M${sign * props.outerTickSize},${range[0]}H0V${range[1]}H${sign * props.outerTickSize}`;\n    }\n\n    return (\n      <path\n        // className=\"domain\"\n        className = {`rd3-axis-domain ${chartStyle && chartStyle}` }\n        d={d}\n        style={{ shapeRendering: 'crispEdges' }}\n        // fill={props.fill}\n        fill='none'\n        stroke='#000000'\n        strokeWidth='0.5'\n\n        // stroke={props.stroke}\n        // strokeWidth={props.strokeWidth}\n      >\n      </path>\n    );\n  },\n});\n","'use strict';\nimport ChartContext from '../../ChartContext';\n\nconst utils = require('../../utils');\n\n\nconst React = require('react');\nconst PropTypes = require('prop-types');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'AxisTick',\n\n  propTypes: {\n    scale: PropTypes.func.isRequired,\n    orient: PropTypes.oneOf(['top', 'bottom', 'left', 'right']).isRequired,\n    orient2nd: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    horizontal: PropTypes.bool,\n    tickArguments: PropTypes.array,\n    tickValues: PropTypes.array,\n    innerTickSize: PropTypes.number,\n    outerTickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickFormat: PropTypes.func,\n    tickStroke: PropTypes.string,\n    tickTextStroke: PropTypes.string,\n    gridHorizontal: PropTypes.bool,\n    gridVertical: PropTypes.bool,\n    gridHorizontalStroke: PropTypes.string,\n    gridVerticalStroke: PropTypes.string,\n    gridHorizontalStrokeWidth: PropTypes.number,\n    gridVerticalStrokeWidth: PropTypes.number,\n    gridHorizontalStrokeDash: PropTypes.string,\n    gridVerticalStrokeDash: PropTypes.string,\n    gridText:PropTypes.object,\n  },\n  getDefaultProps() {\n    return {\n      // translateTickLabel: 'translate(\"10px\",0)',\n      translateTickLabel_Y_X: 0,\n      translateTickLabel_Y_Y: 0,\n      translateTickLabel_X_X: 0,\n      translateTickLabel_X_Y: 0,\n\n      innerTickSize: 6,\n      outerTickSize: 6,\n      tickStroke: '#000',\n      tickPadding: 6,\n      tickArguments: [10],\n      tickValues: null,\n      gridHorizontal: false,\n      gridVertical: false,\n      gridHorizontalStroke: '#D8D7D7',\n      gridVerticalStroke: '#D8D7D7',\n      gridHorizontalStrokeWidth: 0.4,\n      gridVerticalStrokeWidth: 0.4,\n      gridHorizontalStrokeDash: '5, 5',\n      gridVerticalStrokeDash: '5, 5',\n      gridText:{rotate:{\n                    top:null,\n                    right:null,\n                    bottom:null,\n                    left:null\n                },\n                translate:{\n                  text:{x:0, y:0},\n                  line:{x:0, y:0}\n                },\n                font:{\n                  size:'1.0em',\n                  weight:'.01'\n                }\n              },\n      xGridLabelOffset: 50,\n      yGridLabelOffset: 10\n\n    };\n  },\n\n  render() {\n    // debugger\n    const props = this.props;\n\n    /* Context */\n    this.contextType = ChartContext;\n    const { chartStyle }  = this.contextType._currentValue;\n\n\n    let tr;\n    let trText;\n    let gridTextRotate;\n    let gridTextFontSize;\n    let gridTextFontWeight;\n    let textAnchor;\n    let textTransform;\n    let tickFormat;\n    let y1;\n    let y2;\n    let dy;\n    let x1;\n    let x2;\n\n    let gridStrokeWidth;\n    let gridStroke;\n    let gridStrokeDashArray;\n    let x2grid;\n    let y2grid;\n    let gridOn = false;\n    let translateTickLabel;\n    let formatDate;\n    let maxTicksXAxis;\n\n\n    const sign = props.orient === 'top' || props.orient === 'right' ? -1 : 1;\n    const tickSpacing = Math.max(props.innerTickSize, 0) + props.tickPadding;\n\n    const scale = props.scale;\n\n    let ticks;\n    if (props.tickValues) {\n      ticks = props.tickValues;\n    } else if (scale.ticks) {\n      ticks = scale.ticks.apply(scale, props.tickArguments);\n    } else {\n      ticks = scale.domain();\n    }\n\n    if (props.tickFormatting) {\n      tickFormat = props.tickFormatting;\n    } else if (scale.tickFormat) {\n      tickFormat = (d) => d;\n      /* TODO: implement props.tickArguments */\n      // tickFormat = d3.timeFormat(\"%b %y\");\n      // tickFormat = scale.tickFormat.apply(scale, props.tickArguments);\n    } else {\n      tickFormat = (d) => d;\n    }\n\n    const adjustedScale = scale.bandwidth ? d => scale(d) + scale.bandwidth() / 2 : scale;\n\n    // Still working on this\n    // Ticks and lines are not fully aligned\n    // in some orientations\n    const adjustedScaleTransTxtX = (tick) => adjustedScale(tick) + props.gridText.translate.text.x;\n\n    switch (props.orient) {\n      case 'top':\n        tr = (tick) => `translate(${adjustedScale(tick)},0)`;\n        trText = (tick) => `translate(${adjustedScale(tick)},0)`;\n        textAnchor = 'middle';\n        y2 = props.innerTickSize * sign;\n        y1 = tickSpacing * sign;\n        dy = sign < 0 ? '0em' : '.71em';\n        x2grid = 0;\n        y2grid = -props.height;\n        gridTextRotate = props.gridText.rotate.top;\n        break;\n      case 'bottom':\n        tr = (tick) => `translate(${adjustedScale(tick)},0)`;\n        trText = (tick) => `translate(${adjustedScaleTransTxtX(tick)},${props.gridText.translate.text.y})`;\n        textAnchor = 'middle';\n        y2 = props.innerTickSize * sign;\n        y1 = tickSpacing * sign;\n        dy = sign < 0 ? '0em' : '.51em';\n        x2grid = 0;\n        y2grid = -props.height;\n        gridTextRotate = props.gridText.rotate.bottom;\n        translateTickLabel = 'translate(' + props.translateTickLabel_X_X + ',' + props.translateTickLabel_X_Y + ')';\n        formatDate = props.xIsDate === true ? (d) => d3.timeFormat(props.xTickFormat)(d) : (d) => d;\n\n        // tickFormat = d3.timeFormat(\"%b %y\");\n        // formatDate = (d) => d;\n        ticks.length > 40 ? maxTicksXAxis=5 : maxTicksXAxis=1\n        break;\n      case 'left':\n        tr = (tick) => `translate(0,${adjustedScale(tick)})`;\n        trText = (tick) => `translate(0,${adjustedScale(tick)})`;\n        textAnchor = 'end';\n        x2 = props.innerTickSize * -sign;\n        x1 = tickSpacing * -sign;\n        dy = '.32em';\n        x2grid = props.width;\n        y2grid = 0;\n        gridTextRotate = props.gridText.rotate.left;\n        translateTickLabel = 'translate(' + props.translateTickLabel_Y_X + ',' + props.translateTickLabel_Y_Y + ')';\n        formatDate = (d) => utils.nFormatter(d,2);\n        // formatDate = (d) => d;\n        maxTicksXAxis=1;\n        break;\n      case 'right':\n        tr = (tick) => `translate(0,${adjustedScale(tick)})`;\n        trText = (tick) => `translate(0,${adjustedScale(tick)})`;\n        textAnchor = 'start';\n        x2 = props.innerTickSize * -sign;\n        x1 = tickSpacing * -sign;\n        dy = '.32em';\n        x2grid = -props.width;\n        y2grid = 0;\n        gridTextRotate = props.gridText.rotate.right;\n        break;\n      default:\n        break;\n    }\n\n    if (props.horizontalChart) {\n      textTransform = 'rotate(-90)';\n      [y1, x1] = [x1, -y1 || 0];\n\n      switch (props.orient) {\n        case 'top':\n          textAnchor = 'start';\n          dy = '.32em';\n          break;\n        case 'bottom':\n          textAnchor = 'end';\n          dy = '.32em';\n          break;\n        case 'left':\n          textAnchor = 'middle';\n          dy = sign < 0 ? '.71em' : '0em';\n          break;\n        case 'right':\n          textAnchor = 'middle';\n          dy = sign < 0 ? '.71em' : '0em';\n          break;\n        default:\n          break;\n      }\n    }\n\n    if (props.gridHorizontal) {\n      gridOn = true;\n      gridStrokeWidth = props.gridHorizontalStrokeWidth;\n      gridStroke = props.gridHorizontalStroke;\n      gridStrokeDashArray = props.gridHorizontalStrokeDash;\n    } else if (props.gridVertical) {\n      gridOn = true;\n      gridStrokeWidth = props.gridVerticalStrokeWidth;\n      gridStroke = props.gridVerticalStroke;\n      gridStrokeDashArray = props.gridVerticalStrokeDash;\n    }\n\n    // return grid line if grid is enabled and grid line is not on at same position as other axis.\n    const gridLine = (pos) => {\n      if (gridOn\n        && !(props.orient2nd === 'left' && pos === 0)\n        && !(props.orient2nd === 'right' && pos === props.width)\n        && !((props.orient === 'left' || props.orient === 'right') && pos === props.height)\n      ) {\n        return (\n          <line\n          className = {`rd3-svg-grid-lines ${chartStyle && chartStyle}` }\n          x2={x2grid} y2={y2grid}\n          />\n        );\n      }\n      return null;\n    };\n\n    const optionalTextProps = textTransform ? {\n      transform: textTransform,\n    } : {};\n\n    gridTextFontSize = props.gridText.font.size;\n    gridTextFontWeight = props.gridText.font.weight;\n\n    // debugger;\n\n    return (\n    <g>\n      <g>\n        {ticks.map((tick, idx) => (\n            <g key={idx} className=\"tick\" transform={tr(tick)} >\n              {gridLine(adjustedScale(tick))}\n              <line\n                className = {`rd3-svg-grid-ticks ${chartStyle && chartStyle}` }\n                x2={x2}\n                y2={y2}\n              />\n            </g>\n          ))\n      }\n      </g>\n\n      /* Move all tick labels at once */\n      <g transform={translateTickLabel} className= {`rd3-axis-text-group ${chartStyle && chartStyle}` }>\n        {ticks.filter((tick, idx) => (idx%[maxTicksXAxis] === 0 )).map((tick, idx) => (\n\n\n          <g className=\"tickText\" transform={trText(tick)} key={idx} >\n              <text\n                strokeWidth={gridTextFontWeight}\n                dy={dy} x={x1} y={y1}\n                style={{ stroke: props.tickTextStroke, fill: props.tickTextStroke, fontSize: gridTextFontSize}}\n                textAnchor={textAnchor}\n                {...optionalTextProps}\n                transform={gridTextRotate}\n              >\n                {`${tickFormat(tick)}`.split('\\n').map((tickLabel, index) => {\n                  {/* debugger; */}\n                  return(\n                    <tspan\n                      className= {`rd3-axis-text ${chartStyle && chartStyle}` }\n                    x={x1}\n                    dy={dy}\n                    key={index}\n                    >\n                    {/* {tickLabel} */}\n                      {formatDate(tick)}\n                    </tspan>)\n                })}\n              </text>\n              </g>\n              ))}\n      </g>\n    </g>\n\n    );\n  },\n});\n","'use strict';\n\nimport ChartContext from '../../ChartContext';\n\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Label',\n\n  propTypes: {\n    height: PropTypes.number,\n    horizontalChart: PropTypes.bool,\n    horizontalTransform: PropTypes.string,\n    label: PropTypes.string.isRequired,\n    width: PropTypes.number,\n    strokeWidth: PropTypes.number,\n    textAnchor: PropTypes.string,\n    verticalTransform: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      horizontalTransform: 'rotate(270)',\n      strokeWidth: 0.01,\n      textAnchor: 'middle',\n      verticalTransform: 'rotate(0)',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    if (!props.label) {\n      return <text />;\n    }\n\n    let transform;\n    let x;\n    let y;\n    if (props.orient === 'top' || props.orient === 'bottom') {\n      transform = props.verticalTransform;\n      x = props.width / 2;\n      y = props.offset;\n\n      if (props.horizontalChart) {\n        transform = `rotate(180 ${x} ${y}) ${transform}`;\n      }\n    } else {  // left, right\n      transform = props.horizontalTransform;\n      x = -props.height / 2;\n      if (props.orient === 'left') {\n        y = -props.offset;\n      } else {\n        y = props.offset;\n      }\n    }\n\n\n    return (\n      <ChartContext.Consumer>\n        {context => (\n          <text\n            className= {`rd3-axis-labels ${context && context.chartStyle}` }\n            strokeWidth={props.strokeWidth.toString()}\n            textAnchor={props.textAnchor}\n            transform={transform}\n            y={y}\n            x={x}\n            // style={{'font-size':'1.4em'}}\n\n          >\n            {props.label}\n          </text>\n        )}\n      </ChartContext.Consumer>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\nconst d3 = require('d3');\nconst AxisTicks = require('./AxisTicks');\nconst AxisLine = require('./AxisLine');\nconst Label = require('./Label');\n\nmodule.exports = createReactClass({\n\n  displayName: 'XAxis',\n\n  propTypes: {\n    fill: PropTypes.string,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    horizontalChart: PropTypes.bool,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.string,\n    tickStroke: PropTypes.string,\n    tickTextStroke: PropTypes.string,\n    xAxisClassName: PropTypes.string,\n    xAxisLabel: PropTypes.string,\n    xAxisTickValues: PropTypes.array,\n    xAxisOffset: PropTypes.number,\n    xScale: PropTypes.func.isRequired,\n    xOrient: PropTypes.oneOf(['top', 'bottom']),\n    yOrient: PropTypes.oneOf(['left', 'right']),\n    gridVertical: PropTypes.bool,\n    gridVerticalStroke: PropTypes.string,\n    gridVerticalStrokeWidth: PropTypes.number,\n    gridVerticalStrokeDash: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: 'none',\n      stroke: 'none',\n      strokeWidth: '1',\n      tickStroke: '#000',\n      xAxisClassName: 'rd3-x-axis',\n      xAxisLabel: '',\n      xAxisLabelOffset: 10,\n      xAxisOffset: 0,\n      xOrient: 'bottom',\n      yOrient: 'left',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const t = `translate(0 ,${props.xAxisOffset + props.height})`;\n\n    let tickArguments;\n    if (typeof props.xAxisTickCount !== 'undefined') {\n      tickArguments = [props.xAxisTickCount];\n    }\n\n    if (typeof props.xAxisTickInterval !== 'undefined') {\n      // tickArguments = [d3.time[props.xAxisTickInterval.unit], props.xAxisTickInterval.interval];\n    }\n\n    return (\n      <g\n        className={props.xAxisClassName}\n        transform={t}\n      >\n        <AxisLine\n          scale={props.xScale}\n          stroke={props.stroke}\n          orient={props.xOrient}\n          outerTickSize={props.tickSize}\n          {...props}\n        />\n        <Label\n          horizontalChart={props.horizontalChart}\n          label={props.xAxisLabel}\n          offset={props.xAxisLabelOffset}\n          orient={props.xOrient}\n          margins={props.margins}\n          width={props.width}\n        />\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\nconst d3 = require('d3');\nconst AxisTicks = require('./AxisTicks');\nconst AxisLine = require('./AxisLine');\nconst Label = require('./Label');\n\nmodule.exports = createReactClass({\n\n  displayName: 'XGrid',\n\n  propTypes: {\n    fill: PropTypes.string,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    horizontalChart: PropTypes.bool,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.string,\n    tickStroke: PropTypes.string,\n    tickTextStroke: PropTypes.string,\n    xAxisClassName: PropTypes.string,\n    xAxisLabel: PropTypes.string,\n    xAxisTickValues: PropTypes.array,\n    xAxisOffset: PropTypes.number,\n    xScale: PropTypes.func.isRequired,\n    xOrient: PropTypes.oneOf(['top', 'bottom']),\n    yOrient: PropTypes.oneOf(['left', 'right']),\n    gridVertical: PropTypes.bool,\n    gridVerticalStroke: PropTypes.string,\n    gridVerticalStrokeWidth: PropTypes.number,\n    gridVerticalStrokeDash: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: 'none',\n      stroke: 'none',\n      strokeWidth: '1',\n      tickStroke: '#000',\n      xAxisClassName: 'rd3-x-axis',\n      xAxisLabel: '',\n      xAxisLabelOffset: 10,\n      xAxisOffset: 0,\n      xOrient: 'bottom',\n      yOrient: 'left',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const t = `translate(0 ,${props.xAxisOffset + props.height})`;\n\n    let tickArguments;\n    if (typeof props.xAxisTickCount !== 'undefined') {\n      tickArguments = [props.xAxisTickCount];\n    }\n\n    if (typeof props.xAxisTickInterval !== 'undefined') {\n      // tickArguments = [d3.time[props.xAxisTickInterval.unit], props.xAxisTickInterval.interval];\n    }\n\n    return (\n      <g\n        className={props.xAxisClassName}\n        transform={t}\n      >\n        <AxisTicks\n          tickValues={props.xAxisTickValues}\n          tickFormatting={props.tickFormatting}\n          tickArguments={tickArguments}\n          tickStroke={props.tickStroke}\n          tickTextStroke={props.tickTextStroke}\n          innerTickSize={props.tickSize}\n          scale={props.xScale}\n          orient={props.xOrient}\n          orient2nd={props.yOrient}\n          height={props.height}\n          width={props.width}\n          horizontalChart={props.horizontalChart}\n          gridVertical={props.gridVertical}\n          gridVerticalStroke={props.gridVerticalStroke}\n          gridVerticalStrokeWidth={props.gridVerticalStrokeWidth}\n          gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n          gridText={props.gridText}\n\n          translateTickLabel_X_X={props.translateTickLabel_X_X}\n          translateTickLabel_X_Y={props.translateTickLabel_X_Y}\n          xIsDate={props.xIsDate}\n          xTickFormat={props.xTickFormat}\n\n        />\n\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst createReactClass = require('create-react-class');\nconst React = require('react');\nconst d3 = require('d3');\nconst AxisLine = require('./AxisLine');\nconst Label = require('./Label');\n\nmodule.exports = createReactClass({\n\n  displayName: 'YAxis',\n\n  propTypes: {\n    fill: PropTypes.string,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.string,\n    tickStroke: PropTypes.string,\n    tickTextStroke: PropTypes.string,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    horizontalChart: PropTypes.bool,\n    yAxisClassName: PropTypes.string,\n    yAxisLabel: PropTypes.string,\n    yAxisOffset: PropTypes.number,\n    yAxisTickValues: PropTypes.array,\n    xOrient: PropTypes.oneOf(['top', 'bottom']),\n    yOrient: PropTypes.oneOf(['left', 'right']),\n    yScale: PropTypes.func.isRequired,\n    gridVertical: PropTypes.bool,\n    gridVerticalStroke: PropTypes.string,\n    gridVerticalStrokeWidth: PropTypes.number,\n    gridVerticalStrokeDash: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: 'none',\n      stroke: '#000',\n      strokeWidth: '1',\n      tickStroke: '#000',\n      yAxisClassName: 'rd3-y-axis',\n      yAxisLabel: '',\n      yAxisOffset: 0,\n      xOrient: 'bottom',\n      yOrient: 'left',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    let t;\n    if (props.yOrient === 'right') {\n      t = `translate(${props.yAxisOffset + props.width}, 0)`;\n    } else {\n      t = `translate(${props.yAxisOffset}, 0)`;\n    }\n\n    let tickArguments;\n    if (props.yAxisTickCount) {\n      tickArguments = [props.yAxisTickCount];\n    }\n\n    if (props.yAxisTickInterval) {\n      tickArguments = [d3.time[props.yAxisTickInterval.unit], props.yAxisTickInterval.interval];\n    }\n\n    return (\n      <g\n        className={props.yAxisClassName}\n        transform={t}\n      >\n        <AxisLine\n          orient={props.yOrient}\n          outerTickSize={props.tickSize}\n          scale={props.yScale}\n          stroke={props.stroke}\n          {...props}\n        />\n        <Label\n          height={props.height}\n          horizontalChart={props.horizontalChart}\n          label={props.yAxisLabel}\n          margins={props.margins}\n          offset={props.yAxisLabelOffset}\n          orient={props.yOrient}\n        />\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst createReactClass = require('create-react-class');\nconst React = require('react');\nconst d3 = require('d3');\nconst AxisTicks = require('./AxisTicks');\nconst AxisLine = require('./AxisLine');\nconst Label = require('./Label');\n\nmodule.exports = createReactClass({\n\n  displayName: 'YGrid',\n\n  propTypes: {\n    fill: PropTypes.string,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.string,\n    tickStroke: PropTypes.string,\n    tickTextStroke: PropTypes.string,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    horizontalChart: PropTypes.bool,\n    yAxisClassName: PropTypes.string,\n    yAxisLabel: PropTypes.string,\n    yAxisOffset: PropTypes.number,\n    yAxisTickValues: PropTypes.array,\n    xOrient: PropTypes.oneOf(['top', 'bottom']),\n    yOrient: PropTypes.oneOf(['left', 'right']),\n    yScale: PropTypes.func.isRequired,\n    gridVertical: PropTypes.bool,\n    gridVerticalStroke: PropTypes.string,\n    gridVerticalStrokeWidth: PropTypes.number,\n    gridVerticalStrokeDash: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: 'none',\n      stroke: '#000',\n      strokeWidth: '1',\n      tickStroke: '#000',\n      yAxisClassName: 'rd3-y-axis',\n      yAxisLabel: '',\n      yAxisOffset: 0,\n      xOrient: 'bottom',\n      yOrient: 'left',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    let t;\n    if (props.yOrient === 'right') {\n      t = `translate(${props.yAxisOffset + props.width}, 0)`;\n    } else {\n      t = `translate(${props.yAxisOffset}, 0)`;\n    }\n\n    let tickArguments;\n    if (props.yAxisTickCount) {\n      tickArguments = [props.yAxisTickCount];\n    }\n\n    if (props.yAxisTickInterval) {\n      tickArguments = [d3.time[props.yAxisTickInterval.unit], props.yAxisTickInterval.interval];\n    }\n\n    return (\n      <g\n        className={props.yAxisClassName}\n        transform={t}\n      >\n        <AxisTicks\n          innerTickSize={props.tickSize}\n          orient={props.yOrient}\n          orient2nd={props.xOrient}\n          tickArguments={tickArguments}\n          tickFormatting={props.tickFormatting}\n          tickStroke={props.tickStroke}\n          tickTextStroke={props.tickTextStroke}\n          tickValues={props.yAxisTickValues}\n          scale={props.yScale}\n          height={props.height}\n          width={props.width}\n          horizontalChart={props.horizontalChart}\n          gridHorizontal={props.gridHorizontal}\n          gridHorizontalStroke={props.gridHorizontalStroke}\n          gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n          gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n          gridText={props.gridText}\n\n          translateTickLabel_Y_X={props.translateTickLabel_Y_X}\n          translateTickLabel_Y_Y={props.translateTickLabel_Y_Y}\n\n        />\n\n      </g>\n    );\n  },\n});\n","\nexports.XAxis = require('./XAxis');\nexports.YAxis = require('./YAxis');\nexports.XGrid = require('./XGrid');\nexports.YGrid = require('./YGrid');\n\n","'use strict';\nimport ChartContext from '../../ChartContext';\n\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'BasicChart',\n\n  propTypes: {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    height: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    svgClassName: PropTypes.string,\n    title: PropTypes.node,\n    titleClassName: PropTypes.string,\n    width: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-basic-chart',\n      svgClassName: 'rd3-chart',\n      titleClassName: 'rd3-chart-title',\n      title: '',\n      svgChart:{width:\"100%\", height:\"100%\"}\n    };\n  },\n\n  _renderTitle() {\n    const props = this.props;\n\n    if (props.title !== '') {\n      return (\n        <h4\n          className={props.titleClassName}\n        >\n          {props.title}\n        </h4>\n      );\n    }\n    return null;\n  },\n\n  _renderChart() {\n    const props = this.props;\n\n    return (\n      <svg\n        className={props.svgClassName}\n        height={props.height}\n        viewBox={props.viewBox}\n        width={props.width}\n      >\n        {props.children}\n      </svg>\n    );\n  },\n\n  render() {\n    const props = this.props;\n\n    /* Context */\n    this.contextType = ChartContext;\n    const { chartStyle }  = this.contextType._currentValue;\n\n\n    return (\n      <svg\n        className={`${props.svgClassName} ${chartStyle}`}\n        height={props.height}\n        viewBox={props.viewBox}\n        width={props.width}\n      >\n        <svg viewBox={props.viewBox} width={props.width} height={props.svgChart.height}>\n          {this._renderTitle()}\n          {this._renderChart()}\n        </svg>\n      </svg>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst LegendChart = require('./LegendChart');\nconst BasicChart = require('./BasicChart');\n\nmodule.exports = createReactClass({\n\n  displayName: 'Chart',\n\n  propTypes: {\n    legend: PropTypes.bool,\n    svgClassName: PropTypes.string,\n    titleClassName: PropTypes.string,\n    shouldUpdate: PropTypes.bool,\n  },\n\n  getDefaultProps() {\n    return {\n      legend: false,\n      svgClassName: 'rd3-chart',\n      titleClassName: 'rd3-chart-title',\n      shouldUpdate: true,\n      background:null,\n    };\n  },\n  shouldComponentUpdate(nextProps) {\n    return nextProps.shouldUpdate;\n  },\n\n  render() {\n    const props = this.props;\n\n    if (props.legend) {\n      return (\n        <LegendChart\n          svgClassName={props.svgClassName}\n          titleClassName={props.titleClassName}\n          {...this.props}\n        />\n      );\n    }\n    return (\n      <BasicChart\n        svgClassName={props.svgClassName}\n        titleClassName={props.titleClassName}\n        {...this.props}\n      />\n    );\n  },\n});\n","'use strict';\nimport ChartContext from '../../ChartContext';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst Legend = require('../Legend');\nconst d3 = require('d3');\n\nmodule.exports = createReactClass({\n\n  displayName: 'LegendChart',\n\n  propTypes: {\n    children: PropTypes.node,\n    createClass: PropTypes.string,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    data: PropTypes.array,\n    height: PropTypes.node,\n    legend: PropTypes.bool,\n    legendPosition: PropTypes.string,\n    margins: PropTypes.object,\n    sideOffset: PropTypes.number,\n    svgClassName: PropTypes.string,\n    title: PropTypes.node,\n    titleClassName: PropTypes.string,\n    viewBox: PropTypes.string,\n    width: PropTypes.node,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-legend-chart',\n      colors: d3.scaleOrdinal(d3.schemeCategory10),\n      colorAccessor: (d, idx) => idx,\n      data: [],\n      legend: false,\n      legendPosition: 'right',\n      sideOffset: 90,\n      svgClassName: 'rd3-chart',\n      titleClassName: 'rd3-chart-title',\n      title: '',\n      svgTitle:{\n                title:'Title',\n                x:50,\n                y:50,\n                fontSize:'1.5em',\n              },\n      svgLegend:{\n                position:{\n                    x:'85%',\n                    y:'20%'\n                }},\n      svgChart:{\n                  width:'95%'\n                }\n    };\n  },\n\n  _renderLegend() {\n    const props = this.props;\n\n    if (props.legend) {\n      return (\n        <Legend\n          // colors={props.colors}\n          // colorAccessor={props.colorAccessor}\n          // data={props.data}\n          // colorsDomain={props.colorsDomain}\n          // legendPosition={props.legendPosition}\n          // margins={props.margins}\n          // width={props.sideOffset}\n          // series={props.series}\n          // legendStyle={props.legendStyle}\n          // svgLegend={props.svgLegend}\n          {...this.props}\n\n        />\n      );\n    }\n\n    return null;\n  },\n\n  _renderTitle() {\n    const props = this.props;\n\n    const fontSize = props.svgTitle.fontSize;\n\n    /* Context */\n    this.contextType = ChartContext;\n    const { chartStyle }  = this.contextType._currentValue;\n\n    if (props.title !== '') {\n      return (\n          <text\n            className= {`rd3-svg-title ${chartStyle && chartStyle}` }\n            textAnchor=\"middle\"\n            y={props.svgTitle.y}\n            x={props.svgTitle.x}\n            // style={{'font-size':fontSize}}\n          >\n          {props.title}\n          </text>\n      );\n    }\n    return null;\n  },\n\n  _renderChart() {\n    const props = this.props;\n\n    /* Context */\n    this.contextType = ChartContext;\n    const { chartStyle }  = this.contextType._currentValue;\n\n    return (\n\n      <svg\n        className={`${props.svgClassName} ${chartStyle}`}\n        height=\"100%\"\n        viewBox={props.viewBox}\n        width=\"100%\"\n      >\n        <svg viewBox={props.viewBox} width={props.svgChart.width} height={props.svgChart.height}>\n          {this._renderTitle()}\n          {props.children}\n        </svg>\n        <svg x={props.svgLegend.position.x} y={props.svgLegend.position.y}>\n          {this._renderLegend()}\n        </svg>\n      </svg>\n    );\n  },\n\n  render() {\n    const props = this.props;\n    /* Context */\n    this.contextType = ChartContext;\n    const { chartStyle }  = this.contextType._currentValue;\n\n\n    return (\n      <div\n        className={`${props.className} ${chartStyle}`}\n        // className={props.className}\n\n        style={{ display: 'grid', width: props.width, height: props.height, background:props.background }}\n\n      >\n          <div style={{ display:'flex',  width:props.width, height:props.height  }}>\n\n            {this._renderChart()}\n          </div>\n\n\n      </div>\n    );\n  },\n});\n","exports.Chart = require('./Chart');\n","\nexports.XAxis = require('./axes').XAxis;\nexports.YAxis = require('./axes').YAxis;\nexports.XGrid = require('./axes').XGrid;\nexports.YGrid = require('./axes').YGrid;\n\nexports.Chart = require('./charts').Chart;\n\nexports.Legend = require('./Legend');\nexports.Tooltip = require('./Tooltip');\nexports.Voronoi = require('./Voronoi');\n\nexports.BreadCrumb = require('./BreadCrumb');\n","exports.BarChart = require('./barchart').BarChart;\nexports.LineChart = require('./linechart').LineChart;\nexports.PieChart = require('./piechart').PieChart;\nexports.AreaChart = require('./areachart').AreaChart;\nexports.Treemap = require('./treemap').Treemap;\nexports.ScatterChart = require('./scatterchart').ScatterChart;\nexports.CandlestickChart = require('./candlestick').CandlestickChart;\n\nexports.SetStyle = require('./SetStyle');\nexports.ChartContext = require('./ChartContext');\nexports.ChartProvider = require('./ChartProvider');","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst VoronoiCircleContainer = require('./VoronoiCircleContainer');\nconst Line = require('./Line');\nconst voronoi = require('d3-voronoi')\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    color: PropTypes.object,\n    colorAccessor: PropTypes.func,\n    data: PropTypes.array,\n    interpolationType: PropTypes.string,\n    xAccessor: PropTypes.func,\n    yAccessor: PropTypes.func,\n    hoverAnimation: PropTypes.bool,\n  },\n\n  getDefaultProps() {\n    return {\n      data: [],\n      xAccessor: (d) => d.x,\n      yAccessor: (d) => d.y,\n      interpolationType: 'linear',\n      hoverAnimation: false,\n    };\n  },\n\n  _isDate(d, accessor) {\n    return Object.prototype.toString.call(accessor(d)) === '[object Date]';\n  },\n\n  render() {\n    const props = this.props;\n    const xScale = props.xScale;\n    const yScale = props.yScale;\n    const xAccessor = props.xAccessor;\n    const yAccessor = props.yAccessor;\n\n    const interpolatePath = d3.line()\n        .x((d) => props.xScale(xAccessor(d)))\n        .y((d) => props.yScale(yAccessor(d)))\n        .curve(d3.curveMonotoneX);\n\n\n    if (this._isDate(props.data[0].values[0], xAccessor)) {\n      interpolatePath.x(d => props.xScale(props.xAccessor(d).getTime()));\n    } else {\n      interpolatePath.x(d => props.xScale(props.xAccessor(d)));\n    }\n\n    const lines = props.data.map((series, idx) =>{\n      // debugger;\n      return (\n        <Line\n          path={interpolatePath(series.values)}\n          stroke={props.color.colors(props.colorsAccessor(props.colorsDomain, idx))}\n          strokeWidth={series.strokeWidth}\n          strokeDashArray={series.strokeDashArray}\n          seriesName={series.name}\n          key={idx}\n        />\n      )\n    });\n    const voronoi = d3.voronoi()\n      .x(d => xScale(d.coord.x))\n      .y(d => yScale(d.coord.y))\n      .extent([[0, 0], [props.width, props.height]]);\n\n    let cx;\n    let cy;\n    let circleFill;\n\n    const regions = voronoi(props.value).polygons().map( (polygon, idx) => {\n      // debugger;\n      const point = polygon.data;\n      delete polygon.data;\n      const vnode = polygon;\n\n      cx = props.xScale(point.coord.x);\n      cy = props.yScale(point.coord.y);\n\n      circleFill=props.color.colors(props.colorsAccessor(props.colorsDomain, point.seriesIndex));\n\n      return (\n        <VoronoiCircleContainer\n          key={idx}\n          voronoiStroke={props.voronoiStroke}\n          circleFill={circleFill}\n          vnode={vnode}\n          hoverAnimation={props.hoverAnimation}\n          cx={cx} cy={cy}\n          circleRadius={props.circleRadius}\n          onMouseOver={props.onMouseOver}\n          dataPoint={{\n            xValue: point.coord.x,\n            yValue: point.coord.y,\n            seriesName: point.series.name,\n          }}\n        />\n      );\n    });\n\n    return (\n      <g>\n        <g>{regions}</g>\n        <g>{lines}</g>\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Line',\n\n  propTypes: {\n    fill: PropTypes.string,\n    path: PropTypes.string,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.number,\n    strokeDashArray: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      stroke: '#3182bd',\n      fill: 'none',\n      strokeWidth: 1,\n      className: 'rd3-linechart-path',\n    };\n  },\n\n  render() {\n    const props = this.props;\n    return (\n      <path\n        d={props.path}\n        stroke={props.stroke}\n        strokeWidth={props.strokeWidth}\n        strokeDasharray={props.strokeDashArray}\n        fill={props.fill}\n        className={props.className}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst d3 = require('d3');\nconst createReactClass = require('create-react-class');\nconst utils = require('../utils');\n\nconst { Chart, XAxis, YAxis, XGrid, YGrid, Tooltip } = require('../common');\nconst DataSeries = require('./DataSeries');\nconst {\n  CartesianChartPropsMixin,\n  DefaultAccessorsMixin,\n  ViewBoxMixin,\n  TooltipMixin,\n} = require('../mixins');\n\nmodule.exports = createReactClass({\n\n  displayName: 'LineChart',\n\n  propTypes: {\n    circleRadius: PropTypes.number,\n    hoverAnimation: PropTypes.bool,\n    margins: PropTypes.object,\n    data: PropTypes.array.isRequired,\n  },\n\n  mixins: [CartesianChartPropsMixin, DefaultAccessorsMixin, ViewBoxMixin, TooltipMixin],\n\n  getDefaultProps() {\n    return {\n      circleRadius: 4,\n      className: 'rd3-linechart',\n      hoverAnimation: true,\n      margins: { top: 70, right: 20, bottom: 60, left: 60 },\n      xAxisClassName: 'rd3-linechart-xaxis',\n      yAxisClassName: 'rd3-linechart-yaxis',\n      data: [],\n      color: {\n        accessor: 'Sequential',\n        colors: d3.scaleSequential(d3.schemeTableau10),\n      }\n    };\n  },\n\n  _calculateScales: utils.calculateScales,\n  _rd3FormatInputData: utils.rd3FormatInputData,\n\n  render() {\n    const props = this.props;\n\n    if (this.props.data && this.props.data.length < 1) {\n      return null;\n    }\n\n    let data;\n    let series;\n    [data, series] = this._rd3FormatInputData('linechart', props.inputDataLayout, props.data, props.xIsDate, props.strokeWidth)\n\n\n    const { innerWidth, innerHeight, trans, svgMargins } = this.getDimensions();\n    const yOrient = this.getYOrient();\n    const domain = props.domain || {};\n\n    if (!Array.isArray(data)) {\n      data = [data];\n    }\n\n    // Returns an object of flattened allValues, xValues, and yValues\n    const flattenedData = utils.flattenData(data, props.xAccessor, props.yAccessor);\n\n    const allValues = flattenedData.allValues;\n    const xValues = flattenedData.xValues;\n    const yValues = flattenedData.yValues;\n    const scales = this._calculateScales(\n      innerWidth,\n      innerHeight,\n      xValues,\n      yValues,\n      domain.x,\n      domain.y\n    );\n\n    let colorsDomain;\n    let colorsAccessor;\n    const origArray = Array.from(series.keys())\n\n    if (this.props.color.accessor === 'Sequential'){\n      colorsDomain = origArray.map(x => x / series.length)\n      colorsAccessor = this.props.colorAccessorSequential\n    }else{\n      colorsDomain = series\n      colorsAccessor = this.props.colorAccessorOrdinal\n    }\n\n\n    return (\n      <span onMouseLeave={this.onMouseLeave}>\n        <Chart\n          viewBox={this.getViewBox()}\n          legend={props.legend}\n          sideOffset={props.sideOffset}\n          data={data}\n          margins={props.margins}\n          color={this.props.color}\n          colorsDomain={colorsDomain}\n          colorsAccessor={colorsAccessor}\n          width={props.width}\n          height={props.height}\n          title={props.title}\n          shouldUpdate={!this.state.changeState}\n          series={series}\n          svgLegend={props.svgLegend}\n          svgChart={props.svgChart}\n          legendStyle={props.legendStyle}\n          background={props.background}\n          svgTitle={props.svgTitle}\n        >\n          <g transform={trans} className={props.className}>\n            <XGrid\n              xAxisClassName={props.xAxisClassName}\n              xAxisTickValues={props.xAxisTickValues}\n              xAxisTickCount={props.xAxisTickCount}\n              xAxisTickInterval={props.xAxisTickInterval}\n              xAxisOffset={props.xAxisOffset}\n              xScale={scales.xScale}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              xTickFormat={props.xTickFormat}\n              data={data}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridVertical={props.gridVertical}\n              gridVerticalStroke={props.gridVerticalStroke}\n              gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n\n              gridText={props.gridText}\n              translateTickLabel_Y_X={props.translateTickLabel_Y_X}\n              translateTickLabel_Y_Y={props.translateTickLabel_Y_Y}\n              translateTickLabel_X_X={props.translateTickLabel_X_X}\n              translateTickLabel_X_Y={props.translateTickLabel_X_Y}\n              xIsDate={props.xIsDate}\n            />\n            <YGrid\n              yAxisClassName={props.yAxisClassName}\n              yScale={scales.yScale}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisTickCount={props.yAxisTickCount}\n              yAxisOffset={props.yAxisOffset}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridHorizontal={props.gridHorizontal}\n              gridHorizontalStroke={props.gridHorizontalStroke}\n              gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n              gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n\n              gridText={props.gridText}\n              translateTickLabel_Y_X={props.translateTickLabel_Y_X}\n              translateTickLabel_Y_Y={props.translateTickLabel_Y_Y}\n              translateTickLabel_X_X={props.translateTickLabel_X_X}\n              translateTickLabel_X_Y={props.translateTickLabel_X_Y}\n            />\n\n\n            <DataSeries\n              xScale={scales.xScale}\n              yScale={scales.yScale}\n              xAccessor={props.xAccessor}\n              yAccessor={props.yAccessor}\n              hoverAnimation={props.hoverAnimation}\n              circleRadius={props.circleRadius}\n              data={data}\n              value={allValues}\n              interpolationType={props.interpolationType}\n              // colors={props.colors}\n              // colorAccessor={props.colorAccessorOrdinal}\n              color={props.color}\n              colorsDomain={colorsDomain}\n              colorsAccessor={colorsAccessor}\n              width={innerWidth}\n              height={innerHeight}\n              onMouseOver={this.onMouseOver}\n              voronoiStroke={props.voronoiStroke}\n            />\n            <XAxis\n              xAxisClassName={props.xAxisClassName}\n              xAxisTickValues={props.xAxisTickValues}\n              xAxisTickCount={props.xAxisTickCount}\n              xAxisTickInterval={props.xAxisTickInterval}\n              xAxisOffset={props.xAxisOffset}\n              xScale={scales.xScale}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              data={data}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridVertical={props.gridVertical}\n              gridVerticalStroke={props.gridVerticalStroke}\n              gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n            />\n            <YAxis\n              yAxisClassName={props.yAxisClassName}\n              yScale={scales.yScale}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisTickCount={props.yAxisTickCount}\n              yAxisOffset={props.yAxisOffset}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridHorizontal={props.gridHorizontal}\n              gridHorizontalStroke={props.gridHorizontalStroke}\n              gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n              gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n            />\n\n          </g>\n        </Chart>\n        {(props.showTooltip ? <Tooltip {...this.state.tooltip} /> : null)}\n      </span>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'VoronoiCircle',\n\n  // TODO: Check prop types\n  propTypes: {\n    handleMouseOver: PropTypes.any,\n    handleMouseLeave: PropTypes.any,\n    voronoiPath: PropTypes.any,\n    voronoiStroke: PropTypes.string,\n    cx: PropTypes.any,\n    cy: PropTypes.any,\n    circleRadius: PropTypes.any,\n    circleFill: PropTypes.any,\n  },\n  getDefaultProps() {\n    return {\n      circleRadius: 3,\n      circleFill: '#1f77b4',\n      voronoiStroke:''\n    };\n  },\n\n  render() {\n    return (\n      <g>\n        <path\n          onMouseOver={this.props.handleMouseOver}\n          onMouseLeave={this.props.handleMouseLeave}\n          fill=\"transparent\"\n          stroke={this.props.voronoiStroke}\n          d={this.props.voronoiPath}\n        />\n        <circle\n          onMouseOver={this.props.handleMouseOver}\n          onMouseLeave={this.props.handleMouseLeave}\n          cx={this.props.cx}\n          cy={this.props.cy}\n          r={this.props.circleRadius}\n          fill={this.props.circleFill}\n          className=\"rd3-linechart-circle\"\n        />\n      </g>\n    );\n  },\n});\n","'use strict';\n\nimport * as ReactDOM from 'react-dom'\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\nconst shade = require('../utils').shade;\nconst VoronoiCircle = require('./VoronoiCircle');\n\nmodule.exports = createReactClass({\n\n  displayName: 'VornoiCircleContainer',\n\n  propTypes: {\n    circleRadius: PropTypes.any,\n    circleFill: PropTypes.any,\n    onMouseOver: PropTypes.any,\n    dataPoint: PropTypes.any,\n  },\n\n  getDefaultProps() {\n    return {\n      circleRadius: 3,\n      circleFill: '#1f77b4',\n      hoverAnimation: true,\n    };\n  },\n\n  getInitialState() {\n    return {\n      circleRadius: this.props.circleRadius,\n      circleFill: this.props.circleFill,\n      circleFillCtl:this.props.fill,\n    };\n  },\n\n  statics: { getDerivedStateFromProps(props, current_state) {\n    if (current_state.circleFillCtl !== props.fill) {\n      return {\n        circleFillCtl:props.fill,\n        circleFill: props.fill,\n      }\n    }\n    return null\n  }},\n\n  _animateCircle() {\n    const rect = ReactDOM.findDOMNode(this).getElementsByTagName('circle')[0].getBoundingClientRect();\n    this.props.onMouseOver.call(this, rect.right, rect.top, this.props.dataPoint);\n    this.setState({\n      circleRadius: this.props.circleRadius * (5 / 4),\n      circleFill: shade(this.props.circleFill, 0.2),\n    });\n  },\n\n  _restoreCircle() {\n    this.setState({\n      circleRadius: this.props.circleRadius,\n      circleFill: this.props.circleFill,\n    });\n  },\n\n  _drawPath(d) {\n    if (d === undefined) {\n      return 'M Z';\n    }\n    return `M${d.join(',')}Z`;\n  },\n\n  render() {\n    const props = this.props;\n\n    // animation controller\n    let handleMouseOver;\n    let handleMouseLeave;\n    if (props.hoverAnimation) {\n      handleMouseOver = this._animateCircle;\n      handleMouseLeave = this._restoreCircle;\n    } else {\n      handleMouseOver = handleMouseLeave = null;\n    }\n\n    return (\n      <g>\n        <VoronoiCircle\n          handleMouseOver={handleMouseOver}\n          handleMouseLeave={handleMouseLeave}\n          voronoiPath={this._drawPath(props.vnode)}\n          cx={props.cx}\n          cy={props.cy}\n          circleRadius={this.state.circleRadius}\n          /* state.circleFill changes on MouseOver/Leave.\n          state.props, changes on styling property change  */\n          circleFill={this.props.circleFill}\n          voronoiStroke={props.voronoiStroke}\n\n        />\n      </g>\n    );\n  },\n});\n","\nexports.LineChart = require('./LineChart');\n","'use strict';\n\n\nconst d3 = require('d3');\nconst PropTypes = require('prop-types');\n\nmodule.exports = {\n\n  propTypes: {\n    axesColor: PropTypes.string,\n    colors: PropTypes.func,\n    colorAccessorSequential: PropTypes.func,\n    colorAccessorOrdinal: PropTypes.func,\n    data: PropTypes.array.isRequired,\n    height: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    horizontal: PropTypes.bool,\n    legend: PropTypes.bool,\n    legendOffset: PropTypes.number,\n    title: PropTypes.string,\n    width: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    xAccessor: PropTypes.func,\n    xAxisFormatter: PropTypes.func,\n    xAxisLabel: PropTypes.string,\n    xAxisLabelOffset: PropTypes.number,\n    xAxisTickCount: PropTypes.number,\n    xAxisTickInterval: PropTypes.object,\n    xAxisTickValues: PropTypes.array,\n    xAxisTickStroke: PropTypes.string,\n    xAxisTickTextStroke: PropTypes.string,\n    xAxisOffset: PropTypes.number,\n    xOrient: PropTypes.oneOf(['top', 'bottom']),\n    xScale: PropTypes.func,\n    yAccessor: PropTypes.func,\n    yAxisFormatter: PropTypes.func,\n    yAxisLabel: PropTypes.string,\n    yAxisLabelOffset: PropTypes.number,\n    yAxisTickCount: PropTypes.number,\n    yAxisTickInterval: PropTypes.object,\n    yAxisTickValues: PropTypes.array,\n    yAxisTickStroke: PropTypes.string,\n    yAxisTickTextStroke: PropTypes.string,\n    yAxisOffset: PropTypes.number,\n    yOrient: PropTypes.oneOf(['default', 'left', 'right']),\n    yScale: PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      axesColor: '#000',\n      colorAccessorSequential: (d, idx) => {\n        return d[idx]\n      },\n      colorAccessorOrdinal: (d, idx) => idx,\n        height: 200,\n        horizontal: false,\n        legend: false,\n        legendOffset: 120,\n        title: '',\n        width: 400,\n        // xAxisFormatter: no predefined value right now\n        xAxisLabel: '',\n        xAxisLabelOffset: 38,\n        xAxisOffset: 0,\n        // xAxisTickCount: no predefined value right now\n        // xAxisTickInterval: no predefined value right now\n        // xAxisTickValues: no predefined value right now\n        xAxisTickStroke: '#000',\n        xAxisTickTextStroke: '#000',\n        xOrient: 'bottom',\n        // xScale: no predefined value right now\n        // yAxisFormatter: no predefined value right now\n        yAxisLabel: '',\n        yAxisLabelOffset: 35,\n        yAxisOffset: 0,\n        // yAxisTickCount: no predefined value right now\n        // yAxisTickInterval: no predefined value right now\n        // yAxisTickValues: no predefined value right now\n        yAxisTickStroke: '#000',\n        yAxisTickTextStroke: '#000',\n        yOrient: 'default',\n        // yScale: no predefined value right now\n    };\n  },\n\n  getYOrient() {\n    const yOrient = this.props.yOrient;\n\n    if (yOrient === 'default') {\n      return this.props.horizontal ? 'right' : 'left';\n    }\n\n    return yOrient;\n  },\n};\n","'use strict';\n\nconst PropTypes = require('prop-types');\n\nmodule.exports = {\n  propTypes: {\n    xAccessor: PropTypes.func,\n    yAccessor: PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      xAccessorBar: (d) => d.data.x,\n      yAccessorBar: (d) => d[1],\n\n      xAccessor: (d) => d.x,\n      yAccessor: (d) => d.y,\n    };\n  },\n};\n","'use strict';\nconst utils = require('../utils');\n\n\nconst PropTypes = require('prop-types');\n\n\nmodule.exports = {\n\n  propTypes: {\n    showTooltip: PropTypes.bool,\n    tooltipFormat: PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      showTooltip: true,\n      /* Sum */\n      tooltipFormat: (d, chart) => {\n        return chart === 'barchart'\n                  ? String( d.seriesName) + ':\\n' + String( utils.nFormatter(d.height, 2))\n                  : String( d.seriesName) + ':\\n' + String( utils.nFormatter(d.yValue, 2))\n      },\n    };\n  },\n\n  getInitialState() {\n    return {\n      tooltip: {\n        x: 0,\n        y: 0,\n        child: '',\n        show: false,\n      },\n      changeState: false,\n    };\n  },\n\n  UNSAFE_componentWillReceiveProps() {\n    this.setState({\n      changeState: false,\n    });\n  },\n\n  onMouseOver(x, y, dataPoint) {\n    if (!this.props.showTooltip) {\n      return;\n    }\n    this.setState({\n      tooltip: {\n        x,\n        y,\n        child: this.props.tooltipFormat.call(this, dataPoint, this.props.chart),\n        show: true,\n      },\n      changeState: true,\n    });\n  },\n\n  onMouseLeave() {\n    if (!this.props.showTooltip) {\n      return;\n    }\n    this.setState({\n      tooltip: {\n        x: 0,\n        y: 0,\n        child: '',\n        show: false,\n      },\n      changeState: true,\n    });\n  },\n};\n","\n'use strict';\n\nconst PropTypes = require('prop-types');\n\nmodule.exports = {\n\n  propTypes: {\n    viewBox: PropTypes.string,\n    viewBoxObject: PropTypes.object,\n  },\n\n  getViewBox() {\n    if (this.props.viewBoxObject) {\n      const v = this.props.viewBoxObject;\n      return [v.x, v.y, v.width, v.height].join(' ');\n    } else if (this.props.viewBox) {\n      return this.props.viewBox;\n    }\n    return null;\n  },\n\n  getDimensions() {\n    const props = this.props;\n    const { horizontal, margins, viewBoxObject, xOrient } = props;\n    const yOrient = this.getYOrient();\n\n    let width;\n    let height;\n    if (viewBoxObject) {\n      width = viewBoxObject.width;\n      height = viewBoxObject.height;\n    } else {\n      width = props.width;\n      height = props.height;\n    }\n\n    let svgWidth;\n    let svgHeight;\n    let svgMargins;\n    let trans;\n    if (horizontal) {\n      const center = width / 2;\n      trans = `rotate(90 ${center} ${center}) `;\n      svgWidth = height;\n      svgHeight = width;\n      svgMargins = {\n        left: margins.top,\n        top: margins.right,\n        right: margins.bottom,\n        bottom: margins.left,\n      };\n    } else {\n      trans = '';\n      svgWidth = width;\n      svgHeight = height;\n      svgMargins = margins;\n    }\n\n    const xAxisOffset = Math.abs(props.xAxisOffset || 0);\n    const yAxisOffset = Math.abs(props.yAxisOffset || 0);\n\n    const xOffset = svgMargins.left + (yOrient === 'left' ? yAxisOffset : 0);\n    const yOffset = svgMargins.top + (xOrient === 'top' ? xAxisOffset : 0);\n    trans += `translate(${xOffset}, ${yOffset})`;\n\n    return {\n      innerHeight: svgHeight - svgMargins.top - svgMargins.bottom - xAxisOffset,\n      innerWidth: svgWidth - svgMargins.left - svgMargins.right - yAxisOffset,\n      trans,\n      svgMargins,\n    };\n  },\n};\n","\nexports.CartesianChartPropsMixin = require('./CartesianChartPropsMixin');\nexports.DefaultAccessorsMixin = require('./DefaultAccessorsMixin');\nexports.ViewBoxMixin = require('./ViewBoxMixin');\nexports.TooltipMixin = require('./TooltipMixin');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\n\nmodule.exports = createReactClass({\n\n  displayName: 'Arc',\n\n  propTypes: {\n    fill: PropTypes.string,\n    d: PropTypes.string,\n    startAngle: PropTypes.number,\n    endAngle: PropTypes.number,\n    innerRadius: PropTypes.number,\n    outerRadius: PropTypes.number,\n    labelTextFill: PropTypes.string,\n    valueTextFill: PropTypes.string,\n    sectorBorderColor: PropTypes.string,\n    showInnerLabels: PropTypes.bool,\n    showOuterLabels: PropTypes.bool,\n  },\n\n  getDefaultProps() {\n    return {\n      labelTextFill: 'black',\n      valueTextFill: 'white',\n      showInnerLabels: true,\n      showOuterLabels: true,\n    };\n  },\n\n  renderInnerLabel(props, arc) {\n    // make value text can be formatted\n    const formattedValue = props.valueTextFormatter(props.value);\n    return (\n      <text\n        className=\"rd3-piechart-value\"\n        transform={`translate(${arc.centroid()})`}\n        dy=\".35em\"\n        style={{\n          shapeRendering: 'crispEdges',\n          textAnchor: 'middle',\n          fill: props.valueTextFill,\n        }}\n      >\n        { formattedValue }\n      </text>\n    );\n  },\n\n  renderOuterLabel(props) {\n    const rotate = `rotate(${(props.startAngle + props.endAngle) / 2 * (180 / Math.PI)})`;\n    const radius = props.outerRadius;\n    const dist = radius + 35;\n    const angle = (props.startAngle + props.endAngle) / 2;\n    const x = dist * (1.2 * Math.sin(angle));\n    const y = -dist * Math.cos(angle);\n    const t = `translate(${x},${y})`;\n\n    return (\n      <g>\n        <line\n          x1=\"0\"\n          x2=\"0\"\n          y1={-radius - 2}\n          y2={-radius - 26}\n          stroke={props.labelTextFill}\n          transform={rotate}\n          style={{\n            fill: props.labelTextFill,\n            strokeWidth: 2,\n          }}\n        >\n        </line>\n        <text\n          className=\"rd3-piechart-label\"\n          transform={t}\n          dy=\".35em\"\n          style={{\n            textAnchor: 'middle',\n            fill: props.labelTextFill,\n            shapeRendering: 'crispEdges',\n          }}\n        >\n          {props.label}\n        </text>\n      </g>\n    );\n  },\n\n  render() {\n    const props = this.props;\n\n    const arc = d3.arc()\n      .innerRadius(props.innerRadius)\n      .outerRadius(props.outerRadius)\n      .startAngle(props.startAngle)\n      .endAngle(props.endAngle);\n\n    return (\n      <g className=\"rd3-piechart-arc\" >\n        <path\n          d={arc()}\n          fill={props.fill}\n          stroke={props.sectorBorderColor}\n          onMouseOver={props.handleMouseOver}\n          onMouseLeave={props.handleMouseLeave}\n        />\n        {props.showOuterLabels ? this.renderOuterLabel(props, arc) : null}\n        {props.showInnerLabels ? this.renderInnerLabel(props, arc) : null}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nimport * as ReactDOM from 'react-dom'\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\nconst shade = require('../utils').shade;\nconst Arc = require('./Arc');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'ArcContainer',\n\n  propTypes: {\n    fill: PropTypes.string,\n    onMouseOver: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    dataPoint: PropTypes.any, // TODO prop type?\n  },\n\n  getInitialState() {\n    return {\n      // fill is named as fill instead of initialFill to avoid\n      // confusion when passing down props from top parent\n      fill: this.props.fill,\n    };\n  },\n\n  _animateArc() {\n    const rect = ReactDOM.findDOMNode(this).getBoundingClientRect();\n    this.props.onMouseOver.call(this, rect.right, rect.top, this.props.dataPoint);\n    this.setState({\n      fill: shade(this.props.fill, 0.2),\n    });\n  },\n\n  _restoreArc() {\n    this.props.onMouseLeave.call(this);\n    this.setState({\n      fill: this.props.fill,\n    });\n  },\n\n  render() {\n    const props = this.props;\n\n    return (\n      <Arc\n        {...this.props}\n        fill={this.state.fill}\n        handleMouseOver={props.hoverAnimation ? this._animateArc : null}\n        handleMouseLeave={props.hoverAnimation ? this._restoreArc : null}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst ArcContainer = require('./ArcContainer');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    data: PropTypes.array,\n    values: PropTypes.array,\n    labels: PropTypes.array,\n    transform: PropTypes.string,\n    innerRadius: PropTypes.number,\n    radius: PropTypes.number,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    showInnerLabels: PropTypes.bool,\n    showOuterLabels: PropTypes.bool,\n    sectorBorderColor: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      data: [],\n      innerRadius: 0,\n      colors: d3.scaleOrdinal(d3.schemeCategory10),\n      colorAccessor: (d, idx) => idx,\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const pie = d3.pie()\n                  .sort(null);\n\n    const arcData = pie(props.values);\n\n    const arcs = arcData.map((arc, idx) => (\n        <ArcContainer\n          key={idx}\n          startAngle={arc.startAngle}\n          endAngle={arc.endAngle}\n          outerRadius={props.radius}\n          innerRadius={props.innerRadius}\n          labelTextFill={props.labelTextFill}\n          valueTextFill={props.valueTextFill}\n          valueTextFormatter={props.valueTextFormatter}\n          fill={props.colors(props.colorAccessor(props.data[idx], idx))}\n          value={props.values[idx]}\n          label={props.labels[idx]}\n          width={props.width}\n          showInnerLabels={props.showInnerLabels}\n          showOuterLabels={props.showOuterLabels}\n          sectorBorderColor={props.sectorBorderColor}\n          hoverAnimation={props.hoverAnimation}\n          onMouseOver={props.onMouseOver}\n          onMouseLeave={props.onMouseLeave}\n          dataPoint={{ yValue: props.values[idx], seriesName: props.labels[idx] }}\n        />\n      )\n    );\n    return (\n      <g className=\"rd3-piechart-pie\" transform={props.transform} >\n        {arcs}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst d3 = require('d3');\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst DataSeries = require('./DataSeries');\nconst { Chart, Tooltip } = require('../common');\nconst TooltipMixin = require('../mixins').TooltipMixin;\n\nmodule.exports = createReactClass({\n\n  displayName: 'PieChart',\n\n  propTypes: {\n    data: PropTypes.array,\n    radius: PropTypes.number,\n    cx: PropTypes.number,\n    cy: PropTypes.number,\n    labelTextFill: PropTypes.string,\n    valueTextFill: PropTypes.string,\n    valueTextFormatter: PropTypes.func,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    title: PropTypes.string,\n    showInnerLabels: PropTypes.bool,\n    showOuterLabels: PropTypes.bool,\n    sectorBorderColor: PropTypes.string,\n    hoverAnimation: PropTypes.bool,\n  },\n\n  mixins: [TooltipMixin],\n\n  getDefaultProps() {\n    return {\n      data: [],\n      title: '',\n      colors: d3.scaleOrdinal(d3.schemeCategory10),\n      colorAccessor: (d, idx) => idx,\n      valueTextFormatter: (val) => `${val}%`,\n      hoverAnimation: true,\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    if (props.data && props.data.length < 1) {\n      return null;\n    }\n    const transform = `translate(${props.cx || props.width / 2},${props.cy || props.height / 2})`;\n\n    const values = props.data.map((item) => item.value);\n    const labels = props.data.map((item) => item.label);\n\n    return (\n      <span>\n        <Chart\n          width={props.width}\n          height={props.height}\n          title={props.title}\n          shouldUpdate={!this.state.changeState}\n        >\n          <g className=\"rd3-piechart\">\n            <DataSeries\n              labelTextFill={props.labelTextFill}\n              valueTextFill={props.valueTextFill}\n              valueTextFormatter={props.valueTextFormatter}\n              data={props.data}\n              values={values}\n              labels={labels}\n              colors={props.colors}\n              colorAccessor={props.colorAccessor}\n              transform={transform}\n              width={props.width}\n              height={props.height}\n              radius={props.radius}\n              innerRadius={props.innerRadius}\n              showInnerLabels={props.showInnerLabels}\n              showOuterLabels={props.showOuterLabels}\n              sectorBorderColor={props.sectorBorderColor}\n              hoverAnimation={props.hoverAnimation}\n              onMouseOver={this.onMouseOver}\n              onMouseLeave={this.onMouseLeave}\n            />\n          </g>\n        </Chart>\n        {(props.showTooltip ? <Tooltip {...this.state.tooltip} /> : null)}\n      </span>\n    );\n  },\n});\n","\nexports.PieChart = require('./PieChart');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst VoronoiCircleContainer = require('./VoronoiCircleContainer');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    circleRadius: PropTypes.number.isRequired,\n    className: PropTypes.string,\n    colors: PropTypes.func.isRequired,\n    colorAccessor: PropTypes.func.isRequired,\n    data: PropTypes.array.isRequired,\n    height: PropTypes.number.isRequired,\n    xAccessor: PropTypes.func.isRequired,\n    xScale: PropTypes.func.isRequired,\n    yAccessor: PropTypes.func.isRequired,\n    yScale: PropTypes.func.isRequired,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-scatterchart-dataseries',\n    };\n  },\n\n  render() {\n    const props = this.props;\n    const xScale = props.xScale;\n    const yScale = props.yScale;\n    const xAccessor = props.xAccessor;\n    const yAccessor = props.yAccessor;\n\n    const voronoi = d3.voronoi()\n      .x(d => xScale(d.coord.x))\n      .y(d => yScale(d.coord.y))\n      .extent([[0, 0], [props.width, props.height]]);\n\n    const regions = voronoi(props.data).polygons().map( (polygon, idx) => {         \n      const point = polygon.data; \n      delete polygon.data; \n\n      const vnode = polygon;\n      const coord = point.coord;\n\n      const x = xAccessor(coord);\n      const y = yAccessor(coord);\n\n      // The circle coordinates\n      let cx;\n      let cy;\n\n      if (Object.prototype.toString.call(x) === '[object Date]') {\n        cx = xScale(x.getTime());\n      } else {\n        cx = xScale(x);\n      }\n\n      if (Object.prototype.toString.call(y) === '[object Date]') {\n        cy = yScale(y.getTime());\n      } else {\n        cy = yScale(y);\n      }\n\n      return (\n        <VoronoiCircleContainer\n          key={idx}\n          circleFill={props.colors(props.colorAccessor(point.d, point.seriesIndex))}\n          circleRadius={props.circleRadius}\n          cx={cx}\n          cy={cy}\n          vnode={vnode}\n          onMouseOver={props.onMouseOver}\n          dataPoint={{ xValue: x, yValue: y, seriesName: point.series.name }}\n        />\n      );\n    });\n\n    return (\n      <g\n        className={props.className}\n      >\n        {regions}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst d3 = require('d3');\nconst createReactClass = require('create-react-class');\n\nconst { Chart, XAxis, YAxis, XGrid, YGrid, Tooltip } = require('../common');\nconst DataSeries = require('./DataSeries');\nconst utils = require('../utils');\nconst {\n  CartesianChartPropsMixin,\n  DefaultAccessorsMixin,\n  ViewBoxMixin,\n  TooltipMixin,\n} = require('../mixins');\n\nmodule.exports = createReactClass({\n\n  displayName: 'ScatterChart',\n\n  propTypes: {\n    circleRadius: PropTypes.number,\n    className: PropTypes.string,\n    hoverAnimation: PropTypes.bool,\n    margins: PropTypes.object,\n    xAxisClassName: PropTypes.string,\n    yAxisClassName: PropTypes.string,\n  },\n\n  mixins: [\n    CartesianChartPropsMixin,\n    DefaultAccessorsMixin,\n    ViewBoxMixin,\n    TooltipMixin,\n  ],\n\n  getDefaultProps() {\n    return {\n      colors: d3.scaleOrdinal(d3.schemeBlues[6].reverse()),\n      circleRadius: 3,\n      className: 'rd3-scatterchart',\n      hoverAnimation: true,\n      margins: { top: 10, right: 20, bottom: 50, left: 45 },\n      xAxisClassName: 'rd3-scatterchart-xaxis',\n      yAxisClassName: 'rd3-scatterchart-yaxis',\n    };\n  },\n\n  _calculateScales: utils.calculateScales,\n\n  render() {\n    const props = this.props;\n    const data = props.data;\n\n    if (!data || data.length < 1) {\n      return null;\n    }\n\n    const { innerWidth, innerHeight, trans, svgMargins } = this.getDimensions();\n    const yOrient = this.getYOrient();\n    const domain = props.domain || {};\n\n    // Returns an object of flattened allValues, xValues, and yValues\n    const flattenedData = utils.flattenData(data, props.xAccessor, props.yAccessor);\n\n    const allValues = flattenedData.allValues;\n    const xValues = flattenedData.xValues;\n    const yValues = flattenedData.yValues;\n\n    const scales = this._calculateScales(\n      innerWidth, innerHeight, xValues, yValues, domain.x, domain.y\n    );\n    const xScale = scales.xScale;\n    const yScale = scales.yScale;\n\n    return (\n      <span onMouseLeave={this.onMouseLeave}>\n        <Chart\n          colors={props.colors}\n          colorAccessor={props.colorAccessorOrdinal}\n          data={data}\n          height={props.height}\n          legend={props.legend}\n          sideOffset={props.sideOffset}\n          margins={props.margins}\n          title={props.title}\n          viewBox={this.getViewBox()}\n          width={props.width}\n          shouldUpdate={!this.state.changeState}\n        >\n          <g\n            className={props.className}\n            transform={trans}\n          >\n            <XGrid\n              xAxisClassName={props.xAxisClassName}\n              xAxisTickValues={props.xAxisTickValues}\n              xAxisTickCount={props.xAxisTickCount}\n              xAxisTickInterval={props.xAxisTickInterval}\n              xAxisOffset={props.xAxisOffset}\n              xScale={scales.xScale}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              data={props.data}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridVertical={props.gridVertical}\n              gridVerticalStroke={props.gridVerticalStroke}\n              gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n            />\n            <YGrid\n              yAxisClassName={props.yAxisClassName}\n              yScale={scales.yScale}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisTickCount={props.yAxisTickCount}\n              yAxisOffset={props.yAxisOffset}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridHorizontal={props.gridHorizontal}\n              gridHorizontalStroke={props.gridHorizontalStroke}\n              gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n              gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n            />\n\n            <DataSeries\n              circleRadius={props.circleRadius}\n              colors={props.colors}\n              colorAccessor={props.colorAccessorOrdinal}\n              data={allValues}\n              height={innerHeight}\n              hoverAnimation={props.hoverAnimation}\n              width={innerWidth}\n              xAccessor={(coord) => coord.x}\n              xScale={xScale}\n              yAccessor={(coord) => coord.y}\n              yScale={yScale}\n              onMouseOver={this.onMouseOver}\n            />\n            <XAxis\n              data={data}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              margins={svgMargins}\n              stroke={props.axesColor}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              width={innerWidth}\n              xAxisClassName={props.xAxisClassName}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              xAxisOffset={props.xAxisOffset}\n              xAxisTickInterval={props.xAxisTickInterval}\n              xAxisTickValues={props.xAxisTickValues}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              xScale={xScale}\n              gridVertical={props.gridVertical}\n              gridVerticalStroke={props.gridVerticalStroke}\n              gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n            />\n            <YAxis\n              data={data}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              margins={svgMargins}\n              stroke={props.axesColor}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              yAxisClassName={props.yAxisClassName}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              yAxisOffset={props.yAxisOffset}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisTickCount={props.yAxisTickCount}\n              yScale={yScale}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              gridHorizontal={props.gridHorizontal}\n              gridHorizontalStroke={props.gridHorizontalStroke}\n              gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n            />\n\n          </g>\n        </Chart>\n        {(props.showTooltip ? <Tooltip {...this.state.tooltip} /> : null)}\n      </span>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'VoronoiCircle',\n\n  propTypes: {\n    circleFill: PropTypes.string.isRequired,\n    circleRadius: PropTypes.number.isRequired,\n    className: PropTypes.string,\n    cx: PropTypes.number.isRequired,\n    cy: PropTypes.number.isRequired,\n    handleMouseLeave: PropTypes.func.isRequired,\n    handleMouseOver: PropTypes.func.isRequired,\n    pathFill: PropTypes.string,\n    voronoiPath: PropTypes.string.isRequired,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-scatterchart-voronoi-circle',\n      pathFill: 'transparent',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    return (\n      <g>\n        <path\n          d={props.voronoiPath}\n          fill={props.pathFill}\n          stroke='#DCDCDC'\n          onMouseLeave={props.handleMouseLeave}\n          onMouseOver={props.handleMouseOver}\n        />\n        <circle\n          cx={props.cx}\n          cy={props.cy}\n          className={props.className}\n          fill={props.circleFill}\n          onMouseLeave={props.handleMouseLeave}\n          onMouseOver={props.handleMouseOver}\n          r={props.circleRadius}\n        />\n      </g>\n    );\n  },\n});\n","'use strict';\n\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst { findDOMNode } = require('react-dom');\nconst shade = require('../utils').shade;\nconst VoronoiCircle = require('./VoronoiCircle');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'VornoiCircleContainer',\n\n  propTypes: {\n    circleFill: PropTypes.string,\n    circleRadius: PropTypes.number,\n    circleRadiusMultiplier: PropTypes.number,\n    className: PropTypes.string,\n    hoverAnimation: PropTypes.bool,\n    shadeMultiplier: PropTypes.number,\n    vnode: PropTypes.array.isRequired,\n    onMouseOver: PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      circleFill: '#1f77b4',\n      circleRadius: 3,\n      circleRadiusMultiplier: 1.25,\n      className: 'rd3-scatterchart-voronoi-circle-container',\n      hoverAnimation: true,\n      shadeMultiplier: 0.2,\n    };\n  },\n\n  getInitialState() {\n    return {\n      circleFill: this.props.circleFill,\n      circleRadius: this.props.circleRadius,\n    };\n  },\n\n  _animateCircle() {\n    const props = this.props;\n\n    if (props.hoverAnimation) {\n      const rect = findDOMNode(this).getElementsByTagName('circle')[0].getBoundingClientRect();\n      this.props.onMouseOver.call(this, rect.right, rect.top, props.dataPoint);\n      this.setState({\n        circleFill: shade(props.circleFill, props.shadeMultiplier),\n        circleRadius: props.circleRadius * props.circleRadiusMultiplier,\n      });\n    }\n  },\n\n  _restoreCircle() {\n    const props = this.props;\n    if (props.hoverAnimation) {\n      this.setState({\n        circleFill: props.circleFill,\n        circleRadius: props.circleRadius,\n      });\n    }\n  },\n\n  _drawPath(d) {\n    if (typeof d === 'undefined') {\n      return 'M Z';\n    }\n\n    return `M${d.join(',')}Z`;\n  },\n\n  render() {\n    const props = this.props;\n    const state = this.state;\n\n    return (\n      <g\n        className={props.className}\n      >\n        <VoronoiCircle\n          circleFill={state.circleFill}\n          circleRadius={state.circleRadius}\n          cx={props.cx}\n          cy={props.cy}\n          handleMouseLeave={this._restoreCircle}\n          handleMouseOver={this._animateCircle}\n          voronoiPath={this._drawPath(props.vnode)}\n        />\n      </g>\n    );\n  },\n});\n","\nexports.ScatterChart = require('./ScatterChart');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\nconst d3plus = require('d3plus-text');\nimport ChartContext from '../ChartContext';\n\n\nmodule.exports = createReactClass({\n  displayName: 'Cell',\n  propTypes: {\n    fill: PropTypes.string,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    label: PropTypes.string,\n  },\n\n  render() {\n    const props = this.props;\n\n    /* Context */\n    this.contextType = ChartContext;\n    const { chartStyle }  = this.contextType._currentValue;\n\n    const textStyle = {\n      textAnchor: 'middle',\n      fontSize: props.fontSize,\n    };\n\n    const t = `translate(${props.x}, ${props.y}  )`;\n    const label = [{text:props.label}]\n    const id = 'treemap-cel-' + this.props.label.replace(/\\s/g, '').replace(/[^\\x00-\\x7F]/g, \"\").replace(/\\,/g, '');\n\n    /*\n    TODO: await on handleClick / _drillData to remove this settimeout\n    */\n    const delayLabel = (props) => {setTimeout(() => {\n      new d3plus.TextBox()\n      .data(label)\n      .fontResize(true)\n      .fontMax(28)\n      // .fontMin(12)\n      .fontWeight(800)\n      .padding((d)=> {return props.width * .05})\n      .fontColor(null)\n      .width((d)=> {return props.width * .9})\n      .height((d)=> {return props.height * 1})\n      // .x((d)=> {return props.width * .05})\n      .y(() => 0)\n      .textAnchor('left')\n      .select('#'+id)\n      .overflow('visible')\n      .verticalAlign('top')\n      .render();\n    }, 10)};\n\n\n    return (\n        <g transform={t} className={`rd3-treemap-parent ${chartStyle}`} label={delayLabel(this.props)} id={id} onClick={()=>props.handleClick(this.props.label, 'down')}>\n          <rect\n            className={`rd3-treemap-cell ${chartStyle}`}\n            width={props.width}\n            height={props.height}\n            fill={props.fill}\n            onMouseOver={props.handleMouseOver}\n            onMouseLeave={props.handleMouseLeave}\n            strokeWidth=\"3\"\n            stroke='#FFFFFF'\n          />\n        </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst shade = require('../utils').shade;\nconst Cell = require('./Cell');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'CellContainer',\n\n  propTypes: {\n    fill: PropTypes.string,\n  },\n\n  getInitialState() {\n    return {\n      // fill is named as fill instead of initialFill to avoid\n      // confusion when passing down props from top parent\n      fill: this.props.fill,\n      fillCtl: this.props.fill,\n    };\n  },\n\n  statics: { getDerivedStateFromProps(props, current_state) {\n    if (current_state.fillCtl !== props.fill) {\n      return {\n        fillCtl:props.fill,\n        fill: props.fill,\n      }\n    }\n    return null\n  }},\n\n  _animateCell() {\n    this.setState({\n      fill: shade(this.props.fill, 0.2),\n    });\n  },\n\n  _restoreCell() {\n    this.setState({\n      fill: this.props.fill,\n    });\n  },\n\n\n  render() {\n\n    const props = this.props;\n    // console.log(props.label)\n\n    return (\n      <Cell\n        {...props}\n        fill={this.state.fill}\n        handleMouseOver={props.hoverAnimation ? this._animateCell : null}\n        handleMouseLeave={props.hoverAnimation ? this._restoreCell : null}\n        handleClick={props.drillData}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst CellContainer = require('./CellContainer');\n\n/* color accessors */\nconst { CartesianChartPropsMixin } = require('../mixins');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    data: PropTypes.array,\n    width: PropTypes.number,\n    height: PropTypes.number,\n  },\n\n  getDefaultProps() {\n    return {\n      data: [],\n    };\n  },\n\n  mixins: [CartesianChartPropsMixin],\n\n  render() {\n    const props = this.props;\n\n    const treemap = d3.treemap()\n                    .size([props.width, props.height]);\n\n    // stratify the data: reformatting for d3.js\n    var root = d3.stratify()\n      .id(function(d) { return d.label; })\n      .parentId(function(d) { return d.parent; })\n      (props.data);\n\n    root.sum(function(d) { return +d.value })\n\n    const tree = treemap(root);\n\n    let series = []\n    root.children.map( d => {\n      series.push(d.id)\n    })\n\n    let colorsDomain;\n    let colorsAccessor;\n    const origArray = Array.from(series.keys())\n\n    if (this.props.color.accessor === 'Sequential'){\n      colorsDomain = origArray.map(x => x / series.length)\n      colorsAccessor = this.props.colorAccessorSequential\n    }else{\n      colorsDomain = series\n      colorsAccessor = this.props.colorAccessorOrdinal\n    }\n\n    const cells = tree.children.map((node, idx) => (\n        <CellContainer\n          key={idx}\n          x={node.x0}\n          y={node.y0}\n          width={node.x1 - node.x0}\n          height={node.y1 - node.y0}\n          fill={this.props.color.colors(colorsAccessor(colorsDomain, idx))}\n\n          label={node.data.label}\n          fontSize={props.fontSize}\n          textColor={props.textColor}\n          hoverAnimation={props.hoverAnimation}\n          drillData={props.drillData}\n        />\n    ), this);\n\n    return (\n      <g transform={props.transform} className=\"treemap\">\n        {cells}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst d3 = require('d3');\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst Chart = require('../common').Chart;\nconst DataSeries = require('./DataSeries');\nconst BreadCrumb = require('../common/BreadCrumb');\nimport ChartContext from '../ChartContext';\n\nmodule.exports = createReactClass({\n\n  displayName: 'Treemap',\n\n  propTypes: {\n    data: PropTypes.array,\n    margins: PropTypes.object,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    title: PropTypes.string,\n    textColor: PropTypes.string,\n    fontSize: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    hoverAnimation: PropTypes.bool,\n  },\n\n  getDefaultProps() {\n    return {\n      hoverAnimation: true,\n      data: [],\n      width: 400,\n      heigth: 200,\n      title: '',\n      textColor: '#f7f7f7',\n      fontSize: '0.85em',\n      color: {\n        accessor: 'Ordinal',\n        colors: d3.scaleOrdinal(d3.schemeCategory10),\n      },\n    };\n  },\n\n  getInitialState() {\n    return {\n      data: this.props.data,\n      dataInitial: this.props.data,\n      bc:[],\n    };\n  },\n\n\n\n  _recBreadCrumb(label, bc){\n    const elem = this.state.dataInitial.filter(f=>f.label===label)\n    if (elem.length > 0 &&\n      this.state.dataInitial.filter(f=>f.parent===label).length > 0 ){\n        bc.push({ev:this._drillData, label:label});\n        this._recBreadCrumb(elem[0].parent, bc)\n      }\n    return bc.length > 0 ? bc : this.state.bc\n  },\n\n\n  _drillData(label, upDown) {\n    /* state not initialized at the first time due to api lag */\n    if (this.state.dataInitial && this.state.dataInitial.length < 1){\n      this.setState({\n        data: this.props.data,\n        dataInitial: this.props.data\n      }, () => {\n        this._drillData(label, upDown)\n      })\n    }else{\n      let bc = [];\n      const breadcrumb = this._recBreadCrumb(label, bc)\n      let fData = this.state;\n\n      if (upDown === 'down'){\n        fData = this.props.data\n        .filter( d => d.parent===label )\n        .map(  d => {\n          return Object.assign({}, d, {\n            parent:'Origin'\n          });\n        })\n      }\n      else if (upDown === 'up'){\n        fData = this.state.dataInitial\n        .filter( d => d.parent===label )\n        .map(  d => {\n          return Object.assign({}, d, {\n            parent:'Origin'\n          });\n        })\n      }\n      if (fData.length === 0) {return }\n\n      /* Add filtered origin */\n      fData.push({\n          \"label\": \"Origin\",\n          \"value\": \"\",\n          \"parent\": \"\",\n      })\n\n      this.setState({\n        data: fData,\n        bc: breadcrumb\n        // dataLabel:label,\n      });\n    }\n  },\n\n\n  render() {\n\n    // debugger;\n    const props = this.props;\n    if (this.props.data && this.props.data.length < 1) {\n      return null;\n    }\n\n    /* Context */\n    this.contextType = ChartContext;\n    const { chartStyle }  = this.contextType._currentValue;\n\n    return (\n\n      <div>\n      <div className={`rd3-chart-treemap ${chartStyle}`}>\n\n      {/* <div className={`rd3-chart-treemap`}> */}\n      <Chart\n        title={props.title}\n        width={props.width}\n        height={props.height}\n        svgChart={props.svgChart}\n        background={props.background}\n        svgTitle={props.svgTitle}\n        color={this.props.color}\n      >\n        <g className=\"rd3-treemap\">\n          <DataSeries\n            data={this.state.data.length > 0 ? this.state.data : this.props.data}\n            width={props.width}\n            height={props.height}\n            color={props.color}\n            colorAccessor={props.colorAccessor}\n            textColor={props.textColor}\n            fontSize={props.fontSize}\n            hoverAnimation={props.hoverAnimation}\n            drillData={this._drillData}\n          />\n        </g>\n\n      </Chart>\n      </div>\n      <BreadCrumb breadcrumb={this.state.bc} title={props.title}/>\n      </div>\n    );\n  },\n});\n","\nexports.Treemap = require('./Treemap');\n","const d3 = require('d3');\nconst { number } = require('prop-types');\n\nexports.calculateScales = (width, height, xValues, yValues, xDomain = [], yDomain = []) => {\n  let xScale;\n  if (xValues.length > 0 && Object.prototype.toString.call(xValues[0]) === '[object Date]') {\n    xScale = d3.scaleTime()\n      .range([0, width]);\n  } else {\n    /*\n    TODO: allow select scale num, str, date\n    xScale = d3.scaleBand()\n    xScale.domain(xValues);\n    */\n\n    xScale = d3.scaleLinear()\n    // xScale = d3.scaleBand()\n      .range([0, width]);\n  }\n  const xdomain = d3.extent(xValues);\n  if (xDomain[0] !== undefined && xDomain[0] !== null) xdomain[0] = xDomain[0];\n  if (xDomain[1] !== undefined && xDomain[1] !== null) xdomain[1] = xDomain[1];\n  xScale.domain(xdomain);\n\n  // xScale.domain(xValues.sort());\n\n\n\n\n\n  let yScale;\n  if (yValues.length > 0 && Object.prototype.toString.call(yValues[0]) === '[object Date]') {\n    yScale = d3.scaleTime()\n      .range([height, 0]);\n  } else {\n    /* TODO: Allow scaleLog */\n    yScale = d3.scaleLinear()\n      .range([height, 0]);\n  }\n\n  yValues = yValues.map( y=>parseInt(y))\n  const ydomain = d3.extent(yValues);\n  if (yDomain[0] !== undefined && yDomain[0] !== null) ydomain[0] = yDomain[0];\n  if (yDomain[1] !== undefined && yDomain[1] !== null) ydomain[1] = yDomain[1];\n  yScale.domain(ydomain);\n\n  return {\n    xScale,\n    yScale,\n  };\n};\n\n// debounce from Underscore.js\n// MIT License: https://raw.githubusercontent.com/jashkenas/underscore/master/LICENSE\n// Copyright (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative\n// Reporters & Editors\nexports.debounce = (func, wait, immediate) => {\n  let timeout;\n  return function debounce(...args) {\n    const context = this;\n    const later = () => {\n      timeout = null;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n};\n\nexports.flattenData = (data, xAccessor, yAccessor) => {\n  const allValues = [];\n  const xValues = [];\n  const yValues = [];\n  const coincidentCoordinateCheck = {};\n\n  data.forEach((series, i) => {\n    series.values.forEach((item, j) => {\n      const x = xAccessor(item);\n\n      // Check for NaN since d3's Voronoi cannot handle NaN values\n      // Go ahead and Proceed to next iteration since we don't want NaN\n      // in allValues or in xValues or yValues\n      // if (isNaN(x)) {\n      //   return;\n      // }\n      xValues.push(x);\n\n      const y = yAccessor(item);\n      // when yAccessor returns an object (as in the case of candlestick)\n      // iterate over the keys and push all the values to yValues array\n      let yNode;\n      if (typeof y === 'object' && Object.keys(y).length > 0) {\n        Object.keys(y).forEach((key) => {\n          // Check for NaN since d3's Voronoi cannot handle NaN values\n          // Go ahead and Proceed to next iteration since we don't want NaN\n          // in allValues or in xValues or yValues\n          if (isNaN(y[key])) {\n            return;\n          }\n          yValues.push(y[key]);\n          // if multiple y points are to be plotted for a single x\n          // as in the case of candlestick, default to y value of 0\n          yNode = 0;\n        });\n      } else {\n        // Check for NaN since d3's Voronoi cannot handle NaN values\n        // Go ahead and Proceed to next iteration since we don't want NaN\n        // in allValues or in xValues or yValues\n        if (isNaN(y)) {\n          return;\n        }\n        yValues.push(y);\n        yNode = y;\n      }\n\n      const xyCoords = `${x}-${yNode}`;\n      if (coincidentCoordinateCheck.hasOwnProperty(xyCoords)) {\n        // Proceed to next iteration if the x y pair already exists\n        // d3's Voronoi cannot handle NaN values or coincident coords\n        // But we push them into xValues and yValues above because\n        // we still may handle them there (labels, etc.)\n        return;\n      }\n      coincidentCoordinateCheck[xyCoords] = '';\n\n      const pointItem = {\n        coord: {\n          x,\n          y: yNode,\n        },\n        d: item,\n        id: series.name + j,\n        series,\n        seriesIndex: i,\n      };\n      allValues.push(pointItem);\n    });\n  });\n\n  return { allValues, xValues, yValues };\n};\n\n\nfunction componentToHex(c) {\n  var hex = c.toString(16);\n  return hex.length == 1 ? \"0\" + hex : hex;\n}\n\nfunction rgbToHex(rgb) {\n  return \"#\" + componentToHex(parseInt(rgb[0])) + componentToHex(parseInt(rgb[1])) + componentToHex(parseInt(rgb[2]));\n}\n\n\nexports.shade = (hex, percent) => {\n  let red;\n  let green;\n  let blue;\n  const min = Math.min;\n  const round = Math.round;\n\n  if (hex.length !== 7) {\n    const rgb = hex.substring(4, hex.length-1)\n         .replace(/ /g, '')\n         .split(',');\n    hex = rgbToHex(rgb)\n  }\n  if (hex.length > 10) { return hex; }\n\n\n  const number = parseInt(hex.slice(1), 16);\n  const R = number >> 16;\n  const G = number >> 8 & 0xFF;\n  const B = number & 0xFF;\n  red = min(255, round((1 + percent) * R)).toString(16);\n  if (red.length === 1) red = `0${red}`;\n  green = min(255, round((1 + percent) * G)).toString(16);\n  if (green.length === 1) green = `0${green}`;\n  blue = min(255, round((1 + percent) * B)).toString(16);\n  if (blue.length === 1) blue = `0${blue}`;\n  return `#${red}${green}${blue}`;\n};\n\n\n\n\nexports.nFormatter = (num, digits) => {\n  const lookup = [\n    { value: 1, symbol: \"\" },\n    { value: 1e3, symbol: \"k\" },\n    { value: 1e6, symbol: \"M\" },\n    { value: 1e9, symbol: \"G\" },\n    { value: 1e12, symbol: \"T\" },\n    { value: 1e15, symbol: \"P\" },\n    { value: 1e18, symbol: \"E\" }\n  ];\n  const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n  var item = lookup.slice().reverse().find(function(item) {\n    return num >= item.value;\n  });\n  return item ? (num / item.value).toFixed(digits).replace(rx, \"$1\") + item.symbol : \"0\";\n}\n\n\n\n\nexports.formatInputData = require('./input').formatInputData;\nexports.rd3FormatInputData = require('./input').rd3FormatInputData;\n","/*\n    Different format for input data are allowed.\n    Converts each one for rd3 internal format.\n*/\n\nconst csvRows = (data) => {\n    const dataDict = {}\n    data.map( (elem, idxE) => {\n        const bar = elem.x;\n        if (typeof dataDict[bar] === 'undefined'){\n          dataDict[bar] = {'x':bar, [elem.name]:+elem.y}\n        }else{\n          dataDict[bar][elem.name] = +elem.y\n        }\n    })\n\n    let series = new Set(data.map((item) => item.name));\n    series = Array.from(series);\n\n    data = Object.keys(dataDict).map(function(key){\n        return dataDict[key];\n    });\n\n    return [data, series]\n}\n\n/* FOR BARCHART ONLY. HAVE TO READAPT BARCHART TO RD3 STANDARD */\nexports.formatInputData = (inputDataLayout, data) => {\n    if (inputDataLayout === 'csvRows'){\n        return csvRows(data)\n    }\n    else if (inputDataLayout === 'csvStandard'){\n        let series = Object.keys(data[0]).filter( f => f !== 'x')\n        return [data, series]\n    }\n}\n\n\nconst csvStandard2rd3 = (chartType, data, xIsDate, strokeWidth) => {\n\n    let dataObj = []\n    data.map( (d) =>  {\n\n        for (const prop in d) {\n            if (prop === 'x'){continue}\n            let curObj = dataObj.filter(obj => {\n                return obj.name === prop\n            })\n            curObj = curObj[0]\n            if (curObj === undefined ){\n                curObj = {'name': prop, 'strokeWidth':parseInt(strokeWidth),  'values': []}\n                dataObj.push(curObj)\n            }\n            if (chartType === 'linechart'){\n                try{\n                const x = xIsDate === true ? new Date(Date.parse(d.x)) : d.x;\n                curObj['values'].push({x:x, y:+d[prop]})\n                }catch(e){\n                    debugger;\n                }\n            }\n        }\n        if (chartType === 'areachart'){\n            const x = xIsDate === true ? new Date(Date.parse(d.x)): d.x;\n            d['date'] = x\n            delete d[x];\n        }\n    })\n    if (chartType === 'areachart'){dataObj = data}\n\n    let series = Object.keys(data[0]).filter( f => f !== 'x' && f !=='date')\n    return [dataObj, series]\n}\n\n\n\n\nconst csvRows2rd3 = (chartType, data, xIsDate, strokeWidth) => {\n    let dataObj = []\n    data.map( (d) =>  {\n        let curObj = dataObj.filter(obj => {\n            return obj.name === d.name\n        })\n        curObj = curObj[0]\n        if (curObj === undefined){\n            curObj = {'name': d.name, 'strokeWidth':strokeWidth, 'values': []}\n            dataObj.push(curObj)\n        }\n\n        if (chartType === 'linechart'){\n            try{\n            const x = xIsDate === true ? new Date(Date.parse(d.x)) : d.x;\n            curObj['values'].push({x:x, y:+d.y})\n            }catch(e){\n                debugger;\n            }\n        }\n        else if (chartType === 'areachart'){\n            const x = xIsDate === true ? new Date(Date.parse(d.x)) : d.x;\n            curObj['values'].push([x, +d.y])\n        }\n    })\n\n    let series = new Set(data.map((item) => item.name));\n    series = Array.from(series);\n\n    return [dataObj, series]\n};\n\n\nexports.rd3FormatInputData = (chartType, inputDataLayout, data, xIsDate, strokeWidth) => {\n    if (inputDataLayout === 'rd3'){\n        if (chartType=== 'areachart'){\n            const series = Object.keys(data[0]).filter( f => f !== 'date') || []\n            return [data, series]\n        }\n        return [data, data.map( d=> d.name)]\n    }\n    if (inputDataLayout === 'csvRows'){\n        return csvRows2rd3(chartType, data, xIsDate, strokeWidth)\n    }\n    else if (inputDataLayout === 'csvStandard'){\n        return csvStandard2rd3(chartType, data, xIsDate, strokeWidth)\n    }\n}\n\n\n\n/* CONVERT EXTERNAL INPUT TO RD3 API FORMAT */\n\n/* CSV Standard\n0:\nLib 1: \"74.0\"\nLib 2: \"0.0\"\nLib 3: \"5.0\"\nLib 4: \"14.0\"\nLib 5: \"10.0\"\nLib 6: \"197.0\"\nLib 7: \"160.0\"\nx: \"202044\"\n*/\n\n\n/* RD3 FORMAT FOR LINECHART\n[{\n    name: 'series1',\n    values: [{ x: 0, y: 20 }, { x: 1, y: 30 }, { x: 2, y: 10 }, { x: 3, y: 5 }, { x: 4, y: 8 }, { x: 5, y: 15 }, { x: 6, y: 10 }],\n    strokeWidth: 3,\n    strokeDashArray: '5,5'\n}]\n*/\n\n/* RD3 FORMAT FOR AREACHART\n[\n    {\n      \"name\" : \"North America\" ,\n      \"values\" : [ [ 1025409600000 , 23.041422681023] , [ 1028088000000 , 19.854291255832] , [ 1030766400000 , 21.02286281168] , [ 1033358400000 , 22.093608385173] , [ 1036040400000 , 25.108079299458] , [ 1038632400000 , 26.982389242348] , [ 1041310800000 , 19.828984957662] , [ 1043989200000 , 19.914055036294] , [ 1046408400000 , 19.436150539916] , [ 1049086800000 , 21.558650338602] , [ 1051675200000 , 24.395594061773] , [ 1054353600000 , 24.747089309384] , [ 1056945600000 , 23.491755498807] , [ 1059624000000 , 23.376634878164] , [ 1062302400000 , 24.581223154533] , [ 1064894400000 , 24.922476843538] , [ 1067576400000 , 27.357712939042] , [ 1070168400000 , 26.503020572593] , [ 1072846800000 , 26.658901244878] , [ 1075525200000 , 27.065704156445] , [ 1078030800000 , 28.735320452588] , [ 1080709200000 , 31.572277846319] , [ 1083297600000 , 30.932161503638] , [ 1085976000000 , 31.627029785554] , [ 1088568000000 , 28.728743674232] , [ 1091246400000 , 26.858365172675] , [ 1093924800000 , 27.279922830032] , [ 1096516800000 , 34.408301211324] , [ 1099195200000 , 34.794362930439] , [ 1101790800000 , 35.609978198951] , [ 1104469200000 , 33.574394968037] , [ 1107147600000 , 31.979405070598] , [ 1109566800000 , 31.19009040297] , [ 1112245200000 , 31.083933968994] , [ 1114833600000 , 29.668971113185] , [ 1117512000000 , 31.490638014379] , [ 1120104000000 , 31.818617451128] , [ 1122782400000 , 32.960314008183] , [ 1125460800000 , 31.313383196209] , [ 1128052800000 , 33.125486081852] , [ 1130734800000 , 32.791805509149] , [ 1133326800000 , 33.506038030366] , [ 1136005200000 , 26.96501697216] , [ 1138683600000 , 27.38478809681] , [ 1141102800000 , 27.371377218209] , [ 1143781200000 , 26.309915460827] , [ 1146369600000 , 26.425199957518] , [ 1149048000000 , 26.823411519396] , [ 1151640000000 , 23.850443591587] , [ 1154318400000 , 23.158355444054] , [ 1156996800000 , 22.998689393695] , [ 1159588800000 , 27.9771285113] , [ 1162270800000 , 29.073672469719] , [ 1164862800000 , 28.587640408904] , [ 1167541200000 , 22.788453687637] , [ 1170219600000 , 22.429199073597] , [ 1172638800000 , 22.324103271052] , [ 1175313600000 , 17.558388444187] , [ 1177905600000 , 16.769518096208] , [ 1180584000000 , 16.214738201301] , [ 1183176000000 , 18.729632971229] , [ 1185854400000 , 18.814523318847] , [ 1188532800000 , 19.789986451358] , [ 1191124800000 , 17.070049054933] , [ 1193803200000 , 16.121349575716] , [ 1196398800000 , 15.141659430091] , [ 1199077200000 , 17.175388025297] , [ 1201755600000 , 17.286592443522] , [ 1204261200000 , 16.323141626568] , [ 1206936000000 , 19.231263773952] , [ 1209528000000 , 18.446256391095] , [ 1212206400000 , 17.822632399764] , [ 1214798400000 , 15.53936647598] , [ 1217476800000 , 15.255131790217] , [ 1220155200000 , 15.660963922592] , [ 1222747200000 , 13.254482273698] , [ 1225425600000 , 11.920796202299] , [ 1228021200000 , 12.122809090924] , [ 1230699600000 , 15.691026271393] , [ 1233378000000 , 14.720881635107] , [ 1235797200000 , 15.387939360044] , [ 1238472000000 , 13.765436672228] , [ 1241064000000 , 14.631445864799] , [ 1243742400000 , 14.292446536221] , [ 1246334400000 , 16.170071367017] , [ 1249012800000 , 15.948135554337] , [ 1251691200000 , 16.612872685134] , [ 1254283200000 , 18.778338719091] , [ 1256961600000 , 16.756026065421] , [ 1259557200000 , 19.385804443146] , [ 1262235600000 , 22.950590240168] , [ 1264914000000 , 23.61159018141] , [ 1267333200000 , 25.708586989581] , [ 1270008000000 , 26.883915999885] , [ 1272600000000 , 25.893486687065] , [ 1275278400000 , 24.678914263176] , [ 1277870400000 , 25.937275793024] , [ 1280548800000 , 29.461381693838] , [ 1283227200000 , 27.357322961861] , [ 1285819200000 , 29.057235285673] , [ 1288497600000 , 28.549434189386] , [ 1291093200000 , 28.506352379724] , [ 1293771600000 , 29.449241421598] , [ 1296450000000 , 25.796838168807] , [ 1298869200000 , 28.740145449188] , [ 1301544000000 , 22.091744141872] , [ 1304136000000 , 25.07966254541] , [ 1306814400000 , 23.674906973064] , [ 1309406400000 , 23.418002742929] , [ 1312084800000 , 23.24364413887] , [ 1314763200000 , 31.591854066817] , [ 1317355200000 , 31.497112374114] , [ 1320033600000 , 26.67238082043] , [ 1322629200000 , 27.297080015495] , [ 1325307600000 , 20.174315530051] , [ 1327986000000 , 19.631084213898] , [ 1330491600000 , 20.366462219461] , [ 1333166400000 , 19.284784434185] , [ 1335758400000 , 19.157810257624]]\n    },\n\n    {\n      \"name\" : \"Africa\" ,\n      \"values\" : [ [ 1025409600000 , 7.9356392949025] , [ 1028088000000 , 7.4514668527298] , [ 1030766400000 , 7.9085410566608] , [ 1033358400000 , 5.8996782364764] , [ 1036040400000 , 6.0591869346923] , [ 1038632400000 , 5.9667815800451] , [ 1041310800000 , 8.65528925664] , [ 1043989200000 , 8.7690763386254] , [ 1046408400000 , 8.6386160387453] , [ 1049086800000 , 5.9895557449743] , [ 1051675200000 , 6.3840324338159] , [ 1054353600000 , 6.5196511461441] , [ 1056945600000 , 7.0738618553114] , [ 1059624000000 , 6.5745957367133] , [ 1062302400000 , 6.4658359184444] , [ 1064894400000 , 2.7622758754954] , [ 1067576400000 , 2.9794782986241] , [ 1070168400000 , 2.8735432712019] , [ 1072846800000 , 1.6344817513645] , [ 1075525200000 , 1.5869248754883] , [ 1078030800000 , 1.7172279157246] , [ 1080709200000 , 1.9649927409867] , [ 1083297600000 , 2.0261695079196] , [ 1085976000000 , 2.0541261923929] , [ 1088568000000 , 3.9466318927569] , [ 1091246400000 , 3.7826770946089] , [ 1093924800000 , 3.9543021004028] , [ 1096516800000 , 3.8309891064711] , [ 1099195200000 , 3.6340958946166] , [ 1101790800000 , 3.5289755762525] , [ 1104469200000 , 5.702378559857] , [ 1107147600000 , 5.6539569019223] , [ 1109566800000 , 5.5449506370392] , [ 1112245200000 , 4.7579993280677] , [ 1114833600000 , 4.4816139372906] , [ 1117512000000 , 4.5965558568606] , [ 1120104000000 , 4.3747066116976] , [ 1122782400000 , 4.4588822917087] , [ 1125460800000 , 4.4460351848286] , [ 1128052800000 , 3.7989113035136] , [ 1130734800000 , 3.7743883140088] , [ 1133326800000 , 3.7727852823828] , [ 1136005200000 , 7.2968111448895] , [ 1138683600000 , 7.2800122043237] , [ 1141102800000 , 7.1187787503354] , [ 1143781200000 , 8.351887016482] , [ 1146369600000 , 8.4156698763993] , [ 1149048000000 , 8.1673298604231] , [ 1151640000000 , 5.5132447126042] , [ 1154318400000 , 6.1152537710599] , [ 1156996800000 , 6.076765091942] , [ 1159588800000 , 4.6304473798646] , [ 1162270800000 , 4.6301068469402] , [ 1164862800000 , 4.3466656309389] , [ 1167541200000 , 6.830104897003] , [ 1170219600000 , 7.241633040029] , [ 1172638800000 , 7.1432372054153] , [ 1175313600000 , 10.608942063374] , [ 1177905600000 , 10.914964549494] , [ 1180584000000 , 10.933223880565] , [ 1183176000000 , 8.3457524851265] , [ 1185854400000 , 8.1078413081882] , [ 1188532800000 , 8.2697185922474] , [ 1191124800000 , 8.4742436475968] , [ 1193803200000 , 8.4994601179319] , [ 1196398800000 , 8.7387319683243] , [ 1199077200000 , 6.8829183612895] , [ 1201755600000 , 6.984133637885] , [ 1204261200000 , 7.0860136043287] , [ 1206936000000 , 4.3961787956053] , [ 1209528000000 , 3.8699674365231] , [ 1212206400000 , 3.6928925238305] , [ 1214798400000 , 6.7571718894253] , [ 1217476800000 , 6.4367313362344] , [ 1220155200000 , 6.4048441521454] , [ 1222747200000 , 5.4643833239669] , [ 1225425600000 , 5.3150786833374] , [ 1228021200000 , 5.3011272612576] , [ 1230699600000 , 4.1203601430809] , [ 1233378000000 , 4.0881783200525] , [ 1235797200000 , 4.1928665957189] , [ 1238472000000 , 7.0249415663205] , [ 1241064000000 , 7.006530880769] , [ 1243742400000 , 6.994835633224] , [ 1246334400000 , 6.1220222336254] , [ 1249012800000 , 6.1177436137653] , [ 1251691200000 , 6.1413396231981] , [ 1254283200000 , 4.8046006145874] , [ 1256961600000 , 4.6647600660544] , [ 1259557200000 , 4.544865006255] , [ 1262235600000 , 6.0488249316539] , [ 1264914000000 , 6.3188669540206] , [ 1267333200000 , 6.5873958262306] , [ 1270008000000 , 6.2281189839578] , [ 1272600000000 , 5.8948915746059] , [ 1275278400000 , 5.5967320482214] , [ 1277870400000 , 0.99784432084837] , [ 1280548800000 , 1.0950794175359] , [ 1283227200000 , 0.94479734407491] , [ 1285819200000 , 1.222093988688] , [ 1288497600000 , 1.335093106856] , [ 1291093200000 , 1.3302565104985] , [ 1293771600000 , 1.340824670897] , [ 1296450000000 , 0] , [ 1298869200000 , 0] , [ 1301544000000 , 0] , [ 1304136000000 , 0] , [ 1306814400000 , 0] , [ 1309406400000 , 0] , [ 1312084800000 , 0] , [ 1314763200000 , 0] , [ 1317355200000 , 4.4583692315] , [ 1320033600000 , 3.6493043348059] , [ 1322629200000 , 3.8610064091761] , [ 1325307600000 , 5.5144800685202] , [ 1327986000000 , 5.1750695220791] , [ 1330491600000 , 5.6710066952691] , [ 1333166400000 , 5.5611890039181] , [ 1335758400000 , 5.5979368839939]]\n    }\n]\n*/"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
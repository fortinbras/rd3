{"version":3,"sources":["node_modules/browser-pack/_prelude.js","docs/examples/main.js","src/areachart/Area.jsx","src/areachart/AreaChart.jsx","src/areachart/AreaContainer.jsx","src/areachart/DataSeries.jsx","src/areachart/index.js","src/barchart/Bar.jsx","src/barchart/BarChart.jsx","src/barchart/BarContainer.jsx","src/barchart/DataSeries.jsx","src/barchart/index.js","src/candlestick/Candle.jsx","src/candlestick/CandlestickChart.jsx","src/candlestick/CandlestickContainer.jsx","src/candlestick/DataSeries.jsx","src/candlestick/Wick.jsx","src/candlestick/index.js","src/common/Legend.jsx","src/common/Polygon.jsx","src/common/Tooltip.jsx","src/common/Voronoi.jsx","src/common/axes/AxisLine.jsx","src/common/axes/AxisTicks.jsx","src/common/axes/Label.jsx","src/common/axes/XAxis.jsx","src/common/axes/YAxis.jsx","src/common/axes/index.js","src/common/charts/BasicChart.jsx","src/common/charts/Chart.jsx","src/common/charts/LegendChart.jsx","src/common/charts/index.js","src/common/index.js","src/index.js","src/linechart/DataSeries.jsx","src/linechart/Line.jsx","src/linechart/LineChart.jsx","src/linechart/VoronoiCircle.jsx","src/linechart/VoronoiCircleContainer.jsx","src/linechart/index.js","src/mixins/CartesianChartPropsMixin.js","src/mixins/DefaultAccessorsMixin.js","src/mixins/TooltipMixin.js","src/mixins/ViewBoxMixin.js","src/mixins/index.js","src/piechart/Arc.jsx","src/piechart/ArcContainer.jsx","src/piechart/DataSeries.jsx","src/piechart/PieChart.jsx","src/piechart/index.js","src/scatterchart/DataSeries.jsx","src/scatterchart/ScatterChart.jsx","src/scatterchart/VoronoiCircle.jsx","src/scatterchart/VoronoiCircleContainer.jsx","src/scatterchart/index.js","src/treemap/Cell.jsx","src/treemap/CellContainer.jsx","src/treemap/DataSeries.jsx","src/treemap/Treemap.jsx","src/treemap/index.js","src/utils/index.js"],"names":[],"mappings":"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","file":"react-d3.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\nconst React = require('react');\nconst ReactDOM = require('react-dom');\nconst d3 = require('d3');\nconst createReactClass = require('create-react-class');\n// const hljs = require('highlight.js');\nconst rd3 = require('../../src');\n\nconst BarChart = rd3.BarChart;\nconst LineChart = rd3.LineChart;\nconst CandlestickChart = rd3.CandlestickChart;\nconst PieChart = rd3.PieChart;\nconst AreaChart = rd3.AreaChart;\nconst Treemap = rd3.Treemap;\nconst ScatterChart = rd3.ScatterChart;\n\n// hljs.initHighlightingOnLoad();\n\nconst Demos = createReactClass({\n\n  getInitialState() {\n    return {\n      areaData: [],\n      ohlcData: []\n    };\n  },\n\n\n\n\n\n  componentDidMount () {\n    const parseDate = d3.timeFormat('%y-%b-%d').parse;\n\n    /* This function is valid for this dataset only.\n      You can provide a dataset already formated and remove this. */\n    d3.json('data/stackedAreaData.json').\n    then( res => {\n      const data = []\n      res[0].values.forEach((num0, index) => {\n        const num1 = res[1].values[index];\n        data.push({\n          \"date\": new Date(num0[0]),\n          [res[0].name]: num0[1],\n          [res[1].name]: num1[1],\n        })\n      });\n      this.setState( {areaData: data} )\n    });\n\n    d3.tsv('data/AAPL_ohlc.tsv')\n    .then( data => {\n      const series = { name: 'AAPL', values: [] };\n\n      data.map((d) => {\n        d.date = new Date(+d.date);\n        d.open = +d.open;\n        d.high = +d.high;\n        d.low = +d.low;\n        d.close = +d.close;\n        series.values.push({ x: d.date, open: d.open, high: d.high, low: d.low, close: d.close });\n      });\n      this.setState({ ohlcData: [series] });\n    });\n  },\n\n  render() {\n    const lineData = [\n      {\n        name: 'series1',\n        values: [{ x: 0, y: 20 }, { x: 1, y: 30 }, { x: 2, y: 10 }, { x: 3, y: 5 }, { x: 4, y: 8 }, { x: 5, y: 15 }, { x: 6, y: 10 }],\n        strokeWidth: 3,\n        strokeDashArray: '5,5',\n      },\n      {\n        name: 'series2',\n        values: [{ x: 0, y: 8 }, { x: 1, y: 5 }, { x: 2, y: 20 }, { x: 3, y: 12 }, { x: 4, y: 4 }, { x: 5, y: 6 }, { x: 6, y: 2 }]\n      },\n      {\n        name: 'series3',\n        values: [{ x: 0, y: 0 }, { x: 1, y: 5 }, { x: 2, y: 8 }, { x: 3, y: 2 }, { x: 4, y: 6 }, { x: 5, y: 4 }, { x: 6, y: 2 }]\n      }\n    ];\n\n    const barData = [\n      {\n        name: 'Series A',\n        values: [\n          { x: 1, y: 91 },\n          { x: 2, y: 290 },\n          { x: 3, y: -25 },\n        ]\n      },\n      {\n        name: 'Series B',\n        values: [\n          { x: 1, y: 9 },\n          { x: 2, y: 49 },\n          { x: 3, y: -20 },\n        ]\n      },\n      {\n        name: 'Series C',\n        values: [\n          { x: 1, y: 14 },\n          { x: 2, y: 77 },\n          { x: 3, y: -70 },\n        ]\n      }\n    ];\n\n    const pieData = [{ label: 'Margarita', value: 20.0 }, { label: 'John', value: 55.0 }, { label: 'Tim', value: 25.0 }];\n\n    // 2014 Most Populous Countries\n    // http://www.prb.org/pdf14/2014-world-population-data-sheet_eng.pdf\n    const treemapData = [{ label: 'Origin', parent:'', value: '' },\n                          { label: 'China', parent:'Origin', value: 1364 },\n                          { label: 'India', parent:'Origin', value: 1296 },\n                          { label: 'United States', parent:'Origin', value: 318 },\n                          { label: 'Indonesia', parent:'Origin', value: 251 },\n                          { label: 'Brazil', parent:'Origin', value: 203 }\n                          ];\n\n    const scatterData = [\n      {\n        name: 'series1',\n        values: [{ x: 0, y: 20 }, { x: 5, y: 7 }, { x: 8, y: 3 }, { x: 13, y: 33 }, { x: 12, y: 10 }, { x: 13, y: 15 }, { x: 24, y: 8 }, { x: 25, y: 15 }, { x: 16, y: 10 }, { x: 16, y: 10 }, { x: 19, y: 30 }, { x: 14, y: 30 }]\n      },\n      {\n        name: 'series2',\n        values: [{ x: 40, y: 30 }, { x: 35, y: 37 }, { x: 48, y: 37 }, { x: 38, y: 33 }, { x: 52, y: 60 }, { x: 51, y: 55 }, { x: 54, y: 48 }, { x: 45, y: 45 }, { x: 46, y: 50 }, { x: 66, y: 50 }, { x: 39, y: 36 }, { x: 54, y: 30 }]\n      },\n      {\n        name: 'series3',\n        values: [{ x: 80, y: 78 }, { x: 71, y: 58 }, { x: 78, y: 68 }, { x: 81, y: 47 }, { x: 72, y: 70 }, { x: 70, y: 88 }, { x: 81, y: 90 }, { x: 92, y: 80 }, { x: 81, y: 72 }, { x: 99, y: 95 }, { x: 67, y: 81 }, { x: 96, y: 78 }]\n      }\n    ];\n\n    return (\n      <div className=\"container\">\n        <a href=\"https://github.com/fortinbras/reactjs-d3js\"><img style={{ position: 'absolute', top: 0, right: 0, border: 0 }} src=\"https://camo.githubusercontent.com/a6677b08c955af8400f44c6298f40e7d19cc5b2d/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677261795f3664366436642e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png\" /></a>\n        <div className=\"row\">\n          <h3 className=\"page-header\">reactjs-d3js: Multiple series charts</h3>\n        </div>\n\n\n\n\n\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <LineChart\n              legend\n              data={lineData}\n              width=\"100%\"\n              height={400}\n              viewBoxObject={{\n                x: 0,\n                y: 0,\n                width: 500,\n                height: 400\n              }}\n              title=\"Line Chart\"\n              yAxisLabel=\"Altitude\"\n              xAxisLabel=\"Elapsed Time (sec)\"\n              domain={{ x: [, ], y: [, ] }}\n              gridHorizontal\n            />\n          </div>\n          <div className=\"col-md-6\">\n            <pre ref=\"block\">\n              <code className=\"js\">\n              {\n`var lineData = [\n  {\n    name: \"series1\",\n    values: [ { x: 0, y: 20 }, ..., { x: 24, y: 10 } ],\n    strokeWidth: 3,\n    strokeDashArray: \"5,5\",\n  },\n  ....\n  {\n    name: \"series2\",\n    values: [ { x: 70, y: 82 }, ..., { x: 76, y: 82 } ]\n  }\n];`\n              }\n              </code>\n            </pre>\n            <pre ref=\"block\">\n              <code className=\"html\">\n              {\n`<LineChart\n  legend={true}\n  data={lineData}\n  width='100%'\n  height={400}\n  viewBoxObject={{\n    x: 0,\n    y: 0,\n    width: 500,\n    height: 400\n  }}\n  title=\"Line Chart\"\n  yAxisLabel=\"Altitude\"\n  xAxisLabel=\"Elapsed Time (sec)\"\n  domain={{x: [,10], y: [-10,]}}\n  gridHorizontal={true}\n/>`\n              }\n              </code>\n            </pre>\n          </div>\n        </div>\n\n\n\n        <div className=\"row\">\n          <hr />\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <ScatterChart\n              data={scatterData}\n              width={500}\n              height={400}\n              title=\"Scatter Chart\"\n              domain={{ x: [, ], y: [, ] }}\n            />\n          </div>\n          <div className=\"col-md-6\">\n            <pre ref=\"block\">__proto__: Object\n\n              <code className=\"js\">\n              {\n`var scatterData = [\n  {\n    name: \"series1\",\n    values: [ { x: 0, y: 20 }, ..__proto__: Object\n., { x: 24, y: 10 } ]\n  },\n  ....\n  {\n    name: \"series3\",\n    values: [ { x: 70, y: 82 }, ..., { x: 76, y: 82 } ]\n  }\n];`\n              }\n              </code>\n            </pre>\n            <pre ref=\"block\">\n              <code className=\"html\">\n              {\n`<ScatterChart\n  data={scatterData}\n  width={500}\n  height={400}\n  domain={{y: [-15,], y: [-15,]}}\n  title=\"Scatter Chart\"\n/>`\n              }\n              </code>\n            </pre>\n          </div>\n        </div>\n        <div className=\"row\">\n          <hr />\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <AreaChart\n              data={this.state.areaData}\n              width=\"100%\"\n              viewBoxObject={{\n                x: 0,\n                y: 0,\n                height: 400,\n                width: 500\n              }}\n              height={400}\n              title=\"Area Chart\"\n              xAxisTickInterval={{ unit: 'year', interval: 2 }}\n              xAxisLabel=\"Year\"\n              yAxisLabel=\"Share Price\"\n              xAccessor={(d) => new Date(d[0])\n              }\n              yAccessor={(d) => d[1]}\n              // domain={{ y: [, 60] }}\n            />\n          </div>\n          <div className=\"col-md-6\">\n            <pre ref=\"block\">\n              <code className=\"js\">\n              {\n`var areaData = [\n  {\n    name: \"series1\",\n    values: [ { x: [object Date], y: 20.5 }, ..., { x: [object Date], y: 4.2 } ]\n  },\n  ...\n  {\n    name: \"series2\",\n    values: [ { x: [object Date], y: 3.2 }, ..., { x: [object Date], y: 11.2 } ]\n  }\n];`\n              }\n              </code>\n            </pre>\n            <pre ref=\"block\">\n              <code className=\"html\">\n                {\n`<AreaChart\n  data={areaData}\n  width=\"100%\"\n  height={300}\n  viewBoxObject={{\n    x: 0,\n    y: 0,\n    height: 400,\n    width: 500\n  }}\n  domain={{y: [,60]}}\n  xAxisTickInterval={{unit: 'year', interval: 2}}\n  title=\"Area Chart\"\n/>`\n                }\n              </code>\n            </pre>\n          </div>\n        </div>\n        <div className=\"row\">\n          <hr />\n        </div>\n\n\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <CandlestickChart\n              data={this.state.ohlcData}\n              width={500}\n              height={400}\n              yAxisOffset={-10}\n              title=\"Candlestick Chart\"\n              domain={{ y: [400, 500] }}\n            />\n          </div>\n          <div className=\"col-md-6\">\n            <pre ref=\"block\">\n              <code className=\"js\">\n              {\n`var ohlcData = [\n  {\n    name: \"AAPL\",\n    values: [ { x: [object Date], open: 451.69, high: 456.23, low: 435, close: 439.88 },\n              { x: [object Date], open: 437.82, high: 453.21, low: 435.86 , close: 449.83 },\n              ...\n            ]\n  }\n];`\n              }\n              </code>\n            </pre>\n            <pre ref=\"block\">\n              <code className=\"html\">\n                {\n`<CandlestickChart\n  data={ohlcData}\n  width={500}\n  height={400}\n  xAxisTickInterval={{unit: 'month', interval: 1}}\n  yAxisOffset={-10}\n  title=\"Candlestick Chart\"\n  domain={{y:[400, 500]}}\n/>`\n                }\n              </code>\n            </pre>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <hr />\n        </div>\n\n\n\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <BarChart\n                data={barData}\n                grouped={true}\n                width={500}\n                height={300}\n                title=\"Bar Chart\"\n                yAxisLabel=\"Label\"\n                xAxisLabel=\"Value\"\n            />\n          </div>\n          <div className=\"col-md-6\">\n            <pre ref=\"block\">\n              <code className=\"js\">\n              {`var barData = [\n  {\n    \"name\": \"Series A\",\n    \"values\": [\n      { \"x\": 1, \"y\":  91},\n      ...\n  },\n  {\n    \"name\": \"Series B\",\n     \"values\": [ ... ]\n  }\n  ...\n];`}\n              </code>\n            </pre>\n            <pre ref=\"block\">\n              <code className=\"html\">\n                {`<BarChart\n  data={barData}\n  width={500}\n  height={200}\n  fill={'#3182bd'}\n  title='Bar Chart'\n  yAxisLabel='Label'\n  xAxisLabel='Value'\n/>`}\n              </code>\n            </pre>\n          </div>\n\n        <div className=\"row\">\n          <h3 className=\"page-header\">reactjs-d3js: Single series charts</h3>\n        </div>\n\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <PieChart data={pieData} width={450} height={400} radius={110} innerRadius={20} sectorBorderColor=\"white\" title=\"Pie Chart\" />\n          </div>\n          <div className=\"col-md-6\">\n            <pre ref=\"block\">\n              <code className=\"js\">\n              {\n`var pieData = [\n  {label: 'Margarita', value: 20.0},\n  {label: 'John', value: 55.0},\n  {label: 'Tim', value: 25.0 }\n];`\n              }\n              </code>\n            </pre>\n            <pre ref=\"block\">\n              <code className=\"html\">\n                {\n`<PieChart\n  data={pieData}\n  width={400}\n  height={400}\n  radius={100}\n  innerRadius={20}\n  sectorBorderColor=\"white\"\n  title=\"Pie Chart\"\n/>`\n                }\n              </code>\n            </pre>\n          </div>\n        </div>\n\n\n\n        <div className=\"row\">\n          <hr />\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <Treemap\n              width={450}\n              height={250}\n              title=\"Treemap\"\n              data={treemapData}\n              textColor=\"#484848\"\n              fontColor=\"12px\"\n              hoverAnimation={false}\n            />\n          </div>\n          <div className=\"col-md-6\">\n            <pre ref=\"block\">\n              <code className=\"js\">\n              {\n`//2014 World Most Populous Countries (millions)\n//http://www.prb.org/pdf14/2014-world-population-data-sheet_eng.pdf\nvar treemapData = [\n  {label: \"China\", value: 1364},\n  {label: \"India\", value: 1296},\n...\n  {label: \"Brazil\", value: 203}\n];`\n              }\n              </code>\n            </pre>\n            <pre ref=\"block\">\n              <code className=\"html\">\n                {\n`<Treemap\n  data={treemapData}\n  width={450}\n  height={250}\n  textColor=\"#484848\"\n  fontSize=\"12px\"\n  title=\"Treemap\"\n  hoverAnimation={false}\n/>`\n                }\n              </code>\n            </pre>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n\n});\n\nReactDOM.render(\n  <Demos />,\n  document.getElementById('app')\n);\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Area',\n\n  propTypes: {\n    path: PropTypes.string,\n    fill: PropTypes.string,\n    handleMouseOver: PropTypes.func,\n    handleMouseLeave: PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: '#3182bd',\n    };\n  },\n\n  render() {\n    return (\n      <path\n        className=\"rd3-areachart-area\"\n        d={this.props.path}\n        fill={this.props.fill}\n        onMouseOver={this.props.handleMouseOver}\n        onMouseLeave={this.props.handleMouseLeave}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst DataSeries = require('./DataSeries');\nconst { Chart, XAxis, YAxis } = require('../common');\nconst { CartesianChartPropsMixin, DefaultAccessorsMixin, ViewBoxMixin } = require('../mixins');\n\nmodule.exports = createReactClass({\n\n  displayName: 'AreaChart',\n\n  propTypes: {\n    margins: PropTypes.object,\n    interpolate: PropTypes.bool,\n    interpolationType: PropTypes.string,\n    hoverAnimation: PropTypes.bool,\n    data: PropTypes.array.isRequired,\n  },\n\n  mixins: [CartesianChartPropsMixin, DefaultAccessorsMixin, ViewBoxMixin],\n\n  getDefaultProps() {\n    return {\n      colors: d3.scaleOrdinal(d3.schemeBlues[3].reverse()),\n      // colors: d3.scaleOrdinal(d3.schemePastel2),\n\n      margins: { top: 10, right: 20, bottom: 40, left: 45 },\n      yAxisTickCount: 4,\n      interpolate: false,\n      interpolationType: null,\n      className: 'rd3-areachart',\n      hoverAnimation: true,\n      data: [],\n    };\n  },\n\n  render() {\n    const props = this.props;\n    let data = props.data;\n    const interpolationType =\n      props.interpolationType ||\n      (props.interpolate ? 'cardinal' : 'linear');\n\n    const { innerWidth, innerHeight, trans, svgMargins } = this.getDimensions();\n    const yOrient = this.getYOrient();\n\n    if (!Array.isArray(data)) {\n      data = [data];\n    }\n    if (this.props.data && this.props.data.length < 1) {\n      return null;\n    }\n\n    const yScale = d3.scaleLinear()\n      .range([innerHeight, 0]);\n\n    const xValues = [];\n    const yValues = [];\n    // const seriesNames = [];\n    // const yMaxValues = [];\n    const domain = props.domain || {};\n    const xDomain = domain.x || [];\n    const yDomain = domain.y || [];\n    const seriesNames = Object.keys(data[0]).filter( f => f !== 'date') || [];\n\n    const yMaxValues = d3.sum(seriesNames.map( n => {\n        return d3.max(data.map( d => { return d[n]}))\n    }))\n\n\n    /* TODO - generalize. Only acceptint field date for x axis*/\n    data.map( d => {\n      xValues.push(d.date);\n    })\n\n\n    let xScale;\n    if (xValues.length > 0 &&\n      Object.prototype.toString.call(xValues[0]) === '[object Date]' &&\n      props.xAxisTickInterval) {\n      xScale = d3.scaleTime()\n        .range([0, innerWidth]);\n    } else {\n      xScale = d3.scaleLinear()\n        .range([0, innerWidth]);\n    }\n\n    const xdomain = d3.extent(xValues);\n    if (xDomain[0] !== undefined && xDomain[0] !== null) xdomain[0] = xDomain[0];\n    if (xDomain[1] !== undefined && xDomain[1] !== null) xdomain[1] = xDomain[1];\n    xScale.domain(xdomain);\n    const ydomain = [0, yMaxValues];\n    if (yDomain[0] !== undefined && yDomain[0] !== null) ydomain[0] = yDomain[0];\n    if (yDomain[1] !== undefined && yDomain[1] !== null) ydomain[1] = yDomain[1];\n\n    yScale.domain(ydomain);\n\n    const colorsDomain = Array.from(Array(seriesNames.length).keys())\n    props.colors.domain(colorsDomain);\n\n    const stack = d3.stack()\n    stack.keys(seriesNames)\n\n    const layers = stack(data)\n    const dataSeries = layers.map((d, idx) => (\n        <DataSeries\n        key={idx}\n        fill={props.colors(props.colorAccessor(d, idx))}\n        // seriesName={d.name}\n        index={idx}\n        xScale={xScale}\n        yScale={yScale}\n        data={d}\n        xAccessor={props.xAccessor}\n        yAccessor={props.yAccessor}\n        interpolationType={interpolationType}\n        hoverAnimation={props.hoverAnimation}\n      />\n\n    ));\n\n    return (\n      <Chart\n        viewBox={this.getViewBox()}\n        legend={props.legend}\n        data={data}\n        margins={props.margins}\n        width={props.width}\n        height={props.height}\n        title={props.title}\n      >\n        <g transform={trans} className={props.className}>\n          <XAxis\n            xAxisClassName=\"rd3-areachart-xaxis\"\n            xScale={xScale}\n            xAxisTickValues={props.xAxisTickValues}\n            xAxisTickInterval={props.xAxisTickInterval}\n            xAxisTickCount={props.xAxisTickCount}\n            xAxisLabel={props.xAxisLabel}\n            xAxisLabelOffset={props.xAxisLabelOffset}\n            tickFormatting={props.xAxisFormatter}\n            tickStroke={props.xAxisTickStroke}\n            tickTextStroke={props.xAxisTickTextStroke}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={innerHeight}\n            horizontalChart={props.horizontal}\n            gridVertical={props.gridVertical}\n            gridVerticalStroke={props.gridVerticalStroke}\n            gridVerticalStrokeWidth={props.gridVerticalStrokeWidth}\n            gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n          />\n          <YAxis\n            yAxisClassName=\"rd3-areachart-yaxis\"\n            yScale={yScale}\n            yAxisTickValues={props.yAxisTickValues}\n            yAxisTickInterval={props.yAxisTickInterval}\n            yAxisTickCount={props.yAxisTickCount}\n            yAxisLabel={props.yAxisLabel}\n            yAxisLabelOffset={props.yAxisLabelOffset}\n            tickFormatting={props.yAxisFormatter}\n            tickStroke={props.yAxisTickStroke}\n            tickTextStroke={props.yAxisTickTextStroke}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={props.height}\n            horizontalChart={props.horizontal}\n            gridHorizontal={props.gridHorizontal}\n            gridHorizontalStroke={props.gridHorizontalStroke}\n            gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n            gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n          />\n          {dataSeries}\n        </g>\n      </Chart>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst shade = require('../utils').shade;\nconst Area = require('./Area');\n\nmodule.exports = createReactClass({\n\n  displayName: 'AreaContainer',\n\n  propTypes: {\n    fill: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: '#3182bd',\n    };\n  },\n\n  getInitialState() {\n    return {\n      fill: this.props.fill,\n    };\n  },\n\n  _animateArea() {\n    this.setState({\n      fill: shade(this.props.fill, 0.02),\n    });\n  },\n\n  _restoreArea() {\n    this.setState({\n      fill: this.props.fill,\n    });\n  },\n\n  render() {\n    const props = this.props;\n\n    // animation controller\n    let handleMouseOver;\n    let handleMouseLeave;\n    if (props.hoverAnimation) {\n      handleMouseOver = this._animateArea;\n      handleMouseLeave = this._restoreArea;\n    } else {\n      handleMouseOver = handleMouseLeave = null;\n    }\n\n    return (\n      <Area\n        handleMouseOver={handleMouseOver}\n        handleMouseLeave={handleMouseLeave}\n        {...props}\n        fill={this.state.fill}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst AreaContainer = require('./AreaContainer');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    fill: PropTypes.string,\n    interpolationType: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      interpolationType: 'linear',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const area = d3.area()\n    .x((d) => props.xScale(d.data.date))\n    .y0((d) => props.yScale(d[0]))\n    .y1((d) => props.yScale(d[1]))\n    .curve(d3.curveCatmullRom.alpha(0.5));\n\n    const path = area(props.data);\n\n    return (\n      <AreaContainer\n        fill={props.fill}\n        hoverAnimation={props.hoverAnimation}\n        path={path}\n      />\n    );\n  },\n});\n","\nexports.AreaChart = require('./AreaChart');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  propTypes: {\n    fill: PropTypes.string,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    x: PropTypes.number,\n    y: PropTypes.number,\n    className: PropTypes.string,\n    handleMouseOver: PropTypes.func,\n    handleMouseLeave: PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      offset: 0,\n      className: 'rd3-barchart-bar',\n    };\n  },\n\n  render() {\n    return (\n      <rect\n        className=\"rd3-barchart-bar\"\n        {...this.props}\n        fill={this.props.fill}\n        onMouseOver={this.props.handleMouseOver}\n        onMouseLeave={this.props.handleMouseLeave}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst DataSeries = require('./DataSeries');\nconst { Chart, XAxis, YAxis, Tooltip } = require('../common');\nconst {\n  CartesianChartPropsMixin,\n  DefaultAccessorsMixin,\n  ViewBoxMixin,\n  TooltipMixin,\n} = require('../mixins');\n\nmodule.exports = createReactClass({\n\n  displayName: 'BarChart',\n\n  propTypes: {\n    chartClassName: PropTypes.string,\n    data: PropTypes.array.isRequired,\n    hoverAnimation: PropTypes.bool,\n    margins: PropTypes.object,\n    rangeRoundBandsPadding: PropTypes.number,\n    // https://github.com/mbostock/d3/wiki/Stack-Layout#offset\n    stackOffset: PropTypes.oneOf(['silhouette', 'expand', 'wigget', 'zero']),\n    grouped: PropTypes.bool,\n    valuesAccessor: PropTypes.func,\n    xAccessorBar: PropTypes.func,\n    yAccessorBar: PropTypes.func,\n    y0Accessor: PropTypes.func,\n    title: PropTypes.string,\n    xAxisClassName: PropTypes.string,\n    yAxisClassName: PropTypes.string,\n    yAxisTickCount: PropTypes.number,\n  },\n\n\n  mixins: [CartesianChartPropsMixin, DefaultAccessorsMixin, ViewBoxMixin, TooltipMixin],\n\n  getDefaultProps() {\n    return {\n      chartClassName: 'rd3-barchart',\n      colors: d3.scaleOrdinal(d3.schemeGnBu[9].reverse()),\n      hoverAnimation: true,\n      margins: { top: 10, right: 20, bottom: 40, left: 45 },\n      rangeRoundBandsPadding: 0.25,\n      stackOffset: 'zero',\n      grouped: false,\n      valuesAccessor: d => d,\n      y0Accessor: d => d[0],\n      xAxisClassName: 'rd3-barchart-xaxis',\n      yAxisClassName: 'rd3-barchart-yaxis',\n      yAxisTickCount: 4,\n    };\n  },\n\n  _getLabels(firstSeries) {\n    // we only need first series to get all the labels\n    const { valuesAccessor, xAccessorBar } = this.props;\n    return valuesAccessor(firstSeries).map(xAccessorBar);\n  },\n\n  _stack(seriesNames) {\n    // Only support columns with all positive or all negative values\n    // https://github.com/mbostock/d3/issues/2265\n    const { stackOffset, xAccessorBar, yAccessorBar, valuesAccessor } = this.props;\n    return d3.stack()\n              .keys(seriesNames)\n              .order(d3.stackOrderNone)\n              .offset(d3.stackOffsetNone);\n  },\n\n  render() {\n    const props = this.props;\n    const yOrient = this.getYOrient();\n\n    const domain = props.domain || {};\n\n    if (props.data.length === 0) {\n      return null;\n    }\n\n\n    /*\n    mudar a orientacao do array pq vem errado\n    https://stackoverflow.com/questions/17428587/transposing-a-2d-array-in-javascript\n    Para chegar nisso\n    https://github.com/d3/d3-shape/blob/v3.0.1/README.md#stack\n    Isso funciona:\n    */\n\n    const _array = props.data\n    const data = []\n\n    _array.map( (elem, idxE) => {\n      elem.values.map( (v, idxV) => {\n        if (typeof data[idxV] === 'undefined'){\n          data[idxV] = {'x':v.x, [elem['name']]: v.y}\n        } else{\n          data[idxV][[elem['name']]] = v.y\n        }\n      })\n    })\n    const series = props.data.map((item) => item.name);\n    const _data = this._stack(series)(data);\n    const { innerHeight, innerWidth, trans, svgMargins } = this.getDimensions();\n\n    const xScale = d3.scaleBand()\n                      .domain(data.map(d => d.x))\n                      .paddingInner(0.1)\n                      .paddingOuter(0.1)\n                      .range([0, innerWidth])\n\n    const minYDomain = Math.min(0, d3.min(_data, (d) => (d[1])))\n    const maxYDomain = d3.max(_data, (d) => (d[1]))\n    const yDomain = ([d3.min(_data, d => d3.min(d, d => d[1])), d3.max(_data, d => d3.max(d, d => d[1]))])\n    const yScale = d3.scaleLinear().range([innerHeight, 0]).domain(yDomain);\n\n    return (\n      <span>\n        <Chart\n          viewBox={this.getViewBox()}\n          legend={props.legend}\n          data={props.data}\n          margins={props.margins}\n          colors={props.colors}\n          colorAccessor={props.colorAccessor}\n          width={props.width}\n          height={props.height}\n          title={props.title}\n          shouldUpdate={!this.state.changeState}\n        >\n          <g transform={trans} className={props.chartClassName}>\n            <YAxis\n              yAxisClassName={props.yAxisClassName}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              yScale={yScale}\n              margins={svgMargins}\n              yAxisTickCount={props.yAxisTickCount}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              gridHorizontal={props.gridHorizontal}\n              gridHorizontalStroke={props.gridHorizontalStroke}\n              gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n              gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n            />\n            <XAxis\n              xAxisClassName={props.xAxisClassName}\n              xAxisTickValues={props.xAxisTickValues}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              xScale={xScale}\n              margins={svgMargins}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              gridVertical={props.gridVertical}\n              gridVerticalStroke={props.gridVerticalStroke}\n              gridVerticalStrokeWidth={props.gridVerticalStrokeWidth}\n              gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n            />\n            <DataSeries\n              yScale={yScale}\n              xScale={xScale}\n              margins={svgMargins}\n              _data={_data}\n              series={series}\n              width={innerWidth}\n              height={innerHeight}\n              grouped={props.grouped}\n              colors={props.colors}\n              colorAccessor={props.colorAccessor}\n              hoverAnimation={props.hoverAnimation}\n              valuesAccessor={props.valuesAccessor}\n              xAccessorBar={props.xAccessorBar}\n              yAccessorBar={props.yAccessorBar}\n              y0Accessor={props.y0Accessor}\n              onMouseOver={this.onMouseOver}\n              onMouseLeave={this.onMouseLeave}\n            />\n          </g>\n        </Chart>\n        {(props.showTooltip ? <Tooltip {...this.state.tooltip} /> : null)}\n      </span>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst { findDOMNode } = require('react-dom');\nconst Bar = require('./Bar');\nconst shade = require('../utils').shade;\n\n\nmodule.exports = createReactClass({\n\n  propTypes: {\n    fill: PropTypes.string,\n    onMouseOver: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    // dataPoint: PropTypes.any, // TODO: prop types?\n  },\n\n  getDefaultProps() {\n    return {\n      fill: '#000000',\n    };\n  },\n\n  getInitialState() {\n    return {\n      // fill is named as fill instead of initialFill to avoid\n      // confusion when passing down props from top parent\n      fill: this.props.fill,\n    };\n  },\n\n  _animateBar() {\n    const rect = findDOMNode(this).getBoundingClientRect();\n    this.props.onMouseOver.call(this, rect.right, rect.top, this.props.datapoint);\n    this.setState({\n      fill: shade(this.props.fill, 0.2),\n    });\n  },\n\n  _restoreBar() {\n    this.props.onMouseLeave.call(this);\n    this.setState({\n      fill: this.props.fill,\n    });\n  },\n\n  render() {\n    const props = this.props;\n\n    return (\n      <Bar\n        {...props}\n        fill={this.state.fill}\n        handleMouseOver={props.hoverAnimation ? this._animateBar : null}\n        handleMouseLeave={props.hoverAnimation ? this._restoreBar : null}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst BarContainer = require('./BarContainer');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    _data: PropTypes.array,\n    series: PropTypes.array,\n    grouped: PropTypes.bool,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    height: PropTypes.number,\n    width: PropTypes.number,\n    valuesAccessor: PropTypes.func,\n    xAccessorBar: PropTypes.func,\n    yAccessorBar: PropTypes.func,\n    y0Accessor: PropTypes.func,\n    onMouseOver: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    hoverAnimation: PropTypes.bool, // TODO: prop types?\n    xScale: PropTypes.any,\n    yScale: PropTypes.any,\n  },\n\n  _renderBarSeries() {\n    const { _data, valuesAccessor } = this.props;\n    return _data.map((layer, seriesIdx) => (\n      valuesAccessor(layer).map(segment => this._renderBarContainer(segment, seriesIdx))\n    ));\n  },\n\n  _renderBarContainer(segment, seriesIdx) {\n    const { colors, colorAccessor, grouped, series, xScale, yScale } = this.props;\n    const barHeight = Math.abs(yScale(this.props.y0Accessor(segment)) - yScale(this.props.yAccessorBar(segment)));\n    const yWidth = yScale(this.props.y0Accessor(segment) + this.props.yAccessorBar(segment));\n    const y = grouped ? yScale(this.props.yAccessorBar(segment)) : yWidth;\n    const key = this.props.series[seriesIdx] + segment.data.x +segment[1]\n\n    return (\n      <BarContainer\n        key={key}\n        height={barHeight}\n        width={xScale.bandwidth() }\n        x={ xScale(this.props.xAccessorBar(segment)) }\n        y={(this.props.yAccessorBar(segment) >= 0) ? y : y - barHeight}\n        fill={this.props.colors(this.props.colorAccessor(series, seriesIdx))}\n        hoverAnimation={this.props.hoverAnimation}\n        onMouseOver={this.props.onMouseOver}\n        onMouseLeave={this.props.onMouseLeave}\n        datapoint={{\n          xValue: this.props.xAccessorBar(segment),\n          yValue: this.props.yAccessorBar(segment),\n          seriesName: this.props.series[seriesIdx],\n        }}\n      />\n    );\n  },\n\n  render() {\n    return (\n      <g>{this._renderBarSeries()}</g>\n    );\n  },\n});\n","\nexports.BarChart = require('./BarChart');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Candle',\n\n  propTypes: {\n    className: PropTypes.string,\n    shapeRendering: PropTypes.string,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.number,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-candlestick-candle',\n      shapeRendering: 'crispEdges',\n      stroke: '#000',\n      strokeWidth: 1,\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    return (\n      <rect\n        className={props.className}\n        fill={props.candleFill}\n        x={props.candleX}\n        y={props.candleY}\n        stroke={props.candleFill}\n        strokeWidth={props.strokeWidth}\n        style={{ shapeRendering: props.shapeRendering }}\n        width={props.candleWidth}\n        height={props.candleHeight}\n        onMouseOver={props.handleMouseOver}\n        onMouseLeave={props.handleMouseLeave}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst utils = require('../utils');\nconst DataSeries = require('./DataSeries');\nconst { Chart, XAxis, YAxis } = require('../common');\nconst { ViewBoxMixin, CartesianChartPropsMixin } = require('../mixins');\n\nmodule.exports = createReactClass({\n\n  displayName: 'CandleStickChart',\n\n  propTypes: {\n    data: PropTypes.oneOfType([\n      PropTypes.array,\n      PropTypes.object,\n    ]),\n    fillUp: PropTypes.func,\n    fillUpAccessor: PropTypes.func,\n    fillDown: PropTypes.func,\n    fillDownAccessor: PropTypes.func,\n    hoverAnimation: PropTypes.bool,\n    xAxisFormatter: PropTypes.func,\n    xAxisTickInterval: PropTypes.object,\n    xAxisTickValues: PropTypes.array,\n    yAxisFormatter: PropTypes.func,\n    yAxisTickCount: PropTypes.number,\n    yAxisTickValues: PropTypes.array,\n  },\n\n  mixins: [CartesianChartPropsMixin, ViewBoxMixin],\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-candlestick',\n      xAxisClassName: 'rd3-candlestick-xaxis',\n      yAxisClassName: 'rd3-candlestick-yaxis',\n      data: [],\n      fillUp: () => '#009900',\n      fillUpAccessor: (d, idx) => idx,\n      // fillDown: d3.scaleOrdinal(d3.schemeCategory10),\n      fillDown: () => '#FF3300',\n      fillDownAccessor: (d, idx) => idx,\n      hoverAnimation: true,\n      margins: { top: 10, right: 20, bottom: 30, left: 45 },\n      xAccessor: (d) => d.x,\n      yAccessor: (d) => ({ open: d.open, high: d.high, low: d.low, close: d.close }),\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const { innerWidth, innerHeight, trans, svgMargins } = this.getDimensions();\n    const yOrient = this.getYOrient();\n    const domain = props.domain || {};\n\n    if (!Array.isArray(props.data)) {\n      props.data = [props.data];\n    }\n    if (this.props.data && this.props.data.length < 1) {\n      return null;\n    }\n    const flattenedData = utils.flattenData(props.data, props.xAccessor, props.yAccessor);\n\n    const xValues = flattenedData.xValues;\n    const yValues = flattenedData.yValues;\n    const scales = utils.calculateScales(\n      innerWidth, innerHeight, xValues, yValues, domain.x, domain.y);\n\n    const dataSeries = props.data.map((series, idx) => (\n        <DataSeries\n          key={idx}\n          seriesName={series.name}\n          index={idx}\n          xScale={scales.xScale}\n          yScale={scales.yScale}\n          data={series.values}\n          fillUp={props.fillUp(props.fillUpAccessor(series, idx))}\n          fillDown={props.fillDown(props.fillDownAccessor(series, idx))}\n          xAccessor={props.xAccessor}\n          yAccessor={props.yAccessor}\n          hoverAnimation={props.hoverAnimation}\n        />\n      )\n    );\n\n    return (\n      <Chart\n        viewBox={this.getViewBox()}\n        width={props.width}\n        height={props.height}\n        margins={props.margins}\n        title={props.title}\n      >\n        <g transform={trans} className={props.className}>\n          <XAxis\n            xAxisClassName={props.xAxisClassName}\n            xScale={scales.xScale}\n            xAxisTickValues={props.xAxisTickValues}\n            xAxisTickInterval={props.xAxisTickInterval}\n            xAxisOffset={props.xAxisOffset}\n            tickFormatting={props.xAxisFormatter}\n            tickStroke={props.xAxisTickStroke}\n            tickTextStroke={props.xAxisTickTextStroke}\n            xAxisLabel={props.xAxisLabel}\n            xAxisLabelOffset={props.xAxisLabelOffset}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={innerHeight}\n            horizontalChart={props.horizontal}\n            gridVertical={props.gridVertical}\n            gridVerticalStroke={props.gridVerticalStroke}\n            gridVerticalStrokeWidth={props.gridVerticalStrokeWidth}\n            gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n          />\n          <YAxis\n            yAxisClassName={props.yAxisClassName}\n            yScale={scales.yScale}\n            yAxisTickValues={props.yAxisTickValues}\n            yAxisOffset={props.yAxisOffset}\n            yAxisTickCount={props.yAxisTickCount}\n            tickFormatting={props.yAxisFormatter}\n            tickStroke={props.yAxisTickStroke}\n            tickTextStroke={props.yAxisTickTextStroke}\n            yAxisLabel={props.yAxisLabel}\n            yAxisLabelOffset={props.yAxisLabelOffset}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={props.height}\n            horizontalChart={props.horizontal}\n            gridHorizontal={props.gridHorizontal}\n            gridHorizontalStroke={props.gridHorizontalStroke}\n            gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n            gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n          />\n          {dataSeries}\n        </g>\n      </Chart>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst utils = require('../utils');\nconst Candle = require('./Candle');\nconst Wick = require('./Wick');\n\nmodule.exports = createReactClass({\n\n  displayName: 'CandleStickContainer',\n\n  propTypes: {\n    candleX: PropTypes.number,\n    candleY: PropTypes.number,\n    className: PropTypes.string,\n    candleFill: PropTypes.string,\n    candleHeight: PropTypes.number,\n    candleWidth: PropTypes.number,\n    wickX1: PropTypes.number,\n    wickX2: PropTypes.number,\n    wickY1: PropTypes.number,\n    wickY2: PropTypes.number,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-candlestick-container',\n    };\n  },\n\n  getInitialState() {\n    // state for animation usage\n    return {\n      candleWidth: this.props.candleWidth,\n      candleFill: this.props.candleFill,\n    };\n  },\n\n  _animateCandle() {\n    this.setState({\n      candleWidth: this.props.candleWidth * 1.5,\n      candleFill: utils.shade(this.props.candleFill, -0.2),\n    });\n  },\n\n  _restoreCandle() {\n    this.setState({\n      candleWidth: this.props.candleWidth,\n      candleFill: this.props.candleFill,\n    });\n  },\n\n  render() {\n    const props = this.props;\n    const state = this.state;\n\n    // animation controller\n    let handleMouseOver;\n    let handleMouseLeave;\n    if (props.hoverAnimation) {\n      handleMouseOver = this._animateCandle;\n      handleMouseLeave = this._restoreCandle;\n    } else {\n      handleMouseOver = handleMouseLeave = null;\n    }\n\n    return (\n      <g className={props.className}>\n       <Wick\n         wickX1={props.wickX1}\n         wickX2={props.wickX2}\n         wickY1={props.wickY1}\n         wickY2={props.wickY2}\n       />\n       <Candle\n         candleFill={state.candleFill}\n         candleWidth={state.candleWidth}\n         candleX={props.candleX - ((state.candleWidth - props.candleWidth) / 2)}\n         candleY={props.candleY}\n         candleHeight={props.candleHeight}\n         handleMouseOver={handleMouseOver}\n         handleMouseLeave={handleMouseLeave}\n       />\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst CandlestickContainer = require('./CandlestickContainer');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    fillUp: PropTypes.string.isRequired,\n    fillDown: PropTypes.string.isRequired,\n  },\n\n  render() {\n    const props = this.props;\n\n    const xRange = props.xScale.range();\n    const width = Math.abs(xRange[0] - xRange[1]);\n    const candleWidth = (width / (props.data.length + 2)) * 0.5;\n\n    const dataSeriesArray = props.data.map((d, idx) => {\n      // Candles\n      const ohlc = props.yAccessor(d);\n      const candleX = props.xScale(props.xAccessor(d)) - 0.5 * candleWidth;\n      const candleY = props.yScale(Math.max(ohlc.open, ohlc.close));\n      const candleHeight = Math.abs(props.yScale(ohlc.open) - props.yScale(ohlc.close));\n      const wickY2 = props.yScale(ohlc.low);\n      const candleFill = (ohlc.open <= ohlc.close) ? props.fillUp : props.fillDown;\n\n      // Wicks\n      const wickX1 = props.xScale(props.xAccessor(d));\n      const wickY1 = props.yScale(ohlc.high);\n      const wickX2 = wickX1;\n\n      return (\n        <CandlestickContainer\n          key={idx}\n          candleFill={candleFill}\n          candleHeight={candleHeight}\n          candleWidth={candleWidth}\n          candleX={candleX}\n          candleY={candleY}\n          wickX1={wickX1}\n          wickX2={wickX2}\n          wickY1={wickY1}\n          wickY2={wickY2}\n          hoverAnimation={props.hoverAnimation}\n        />\n      );\n    }, this);\n\n    return (\n      <g>\n        {dataSeriesArray}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Wick',\n\n  propTypes: {\n    className: PropTypes.string,\n    shapeRendering: PropTypes.string,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.number,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-candlestick-wick',\n      stroke: '#666666',\n      strokeWidth: 1,\n      shapeRendering: 'crispEdges',\n    };\n  },\n\n  render() {\n    const props = this.props;\n    return (<line\n      stroke={props.stroke}\n      strokeWidth={props.strokeWidth}\n      // style={{ shapeRendering: props.shapeRendering }}\n      className={props.className}\n      x1={props.wickX1}\n      y1={props.wickY1}\n      x2={props.wickX2}\n      y2={props.wickY2}\n    />);\n  },\n});\n","\nexports.CandlestickChart = require('./CandlestickChart');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\n\nmodule.exports = createReactClass({\n\n  displayName: 'Legend',\n\n  propTypes: {\n    className: PropTypes.string,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    data: PropTypes.array.isRequired,\n    itemClassName: PropTypes.string,\n    margins: PropTypes.object,\n    text: PropTypes.string,\n    width: PropTypes.number.isRequired,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-legend',\n      color: d3.scaleOrdinal(d3.schemeCategory10),\n      colorAccessor: (d, idx) => idx,\n      itemClassName: 'rd3-legend-item',\n      text: '#000',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const textStyle = {\n      color: 'black',\n      fontSize: '50%',\n      verticalAlign: 'top',\n    };\n\n    const legendItems = [];\n\n    props.data.forEach((series, idx) => {\n      const itemStyle = {\n        color: props.colors(props.colorAccessor(series, idx)),\n        lineHeight: '60%',\n        fontSize: '200%',\n      };\n\n      legendItems.push(\n        <li\n          key={idx}\n          className={props.itemClassName}\n          style={itemStyle}\n        >\n          <span\n            style={textStyle}\n          >\n            {series.name}\n          </span>\n        </li>\n      );\n    });\n\n    const topMargin = props.margins.top;\n\n    const legendBlockStyle = {\n      wordWrap: 'break-word',\n      width: props.width,\n      paddingLeft: 0,\n      marginBottom: 0,\n      marginTop: topMargin,\n      listStylePosition: 'inside',\n    };\n\n    return (\n      <ul\n        className={props.className}\n        style={legendBlockStyle}\n      >\n        {legendItems}\n      </ul>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  // TODO: PropTypes.any\n  propTypes: {\n    structure: PropTypes.any,\n    id: PropTypes.any,\n    vnode: PropTypes.any,\n  },\n\n  _animateCircle() {\n    this.props.structure.cursor('voronoi').cursor(this.props.id).update(() => 'active');\n    // this.props.pubsub.emit('animate', this.props.id);\n  },\n\n  _restoreCircle() {\n    this.props.structure.cursor('voronoi').cursor(this.props.id).update(() => 'inactive');\n    // this.props.pubsub.emit('restore', this.props.id);\n  },\n\n  _drawPath(d) {\n    if (d === undefined) {\n      return '';\n    }\n    return `M${d.join(',')}Z`;\n  },\n\n  render() {\n    return (<path\n      onMouseOver={this._animateCircle}\n      onMouseOut={this._restoreCircle}\n      fill=\"white\"\n      opacity=\"0\"\n      d={this._drawPath(this.props.vnode)}\n    />);\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  propTypes: {\n    x: PropTypes.number,\n    y: PropTypes.number,\n    child: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.element,\n    ]),\n    show: PropTypes.bool,\n  },\n\n  render() {\n    const props = this.props;\n    const display = this.props.show ? 'inherit' : 'none';\n    const containerStyles = {\n      position: 'fixed',\n      top: props.y,\n      left: props.x,\n      display,\n      opacity: 0.8,\n    };\n\n    // TODO: add 'right: 0px' style when tooltip is off the chart\n    const tooltipStyles = {\n      position: 'absolute',\n      backgroundColor: 'white',\n      border: '1px solid',\n      borderColor: '#ddd',\n      borderRadius: '2px',\n      padding: '10px',\n      marginLeft: '10px',\n      marginRight: '10px',\n      marginTop: '-15px',\n    };\n    return (\n      <div style={containerStyles}>\n        <div style={tooltipStyles}>\n          {props.child}\n        </div>\n      </div>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\nconst d3 = require('d3');\nconst Polygon = require('./Polygon');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Voronoi',\n\n  // TODO: PropTypes.any\n  propTypes: {\n    xScale: PropTypes.any,\n    yScale: PropTypes.any,\n    width: PropTypes.any,\n    height: PropTypes.any,\n    structure: PropTypes.any,\n    data: PropTypes.any,\n  },\n\n  render() {\n    const xScale = this.props.xScale;\n    const yScale = this.props.yScale;\n\n    const voronoi = d3.geom.voronoi()\n      .x(d => xScale(d.coord.x))\n      .y(d => yScale(d.coord.y))\n      .clipExtent([[0, 0], [this.props.width, this.props.height]]);\n\n    const regions = voronoi(this.props.data).map((vnode, idx) => (\n      <Polygon structure={this.props.structure} key={idx} id={vnode.point.id} vnode={vnode} />\n    ));\n\n    return (\n      <g>\n        {regions}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'AxisLine',\n\n  propTypes: {\n    scale: PropTypes.func.isRequired,\n    innerTickSize: PropTypes.number,\n    outerTickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickArguments: PropTypes.array,\n    fill: PropTypes.string,\n    stroke: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      innerTickSize: 6,\n      outerTickSize: 6,\n      tickPadding: 3,\n      fill: 'none',\n      tickArguments: [10],\n      tickValues: null,\n      tickFormat: null,\n    };\n  },\n\n\n  _d3_scaleExtent(domain) {\n    const start = domain[0];\n    const stop = domain[domain.length - 1];\n    return start < stop ? [start, stop] : [stop, start];\n  },\n\n  _d3_scaleRange(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : this._d3_scaleExtent(scale.range());\n  },\n\n  render() {\n    const props = this.props;\n    const sign = props.orient === 'top' || props.orient === 'left' ? -1 : 1;\n\n    const range = this._d3_scaleRange(props.scale);\n\n    let d;\n    if (props.orient === 'bottom' || props.orient === 'top') {\n      d = `M${range[0]},${sign * props.outerTickSize}V0H${range[1]}V${sign * props.outerTickSize}`;\n    } else {\n      d = `M${sign * props.outerTickSize},${range[0]}H0V${range[1]}H${sign * props.outerTickSize}`;\n    }\n\n    return (\n      <path\n        className=\"domain\"\n        d={d}\n        style={{ shapeRendering: 'crispEdges' }}\n        fill={props.fill}\n        stroke='#000000'\n        strokeWidth='1'\n\n        // stroke={props.stroke}\n        // strokeWidth={props.strokeWidth}\n      >\n      </path>\n    );\n  },\n});\n","'use strict';\n\nconst React = require('react');\nconst PropTypes = require('prop-types');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'AxisTick',\n\n  propTypes: {\n    scale: PropTypes.func.isRequired,\n    orient: PropTypes.oneOf(['top', 'bottom', 'left', 'right']).isRequired,\n    orient2nd: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    horizontal: PropTypes.bool,\n    tickArguments: PropTypes.array,\n    tickValues: PropTypes.array,\n    innerTickSize: PropTypes.number,\n    outerTickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickFormat: PropTypes.func,\n    tickStroke: PropTypes.string,\n    tickTextStroke: PropTypes.string,\n    gridHorizontal: PropTypes.bool,\n    gridVertical: PropTypes.bool,\n    gridHorizontalStroke: PropTypes.string,\n    gridVerticalStroke: PropTypes.string,\n    gridHorizontalStrokeWidth: PropTypes.number,\n    gridVerticalStrokeWidth: PropTypes.number,\n    gridHorizontalStrokeDash: PropTypes.string,\n    gridVerticalStrokeDash: PropTypes.string,\n  },\n  getDefaultProps() {\n    return {\n      innerTickSize: 6,\n      outerTickSize: 6,\n      tickStroke: '#000',\n      tickPadding: 3,\n      tickArguments: [10],\n      tickValues: null,\n      gridHorizontal: false,\n      gridVertical: false,\n      gridHorizontalStroke: '#D8D7D7',\n      gridVerticalStroke: '#D8D7D7',\n      gridHorizontalStrokeWidth: 1,\n      gridVerticalStrokeWidth: 1,\n      gridHorizontalStrokeDash: '5, 5',\n      gridVerticalStrokeDash: '5, 5',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    let tr;\n    let textAnchor;\n    let textTransform;\n    let tickFormat;\n    let y1;\n    let y2;\n    let dy;\n    let x1;\n    let x2;\n\n    let gridStrokeWidth;\n    let gridStroke;\n    let gridStrokeDashArray;\n    let x2grid;\n    let y2grid;\n    let gridOn = false;\n\n    const sign = props.orient === 'top' || props.orient === 'right' ? -1 : 1;\n    const tickSpacing = Math.max(props.innerTickSize, 0) + props.tickPadding;\n\n    const scale = props.scale;\n\n    let ticks;\n    if (props.tickValues) {\n      ticks = props.tickValues;\n    } else if (scale.ticks) {\n      ticks = scale.ticks.apply(scale, props.tickArguments);\n    } else {\n      ticks = scale.domain();\n    }\n\n    if (props.tickFormatting) {\n      tickFormat = props.tickFormatting;\n    } else if (scale.tickFormat) {\n      tickFormat = scale.tickFormat.apply(scale, props.tickArguments);\n    } else {\n      tickFormat = (d) => d;\n    }\n\n    const adjustedScale = scale.bandwidth ? d => scale(d) + scale.bandwidth() / 2 : scale;\n\n\n\n    // Still working on this\n    // Ticks and lines are not fully aligned\n    // in some orientations\n    switch (props.orient) {\n      case 'top':\n        tr = (tick) => `translate(${adjustedScale(tick)},0)`;\n        textAnchor = 'middle';\n        y2 = props.innerTickSize * sign;\n        y1 = tickSpacing * sign;\n        dy = sign < 0 ? '0em' : '.71em';\n        x2grid = 0;\n        y2grid = -props.height;\n        break;\n      case 'bottom':\n        tr = (tick) => `translate(${adjustedScale(tick)},0)`;\n        textAnchor = 'middle';\n        y2 = props.innerTickSize * sign;\n        y1 = tickSpacing * sign;\n        dy = sign < 0 ? '0em' : '.71em';\n        x2grid = 0;\n        y2grid = -props.height;\n        break;\n      case 'left':\n        tr = (tick) => `translate(0,${adjustedScale(tick)})`;\n        textAnchor = 'end';\n        x2 = props.innerTickSize * -sign;\n        x1 = tickSpacing * -sign;\n        dy = '.32em';\n        x2grid = props.width;\n        y2grid = 0;\n        break;\n      case 'right':\n        tr = (tick) => `translate(0,${adjustedScale(tick)})`;\n        textAnchor = 'start';\n        x2 = props.innerTickSize * -sign;\n        x1 = tickSpacing * -sign;\n        dy = '.32em';\n        x2grid = -props.width;\n        y2grid = 0;\n        break;\n      default:\n        break;\n    }\n\n    if (props.horizontalChart) {\n      textTransform = 'rotate(-90)';\n      [y1, x1] = [x1, -y1 || 0];\n\n      switch (props.orient) {\n        case 'top':\n          textAnchor = 'start';\n          dy = '.32em';\n          break;\n        case 'bottom':\n          textAnchor = 'end';\n          dy = '.32em';\n          break;\n        case 'left':\n          textAnchor = 'middle';\n          dy = sign < 0 ? '.71em' : '0em';\n          break;\n        case 'right':\n          textAnchor = 'middle';\n          dy = sign < 0 ? '.71em' : '0em';\n          break;\n        default:\n          break;\n      }\n    }\n\n    if (props.gridHorizontal) {\n      gridOn = true;\n      gridStrokeWidth = props.gridHorizontalStrokeWidth;\n      gridStroke = props.gridHorizontalStroke;\n      gridStrokeDashArray = props.gridHorizontalStrokeDash;\n    } else if (props.gridVertical) {\n      gridOn = true;\n      gridStrokeWidth = props.gridVerticalStrokeWidth;\n      gridStroke = props.gridVerticalStroke;\n      gridStrokeDashArray = props.gridVerticalStrokeDash;\n    }\n\n    // return grid line if grid is enabled and grid line is not on at same position as other axis.\n    const gridLine = (pos) => {\n      if (gridOn\n        && !(props.orient2nd === 'left' && pos === 0)\n        && !(props.orient2nd === 'right' && pos === props.width)\n        && !((props.orient === 'left' || props.orient === 'right') && pos === props.height)\n      ) {\n        return (\n          <line style={{\n            strokeWidth: gridStrokeWidth,\n            shapeRendering: 'crispEdges',\n            stroke: gridStroke,\n            strokeDasharray: gridStrokeDashArray,\n          }} x2={x2grid} y2={y2grid}\n          />\n        );\n      }\n      return null;\n    };\n\n    const optionalTextProps = textTransform ? {\n      transform: textTransform,\n    } : {};\n\n    return (\n    <g>\n      {ticks.map((tick, idx) => (\n          <g key={idx} className=\"tick\" transform={tr(tick)} >\n            {gridLine(adjustedScale(tick))}\n            <line\n              style={{\n                shapeRendering: 'crispEdges',\n                opacity: '1',\n                stroke: props.tickStroke,\n              }}\n              x2={x2}\n              y2={y2}\n            />\n            <text\n              strokeWidth=\"0.01\"\n              dy={dy} x={x1} y={y1}\n              style={{ stroke: props.tickTextStroke, fill: props.tickTextStroke }}\n              textAnchor={textAnchor}\n              {...optionalTextProps}\n            >\n              {`${tickFormat(tick)}`.split('\\n').map((tickLabel, index) => (\n                  <tspan x={x1 || 0} dy={dy} key={index}>\n                    {tickLabel}\n                  </tspan>\n              ))}\n            </text>\n          </g>\n        ))\n      }\n    </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Label',\n\n  propTypes: {\n    height: PropTypes.number,\n    horizontalChart: PropTypes.bool,\n    horizontalTransform: PropTypes.string,\n    label: PropTypes.string.isRequired,\n    width: PropTypes.number,\n    strokeWidth: PropTypes.number,\n    textAnchor: PropTypes.string,\n    verticalTransform: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      horizontalTransform: 'rotate(270)',\n      strokeWidth: 0.01,\n      textAnchor: 'middle',\n      verticalTransform: 'rotate(0)',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    if (!props.label) {\n      return <text />;\n    }\n\n    let transform;\n    let x;\n    let y;\n    if (props.orient === 'top' || props.orient === 'bottom') {\n      transform = props.verticalTransform;\n      x = props.width / 2;\n      y = props.offset;\n\n      if (props.horizontalChart) {\n        transform = `rotate(180 ${x} ${y}) ${transform}`;\n      }\n    } else {  // left, right\n      transform = props.horizontalTransform;\n      x = -props.height / 2;\n      if (props.orient === 'left') {\n        y = -props.offset;\n      } else {\n        y = props.offset;\n      }\n    }\n\n\n    return (\n      <text\n        strokeWidth={props.strokeWidth.toString()}\n        textAnchor={props.textAnchor}\n        transform={transform}\n        y={y}\n        x={x}\n      >\n        {props.label}\n      </text>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\nconst d3 = require('d3');\nconst AxisTicks = require('./AxisTicks');\nconst AxisLine = require('./AxisLine');\nconst Label = require('./Label');\n\nmodule.exports = createReactClass({\n\n  displayName: 'XAxis',\n\n  propTypes: {\n    fill: PropTypes.string,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    horizontalChart: PropTypes.bool,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.string,\n    tickStroke: PropTypes.string,\n    tickTextStroke: PropTypes.string,\n    xAxisClassName: PropTypes.string,\n    xAxisLabel: PropTypes.string,\n    xAxisTickValues: PropTypes.array,\n    xAxisOffset: PropTypes.number,\n    xScale: PropTypes.func.isRequired,\n    xOrient: PropTypes.oneOf(['top', 'bottom']),\n    yOrient: PropTypes.oneOf(['left', 'right']),\n    gridVertical: PropTypes.bool,\n    gridVerticalStroke: PropTypes.string,\n    gridVerticalStrokeWidth: PropTypes.number,\n    gridVerticalStrokeDash: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: 'none',\n      stroke: 'none',\n      strokeWidth: '1',\n      tickStroke: '#000',\n      xAxisClassName: 'rd3-x-axis',\n      xAxisLabel: '',\n      xAxisLabelOffset: 10,\n      xAxisOffset: 0,\n      xOrient: 'bottom',\n      yOrient: 'left',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const t = `translate(0 ,${props.xAxisOffset + props.height})`;\n\n    let tickArguments;\n    if (typeof props.xAxisTickCount !== 'undefined') {\n      tickArguments = [props.xAxisTickCount];\n    }\n\n    if (typeof props.xAxisTickInterval !== 'undefined') {\n      // tickArguments = [d3.time[props.xAxisTickInterval.unit], props.xAxisTickInterval.interval];\n    }\n\n    return (\n      <g\n        className={props.xAxisClassName}\n        transform={t}\n      >\n        <AxisTicks\n          tickValues={props.xAxisTickValues}\n          tickFormatting={props.tickFormatting}\n          tickArguments={tickArguments}\n          tickStroke={props.tickStroke}\n          tickTextStroke={props.tickTextStroke}\n          innerTickSize={props.tickSize}\n          scale={props.xScale}\n          orient={props.xOrient}\n          orient2nd={props.yOrient}\n          height={props.height}\n          width={props.width}\n          horizontalChart={props.horizontalChart}\n          gridVertical={props.gridVertical}\n          gridVerticalStroke={props.gridVerticalStroke}\n          gridVerticalStrokeWidth={props.gridVerticalStrokeWidth}\n          gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n        />\n        <AxisLine\n          scale={props.xScale}\n          stroke={props.stroke}\n          orient={props.xOrient}\n          outerTickSize={props.tickSize}\n          {...props}\n        />\n        <Label\n          horizontalChart={props.horizontalChart}\n          label={props.xAxisLabel}\n          offset={props.xAxisLabelOffset}\n          orient={props.xOrient}\n          margins={props.margins}\n          width={props.width}\n        />\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst createReactClass = require('create-react-class');\nconst React = require('react');\nconst d3 = require('d3');\nconst AxisTicks = require('./AxisTicks');\nconst AxisLine = require('./AxisLine');\nconst Label = require('./Label');\n\nmodule.exports = createReactClass({\n\n  displayName: 'YAxis',\n\n  propTypes: {\n    fill: PropTypes.string,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.string,\n    tickStroke: PropTypes.string,\n    tickTextStroke: PropTypes.string,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    horizontalChart: PropTypes.bool,\n    yAxisClassName: PropTypes.string,\n    yAxisLabel: PropTypes.string,\n    yAxisOffset: PropTypes.number,\n    yAxisTickValues: PropTypes.array,\n    xOrient: PropTypes.oneOf(['top', 'bottom']),\n    yOrient: PropTypes.oneOf(['left', 'right']),\n    yScale: PropTypes.func.isRequired,\n    gridVertical: PropTypes.bool,\n    gridVerticalStroke: PropTypes.string,\n    gridVerticalStrokeWidth: PropTypes.number,\n    gridVerticalStrokeDash: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: 'none',\n      stroke: '#000',\n      strokeWidth: '1',\n      tickStroke: '#000',\n      yAxisClassName: 'rd3-y-axis',\n      yAxisLabel: '',\n      yAxisOffset: 0,\n      xOrient: 'bottom',\n      yOrient: 'left',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    let t;\n    if (props.yOrient === 'right') {\n      t = `translate(${props.yAxisOffset + props.width}, 0)`;\n    } else {\n      t = `translate(${props.yAxisOffset}, 0)`;\n    }\n\n    let tickArguments;\n    if (props.yAxisTickCount) {\n      tickArguments = [props.yAxisTickCount];\n    }\n\n    if (props.yAxisTickInterval) {\n      tickArguments = [d3.time[props.yAxisTickInterval.unit], props.yAxisTickInterval.interval];\n    }\n\n    return (\n      <g\n        className={props.yAxisClassName}\n        transform={t}\n      >\n        <AxisTicks\n          innerTickSize={props.tickSize}\n          orient={props.yOrient}\n          orient2nd={props.xOrient}\n          tickArguments={tickArguments}\n          tickFormatting={props.tickFormatting}\n          tickStroke={props.tickStroke}\n          tickTextStroke={props.tickTextStroke}\n          tickValues={props.yAxisTickValues}\n          scale={props.yScale}\n          height={props.height}\n          width={props.width}\n          horizontalChart={props.horizontalChart}\n          gridHorizontal={props.gridHorizontal}\n          gridHorizontalStroke={props.gridHorizontalStroke}\n          gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n          gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n        />\n        <AxisLine\n          orient={props.yOrient}\n          outerTickSize={props.tickSize}\n          scale={props.yScale}\n          stroke={props.stroke}\n          {...props}\n        />\n        <Label\n          height={props.height}\n          horizontalChart={props.horizontalChart}\n          label={props.yAxisLabel}\n          margins={props.margins}\n          offset={props.yAxisLabelOffset}\n          orient={props.yOrient}\n        />\n      </g>\n    );\n  },\n});\n","\nexports.XAxis = require('./XAxis');\nexports.YAxis = require('./YAxis');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'BasicChart',\n\n  propTypes: {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    height: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    svgClassName: PropTypes.string,\n    title: PropTypes.node,\n    titleClassName: PropTypes.string,\n    width: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-basic-chart',\n      svgClassName: 'rd3-chart',\n      titleClassName: 'rd3-chart-title',\n      title: '',\n    };\n  },\n\n  _renderTitle() {\n    const props = this.props;\n\n    if (props.title !== '') {\n      return (\n        <h4\n          className={props.titleClassName}\n        >\n          {props.title}\n        </h4>\n      );\n    }\n    return null;\n  },\n\n  _renderChart() {\n    const props = this.props;\n\n    return (\n      <svg\n        className={props.svgClassName}\n        height={props.height}\n        viewBox={props.viewBox}\n        width={props.width}\n      >\n        {props.children}\n      </svg>\n    );\n  },\n\n  render() {\n    const props = this.props;\n\n    return (\n      <div\n        className={props.className}\n      >\n        {this._renderTitle()}\n        {this._renderChart()}\n      </div>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst LegendChart = require('./LegendChart');\nconst BasicChart = require('./BasicChart');\n\nmodule.exports = createReactClass({\n\n  displayName: 'Chart',\n\n  propTypes: {\n    legend: PropTypes.bool,\n    svgClassName: PropTypes.string,\n    titleClassName: PropTypes.string,\n    shouldUpdate: PropTypes.bool,\n  },\n\n  getDefaultProps() {\n    return {\n      legend: false,\n      svgClassName: 'rd3-chart',\n      titleClassName: 'rd3-chart-title',\n      shouldUpdate: true,\n    };\n  },\n  shouldComponentUpdate(nextProps) {\n    return nextProps.shouldUpdate;\n  },\n\n  render() {\n    const props = this.props;\n\n    if (props.legend) {\n      return (\n        <LegendChart\n          svgClassName={props.svgClassName}\n          titleClassName={props.titleClassName}\n          {...this.props}\n        />\n      );\n    }\n    return (\n      <BasicChart\n        svgClassName={props.svgClassName}\n        titleClassName={props.titleClassName}\n        {...this.props}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst Legend = require('../Legend');\nconst d3 = require('d3');\n\nmodule.exports = createReactClass({\n\n  displayName: 'LegendChart',\n\n  propTypes: {\n    children: PropTypes.node,\n    createClass: PropTypes.string,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    data: PropTypes.array,\n    height: PropTypes.node,\n    legend: PropTypes.bool,\n    legendPosition: PropTypes.string,\n    margins: PropTypes.object,\n    sideOffset: PropTypes.number,\n    svgClassName: PropTypes.string,\n    title: PropTypes.node,\n    titleClassName: PropTypes.string,\n    viewBox: PropTypes.string,\n    width: PropTypes.node,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-legend-chart',\n      colors: d3.scaleOrdinal(d3.schemeCategory10),\n      colorAccessor: (d, idx) => idx,\n      data: [],\n      legend: false,\n      legendPosition: 'right',\n      sideOffset: 90,\n      svgClassName: 'rd3-chart',\n      titleClassName: 'rd3-chart-title',\n      title: '',\n    };\n  },\n\n  _renderLegend() {\n    const props = this.props;\n\n    if (props.legend) {\n      return (\n        <Legend\n          colors={props.colors}\n          colorAccessor={props.colorAccessor}\n          data={props.data}\n          legendPosition={props.legendPosition}\n          margins={props.margins}\n          width={props.sideOffset}\n        />\n      );\n    }\n\n    return null;\n  },\n\n  _renderTitle() {\n    const props = this.props;\n\n    if (props.title !== '') {\n      return (\n        <h4\n          className={props.titleClassName}\n        >\n          {props.title}\n        </h4>\n      );\n    }\n    return null;\n  },\n\n  _renderChart() {\n    const props = this.props;\n\n    return (\n      <svg\n        className={props.svgClassName}\n        height=\"100%\"\n        viewBox={props.viewBox}\n        width=\"100%\"\n      >\n        {props.children}\n      </svg>\n    );\n  },\n\n  render() {\n    const props = this.props;\n\n    return (\n      <div\n        className={props.className}\n        style={{ width: props.width, height: props.height }}\n      >\n        {this._renderTitle()}\n        <div style={{ display: 'table', width: '100%', height: '100%' }}>\n          <div style={{ display: 'table-cell', width: '100%', height: '100%' }}>\n            {this._renderChart()}\n          </div>\n          <div style={{ display: 'table-cell', width: props.sideOffset, verticalAlign: 'top' }}>\n            {this._renderLegend()}\n          </div>\n        </div>\n      </div>\n    );\n  },\n});\n","\nexports.BasicChart = require('./BasicChart');\nexports.Chart = require('./Chart');\nexports.LegendChart = require('./LegendChart');\n","\nexports.XAxis = require('./axes').XAxis;\nexports.YAxis = require('./axes').YAxis;\nexports.Chart = require('./charts').Chart;\nexports.LegendChart = require('./charts').LegendChart;\nexports.Legend = require('./Legend');\nexports.Tooltip = require('./Tooltip');\nexports.Voronoi = require('./Voronoi');\n","exports.BarChart = require('./barchart').BarChart;\nexports.LineChart = require('./linechart').LineChart;\nexports.PieChart = require('./piechart').PieChart;\nexports.AreaChart = require('./areachart').AreaChart;\nexports.Treemap = require('./treemap').Treemap;\nexports.ScatterChart = require('./scatterchart').ScatterChart;\nexports.CandlestickChart = require('./candlestick').CandlestickChart;\n\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst VoronoiCircleContainer = require('./VoronoiCircleContainer');\nconst Line = require('./Line');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    color: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    data: PropTypes.array,\n    interpolationType: PropTypes.string,\n    xAccessor: PropTypes.func,\n    yAccessor: PropTypes.func,\n    hoverAnimation: PropTypes.bool,\n  },\n\n  getDefaultProps() {\n    return {\n      data: [],\n      xAccessor: (d) => d.x,\n      yAccessor: (d) => d.y,\n      interpolationType: 'linear',\n      hoverAnimation: false,\n    };\n  },\n\n  _isDate(d, accessor) {\n    return Object.prototype.toString.call(accessor(d)) === '[object Date]';\n  },\n\n  render() {\n    const props = this.props;\n    const xScale = props.xScale;\n    const yScale = props.yScale;\n    const xAccessor = props.xAccessor;\n    const yAccessor = props.yAccessor;\n\n    const interpolatePath = d3.line()\n        .x((d) => props.xScale(xAccessor(d)))\n        .y((d) => props.yScale(yAccessor(d)))\n        .curve(d3.curveMonotoneX);\n\n\n    if (this._isDate(props.data[0].values[0], xAccessor)) {\n      interpolatePath.x(d => props.xScale(props.xAccessor(d).getTime()));\n    } else {\n      interpolatePath.x(d => props.xScale(props.xAccessor(d)));\n    }\n\n    const lines = props.data.map((series, idx) => (\n        <Line\n          path={interpolatePath(series.values)}\n          stroke={props.colors(props.colorAccessor(series, idx))}\n          strokeWidth={series.strokeWidth}\n          strokeDashArray={series.strokeDashArray}\n          seriesName={series.name}\n          key={idx}\n        />\n      )\n    );\n\n\n    const voronoi = d3.voronoi()\n      .x(d => xScale(d.coord.x))\n      .y(d => yScale(d.coord.y))\n      .extent([[0, 0], [props.width, props.height]]);\n\n    let cx;\n    let cy;\n    let circleFill;\n\n\n    const regions = voronoi(props.value).polygons().map( (polygon, idx) => {\n      const point = polygon.data;\n      delete polygon.data;\n      const vnode = polygon;\n      // debugger;\n\n      cx = props.xScale(point.coord.x);\n      cy = props.yScale(point.coord.y);\n\n      circleFill = props.colors(props.colorAccessor(vnode, point.seriesIndex));\n\n      return (\n        <VoronoiCircleContainer\n          key={idx}\n          circleFill={circleFill}\n          vnode={vnode}\n          hoverAnimation={props.hoverAnimation}\n          cx={cx} cy={cy}\n          circleRadius={props.circleRadius}\n          onMouseOver={props.onMouseOver}\n          dataPoint={{\n            xValue: point.coord.x,\n            yValue: point.coord.y,\n            seriesName: point.series.name,\n          }}\n        />\n      );\n    });\n\n    return (\n      <g>\n        <g>{regions}</g>\n        <g>{lines}</g>\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Line',\n\n  propTypes: {\n    fill: PropTypes.string,\n    path: PropTypes.string,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.number,\n    strokeDashArray: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      stroke: '#3182bd',\n      fill: 'none',\n      strokeWidth: 1,\n      className: 'rd3-linechart-path',\n    };\n  },\n\n  render() {\n    const props = this.props;\n    return (\n      <path\n        d={props.path}\n        stroke={props.stroke}\n        strokeWidth={props.strokeWidth}\n        strokeDasharray={props.strokeDashArray}\n        fill={props.fill}\n        className={props.className}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst { Chart, XAxis, YAxis, Tooltip } = require('../common');\nconst DataSeries = require('./DataSeries');\nconst utils = require('../utils');\nconst {\n  CartesianChartPropsMixin,\n  DefaultAccessorsMixin,\n  ViewBoxMixin,\n  TooltipMixin,\n} = require('../mixins');\n\nmodule.exports = createReactClass({\n\n  displayName: 'LineChart',\n\n  propTypes: {\n    circleRadius: PropTypes.number,\n    hoverAnimation: PropTypes.bool,\n    margins: PropTypes.object,\n    data: PropTypes.array.isRequired,\n  },\n\n  mixins: [CartesianChartPropsMixin, DefaultAccessorsMixin, ViewBoxMixin, TooltipMixin],\n\n  getDefaultProps() {\n    return {\n      colors: d3.scaleOrdinal(d3.schemeCategory10),\n      circleRadius: 3,\n      className: 'rd3-linechart',\n      hoverAnimation: true,\n      margins: { top: 10, right: 20, bottom: 50, left: 45 },\n      xAxisClassName: 'rd3-linechart-xaxis',\n      yAxisClassName: 'rd3-linechart-yaxis',\n      data: [],\n    };\n  },\n\n  _calculateScales: utils.calculateScales,\n\n  render() {\n    const props = this.props;\n\n    if (this.props.data && this.props.data.length < 1) {\n      return null;\n    }\n\n    const { innerWidth, innerHeight, trans, svgMargins } = this.getDimensions();\n    const yOrient = this.getYOrient();\n    const domain = props.domain || {};\n\n    if (!Array.isArray(props.data)) {\n      props.data = [props.data];\n    }\n\n    // Returns an object of flattened allValues, xValues, and yValues\n    const flattenedData = utils.flattenData(props.data, props.xAccessor, props.yAccessor);\n\n    const allValues = flattenedData.allValues;\n    const xValues = flattenedData.xValues;\n    const yValues = flattenedData.yValues;\n    const scales = this._calculateScales(\n      innerWidth,\n      innerHeight,\n      xValues,\n      yValues,\n      domain.x,\n      domain.y\n    );\n\n    return (\n      <span onMouseLeave={this.onMouseLeave}>\n        <Chart\n          viewBox={this.getViewBox()}\n          legend={props.legend}\n          sideOffset={props.sideOffset}\n          data={props.data}\n          margins={props.margins}\n          colors={props.colors}\n          colorAccessor={props.colorAccessor}\n          width={props.width}\n          height={props.height}\n          title={props.title}\n          shouldUpdate={!this.state.changeState}\n        >\n          <g transform={trans} className={props.className}>\n            <XAxis\n              xAxisClassName={props.xAxisClassName}\n              strokeWidth={props.xAxisStrokeWidth}\n              xAxisTickValues={props.xAxisTickValues}\n              xAxisTickCount={props.xAxisTickCount}\n              xAxisTickInterval={props.xAxisTickInterval}\n              xAxisOffset={props.xAxisOffset}\n              xScale={scales.xScale}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              data={props.data}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridVertical={props.gridVertical}\n              gridVerticalStroke={props.gridVerticalStroke}\n              gridVerticalStrokeWidth={props.gridVerticalStrokeWidth}\n              gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n            />\n            <YAxis\n              yAxisClassName={props.yAxisClassName}\n              strokeWidth={props.yAxisStrokeWidth}\n              yScale={scales.yScale}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisTickCount={props.yAxisTickCount}\n              yAxisOffset={props.yAxisOffset}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridHorizontal={props.gridHorizontal}\n              gridHorizontalStroke={props.gridHorizontalStroke}\n              gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n              gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n            />\n            <DataSeries\n              xScale={scales.xScale}\n              yScale={scales.yScale}\n              xAccessor={props.xAccessor}\n              yAccessor={props.yAccessor}\n              hoverAnimation={props.hoverAnimation}\n              circleRadius={props.circleRadius}\n              data={props.data}\n              value={allValues}\n              interpolationType={props.interpolationType}\n              colors={props.colors}\n              colorAccessor={props.colorAccessor}\n              width={innerWidth}\n              height={innerHeight}\n              onMouseOver={this.onMouseOver}\n            />\n          </g>\n        </Chart>\n        {(props.showTooltip ? <Tooltip {...this.state.tooltip} /> : null)}\n      </span>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'VoronoiCircle',\n\n  // TODO: Check prop types\n  propTypes: {\n    handleMouseOver: PropTypes.any,\n    handleMouseLeave: PropTypes.any,\n    voronoiPath: PropTypes.any,\n    cx: PropTypes.any,\n    cy: PropTypes.any,\n    circleRadius: PropTypes.any,\n    circleFill: PropTypes.any,\n  },\n\n  getDefaultProps() {\n    return {\n      circleRadius: 3,\n      circleFill: '#1f77b4',\n    };\n  },\n\n  render() {\n    return (\n      <g>\n        <path\n          onMouseOver={this.props.handleMouseOver}\n          onMouseLeave={this.props.handleMouseLeave}\n          fill=\"transparent\"\n          stroke='#F5F5F5'\n          d={this.props.voronoiPath}\n        />\n        <circle\n          onMouseOver={this.props.handleMouseOver}\n          onMouseLeave={this.props.handleMouseLeave}\n          cx={this.props.cx}\n          cy={this.props.cy}\n          r={this.props.circleRadius}\n          fill={this.props.circleFill}\n          className=\"rd3-linechart-circle\"\n        />\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst { findDOMNode } = require('react-dom');\nconst shade = require('../utils').shade;\nconst VoronoiCircle = require('./VoronoiCircle');\n\nmodule.exports = createReactClass({\n\n  displayName: 'VornoiCircleContainer',\n\n  propTypes: {\n    circleRadius: PropTypes.any,\n    circleFill: PropTypes.any,\n    onMouseOver: PropTypes.any,\n    dataPoint: PropTypes.any,\n  },\n\n  getDefaultProps() {\n    return {\n      circleRadius: 3,\n      circleFill: '#1f77b4',\n      hoverAnimation: true,\n    };\n  },\n\n  getInitialState() {\n    return {\n      circleRadius: this.props.circleRadius,\n      circleFill: this.props.circleFill,\n    };\n  },\n\n  _animateCircle() {\n    const rect = findDOMNode(this).getElementsByTagName('circle')[0].getBoundingClientRect();\n    this.props.onMouseOver.call(this, rect.right, rect.top, this.props.dataPoint);\n    this.setState({\n      circleRadius: this.props.circleRadius * (5 / 4),\n      circleFill: shade(this.props.circleFill, 0.2),\n    });\n  },\n\n  _restoreCircle() {\n    this.setState({\n      circleRadius: this.props.circleRadius,\n      circleFill: this.props.circleFill,\n    });\n  },\n\n  _drawPath(d) {\n    if (d === undefined) {\n      return 'M Z';\n    }\n    return `M${d.join(',')}Z`;\n  },\n\n  render() {\n    const props = this.props;\n\n    // animation controller\n    let handleMouseOver;\n    let handleMouseLeave;\n    if (props.hoverAnimation) {\n      handleMouseOver = this._animateCircle;\n      handleMouseLeave = this._restoreCircle;\n    } else {\n      handleMouseOver = handleMouseLeave = null;\n    }\n\n    return (\n      <g>\n        <VoronoiCircle\n          handleMouseOver={handleMouseOver}\n          handleMouseLeave={handleMouseLeave}\n          voronoiPath={this._drawPath(props.vnode)}\n          cx={props.cx}\n          cy={props.cy}\n          circleRadius={this.state.circleRadius}\n          circleFill={this.state.circleFill}\n        />\n      </g>\n    );\n  },\n});\n","\nexports.LineChart = require('./LineChart');\n","'use strict';\n\n\nconst d3 = require('d3');\nconst PropTypes = require('prop-types');\n\nmodule.exports = {\n\n  propTypes: {\n    axesColor: PropTypes.string,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    data: PropTypes.array.isRequired,\n    height: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    horizontal: PropTypes.bool,\n    legend: PropTypes.bool,\n    legendOffset: PropTypes.number,\n    title: PropTypes.string,\n    width: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    xAccessor: PropTypes.func,\n    xAxisFormatter: PropTypes.func,\n    xAxisLabel: PropTypes.string,\n    xAxisLabelOffset: PropTypes.number,\n    xAxisTickCount: PropTypes.number,\n    xAxisTickInterval: PropTypes.object,\n    xAxisTickValues: PropTypes.array,\n    xAxisTickStroke: PropTypes.string,\n    xAxisTickTextStroke: PropTypes.string,\n    xAxisOffset: PropTypes.number,\n    xOrient: PropTypes.oneOf(['top', 'bottom']),\n    xScale: PropTypes.func,\n    yAccessor: PropTypes.func,\n    yAxisFormatter: PropTypes.func,\n    yAxisLabel: PropTypes.string,\n    yAxisLabelOffset: PropTypes.number,\n    yAxisTickCount: PropTypes.number,\n    yAxisTickInterval: PropTypes.object,\n    yAxisTickValues: PropTypes.array,\n    yAxisTickStroke: PropTypes.string,\n    yAxisTickTextStroke: PropTypes.string,\n    yAxisOffset: PropTypes.number,\n    yOrient: PropTypes.oneOf(['default', 'left', 'right']),\n    yScale: PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      axesColor: '#000',\n      // colors: d3.scaleOrdinal(d3.schemeCategory10),\n      colorAccessor: (d, idx) => idx,\n      height: 200,\n      horizontal: false,\n      legend: false,\n      legendOffset: 120,\n      title: '',\n      width: 400,\n      // xAxisFormatter: no predefined value right now\n      xAxisLabel: '',\n      xAxisLabelOffset: 38,\n      xAxisOffset: 0,\n      // xAxisTickCount: no predefined value right now\n      // xAxisTickInterval: no predefined value right now\n      // xAxisTickValues: no predefined value right now\n      xAxisTickStroke: '#000',\n      xAxisTickTextStroke: '#000',\n      xOrient: 'bottom',\n      // xScale: no predefined value right now\n      // yAxisFormatter: no predefined value right now\n      yAxisLabel: '',\n      yAxisLabelOffset: 35,\n      yAxisOffset: 0,\n      // yAxisTickCount: no predefined value right now\n      // yAxisTickInterval: no predefined value right now\n      // yAxisTickValues: no predefined value right now\n      yAxisTickStroke: '#000',\n      yAxisTickTextStroke: '#000',\n      yOrient: 'default',\n      // yScale: no predefined value right now\n    };\n  },\n\n  getYOrient() {\n    const yOrient = this.props.yOrient;\n\n    if (yOrient === 'default') {\n      return this.props.horizontal ? 'right' : 'left';\n    }\n\n    return yOrient;\n  },\n};\n","'use strict';\n\nconst PropTypes = require('prop-types');\n\nmodule.exports = {\n  propTypes: {\n    xAccessor: PropTypes.func,\n    yAccessor: PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      xAccessorBar: (d) => d.data.x,\n      yAccessorBar: (d) => d[1],\n\n      xAccessor: (d) => d.x,\n      yAccessor: (d) => d.y,\n    };\n  },\n};\n","'use strict';\n\n\nconst PropTypes = require('prop-types');\n\nmodule.exports = {\n\n  propTypes: {\n    showTooltip: PropTypes.bool,\n    tooltipFormat: PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      showTooltip: true,\n      tooltipFormat: (d) => String(d.yValue),\n    };\n  },\n\n  getInitialState() {\n    return {\n      tooltip: {\n        x: 0,\n        y: 0,\n        child: '',\n        show: false,\n      },\n      changeState: false,\n    };\n  },\n\n  componentWillReceiveProps() {\n    this.setState({\n      changeState: false,\n    });\n  },\n\n  onMouseOver(x, y, dataPoint) {\n    if (!this.props.showTooltip) {\n      return;\n    }\n    this.setState({\n      tooltip: {\n        x,\n        y,\n        child: this.props.tooltipFormat.call(this, dataPoint),\n        show: true,\n      },\n      changeState: true,\n    });\n  },\n\n  onMouseLeave() {\n    if (!this.props.showTooltip) {\n      return;\n    }\n    this.setState({\n      tooltip: {\n        x: 0,\n        y: 0,\n        child: '',\n        show: false,\n      },\n      changeState: true,\n    });\n  },\n};\n","\n'use strict';\n\nconst PropTypes = require('prop-types');\n\nmodule.exports = {\n\n  propTypes: {\n    viewBox: PropTypes.string,\n    viewBoxObject: PropTypes.object,\n  },\n\n  getViewBox() {\n    if (this.props.viewBoxObject) {\n      const v = this.props.viewBoxObject;\n      return [v.x, v.y, v.width, v.height].join(' ');\n    } else if (this.props.viewBox) {\n      return this.props.viewBox;\n    }\n    return null;\n  },\n\n  getDimensions() {\n    const props = this.props;\n    const { horizontal, margins, viewBoxObject, xOrient } = props;\n    const yOrient = this.getYOrient();\n\n    let width;\n    let height;\n    if (viewBoxObject) {\n      width = viewBoxObject.width;\n      height = viewBoxObject.height;\n    } else {\n      width = props.width;\n      height = props.height;\n    }\n\n    let svgWidth;\n    let svgHeight;\n    let svgMargins;\n    let trans;\n    if (horizontal) {\n      const center = width / 2;\n      trans = `rotate(90 ${center} ${center}) `;\n      svgWidth = height;\n      svgHeight = width;\n      svgMargins = {\n        left: margins.top,\n        top: margins.right,\n        right: margins.bottom,\n        bottom: margins.left,\n      };\n    } else {\n      trans = '';\n      svgWidth = width;\n      svgHeight = height;\n      svgMargins = margins;\n    }\n\n    const xAxisOffset = Math.abs(props.xAxisOffset || 0);\n    const yAxisOffset = Math.abs(props.yAxisOffset || 0);\n\n    const xOffset = svgMargins.left + (yOrient === 'left' ? yAxisOffset : 0);\n    const yOffset = svgMargins.top + (xOrient === 'top' ? xAxisOffset : 0);\n    trans += `translate(${xOffset}, ${yOffset})`;\n\n    return {\n      innerHeight: svgHeight - svgMargins.top - svgMargins.bottom - xAxisOffset,\n      innerWidth: svgWidth - svgMargins.left - svgMargins.right - yAxisOffset,\n      trans,\n      svgMargins,\n    };\n  },\n};\n","\nexports.CartesianChartPropsMixin = require('./CartesianChartPropsMixin');\nexports.DefaultAccessorsMixin = require('./DefaultAccessorsMixin');\nexports.ViewBoxMixin = require('./ViewBoxMixin');\nexports.TooltipMixin = require('./TooltipMixin');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\n\nmodule.exports = createReactClass({\n\n  displayName: 'Arc',\n\n  propTypes: {\n    fill: PropTypes.string,\n    d: PropTypes.string,\n    startAngle: PropTypes.number,\n    endAngle: PropTypes.number,\n    innerRadius: PropTypes.number,\n    outerRadius: PropTypes.number,\n    labelTextFill: PropTypes.string,\n    valueTextFill: PropTypes.string,\n    sectorBorderColor: PropTypes.string,\n    showInnerLabels: PropTypes.bool,\n    showOuterLabels: PropTypes.bool,\n  },\n\n  getDefaultProps() {\n    return {\n      labelTextFill: 'black',\n      valueTextFill: 'white',\n      showInnerLabels: true,\n      showOuterLabels: true,\n    };\n  },\n\n  renderInnerLabel(props, arc) {\n    // make value text can be formatted\n    const formattedValue = props.valueTextFormatter(props.value);\n    return (\n      <text\n        className=\"rd3-piechart-value\"\n        transform={`translate(${arc.centroid()})`}\n        dy=\".35em\"\n        style={{\n          shapeRendering: 'crispEdges',\n          textAnchor: 'middle',\n          fill: props.valueTextFill,\n        }}\n      >\n        { formattedValue }\n      </text>\n    );\n  },\n\n  renderOuterLabel(props) {\n    const rotate = `rotate(${(props.startAngle + props.endAngle) / 2 * (180 / Math.PI)})`;\n    const radius = props.outerRadius;\n    const dist = radius + 35;\n    const angle = (props.startAngle + props.endAngle) / 2;\n    const x = dist * (1.2 * Math.sin(angle));\n    const y = -dist * Math.cos(angle);\n    const t = `translate(${x},${y})`;\n\n    return (\n      <g>\n        <line\n          x1=\"0\"\n          x2=\"0\"\n          y1={-radius - 2}\n          y2={-radius - 26}\n          stroke={props.labelTextFill}\n          transform={rotate}\n          style={{\n            fill: props.labelTextFill,\n            strokeWidth: 2,\n          }}\n        >\n        </line>\n        <text\n          className=\"rd3-piechart-label\"\n          transform={t}\n          dy=\".35em\"\n          style={{\n            textAnchor: 'middle',\n            fill: props.labelTextFill,\n            shapeRendering: 'crispEdges',\n          }}\n        >\n          {props.label}\n        </text>\n      </g>\n    );\n  },\n\n  render() {\n    const props = this.props;\n\n    const arc = d3.arc()\n      .innerRadius(props.innerRadius)\n      .outerRadius(props.outerRadius)\n      .startAngle(props.startAngle)\n      .endAngle(props.endAngle);\n\n    return (\n      <g className=\"rd3-piechart-arc\" >\n        <path\n          d={arc()}\n          fill={props.fill}\n          stroke={props.sectorBorderColor}\n          onMouseOver={props.handleMouseOver}\n          onMouseLeave={props.handleMouseLeave}\n        />\n        {props.showOuterLabels ? this.renderOuterLabel(props, arc) : null}\n        {props.showInnerLabels ? this.renderInnerLabel(props, arc) : null}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst { findDOMNode } = require('react-dom');\nconst shade = require('../utils').shade;\nconst Arc = require('./Arc');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'ArcContainer',\n\n  propTypes: {\n    fill: PropTypes.string,\n    onMouseOver: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    dataPoint: PropTypes.any, // TODO prop type?\n  },\n\n  getInitialState() {\n    return {\n      // fill is named as fill instead of initialFill to avoid\n      // confusion when passing down props from top parent\n      fill: this.props.fill,\n    };\n  },\n\n  _animateArc() {\n    const rect = findDOMNode(this).getBoundingClientRect();\n    this.props.onMouseOver.call(this, rect.right, rect.top, this.props.dataPoint);\n    this.setState({\n      fill: shade(this.props.fill, 0.2),\n    });\n  },\n\n  _restoreArc() {\n    this.props.onMouseLeave.call(this);\n    this.setState({\n      fill: this.props.fill,\n    });\n  },\n\n  render() {\n    const props = this.props;\n\n    return (\n      <Arc\n        {...this.props}\n        fill={this.state.fill}\n        handleMouseOver={props.hoverAnimation ? this._animateArc : null}\n        handleMouseLeave={props.hoverAnimation ? this._restoreArc : null}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst ArcContainer = require('./ArcContainer');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    data: PropTypes.array,\n    values: PropTypes.array,\n    labels: PropTypes.array,\n    transform: PropTypes.string,\n    innerRadius: PropTypes.number,\n    radius: PropTypes.number,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    showInnerLabels: PropTypes.bool,\n    showOuterLabels: PropTypes.bool,\n    sectorBorderColor: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      data: [],\n      innerRadius: 0,\n      colors: d3.scaleOrdinal(d3.schemeCategory10),\n      colorAccessor: (d, idx) => idx,\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const pie = d3.pie()\n                  .sort(null);\n\n    const arcData = pie(props.values);\n\n    const arcs = arcData.map((arc, idx) => (\n        <ArcContainer\n          key={idx}\n          startAngle={arc.startAngle}\n          endAngle={arc.endAngle}\n          outerRadius={props.radius}\n          innerRadius={props.innerRadius}\n          labelTextFill={props.labelTextFill}\n          valueTextFill={props.valueTextFill}\n          valueTextFormatter={props.valueTextFormatter}\n          fill={props.colors(props.colorAccessor(props.data[idx], idx))}\n          value={props.values[idx]}\n          label={props.labels[idx]}\n          width={props.width}\n          showInnerLabels={props.showInnerLabels}\n          showOuterLabels={props.showOuterLabels}\n          sectorBorderColor={props.sectorBorderColor}\n          hoverAnimation={props.hoverAnimation}\n          onMouseOver={props.onMouseOver}\n          onMouseLeave={props.onMouseLeave}\n          dataPoint={{ yValue: props.values[idx], seriesName: props.labels[idx] }}\n        />\n      )\n    );\n    return (\n      <g className=\"rd3-piechart-pie\" transform={props.transform} >\n        {arcs}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst d3 = require('d3');\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst DataSeries = require('./DataSeries');\nconst { Chart, Tooltip } = require('../common');\nconst TooltipMixin = require('../mixins').TooltipMixin;\n\nmodule.exports = createReactClass({\n\n  displayName: 'PieChart',\n\n  propTypes: {\n    data: PropTypes.array,\n    radius: PropTypes.number,\n    cx: PropTypes.number,\n    cy: PropTypes.number,\n    labelTextFill: PropTypes.string,\n    valueTextFill: PropTypes.string,\n    valueTextFormatter: PropTypes.func,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    title: PropTypes.string,\n    showInnerLabels: PropTypes.bool,\n    showOuterLabels: PropTypes.bool,\n    sectorBorderColor: PropTypes.string,\n    hoverAnimation: PropTypes.bool,\n  },\n\n  mixins: [TooltipMixin],\n\n  getDefaultProps() {\n    return {\n      data: [],\n      title: '',\n      colors: d3.scaleOrdinal(d3.schemeCategory10),\n      colorAccessor: (d, idx) => idx,\n      valueTextFormatter: (val) => `${val}%`,\n      hoverAnimation: true,\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    if (props.data && props.data.length < 1) {\n      return null;\n    }\n    const transform = `translate(${props.cx || props.width / 2},${props.cy || props.height / 2})`;\n\n    const values = props.data.map((item) => item.value);\n    const labels = props.data.map((item) => item.label);\n\n    return (\n      <span>\n        <Chart\n          width={props.width}\n          height={props.height}\n          title={props.title}\n          shouldUpdate={!this.state.changeState}\n        >\n          <g className=\"rd3-piechart\">\n            <DataSeries\n              labelTextFill={props.labelTextFill}\n              valueTextFill={props.valueTextFill}\n              valueTextFormatter={props.valueTextFormatter}\n              data={props.data}\n              values={values}\n              labels={labels}\n              colors={props.colors}\n              colorAccessor={props.colorAccessor}\n              transform={transform}\n              width={props.width}\n              height={props.height}\n              radius={props.radius}\n              innerRadius={props.innerRadius}\n              showInnerLabels={props.showInnerLabels}\n              showOuterLabels={props.showOuterLabels}\n              sectorBorderColor={props.sectorBorderColor}\n              hoverAnimation={props.hoverAnimation}\n              onMouseOver={this.onMouseOver}\n              onMouseLeave={this.onMouseLeave}\n            />\n          </g>\n        </Chart>\n        {(props.showTooltip ? <Tooltip {...this.state.tooltip} /> : null)}\n      </span>\n    );\n  },\n});\n","\nexports.PieChart = require('./PieChart');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst VoronoiCircleContainer = require('./VoronoiCircleContainer');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    circleRadius: PropTypes.number.isRequired,\n    className: PropTypes.string,\n    colors: PropTypes.func.isRequired,\n    colorAccessor: PropTypes.func.isRequired,\n    data: PropTypes.array.isRequired,\n    height: PropTypes.number.isRequired,\n    xAccessor: PropTypes.func.isRequired,\n    xScale: PropTypes.func.isRequired,\n    yAccessor: PropTypes.func.isRequired,\n    yScale: PropTypes.func.isRequired,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-scatterchart-dataseries',\n    };\n  },\n\n  render() {\n    const props = this.props;\n    const xScale = props.xScale;\n    const yScale = props.yScale;\n    const xAccessor = props.xAccessor;\n    const yAccessor = props.yAccessor;\n\n    const voronoi = d3.voronoi()\n      .x(d => xScale(d.coord.x))\n      .y(d => yScale(d.coord.y))\n      .extent([[0, 0], [props.width, props.height]]);\n\n    const regions = voronoi(props.data).polygons().map( (polygon, idx) => {         \n      const point = polygon.data; \n      delete polygon.data; \n\n      const vnode = polygon;\n      const coord = point.coord;\n\n      const x = xAccessor(coord);\n      const y = yAccessor(coord);\n\n      // The circle coordinates\n      let cx;\n      let cy;\n\n      if (Object.prototype.toString.call(x) === '[object Date]') {\n        cx = xScale(x.getTime());\n      } else {\n        cx = xScale(x);\n      }\n\n      if (Object.prototype.toString.call(y) === '[object Date]') {\n        cy = yScale(y.getTime());\n      } else {\n        cy = yScale(y);\n      }\n\n      return (\n        <VoronoiCircleContainer\n          key={idx}\n          circleFill={props.colors(props.colorAccessor(point.d, point.seriesIndex))}\n          circleRadius={props.circleRadius}\n          cx={cx}\n          cy={cy}\n          vnode={vnode}\n          onMouseOver={props.onMouseOver}\n          dataPoint={{ xValue: x, yValue: y, seriesName: point.series.name }}\n        />\n      );\n    });\n\n    return (\n      <g\n        className={props.className}\n      >\n        {regions}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst { Chart, XAxis, YAxis, Tooltip } = require('../common');\nconst DataSeries = require('./DataSeries');\nconst utils = require('../utils');\nconst {\n  CartesianChartPropsMixin,\n  DefaultAccessorsMixin,\n  ViewBoxMixin,\n  TooltipMixin,\n} = require('../mixins');\n\nmodule.exports = createReactClass({\n\n  displayName: 'ScatterChart',\n\n  propTypes: {\n    circleRadius: PropTypes.number,\n    className: PropTypes.string,\n    hoverAnimation: PropTypes.bool,\n    margins: PropTypes.object,\n    xAxisClassName: PropTypes.string,\n    xAxisStrokeWidth: PropTypes.number,\n    yAxisClassName: PropTypes.string,\n    yAxisStrokeWidth: PropTypes.number,\n  },\n\n  mixins: [\n    CartesianChartPropsMixin,\n    DefaultAccessorsMixin,\n    ViewBoxMixin,\n    TooltipMixin,\n  ],\n\n  getDefaultProps() {\n    return {\n      colors: d3.scaleOrdinal(d3.schemeBlues[6].reverse()),\n      circleRadius: 3,\n      className: 'rd3-scatterchart',\n      hoverAnimation: true,\n      margins: { top: 10, right: 20, bottom: 50, left: 45 },\n      xAxisClassName: 'rd3-scatterchart-xaxis',\n      xAxisStrokeWidth: 1,\n      yAxisClassName: 'rd3-scatterchart-yaxis',\n      yAxisStrokeWidth: 1,\n    };\n  },\n\n  _calculateScales: utils.calculateScales,\n\n  render() {\n    const props = this.props;\n    const data = props.data;\n\n    if (!data || data.length < 1) {\n      return null;\n    }\n\n    const { innerWidth, innerHeight, trans, svgMargins } = this.getDimensions();\n    const yOrient = this.getYOrient();\n    const domain = props.domain || {};\n\n    // Returns an object of flattened allValues, xValues, and yValues\n    const flattenedData = utils.flattenData(data, props.xAccessor, props.yAccessor);\n\n    const allValues = flattenedData.allValues;\n    const xValues = flattenedData.xValues;\n    const yValues = flattenedData.yValues;\n\n    const scales = this._calculateScales(\n      innerWidth, innerHeight, xValues, yValues, domain.x, domain.y\n    );\n    const xScale = scales.xScale;\n    const yScale = scales.yScale;\n\n    return (\n      <span onMouseLeave={this.onMouseLeave}>\n        <Chart\n          colors={props.colors}\n          colorAccessor={props.colorAccessor}\n          data={data}\n          height={props.height}\n          legend={props.legend}\n          sideOffset={props.sideOffset}\n          margins={props.margins}\n          title={props.title}\n          viewBox={this.getViewBox()}\n          width={props.width}\n          shouldUpdate={!this.state.changeState}\n        >\n          <g\n            className={props.className}\n            transform={trans}\n          >\n            <XAxis\n              data={data}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              margins={svgMargins}\n              stroke={props.axesColor}\n              strokeWidth={props.xAxisStrokeWidth.toString()}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              width={innerWidth}\n              xAxisClassName={props.xAxisClassName}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              xAxisOffset={props.xAxisOffset}\n              xAxisTickInterval={props.xAxisTickInterval}\n              xAxisTickValues={props.xAxisTickValues}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              xScale={xScale}\n              gridVertical={props.gridVertical}\n              gridVerticalStroke={props.gridVerticalStroke}\n              gridVerticalStrokeWidth={props.gridVerticalStrokeWidth}\n              gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n            />\n            <YAxis\n              data={data}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              margins={svgMargins}\n              stroke={props.axesColor}\n              strokeWidth={props.yAxisStrokeWidth.toString()}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              yAxisClassName={props.yAxisClassName}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              yAxisOffset={props.yAxisOffset}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisTickCount={props.yAxisTickCount}\n              yScale={yScale}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              gridHorizontal={props.gridHorizontal}\n              gridHorizontalStroke={props.gridHorizontalStroke}\n              gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n              gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n            />\n            <DataSeries\n              circleRadius={props.circleRadius}\n              colors={props.colors}\n              colorAccessor={props.colorAccessor}\n              data={allValues}\n              height={innerHeight}\n              hoverAnimation={props.hoverAnimation}\n              width={innerWidth}\n              xAccessor={(coord) => coord.x}\n              xScale={xScale}\n              yAccessor={(coord) => coord.y}\n              yScale={yScale}\n              onMouseOver={this.onMouseOver}\n            />\n          </g>\n        </Chart>\n        {(props.showTooltip ? <Tooltip {...this.state.tooltip} /> : null)}\n      </span>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'VoronoiCircle',\n\n  propTypes: {\n    circleFill: PropTypes.string.isRequired,\n    circleRadius: PropTypes.number.isRequired,\n    className: PropTypes.string,\n    cx: PropTypes.number.isRequired,\n    cy: PropTypes.number.isRequired,\n    handleMouseLeave: PropTypes.func.isRequired,\n    handleMouseOver: PropTypes.func.isRequired,\n    pathFill: PropTypes.string,\n    voronoiPath: PropTypes.string.isRequired,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-scatterchart-voronoi-circle',\n      pathFill: 'transparent',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    return (\n      <g>\n        <path\n          d={props.voronoiPath}\n          fill={props.pathFill}\n          stroke='#DCDCDC'\n          onMouseLeave={props.handleMouseLeave}\n          onMouseOver={props.handleMouseOver}\n        />\n        <circle\n          cx={props.cx}\n          cy={props.cy}\n          className={props.className}\n          fill={props.circleFill}\n          onMouseLeave={props.handleMouseLeave}\n          onMouseOver={props.handleMouseOver}\n          r={props.circleRadius}\n        />\n      </g>\n    );\n  },\n});\n","'use strict';\n\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst { findDOMNode } = require('react-dom');\nconst shade = require('../utils').shade;\nconst VoronoiCircle = require('./VoronoiCircle');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'VornoiCircleContainer',\n\n  propTypes: {\n    circleFill: PropTypes.string,\n    circleRadius: PropTypes.number,\n    circleRadiusMultiplier: PropTypes.number,\n    className: PropTypes.string,\n    hoverAnimation: PropTypes.bool,\n    shadeMultiplier: PropTypes.number,\n    vnode: PropTypes.array.isRequired,\n    onMouseOver: PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      circleFill: '#1f77b4',\n      circleRadius: 3,\n      circleRadiusMultiplier: 1.25,\n      className: 'rd3-scatterchart-voronoi-circle-container',\n      hoverAnimation: true,\n      shadeMultiplier: 0.2,\n    };\n  },\n\n  getInitialState() {\n    return {\n      circleFill: this.props.circleFill,\n      circleRadius: this.props.circleRadius,\n    };\n  },\n\n  _animateCircle() {\n    const props = this.props;\n\n    if (props.hoverAnimation) {\n      const rect = findDOMNode(this).getElementsByTagName('circle')[0].getBoundingClientRect();\n      this.props.onMouseOver.call(this, rect.right, rect.top, props.dataPoint);\n      this.setState({\n        circleFill: shade(props.circleFill, props.shadeMultiplier),\n        circleRadius: props.circleRadius * props.circleRadiusMultiplier,\n      });\n    }\n  },\n\n  _restoreCircle() {\n    const props = this.props;\n    if (props.hoverAnimation) {\n      this.setState({\n        circleFill: props.circleFill,\n        circleRadius: props.circleRadius,\n      });\n    }\n  },\n\n  _drawPath(d) {\n    if (typeof d === 'undefined') {\n      return 'M Z';\n    }\n\n    return `M${d.join(',')}Z`;\n  },\n\n  render() {\n    const props = this.props;\n    const state = this.state;\n\n    return (\n      <g\n        className={props.className}\n      >\n        <VoronoiCircle\n          circleFill={state.circleFill}\n          circleRadius={state.circleRadius}\n          cx={props.cx}\n          cy={props.cy}\n          handleMouseLeave={this._restoreCircle}\n          handleMouseOver={this._animateCircle}\n          voronoiPath={this._drawPath(props.vnode)}\n        />\n      </g>\n    );\n  },\n});\n","\nexports.ScatterChart = require('./ScatterChart');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Cell',\n\n  propTypes: {\n    fill: PropTypes.string,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    label: PropTypes.string,\n  },\n\n  render() {\n    const props = this.props;\n\n    const textStyle = {\n      textAnchor: 'middle',\n      fill: props.textColor,\n      fontSize: props.fontSize,\n      fontWeight: '600'\n    };\n\n    const t = `translate(${props.x}, ${props.y}  )`;\n\n    return (\n      <g transform={t}>\n        <rect\n          className=\"rd3-treemap-cell\"\n          width={props.width}\n          height={props.height}\n          fill={props.fill}\n          onMouseOver={props.handleMouseOver}\n          onMouseLeave={props.handleMouseLeave}\n        />\n        <text\n          x={props.width / 2}\n          y={props.height / 2}\n          dy=\".35em\"\n          style={textStyle}\n          className=\"rd3-treemap-cell-text\"\n        >\n          {props.label}\n        </text>\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst shade = require('../utils').shade;\nconst Cell = require('./Cell');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'CellContainer',\n\n  propTypes: {\n    fill: PropTypes.string,\n  },\n\n  getInitialState() {\n    return {\n      // fill is named as fill instead of initialFill to avoid\n      // confusion when passing down props from top parent\n      fill: this.props.fill,\n    };\n  },\n\n  _animateCell() {\n    this.setState({\n      fill: shade(this.props.fill, 0.05),\n    });\n  },\n\n  _restoreCell() {\n    this.setState({\n      fill: this.props.fill,\n    });\n  },\n\n  render() {\n    const props = this.props;\n    return (\n      <Cell\n        {...props}\n        fill={this.state.fill}\n        handleMouseOver={props.hoverAnimation ? this._animateCell : null}\n        handleMouseLeave={props.hoverAnimation ? this._restoreCell : null}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst CellContainer = require('./CellContainer');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    data: PropTypes.array,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    width: PropTypes.number,\n    height: PropTypes.number,\n  },\n\n  getDefaultProps() {\n    return {\n      data: [],\n      colors: d3.scaleOrdinal(d3.schemePastel2),\n      colorAccessor: (d, idx) => idx,\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const treemap = d3.treemap()\n                    .size([props.width, props.height]);\n\n    // stratify the data: reformatting for d3.js\n    var root = d3.stratify()\n      .id(function(d) { return d.label; })\n      .parentId(function(d) { return d.parent; })\n      (props.data);\n\n    root.sum(function(d) { return +d.value })\n\n    const tree = treemap(root);\n\n    const cells = tree.children.map((node, idx) => (\n        <CellContainer\n          key={idx}\n          x={node.x0}\n          y={node.y0}\n          width={node.x1 - node.x0}\n          height={node.y1 - node.y0}\n          fill={props.colors(props.colorAccessor(node, idx))}\n          label={node.data.label}\n          fontSize={props.fontSize}\n          textColor={props.textColor}\n          hoverAnimation={props.hoverAnimation}\n        />\n    ), this);\n\n    return (\n      <g transform={props.transform} className=\"treemap\">\n        {cells}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst d3 = require('d3');\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst Chart = require('../common').Chart;\nconst DataSeries = require('./DataSeries');\n\nmodule.exports = createReactClass({\n\n  displayName: 'Treemap',\n\n  propTypes: {\n    data: PropTypes.array,\n    margins: PropTypes.object,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    title: PropTypes.string,\n    textColor: PropTypes.string,\n    fontSize: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    hoverAnimation: PropTypes.bool,\n  },\n\n  getDefaultProps() {\n    return {\n      hoverAnimation: true,\n      data: [],\n      width: 400,\n      heigth: 200,\n      title: '',\n      textColor: '#f7f7f7',\n      fontSize: '0.85em',\n      // colors: d3.scaleOrdinal(d3.schemeCategory10),\n      colorAccessor: (d, idx) => idx,\n    };\n  },\n\n  render() {\n    const props = this.props;\n    if (this.props.data && this.props.data.length < 1) {\n      return null;\n    }\n\n    return (\n      <Chart\n        title={props.title}\n        width={props.width}\n        height={props.height}\n      >\n        <g className=\"rd3-treemap\">\n          <DataSeries\n            data={props.data}\n            width={props.width}\n            height={props.height}\n            colors={props.colors}\n            colorAccessor={props.colorAccessor}\n            textColor={props.textColor}\n            fontSize={props.fontSize}\n            hoverAnimation={props.hoverAnimation}\n          />\n        </g>\n      </Chart>\n    );\n  },\n});\n","\nexports.Treemap = require('./Treemap');\n","const d3 = require('d3');\n\nexports.calculateScales = (width, height, xValues, yValues, xDomain = [], yDomain = []) => {\n  let xScale;\n  if (xValues.length > 0 && Object.prototype.toString.call(xValues[0]) === '[object Date]') {\n    xScale = d3.scaleTime()\n      .range([0, width]);\n  } else {\n    xScale = d3.scaleLinear()\n      .range([0, width]);\n  }\n  const xdomain = d3.extent(xValues);\n  if (xDomain[0] !== undefined && xDomain[0] !== null) xdomain[0] = xDomain[0];\n  if (xDomain[1] !== undefined && xDomain[1] !== null) xdomain[1] = xDomain[1];\n  xScale.domain(xdomain);\n\n  let yScale;\n  if (yValues.length > 0 && Object.prototype.toString.call(yValues[0]) === '[object Date]') {\n    yScale = d3.scaleTime()\n      .range([height, 0]);\n  } else {\n    yScale = d3.scaleLinear()\n      .range([height, 0]);\n  }\n\n  const ydomain = d3.extent(yValues);\n  if (yDomain[0] !== undefined && yDomain[0] !== null) ydomain[0] = yDomain[0];\n  if (yDomain[1] !== undefined && yDomain[1] !== null) ydomain[1] = yDomain[1];\n  yScale.domain(ydomain);\n\n  return {\n    xScale,\n    yScale,\n  };\n};\n\n// debounce from Underscore.js\n// MIT License: https://raw.githubusercontent.com/jashkenas/underscore/master/LICENSE\n// Copyright (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative\n// Reporters & Editors\nexports.debounce = (func, wait, immediate) => {\n  let timeout;\n  return function debounce(...args) {\n    const context = this;\n    const later = () => {\n      timeout = null;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n};\n\nexports.flattenData = (data, xAccessor, yAccessor) => {\n  const allValues = [];\n  const xValues = [];\n  const yValues = [];\n  const coincidentCoordinateCheck = {};\n\n  data.forEach((series, i) => {\n    series.values.forEach((item, j) => {\n      const x = xAccessor(item);\n\n      // Check for NaN since d3's Voronoi cannot handle NaN values\n      // Go ahead and Proceed to next iteration since we don't want NaN\n      // in allValues or in xValues or yValues\n      if (isNaN(x)) {\n        return;\n      }\n      xValues.push(x);\n\n      const y = yAccessor(item);\n      // when yAccessor returns an object (as in the case of candlestick)\n      // iterate over the keys and push all the values to yValues array\n      let yNode;\n      if (typeof y === 'object' && Object.keys(y).length > 0) {\n        Object.keys(y).forEach((key) => {\n          // Check for NaN since d3's Voronoi cannot handle NaN values\n          // Go ahead and Proceed to next iteration since we don't want NaN\n          // in allValues or in xValues or yValues\n          if (isNaN(y[key])) {\n            return;\n          }\n          yValues.push(y[key]);\n          // if multiple y points are to be plotted for a single x\n          // as in the case of candlestick, default to y value of 0\n          yNode = 0;\n        });\n      } else {\n        // Check for NaN since d3's Voronoi cannot handle NaN values\n        // Go ahead and Proceed to next iteration since we don't want NaN\n        // in allValues or in xValues or yValues\n        if (isNaN(y)) {\n          return;\n        }\n        yValues.push(y);\n        yNode = y;\n      }\n\n      const xyCoords = `${x}-${yNode}`;\n      if (coincidentCoordinateCheck.hasOwnProperty(xyCoords)) {\n        // Proceed to next iteration if the x y pair already exists\n        // d3's Voronoi cannot handle NaN values or coincident coords\n        // But we push them into xValues and yValues above because\n        // we still may handle them there (labels, etc.)\n        return;\n      }\n      coincidentCoordinateCheck[xyCoords] = '';\n\n      const pointItem = {\n        coord: {\n          x,\n          y: yNode,\n        },\n        d: item,\n        id: series.name + j,\n        series,\n        seriesIndex: i,\n      };\n      allValues.push(pointItem);\n    });\n  });\n\n  return { allValues, xValues, yValues };\n};\n\n\nexports.shade = (hex, percent) => {\n  let red;\n  let green;\n  let blue;\n  const min = Math.min;\n  const round = Math.round;\n  if (hex.length !== 7) { return hex; }\n  const number = parseInt(hex.slice(1), 16);\n  const R = number >> 16;\n  const G = number >> 8 & 0xFF;\n  const B = number & 0xFF;\n  red = min(255, round((1 + percent) * R)).toString(16);\n  if (red.length === 1) red = `0${red}`;\n  green = min(255, round((1 + percent) * G)).toString(16);\n  if (green.length === 1) green = `0${green}`;\n  blue = min(255, round((1 + percent) * B)).toString(16);\n  if (blue.length === 1) blue = `0${blue}`;\n  return `#${red}${green}${blue}`;\n};\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
{"version":3,"sources":["node_modules/browser-pack/_prelude.js","docs/examples/main.js","src/areachart/Area.jsx","src/areachart/AreaChart.jsx","src/areachart/AreaContainer.jsx","src/areachart/DataSeries.jsx","src/areachart/index.js","src/barchart/Bar.jsx","src/barchart/BarChart.jsx","src/barchart/BarContainer.jsx","src/barchart/DataSeries.jsx","src/barchart/index.js","src/candlestick/Candle.jsx","src/candlestick/CandlestickChart.jsx","src/candlestick/CandlestickContainer.jsx","src/candlestick/DataSeries.jsx","src/candlestick/Wick.jsx","src/candlestick/index.js","src/common/Legend.jsx","src/common/Polygon.jsx","src/common/Tooltip.jsx","src/common/Voronoi.jsx","src/common/axes/AxisLine.jsx","src/common/axes/AxisTicks.jsx","src/common/axes/Label.jsx","src/common/axes/XAxis.jsx","src/common/axes/XGrid.jsx","src/common/axes/YAxis.jsx","src/common/axes/YGrid.jsx","src/common/axes/index.js","src/common/charts/BasicChart.jsx","src/common/charts/Chart.jsx","src/common/charts/LegendChart.jsx","src/common/charts/index.js","src/common/index.js","src/index.js","src/linechart/DataSeries.jsx","src/linechart/Line.jsx","src/linechart/LineChart.jsx","src/linechart/VoronoiCircle.jsx","src/linechart/VoronoiCircleContainer.jsx","src/linechart/index.js","src/mixins/CartesianChartPropsMixin.js","src/mixins/DefaultAccessorsMixin.js","src/mixins/TooltipMixin.js","src/mixins/ViewBoxMixin.js","src/mixins/index.js","src/piechart/Arc.jsx","src/piechart/ArcContainer.jsx","src/piechart/DataSeries.jsx","src/piechart/PieChart.jsx","src/piechart/index.js","src/scatterchart/DataSeries.jsx","src/scatterchart/ScatterChart.jsx","src/scatterchart/VoronoiCircle.jsx","src/scatterchart/VoronoiCircleContainer.jsx","src/scatterchart/index.js","src/treemap/Cell.jsx","src/treemap/CellContainer.jsx","src/treemap/DataSeries.jsx","src/treemap/Treemap.jsx","src/treemap/index.js","src/utils/index.js"],"names":[],"mappings":"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","file":"react-d3.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\nconst React = require('react');\nconst ReactDOM = require('react-dom');\nconst d3 = require('d3');\nconst createReactClass = require('create-react-class');\n// const hljs = require('highlight.js');\nconst rd3 = require('../../src');\n\nconst BarChart = rd3.BarChart;\nconst LineChart = rd3.LineChart;\nconst CandlestickChart = rd3.CandlestickChart;\nconst PieChart = rd3.PieChart;\nconst AreaChart = rd3.AreaChart;\nconst Treemap = rd3.Treemap;\nconst ScatterChart = rd3.ScatterChart;\n\n// hljs.initHighlightingOnLoad();\n\nconst Demos = createReactClass({\n\n  getInitialState() {\n    return {\n      areaData: [],\n      ohlcData: []\n    };\n  },\n\n\n\n\n\n  componentDidMount () {\n    const parseDate = d3.timeFormat('%y-%b-%d').parse;\n\n    /* This function is valid for this dataset only.\n      You can provide a dataset already formated and remove this. */\n    d3.json('data/stackedAreaData.json').\n    then( res => {\n      const data = []\n      res[0].values.forEach((num0, index) => {\n        const num1 = res[1].values[index];\n        data.push({\n          \"date\": new Date(num0[0]),\n          [res[0].name]: num0[1],\n          [res[1].name]: num1[1],\n        })\n      });\n      this.setState( {areaData: data} )\n    });\n\n    d3.tsv('data/AAPL_ohlc.tsv')\n    .then( data => {\n      const series = { name: 'AAPL', values: [] };\n\n      data.map((d) => {\n        d.date = new Date(+d.date);\n        d.open = +d.open;\n        d.high = +d.high;\n        d.low = +d.low;\n        d.close = +d.close;\n        series.values.push({ x: d.date, open: d.open, high: d.high, low: d.low, close: d.close });\n      });\n      this.setState({ ohlcData: [series] });\n    });\n  },\n\n  render() {\n    const lineData = [\n      {\n        name: 'series1',\n        values: [{ x: 0, y: 20 }, { x: 1, y: 30 }, { x: 2, y: 10 }, { x: 3, y: 5 }, { x: 4, y: 8 }, { x: 5, y: 15 }, { x: 6, y: 10 }],\n        strokeWidth: 3,\n        strokeDashArray: '5,5',\n      },\n      {\n        name: 'series2',\n        values: [{ x: 0, y: 8 }, { x: 1, y: 5 }, { x: 2, y: 20 }, { x: 3, y: 12 }, { x: 4, y: 4 }, { x: 5, y: 6 }, { x: 6, y: 2 }]\n      },\n      {\n        name: 'series3',\n        values: [{ x: 0, y: 0 }, { x: 1, y: 5 }, { x: 2, y: 8 }, { x: 3, y: 2 }, { x: 4, y: 6 }, { x: 5, y: 4 }, { x: 6, y: 2 }]\n      }\n    ];\n\n\n\n    const barData = [\n          {name: 'Series A', x: 1, y: 91 },\n          {name: 'Series A', x: 2, y: 290 },\n          {name: 'Series A', x: 3, y: -25 },\n          {name: 'Series B', x: 1, y: 9 },\n          {name: 'Series B', x: 2, y: 49 },\n          {name: 'Series B', x: 3, y: -20 },\n          {name: 'Series C', x: 1, y: 14 },\n          {name: 'Series C', x: 2, y: 77 },\n          {name: 'Series C', x: 3, y: -70 }\n        ]\n\n\n    const pieData = [{ label: 'Margarita', value: 20.0 }, { label: 'John', value: 55.0 }, { label: 'Tim', value: 25.0 }];\n\n    // 2014 Most Populous Countries\n    // http://www.prb.org/pdf14/2014-world-population-data-sheet_eng.pdf\n    const treemapData = [{ label: 'Origin', parent:'', value: '' },\n                          { label: 'China', parent:'Origin', value: 1364 },\n                          { label: 'India', parent:'Origin', value: 1296 },\n                          { label: 'United States', parent:'Origin', value: 318 },\n                          { label: 'Indonesia', parent:'Origin', value: 251 },\n                          { label: 'Brazil', parent:'Origin', value: 203 }\n                          ];\n\n    const scatterData = [\n      {\n        name: 'series1',\n        values: [{ x: 0, y: 20 }, { x: 5, y: 7 }, { x: 8, y: 3 }, { x: 13, y: 33 }, { x: 12, y: 10 }, { x: 13, y: 15 }, { x: 24, y: 8 }, { x: 25, y: 15 }, { x: 16, y: 10 }, { x: 16, y: 10 }, { x: 19, y: 30 }, { x: 14, y: 30 }]\n      },\n      {\n        name: 'series2',\n        values: [{ x: 40, y: 30 }, { x: 35, y: 37 }, { x: 48, y: 37 }, { x: 38, y: 33 }, { x: 52, y: 60 }, { x: 51, y: 55 }, { x: 54, y: 48 }, { x: 45, y: 45 }, { x: 46, y: 50 }, { x: 66, y: 50 }, { x: 39, y: 36 }, { x: 54, y: 30 }]\n      },\n      {\n        name: 'series3',\n        values: [{ x: 80, y: 78 }, { x: 71, y: 58 }, { x: 78, y: 68 }, { x: 81, y: 47 }, { x: 72, y: 70 }, { x: 70, y: 88 }, { x: 81, y: 90 }, { x: 92, y: 80 }, { x: 81, y: 72 }, { x: 99, y: 95 }, { x: 67, y: 81 }, { x: 96, y: 78 }]\n      }\n    ];\n\n    return (\n      <div className=\"container\">\n        <a href=\"https://github.com/fortinbras/reactjs-d3js\"><img style={{ position: 'absolute', top: 0, right: 0, border: 0 }} src=\"https://camo.githubusercontent.com/a6677b08c955af8400f44c6298f40e7d19cc5b2d/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677261795f3664366436642e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png\" /></a>\n        <div className=\"row\">\n          <h3 className=\"page-header\">reactjs-d3js: Multiple series charts</h3>\n        </div>\n\n\n\n\n\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <LineChart\n              legend\n              data={lineData}\n              width=\"100%\"\n              height={400}\n              viewBoxObject={{\n                x: 0,\n                y: 0,\n                width: 500,\n                height: 400\n              }}\n              title=\"Line Chart\"\n              yAxisLabel=\"Altitude\"\n              xAxisLabel=\"Elapsed Time (sec)\"\n              domain={{ x: [, ], y: [, ] }}\n              gridHorizontal\n            />\n          </div>\n          <div className=\"col-md-6\">\n            <pre ref=\"block\">\n              <code className=\"js\">\n              {\n`var lineData = [\n  {\n    name: \"series1\",\n    values: [ { x: 0, y: 20 }, ..., { x: 24, y: 10 } ],\n    strokeWidth: 3,\n    strokeDashArray: \"5,5\",\n  },\n  ....\n  {\n    name: \"series2\",\n    values: [ { x: 70, y: 82 }, ..., { x: 76, y: 82 } ]\n  }\n];`\n              }\n              </code>\n            </pre>\n            <pre ref=\"block\">\n              <code className=\"html\">\n              {\n`<LineChart\n  legend={true}\n  data={lineData}\n  width='100%'\n  height={400}\n  viewBoxObject={{\n    x: 0,\n    y: 0,\n    width: 500,\n    height: 400\n  }}\n  title=\"Line Chart\"\n  yAxisLabel=\"Altitude\"\n  xAxisLabel=\"Elapsed Time (sec)\"\n  domain={{x: [,10], y: [-10,]}}\n  gridHorizontal={true}\n/>`\n              }\n              </code>\n            </pre>\n          </div>\n        </div>\n\n\n\n        <div className=\"row\">\n          <hr />\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <ScatterChart\n              data={scatterData}\n              width=\"100%\"\n              height={400}\n              viewBoxObject={{\n                x: 0,\n                y: 0,\n                width: 500,\n                height: 400\n              }}\n              title=\"Scatter Chart\"\n              domain={{ x: [, ], y: [, ] }}\n            />\n          </div>\n          <div className=\"col-md-6\">\n            <pre ref=\"block\">__proto__: Object\n\n              <code className=\"js\">\n              {\n`var scatterData = [\n  {\n    name: \"series1\",\n    values: [ { x: 0, y: 20 }, ..__proto__: Object\n., { x: 24, y: 10 } ]\n  },\n  ....\n  {\n    name: \"series3\",\n    values: [ { x: 70, y: 82 }, ..., { x: 76, y: 82 } ]\n  }\n];`\n              }\n              </code>\n            </pre>\n            <pre ref=\"block\">\n              <code className=\"html\">\n              {\n`<ScatterChart\n  data={scatterData}\n  width={500}\n  height={400}\n  domain={{y: [-15,], y: [-15,]}}\n  title=\"Scatter Chart\"\n/>`\n              }\n              </code>\n            </pre>\n          </div>\n        </div>\n        <div className=\"row\">\n          <hr />\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <AreaChart\n              data={this.state.areaData}\n              width=\"100%\"\n              viewBoxObject={{\n                x: 0,\n                y: 0,\n                height: 400,\n                width: 500\n              }}\n              height={400}\n              title=\"Area Chart\"\n              xAxisTickInterval={{ unit: 'year', interval: 2 }}\n              xAxisLabel=\"Year\"\n              yAxisLabel=\"Share Price\"\n              xAccessor={(d) => new Date(d[0])\n              }\n              yAccessor={(d) => d[1]}\n              // domain={{ y: [, 60] }}\n              gridHorizontal\n              gridVertical\n              gridHorizontalStrokeDash=\"\"\n              gridVerticalStrokeDash=\"\"\n            />\n          </div>\n          <div className=\"col-md-6\">\n            <pre ref=\"block\">\n              <code className=\"js\">\n              {\n`var areaData = [\n  {\n    name: \"series1\",\n    values: [ { x: [object Date], y: 20.5 }, ..., { x: [object Date], y: 4.2 } ]\n  },\n  ...\n  {\n    name: \"series2\",\n    values: [ { x: [object Date], y: 3.2 }, ..., { x: [object Date], y: 11.2 } ]\n  }\n];`\n              }\n              </code>\n            </pre>\n            <pre ref=\"block\">\n              <code className=\"html\">\n                {\n`<AreaChart\n  data={areaData}\n  width=\"100%\"\n  height={300}\n  viewBoxObject={{\n    x: 0,\n    y: 0,\n    height: 400,\n    width: 500\n  }}\n  domain={{y: [,60]}}\n  xAxisTickInterval={{unit: 'year', interval: 2}}\n  title=\"Area Chart\"\n/>`\n                }\n              </code>\n            </pre>\n          </div>\n        </div>\n        <div className=\"row\">\n          <hr />\n        </div>\n\n\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <CandlestickChart\n              data={this.state.ohlcData}\n              width=\"100%\"\n              height={400}\n              viewBoxObject={{\n                x: 0,\n                y: 0,\n                width: 500,\n                height: 400\n              }}\n              yAxisOffset={-10}\n              title=\"Candlestick Chart\"\n\n              gridHorizontal\n              gridVertical\n              gridHorizontalStrokeDash\n              gridVerticalStrokeDash=''\n            />\n          </div>\n          <div className=\"col-md-6\">\n            <pre ref=\"block\">\n              <code className=\"js\">\n              {\n`var ohlcData = [\n  {\n    name: \"AAPL\",\n    values: [ { x: [object Date], open: 451.69, high: 456.23, low: 435, close: 439.88 },\n              { x: [object Date], open: 437.82, high: 453.21, low: 435.86 , close: 449.83 },\n              ...\n            ]\n  }\n];`\n              }\n              </code>\n            </pre>\n            <pre ref=\"block\">\n              <code className=\"html\">\n                {\n`<CandlestickChart\n  data={ohlcData}\n  width={500}\n  height={400}\n  xAxisTickInterval={{unit: 'month', interval: 1}}\n  yAxisOffset={-10}\n  title=\"Candlestick Chart\"\n  domain={{y:[400, 500]}}\n/>`\n                }\n              </code>\n            </pre>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <hr />\n        </div>\n\n\n\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <BarChart\n                data={barData}\n                grouped={true}\n                width=\"100%\"\n                height={400}\n                viewBoxObject={{\n                  x: 0,\n                  y: 0,\n                  width: 500,\n                  height: 400\n                }}\n                title=\"Scatter Chart\"\n                domain={{ x: [, ], y: [, ] }}\n                title=\"Bar Chart\"\n                yAxisLabel=\"Label\"\n                xAxisLabel=\"Value\"\n                gridHorizontal={true}\n                gridVertical={true}\n            />\n          </div>\n          <div className=\"col-md-6\">\n            <pre ref=\"block\">\n              <code className=\"js\">\n              {`var barData = [\n  {\n    \"name\": \"Series A\",\n    \"values\": [\n      { \"x\": 1, \"y\":  91},\n      ...\n  },\n  {\n    \"name\": \"Series B\",\n     \"values\": [ ... ]\n  }\n  ...\n];`}\n              </code>\n            </pre>\n            <pre ref=\"block\">\n              <code className=\"html\">\n                {`<BarChart\n  data={barData}\n  width={500}\n  height={200}\n  fill={'#3182bd'}\n  title='Bar Chart'\n  yAxisLabel='Label'\n  xAxisLabel='Value'\n/>`}\n              </code>\n            </pre>\n          </div>\n\n        <div className=\"row\">\n          <h3 className=\"page-header\">reactjs-d3js: Single series charts</h3>\n        </div>\n\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <PieChart\n            data={pieData}\n            width={450}\n            height={400}\n            radius={110}\n            innerRadius={20}\n            sectorBorderColor=\"white\"\n            title=\"Pie Chart\" />\n          </div>\n          <div className=\"col-md-6\">\n            <pre ref=\"block\">\n              <code className=\"js\">\n              {\n`var pieData = [\n  {label: 'Margarita', value: 20.0},\n  {label: 'John', value: 55.0},\n  {label: 'Tim', value: 25.0 }\n];`\n              }\n              </code>\n            </pre>\n            <pre ref=\"block\">\n              <code className=\"html\">\n                {\n`<PieChart\n  data={pieData}\n  width={400}\n  height={400}\n  radius={100}\n  innerRadius={20}\n  sectorBorderColor=\"white\"\n  title=\"Pie Chart\"\n/>`\n                }\n              </code>\n            </pre>\n          </div>\n        </div>\n\n\n\n        <div className=\"row\">\n          <hr />\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <Treemap\n              width={450}\n              height={250}\n              title=\"Treemap\"\n              data={treemapData}\n              textColor=\"#484848\"\n              fontColor=\"12px\"\n              hoverAnimation={false}\n            />\n          </div>\n          <div className=\"col-md-6\">\n            <pre ref=\"block\">\n              <code className=\"js\">\n              {\n`//2014 World Most Populous Countries (millions)\n//http://www.prb.org/pdf14/2014-world-population-data-sheet_eng.pdf\nvar treemapData = [\n  {label: \"China\", value: 1364},\n  {label: \"India\", value: 1296},\n...\n  {label: \"Brazil\", value: 203}\n];`\n              }\n              </code>\n            </pre>\n            <pre ref=\"block\">\n              <code className=\"html\">\n                {\n`<Treemap\n  data={treemapData}\n  width={450}\n  height={250}\n  textColor=\"#484848\"\n  fontSize=\"12px\"\n  title=\"Treemap\"\n  hoverAnimation={false}\n/>`\n                }\n              </code>\n            </pre>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n\n});\n\nReactDOM.render(\n  <Demos />,\n  document.getElementById('app')\n);\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Area',\n\n  propTypes: {\n    path: PropTypes.string,\n    fill: PropTypes.string,\n    handleMouseOver: PropTypes.func,\n    handleMouseLeave: PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: '#3182bd',\n    };\n  },\n\n  render() {\n    return (\n      <path\n        className=\"rd3-areachart-area\"\n        d={this.props.path}\n        fill={this.props.fill}\n        onMouseOver={this.props.handleMouseOver}\n        onMouseLeave={this.props.handleMouseLeave}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst DataSeries = require('./DataSeries');\nconst { Chart, XAxis, YAxis, XGrid, YGrid } = require('../common');\nconst { CartesianChartPropsMixin, DefaultAccessorsMixin, ViewBoxMixin } = require('../mixins');\n\nmodule.exports = createReactClass({\n\n  displayName: 'AreaChart',\n\n  propTypes: {\n    margins: PropTypes.object,\n    interpolate: PropTypes.bool,\n    interpolationType: PropTypes.string,\n    hoverAnimation: PropTypes.bool,\n    data: PropTypes.array.isRequired,\n  },\n\n  mixins: [CartesianChartPropsMixin, DefaultAccessorsMixin, ViewBoxMixin],\n\n  getDefaultProps() {\n    return {\n      colors: d3.scaleOrdinal(d3.schemeBlues[3].reverse()),\n      // colors: d3.scaleOrdinal(d3.schemePastel2),\n\n      margins: { top: 10, right: 20, bottom: 40, left: 45 },\n      yAxisTickCount: 4,\n      interpolate: false,\n      interpolationType: null,\n      className: 'rd3-areachart',\n      hoverAnimation: true,\n      data: [],\n    };\n  },\n\n  render() {\n    const props = this.props;\n    let data = props.data;\n    const interpolationType =\n      props.interpolationType ||\n      (props.interpolate ? 'cardinal' : 'linear');\n\n    const { innerWidth, innerHeight, trans, svgMargins } = this.getDimensions();\n    const yOrient = this.getYOrient();\n\n    if (!Array.isArray(data)) {\n      data = [data];\n    }\n    if (this.props.data && this.props.data.length < 1) {\n      return null;\n    }\n\n    const yScale = d3.scaleLinear()\n      .range([innerHeight, 0]);\n\n    const xValues = [];\n    const yValues = [];\n    // const seriesNames = [];\n    // const yMaxValues = [];\n    const domain = props.domain || {};\n    const xDomain = domain.x || [];\n    const yDomain = domain.y || [];\n    const seriesNames = Object.keys(data[0]).filter( f => f !== 'date') || [];\n\n    const yMaxValues = d3.sum(seriesNames.map( n => {\n        return d3.max(data.map( d => { return d[n]}))\n    }))\n\n\n    /* TODO - generalize. Only acceptint field date for x axis*/\n    data.map( d => {\n      xValues.push(d.date);\n    })\n\n\n    let xScale;\n    if (xValues.length > 0 &&\n      Object.prototype.toString.call(xValues[0]) === '[object Date]' &&\n      props.xAxisTickInterval) {\n      xScale = d3.scaleTime()\n        .range([0, innerWidth]);\n    } else {\n      xScale = d3.scaleLinear()\n        .range([0, innerWidth]);\n    }\n\n    const xdomain = d3.extent(xValues);\n    if (xDomain[0] !== undefined && xDomain[0] !== null) xdomain[0] = xDomain[0];\n    if (xDomain[1] !== undefined && xDomain[1] !== null) xdomain[1] = xDomain[1];\n    xScale.domain(xdomain);\n    const ydomain = [0, yMaxValues];\n    if (yDomain[0] !== undefined && yDomain[0] !== null) ydomain[0] = yDomain[0];\n    if (yDomain[1] !== undefined && yDomain[1] !== null) ydomain[1] = yDomain[1];\n\n    yScale.domain(ydomain);\n\n    const colorsDomain = Array.from(Array(seriesNames.length).keys())\n    props.colors.domain(colorsDomain);\n\n    const stack = d3.stack()\n    stack.keys(seriesNames)\n\n    const layers = stack(data)\n    const dataSeries = layers.map((d, idx) => (\n        <DataSeries\n        key={idx}\n        fill={props.colors(props.colorAccessorOrdinal(d, idx))}\n        // seriesName={d.name}\n        index={idx}\n        xScale={xScale}\n        yScale={yScale}\n        data={d}\n        xAccessor={props.xAccessor}\n        yAccessor={props.yAccessor}\n        interpolationType={interpolationType}\n        hoverAnimation={props.hoverAnimation}\n      />\n\n    ));\n\n    return (\n      <Chart\n        viewBox={this.getViewBox()}\n        legend={props.legend}\n        data={data}\n        margins={props.margins}\n        width={props.width}\n        height={props.height}\n        title={props.title}\n      >\n        <g transform={trans} className={props.className}>\n        <XGrid\n            xAxisClassName=\"rd3-areachart-xaxis\"\n            xScale={xScale}\n            xAxisTickValues={props.xAxisTickValues}\n            xAxisTickInterval={props.xAxisTickInterval}\n            xAxisTickCount={props.xAxisTickCount}\n            xAxisLabel={props.xAxisLabel}\n            xAxisLabelOffset={props.xAxisLabelOffset}\n            tickFormatting={props.xAxisFormatter}\n            tickStroke={props.xAxisTickStroke}\n            tickTextStroke={props.xAxisTickTextStroke}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={innerHeight}\n            horizontalChart={props.horizontal}\n            gridVertical={props.gridVertical}\n            gridVerticalStroke={props.gridVerticalStroke}\n            gridVerticalStrokeWidth={props.gridVerticalStrokeWidth}\n            gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n          />\n          <YGrid\n            yAxisClassName=\"rd3-areachart-yaxis\"\n            yScale={yScale}\n            yAxisTickValues={props.yAxisTickValues}\n            yAxisTickInterval={props.yAxisTickInterval}\n            yAxisTickCount={props.yAxisTickCount}\n            yAxisLabel={props.yAxisLabel}\n            yAxisLabelOffset={props.yAxisLabelOffset}\n            tickFormatting={props.yAxisFormatter}\n            tickStroke={props.yAxisTickStroke}\n            tickTextStroke={props.yAxisTickTextStroke}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={props.height}\n            horizontalChart={props.horizontal}\n            gridHorizontal={props.gridHorizontal}\n            gridHorizontalStroke={props.gridHorizontalStroke}\n            gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n            gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n          />\n          {dataSeries}\n          <XAxis\n            xAxisClassName=\"rd3-areachart-xaxis\"\n            xScale={xScale}\n            xAxisTickValues={props.xAxisTickValues}\n            xAxisTickInterval={props.xAxisTickInterval}\n            xAxisTickCount={props.xAxisTickCount}\n            xAxisLabel={props.xAxisLabel}\n            xAxisLabelOffset={props.xAxisLabelOffset}\n            tickFormatting={props.xAxisFormatter}\n            tickStroke={props.xAxisTickStroke}\n            tickTextStroke={props.xAxisTickTextStroke}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={innerHeight}\n            horizontalChart={props.horizontal}\n            gridVertical={props.gridVertical}\n            gridVerticalStroke={props.gridVerticalStroke}\n            gridVerticalStrokeWidth={props.gridVerticalStrokeWidth}\n            gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n          />\n          <YAxis\n            yAxisClassName=\"rd3-areachart-yaxis\"\n            yScale={yScale}\n            yAxisTickValues={props.yAxisTickValues}\n            yAxisTickInterval={props.yAxisTickInterval}\n            yAxisTickCount={props.yAxisTickCount}\n            yAxisLabel={props.yAxisLabel}\n            yAxisLabelOffset={props.yAxisLabelOffset}\n            tickFormatting={props.yAxisFormatter}\n            tickStroke={props.yAxisTickStroke}\n            tickTextStroke={props.yAxisTickTextStroke}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={props.height}\n            horizontalChart={props.horizontal}\n            gridHorizontal={props.gridHorizontal}\n            gridHorizontalStroke={props.gridHorizontalStroke}\n            gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n            gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n          />\n        </g>\n      </Chart>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst shade = require('../utils').shade;\nconst Area = require('./Area');\n\nmodule.exports = createReactClass({\n\n  displayName: 'AreaContainer',\n\n  propTypes: {\n    fill: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: '#3182bd',\n    };\n  },\n\n  getInitialState() {\n    return {\n      fill: this.props.fill,\n    };\n  },\n\n  _animateArea() {\n    this.setState({\n      fill: shade(this.props.fill, 0.02),\n    });\n  },\n\n  _restoreArea() {\n    this.setState({\n      fill: this.props.fill,\n    });\n  },\n\n  render() {\n    const props = this.props;\n\n    // animation controller\n    let handleMouseOver;\n    let handleMouseLeave;\n    if (props.hoverAnimation) {\n      handleMouseOver = this._animateArea;\n      handleMouseLeave = this._restoreArea;\n    } else {\n      handleMouseOver = handleMouseLeave = null;\n    }\n\n    return (\n      <Area\n        handleMouseOver={handleMouseOver}\n        handleMouseLeave={handleMouseLeave}\n        {...props}\n        fill={this.state.fill}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst AreaContainer = require('./AreaContainer');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    fill: PropTypes.string,\n    interpolationType: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      interpolationType: 'linear',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const area = d3.area()\n    .x((d) => props.xScale(d.data.date))\n    .y0((d) => props.yScale(d[0]))\n    .y1((d) => props.yScale(d[1]))\n    .curve(d3.curveCatmullRom.alpha(0.5));\n\n    const path = area(props.data);\n\n    return (\n      <AreaContainer\n        fill={props.fill}\n        hoverAnimation={props.hoverAnimation}\n        path={path}\n      />\n    );\n  },\n});\n","\nexports.AreaChart = require('./AreaChart');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  propTypes: {\n    fill: PropTypes.string,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    x: PropTypes.number,\n    y: PropTypes.number,\n    className: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      offset: 0,\n      className: 'rd3-barchart-bar',\n    };\n  },\n\n  render() {\n    return (\n      <rect\n        className=\"rd3-barchart-bar\"\n        {...this.props}\n        fill={this.props.fill}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst DataSeries = require('./DataSeries');\nconst { Chart, XAxis, XGrid, YGrid, YAxis, Tooltip } = require('../common');\nconst {\n  CartesianChartPropsMixin,\n  DefaultAccessorsMixin,\n  ViewBoxMixin,\n  TooltipMixin,\n} = require('../mixins');\n\nmodule.exports = createReactClass({\n\n  displayName: 'BarChart',\n\n  propTypes: {\n    chartClassName: PropTypes.string,\n    data: PropTypes.array.isRequired,\n    hoverAnimation: PropTypes.bool,\n    margins: PropTypes.object,\n    rangeRoundBandsPadding: PropTypes.number,\n    // https://github.com/mbostock/d3/wiki/Stack-Layout#offset\n    stackOffset: PropTypes.oneOf(['silhouette', 'expand', 'wigget', 'zero']),\n    grouped: PropTypes.bool,\n    valuesAccessor: PropTypes.func,\n    xAccessorBar: PropTypes.func,\n    yAccessorBar: PropTypes.func,\n    y0Accessor: PropTypes.func,\n    title: PropTypes.string,\n    xAxisClassName: PropTypes.string,\n    yAxisClassName: PropTypes.string,\n    yAxisTickCount: PropTypes.number,\n    xIsDate: PropTypes.bool,\n    color: PropTypes.object,\n  },\n\n\n\n\n  mixins: [CartesianChartPropsMixin, DefaultAccessorsMixin, ViewBoxMixin, TooltipMixin],\n\n  getDefaultProps() {\n    return {\n      chartClassName: 'rd3-barchart',\n      hoverAnimation: true,\n      margins: { top: 10, right: 20, bottom: 40, left: 45 },\n      rangeRoundBandsPadding: 0.25,\n      stackOffset: 'zero',\n      grouped: false,\n      valuesAccessor: d => d,\n      y0Accessor: d => d[0],\n      xAxisClassName: 'rd3-barchart-xaxis',\n      yAxisClassName: 'rd3-barchart-yaxis',\n      yAxisTickCount: 4,\n      xIsDate: false,\n      color: {acessor:null, colors:null}\n    };\n  },\n\n\n  getInitialState() {\n    return {\n      color: {\n        accessor: this.props.color.accessor === 'Sequential'\n                    ? this.props.colorAccessorSequential\n                    : this.props.colorAccessorOrdinal,\n        colors: this.props.color.colors ||  d3.scaleOrdinal(d3.schemeGnBu[9].reverse())\n      }\n    }\n  },\n\n\n  _getLabels(firstSeries) {\n    // we only need first series to get all the labels\n    const { valuesAccessor, xAccessorBar } = this.props;\n    return valuesAccessor(firstSeries).map(xAccessorBar);\n  },\n\n  _stack(seriesNames) {\n    // Only support columns with all positive or all negative values\n    // https://github.com/mbostock/d3/issues/2265\n    const { stackOffset, xAccessorBar, yAccessorBar, valuesAccessor } = this.props;\n    return d3.stack()\n              .keys(seriesNames)\n              .order(d3.stackOrderNone)\n              .offset(d3.stackOffsetNone);\n  },\n\n  render() {\n    const props = this.props;\n    const yOrient = this.getYOrient();\n\n    const domain = props.domain || {};\n\n    if (props.data.length === 0) {\n      return null;\n    }\n\n    const _array = props.data\n    const dataDict = {}\n\n    _array.map( (elem, idxE) => {\n        let bar;\n        props.xIsDate ? bar = new Date(elem.x).toLocaleDateString() : bar = elem.x;\n        if (typeof dataDict[bar] === 'undefined'){\n          dataDict[bar] = {'x':bar, [elem.name]:+elem.y}\n        }else{\n          dataDict[bar][elem.name] = +elem.y\n        }\n    })\n    const data = Object.keys(dataDict).map(function(key){\n        return dataDict[key];\n    });\n\n    let series = new Set(props.data.map((item) => item.name));\n    series = Array.from(series);\n    const _data = this._stack(series)(data);\n    const { innerHeight, innerWidth, trans, svgMargins } = this.getDimensions();\n\n    const xScale = d3.scaleBand()\n    .domain(data.map(d => d.x))\n    .paddingInner(0.1)\n    .paddingOuter(0.1)\n    .range([0, innerWidth])\n\n    const minYDomain = Math.min(0, d3.min(_data, (d) => (d[1])))\n    const maxYDomain = d3.max(_data, (d) => (d[1]))\n    const yDomain = ([d3.min(_data, d => d3.min(d, d => d[1])), d3.max(_data, d => d3.max(d, d => d[1]))])\n    const yScale = d3.scaleLinear().range([innerHeight, 0]).domain(yDomain);\n\n    const origArray = [...Array(data.length).keys()];\n    let colorsDomain;\n    this.props.color.accessor === 'Sequential'\n      ? colorsDomain = origArray.map(x => x / data.length)\n      : colorsDomain = series\n\n    return (\n      <span>\n        <Chart\n          viewBox={this.getViewBox()}\n          legend={props.legend}\n          data={props.data}\n          margins={props.margins}\n          colors={this.state.color.colors}\n          colorAccessor={this.state.color.accessor}\n          colorsDomain={colorsDomain}\n          width={props.width}\n          height={props.height}\n          title={props.title}\n          shouldUpdate={!this.state.changeState}\n          series={series}\n          legendStyle={props.legendStyle}\n          background={props.background}\n          svgTitle={props.svgTitle}\n        >\n          <g transform={trans} className={props.chartClassName}>\n            <XGrid\n              xAxisClassName={props.xAxisClassName}\n              xAxisTickValues={props.xAxisTickValues}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              xScale={xScale}\n              margins={svgMargins}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              gridVertical={props.gridVertical}\n              gridVerticalStroke={props.gridVerticalStroke}\n              gridVerticalStrokeWidth={props.gridVerticalStrokeWidth}\n              gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n              gridText={props.gridText}\n            />\n            <YGrid\n              yAxisClassName={props.yAxisClassName}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              yScale={yScale}\n              margins={svgMargins}\n              yAxisTickCount={props.yAxisTickCount}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              gridHorizontal={props.gridHorizontal}\n              gridHorizontalStroke={props.gridHorizontalStroke}\n              gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n              gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n              gridText={props.gridText}\n            />\n            <DataSeries\n              yScale={yScale}\n              xScale={xScale}\n              margins={svgMargins}\n              _data={_data}\n              series={series}\n              width={innerWidth}\n              height={innerHeight}\n              grouped={props.grouped}\n              colors={this.state.color.colors}\n              colorsDomain={colorsDomain}\n              colorAccessor={this.state.color.accessor}\n              hoverAnimation={props.hoverAnimation}\n              valuesAccessor={props.valuesAccessor}\n              xAccessorBar={props.xAccessorBar}\n              yAccessorBar={props.yAccessorBar}\n              y0Accessor={props.y0Accessor}\n              onMouseOver={this.onMouseOver}\n              onMouseLeave={this.onMouseLeave}\n            />\n            <YAxis\n              yAxisClassName={props.yAxisClassName}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              yScale={yScale}\n              margins={svgMargins}\n              yAxisTickCount={props.yAxisTickCount}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n            />\n            <XAxis\n              xAxisClassName={props.xAxisClassName}\n              xAxisTickValues={props.xAxisTickValues}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              xScale={xScale}\n              margins={svgMargins}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n            />\n\n\n\n          </g>\n        </Chart>\n        {(props.showTooltip ? <Tooltip {...this.state.tooltip} /> : null)}\n      </span>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst { findDOMNode } = require('react-dom');\nconst Bar = require('./Bar');\nconst shade = require('../utils').shade;\n\n\nmodule.exports = createReactClass({\n\n  propTypes: {\n    fill: PropTypes.string,\n    onMouseOver: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    // dataPoint: PropTypes.any, // TODO: prop types?\n  },\n\n  getDefaultProps() {\n    return {\n      fill: '#000000',\n    };\n  },\n\n  getInitialState() {\n    return {\n      // fill is named as fill instead of initialFill to avoid\n      // confusion when passing down props from top parent\n      fill: this.props.fill,\n    };\n  },\n\n  _animateBar() {\n    const rect = findDOMNode(this).getBoundingClientRect();\n    this.props.onMouseOver.call(this, rect.right, rect.top, this.props.datapoint);\n    this.setState({\n      fill: shade(this.props.fill, 0.2),\n    });\n  },\n\n  _restoreBar() {\n    this.props.onMouseLeave.call(this);\n    this.setState({\n      fill: this.props.fill,\n    });\n  },\n\n  render() {\n    const props = this.props;\n\n    // animation controller\n    let handleMouseOver;\n    let handleMouseLeave;\n    if (props.hoverAnimation) {\n      handleMouseOver = this._animateArea;\n      handleMouseLeave = this._restoreArea;\n    } else {\n      handleMouseOver = handleMouseLeave = null;\n    }\n\n    return (\n      <Bar\n        {...props}\n        fill={this.state.fill}\n        // onMouseOver={handleMouseOver}\n        // onMouseLeave={handleMouseLeave}\n\n\n        onMouseOver={props.hoverAnimation ? this._animateBar : null}\n        onMouseLeave={props.hoverAnimation ? this._restoreBar : null}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst BarContainer = require('./BarContainer');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    _data: PropTypes.array,\n    series: PropTypes.array,\n    grouped: PropTypes.bool,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    height: PropTypes.number,\n    width: PropTypes.number,\n    valuesAccessor: PropTypes.func,\n    xAccessorBar: PropTypes.func,\n    yAccessorBar: PropTypes.func,\n    y0Accessor: PropTypes.func,\n    onMouseOver: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    hoverAnimation: PropTypes.bool, // TODO: prop types?\n    xScale: PropTypes.any,\n    yScale: PropTypes.any,\n  },\n\n  _renderBarSeries() {\n    const { _data, valuesAccessor } = this.props;\n    return _data.map((layer, seriesIdx) => (\n      valuesAccessor(layer).map(segment => this._renderBarContainer(segment, seriesIdx))\n    ));\n  },\n\n  _renderBarContainer(segment, seriesIdx) {\n    const { colors, colorAccessor, colorsDomain, grouped, series, xScale, yScale } = this.props;\n    const barHeight = Math.abs(yScale(this.props.y0Accessor(segment)) - yScale(this.props.yAccessorBar(segment)));\n    const yWidth = yScale(this.props.y0Accessor(segment) + this.props.yAccessorBar(segment));\n    const y = grouped ? yScale(this.props.yAccessorBar(segment)) : yWidth;\n    const key = this.props.series[seriesIdx] + segment.data.x +segment[1];\n\n    return (\n      <BarContainer\n        key={key}\n        height={barHeight}\n        width={xScale.bandwidth() }\n        x={ xScale(this.props.xAccessorBar(segment)) }\n        y={(this.props.yAccessorBar(segment) >= 0) ? y : y - barHeight}\n        fill={this.props.colors(this.props.colorAccessor(colorsDomain, seriesIdx))}\n        hoverAnimation={this.props.hoverAnimation}\n        onMouseOver={this.props.onMouseOver}\n        onMouseLeave={this.props.onMouseLeave}\n        datapoint={{\n          xValue: this.props.xAccessorBar(segment),\n          yValue: this.props.yAccessorBar(segment),\n          seriesName: this.props.series[seriesIdx],\n        }}\n      />\n    );\n  },\n\n  render() {\n    return (\n      <g>{this._renderBarSeries()}</g>\n    );\n  },\n});\n","\nexports.BarChart = require('./BarChart');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Candle',\n\n  propTypes: {\n    className: PropTypes.string,\n    shapeRendering: PropTypes.string,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.number,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-candlestick-candle',\n      shapeRendering: 'crispEdges',\n      stroke: '#000',\n      strokeWidth: 1,\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    return (\n      <rect\n        className={props.className}\n        fill={props.candleFill}\n        x={props.candleX}\n        y={props.candleY}\n        stroke={props.candleFill}\n        strokeWidth={props.strokeWidth}\n        style={{ shapeRendering: props.shapeRendering }}\n        width={props.candleWidth}\n        height={props.candleHeight}\n        onMouseOver={props.handleMouseOver}\n        onMouseLeave={props.handleMouseLeave}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst utils = require('../utils');\nconst DataSeries = require('./DataSeries');\nconst { Chart, XAxis, YAxis, XGrid, YGrid } = require('../common');\nconst { ViewBoxMixin, CartesianChartPropsMixin } = require('../mixins');\n\nmodule.exports = createReactClass({\n\n  displayName: 'CandleStickChart',\n\n  propTypes: {\n    data: PropTypes.oneOfType([\n      PropTypes.array,\n      PropTypes.object,\n    ]),\n    fillUp: PropTypes.func,\n    fillUpAccessor: PropTypes.func,\n    fillDown: PropTypes.func,\n    fillDownAccessor: PropTypes.func,\n    hoverAnimation: PropTypes.bool,\n    xAxisFormatter: PropTypes.func,\n    xAxisTickInterval: PropTypes.object,\n    xAxisTickValues: PropTypes.array,\n    yAxisFormatter: PropTypes.func,\n    yAxisTickCount: PropTypes.number,\n    yAxisTickValues: PropTypes.array,\n  },\n\n  mixins: [CartesianChartPropsMixin, ViewBoxMixin],\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-candlestick',\n      xAxisClassName: 'rd3-candlestick-xaxis',\n      yAxisClassName: 'rd3-candlestick-yaxis',\n      data: [],\n      fillUp: () => '#009900',\n      fillUpAccessor: (d, idx) => idx,\n      // fillDown: d3.scaleOrdinal(d3.schemeCategory10),\n      fillDown: () => '#FF3300',\n      fillDownAccessor: (d, idx) => idx,\n      hoverAnimation: true,\n      margins: { top: 10, right: 20, bottom: 30, left: 45 },\n      xAccessor: (d) => d.x,\n      yAccessor: (d) => ({ open: d.open, high: d.high, low: d.low, close: d.close }),\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const { innerWidth, innerHeight, trans, svgMargins } = this.getDimensions();\n    const yOrient = this.getYOrient();\n    const domain = props.domain || {};\n\n    if (!Array.isArray(props.data)) {\n      props.data = [props.data];\n    }\n    if (this.props.data && this.props.data.length < 1) {\n      return null;\n    }\n    const flattenedData = utils.flattenData(props.data, props.xAccessor, props.yAccessor);\n\n    const xValues = flattenedData.xValues;\n    const yValues = flattenedData.yValues;\n    const scales = utils.calculateScales(\n      innerWidth, innerHeight, xValues, yValues, domain.x, domain.y);\n\n    const dataSeries = props.data.map((series, idx) => (\n        <DataSeries\n          key={idx}\n          seriesName={series.name}\n          index={idx}\n          xScale={scales.xScale}\n          yScale={scales.yScale}\n          data={series.values}\n          fillUp={props.fillUp(props.fillUpAccessor(series, idx))}\n          fillDown={props.fillDown(props.fillDownAccessor(series, idx))}\n          xAccessor={props.xAccessor}\n          yAccessor={props.yAccessor}\n          hoverAnimation={props.hoverAnimation}\n        />\n      )\n    );\n\n    return (\n      <Chart\n        viewBox={this.getViewBox()}\n        width={props.width}\n        height={props.height}\n        margins={props.margins}\n        title={props.title}\n      >\n        <g transform={trans} className={props.className}>\n            <XGrid\n              xAxisClassName={props.xAxisClassName}\n              xAxisTickValues={props.xAxisTickValues}\n              xAxisTickCount={props.xAxisTickCount}\n              xAxisTickInterval={props.xAxisTickInterval}\n              xAxisOffset={props.xAxisOffset}\n              xScale={scales.xScale}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              data={props.data}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridVertical={props.gridVertical}\n              gridVerticalStroke={props.gridVerticalStroke}\n              gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n            />\n            <YGrid\n              yAxisClassName={props.yAxisClassName}\n              yScale={scales.yScale}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisTickCount={props.yAxisTickCount}\n              yAxisOffset={props.yAxisOffset}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridHorizontal={props.gridHorizontal}\n              gridHorizontalStroke={props.gridHorizontalStroke}\n              gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n              gridHorizontalStrokeDash={props.gridVerticalStrokeDash}\n            />\n          {dataSeries}\n          <XAxis\n            xAxisClassName={props.xAxisClassName}\n            xScale={scales.xScale}\n            xAxisTickValues={props.xAxisTickValues}\n            xAxisTickInterval={props.xAxisTickInterval}\n            xAxisOffset={props.xAxisOffset}\n            tickFormatting={props.xAxisFormatter}\n            tickStroke={props.xAxisTickStroke}\n            tickTextStroke={props.xAxisTickTextStroke}\n            xAxisLabel={props.xAxisLabel}\n            xAxisLabelOffset={props.xAxisLabelOffset}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={innerHeight}\n            horizontalChart={props.horizontal}\n          />\n          <YAxis\n            yAxisClassName={props.yAxisClassName}\n            yScale={scales.yScale}\n            yAxisTickValues={props.yAxisTickValues}\n            yAxisOffset={props.yAxisOffset}\n            yAxisTickCount={props.yAxisTickCount}\n            tickFormatting={props.yAxisFormatter}\n            tickStroke={props.yAxisTickStroke}\n            tickTextStroke={props.yAxisTickTextStroke}\n            yAxisLabel={props.yAxisLabel}\n            yAxisLabelOffset={props.yAxisLabelOffset}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={props.height}\n            horizontalChart={props.horizontal}\n          />\n        </g>\n      </Chart>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst utils = require('../utils');\nconst Candle = require('./Candle');\nconst Wick = require('./Wick');\n\nmodule.exports = createReactClass({\n\n  displayName: 'CandleStickContainer',\n\n  propTypes: {\n    candleX: PropTypes.number,\n    candleY: PropTypes.number,\n    className: PropTypes.string,\n    candleFill: PropTypes.string,\n    candleHeight: PropTypes.number,\n    candleWidth: PropTypes.number,\n    wickX1: PropTypes.number,\n    wickX2: PropTypes.number,\n    wickY1: PropTypes.number,\n    wickY2: PropTypes.number,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-candlestick-container',\n    };\n  },\n\n  getInitialState() {\n    // state for animation usage\n    return {\n      candleWidth: this.props.candleWidth,\n      candleFill: this.props.candleFill,\n    };\n  },\n\n  _animateCandle() {\n    this.setState({\n      candleWidth: this.props.candleWidth * 1.5,\n      candleFill: utils.shade(this.props.candleFill, -0.2),\n    });\n  },\n\n  _restoreCandle() {\n    this.setState({\n      candleWidth: this.props.candleWidth,\n      candleFill: this.props.candleFill,\n    });\n  },\n\n  render() {\n    const props = this.props;\n    const state = this.state;\n\n    // animation controller\n    let handleMouseOver;\n    let handleMouseLeave;\n    if (props.hoverAnimation) {\n      handleMouseOver = this._animateCandle;\n      handleMouseLeave = this._restoreCandle;\n    } else {\n      handleMouseOver = handleMouseLeave = null;\n    }\n\n    return (\n      <g className={props.className}>\n       <Wick\n         wickX1={props.wickX1}\n         wickX2={props.wickX2}\n         wickY1={props.wickY1}\n         wickY2={props.wickY2}\n       />\n       <Candle\n         candleFill={state.candleFill}\n         candleWidth={state.candleWidth}\n         candleX={props.candleX - ((state.candleWidth - props.candleWidth) / 2)}\n         candleY={props.candleY}\n         candleHeight={props.candleHeight}\n         handleMouseOver={handleMouseOver}\n         handleMouseLeave={handleMouseLeave}\n       />\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst CandlestickContainer = require('./CandlestickContainer');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    fillUp: PropTypes.string.isRequired,\n    fillDown: PropTypes.string.isRequired,\n  },\n\n  render() {\n    const props = this.props;\n\n    const xRange = props.xScale.range();\n    const width = Math.abs(xRange[0] - xRange[1]);\n    const candleWidth = (width / (props.data.length + 2)) * 0.5;\n\n    const dataSeriesArray = props.data.map((d, idx) => {\n      // Candles\n      const ohlc = props.yAccessor(d);\n      const candleX = props.xScale(props.xAccessor(d)) - 0.5 * candleWidth;\n      const candleY = props.yScale(Math.max(ohlc.open, ohlc.close));\n      const candleHeight = Math.abs(props.yScale(ohlc.open) - props.yScale(ohlc.close));\n      const wickY2 = props.yScale(ohlc.low);\n      const candleFill = (ohlc.open <= ohlc.close) ? props.fillUp : props.fillDown;\n\n      // Wicks\n      const wickX1 = props.xScale(props.xAccessor(d));\n      const wickY1 = props.yScale(ohlc.high);\n      const wickX2 = wickX1;\n\n      return (\n        <CandlestickContainer\n          key={idx}\n          candleFill={candleFill}\n          candleHeight={candleHeight}\n          candleWidth={candleWidth}\n          candleX={candleX}\n          candleY={candleY}\n          wickX1={wickX1}\n          wickX2={wickX2}\n          wickY1={wickY1}\n          wickY2={wickY2}\n          hoverAnimation={props.hoverAnimation}\n        />\n      );\n    }, this);\n\n    return (\n      <g>\n        {dataSeriesArray}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Wick',\n\n  propTypes: {\n    className: PropTypes.string,\n    shapeRendering: PropTypes.string,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.number,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-candlestick-wick',\n      stroke: '#666666',\n      strokeWidth: 1,\n      shapeRendering: 'crispEdges',\n    };\n  },\n\n  render() {\n    const props = this.props;\n    return (<line\n      stroke={props.stroke}\n      strokeWidth={props.strokeWidth}\n      // style={{ shapeRendering: props.shapeRendering }}\n      className={props.className}\n      x1={props.wickX1}\n      y1={props.wickY1}\n      x2={props.wickX2}\n      y2={props.wickY2}\n    />);\n  },\n});\n","\nexports.CandlestickChart = require('./CandlestickChart');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\n\nmodule.exports = createReactClass({\n\n  displayName: 'Legend',\n\n  propTypes: {\n    className: PropTypes.string,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    data: PropTypes.array.isRequired,\n    itemClassName: PropTypes.string,\n    margins: PropTypes.object,\n    text: PropTypes.string,\n    width: PropTypes.number.isRequired,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-legend',\n      color: d3.scaleOrdinal(d3.schemeCategory10),\n      colorAccessor: (d, idx) => idx,\n      itemClassName: 'rd3-legend-item',\n      text: '#000',\n      legendStyle: {\n                textStyle:{\n                  fontSize: '50%',\n                  verticalAlign: 'top',\n                },\n                bulletStyle:{\n                  lineHeight: '60%',\n                  fontSize: '200%',\n                }\n              }\n    }\n  },\n\n  render() {\n    const props = this.props;\n\n    // debugger;\n\n    const textStyle = props.legendStyle.textStyle;\n    const legendItems = [];\n\n\n    /* TODO - Legado !!!\n      Deixar a entrada de dados flat para todos os graficos.\n    */\n    if (props.series !== undefined){\n\n    props.series.map( (serie, idx) => {\n      let itemStyle = Object.assign({},props.legendStyle.bulletStyle)\n      itemStyle.color = props.colors(props.colorAccessor(props.colorsDomain, idx));\n\n      legendItems.push(\n        <li\n          key={idx}\n          className={props.itemClassName}\n          style={itemStyle}\n        >\n          <span\n            style={textStyle}\n          >\n            {serie}\n          </span>\n        </li>\n      );\n\n    })\n\n  }else{\n    props.data.forEach((series, idx) => {\n      let itemStyle = Object.assign({},props.legendStyle.bulletStyle)\n      itemStyle.color = props.colors(props.colorAccessor(series, idx));\n\n      legendItems.push(\n        <li\n          key={idx}\n          className={props.itemClassName}\n          style={itemStyle}\n        >\n          <span\n            style={textStyle}\n          >\n            {series.name}\n          </span>\n        </li>\n      );\n    });\n  }\n\n\n    const topMargin = props.margins.top;\n\n    const legendBlockStyle = {\n      wordWrap: 'break-word',\n      width: props.width,\n      paddingLeft: 0,\n      marginBottom: 0,\n      marginTop: topMargin,\n      listStylePosition: 'inside',\n    };\n\n    return (\n      <ul\n        className={props.className}\n        style={legendBlockStyle}\n      >\n        {legendItems.reverse()}\n      </ul>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  // TODO: PropTypes.any\n  propTypes: {\n    structure: PropTypes.any,\n    id: PropTypes.any,\n    vnode: PropTypes.any,\n  },\n\n  _animateCircle() {\n    this.props.structure.cursor('voronoi').cursor(this.props.id).update(() => 'active');\n    // this.props.pubsub.emit('animate', this.props.id);\n  },\n\n  _restoreCircle() {\n    this.props.structure.cursor('voronoi').cursor(this.props.id).update(() => 'inactive');\n    // this.props.pubsub.emit('restore', this.props.id);\n  },\n\n  _drawPath(d) {\n    if (d === undefined) {\n      return '';\n    }\n    return `M${d.join(',')}Z`;\n  },\n\n  render() {\n    return (<path\n      onMouseOver={this._animateCircle}\n      onMouseOut={this._restoreCircle}\n      fill=\"white\"\n      opacity=\"0\"\n      d={this._drawPath(this.props.vnode)}\n    />);\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  propTypes: {\n    x: PropTypes.number,\n    y: PropTypes.number,\n    child: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.element,\n    ]),\n    show: PropTypes.bool,\n  },\n\n  render() {\n    const props = this.props;\n    const display = this.props.show ? 'inherit' : 'none';\n    const containerStyles = {\n      position: 'fixed',\n      top: props.y,\n      left: props.x,\n      display,\n      opacity: 0.8,\n    };\n\n    // TODO: add 'right: 0px' style when tooltip is off the chart\n    const tooltipStyles = {\n      position: 'absolute',\n      backgroundColor: 'white',\n      border: '1px solid',\n      borderColor: '#ddd',\n      borderRadius: '2px',\n      padding: '10px',\n      marginLeft: '10px',\n      marginRight: '10px',\n      marginTop: '-15px',\n    };\n    return (\n      <div style={containerStyles}>\n        <div style={tooltipStyles}>\n          {props.child}\n        </div>\n      </div>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\nconst d3 = require('d3');\nconst Polygon = require('./Polygon');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Voronoi',\n\n  // TODO: PropTypes.any\n  propTypes: {\n    xScale: PropTypes.any,\n    yScale: PropTypes.any,\n    width: PropTypes.any,\n    height: PropTypes.any,\n    structure: PropTypes.any,\n    data: PropTypes.any,\n  },\n\n  render() {\n    const xScale = this.props.xScale;\n    const yScale = this.props.yScale;\n\n    const voronoi = d3.geom.voronoi()\n      .x(d => xScale(d.coord.x))\n      .y(d => yScale(d.coord.y))\n      .clipExtent([[0, 0], [this.props.width, this.props.height]]);\n\n    const regions = voronoi(this.props.data).map((vnode, idx) => (\n      <Polygon structure={this.props.structure} key={idx} id={vnode.point.id} vnode={vnode} />\n    ));\n\n    return (\n      <g>\n        {regions}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'AxisLine',\n\n  propTypes: {\n    scale: PropTypes.func.isRequired,\n    innerTickSize: PropTypes.number,\n    outerTickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickArguments: PropTypes.array,\n    fill: PropTypes.string,\n    stroke: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      innerTickSize: 6,\n      outerTickSize: 6,\n      tickPadding: 3,\n      fill: 'none',\n      tickArguments: [10],\n      tickValues: null,\n      tickFormat: null,\n    };\n  },\n\n\n  _d3_scaleExtent(domain) {\n    const start = domain[0];\n    const stop = domain[domain.length - 1];\n    return start < stop ? [start, stop] : [stop, start];\n  },\n\n  _d3_scaleRange(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : this._d3_scaleExtent(scale.range());\n  },\n\n  render() {\n    const props = this.props;\n    const sign = props.orient === 'top' || props.orient === 'left' ? -1 : 1;\n\n    const range = this._d3_scaleRange(props.scale);\n\n    let d;\n    if (props.orient === 'bottom' || props.orient === 'top') {\n      d = `M${range[0]},${sign * props.outerTickSize}V0H${range[1]}V${sign * props.outerTickSize}`;\n    } else {\n      d = `M${sign * props.outerTickSize},${range[0]}H0V${range[1]}H${sign * props.outerTickSize}`;\n    }\n\n    return (\n      <path\n        className=\"domain\"\n        d={d}\n        style={{ shapeRendering: 'crispEdges' }}\n        // fill={props.fill}\n        fill='none'\n        stroke='#000000'\n        strokeWidth='0.5'\n\n        // stroke={props.stroke}\n        // strokeWidth={props.strokeWidth}\n      >\n      </path>\n    );\n  },\n});\n","'use strict';\n\nconst React = require('react');\nconst PropTypes = require('prop-types');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'AxisTick',\n\n  propTypes: {\n    scale: PropTypes.func.isRequired,\n    orient: PropTypes.oneOf(['top', 'bottom', 'left', 'right']).isRequired,\n    orient2nd: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    horizontal: PropTypes.bool,\n    tickArguments: PropTypes.array,\n    tickValues: PropTypes.array,\n    innerTickSize: PropTypes.number,\n    outerTickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickFormat: PropTypes.func,\n    tickStroke: PropTypes.string,\n    tickTextStroke: PropTypes.string,\n    gridHorizontal: PropTypes.bool,\n    gridVertical: PropTypes.bool,\n    gridHorizontalStroke: PropTypes.string,\n    gridVerticalStroke: PropTypes.string,\n    gridHorizontalStrokeWidth: PropTypes.number,\n    gridVerticalStrokeWidth: PropTypes.number,\n    gridHorizontalStrokeDash: PropTypes.string,\n    gridVerticalStrokeDash: PropTypes.string,\n    gridText:PropTypes.object,\n  },\n  getDefaultProps() {\n    return {\n      innerTickSize: 6,\n      outerTickSize: 6,\n      tickStroke: '#000',\n      tickPadding: 3,\n      tickArguments: [10],\n      tickValues: null,\n      gridHorizontal: false,\n      gridVertical: false,\n      gridHorizontalStroke: '#D8D7D7',\n      gridVerticalStroke: '#D8D7D7',\n      gridHorizontalStrokeWidth: 0.4,\n      gridVerticalStrokeWidth: 0.4,\n      gridHorizontalStrokeDash: '5, 5',\n      gridVerticalStrokeDash: '5, 5',\n      gridText:{rotate:{\n                    top:null,\n                    right:null,\n                    bottom:null,\n                    left:null\n                },\n                translate:{\n                  text:{x:0, y:0},\n                  line:{x:0, y:0}\n                },\n                font:{\n                  size:'1.0em',\n                  weight:'.01'\n                }\n              }\n    };\n  },\n\n  render() {\n    const props = this.props;\n    let tr;\n    let trText;\n    let gridTextRotate;\n    let gridTextFontSize;\n    let gridTextFontWeight;\n    let textAnchor;\n    let textTransform;\n    let tickFormat;\n    let y1;\n    let y2;\n    let dy;\n    let x1;\n    let x2;\n\n    let gridStrokeWidth;\n    let gridStroke;\n    let gridStrokeDashArray;\n    let x2grid;\n    let y2grid;\n    let gridOn = false;\n\n    const sign = props.orient === 'top' || props.orient === 'right' ? -1 : 1;\n    const tickSpacing = Math.max(props.innerTickSize, 0) + props.tickPadding;\n\n    const scale = props.scale;\n\n    let ticks;\n    if (props.tickValues) {\n      ticks = props.tickValues;\n    } else if (scale.ticks) {\n      ticks = scale.ticks.apply(scale, props.tickArguments);\n    } else {\n      ticks = scale.domain();\n    }\n\n    if (props.tickFormatting) {\n      tickFormat = props.tickFormatting;\n    } else if (scale.tickFormat) {\n      tickFormat = scale.tickFormat.apply(scale, props.tickArguments);\n    } else {\n      tickFormat = (d) => d;\n    }\n\n    const adjustedScale = scale.bandwidth ? d => scale(d) + scale.bandwidth() / 2 : scale;\n\n    // Still working on this\n    // Ticks and lines are not fully aligned\n    // in some orientations\n    const adjustedScaleTransTxtX = (tick) => adjustedScale(tick) + props.gridText.translate.text.x;\n\n    switch (props.orient) {\n      case 'top':\n        tr = (tick) => `translate(${adjustedScale(tick)},0)`;\n        trText = (tick) => `translate(${adjustedScale(tick)},0)`;\n        textAnchor = 'middle';\n        y2 = props.innerTickSize * sign;\n        y1 = tickSpacing * sign;\n        dy = sign < 0 ? '0em' : '.71em';\n        x2grid = 0;\n        y2grid = -props.height;\n        gridTextRotate = props.gridText.rotate.top;\n        break;\n      case 'bottom':\n        tr = (tick) => `translate(${adjustedScale(tick)},0)`;\n        trText = (tick) => `translate(${adjustedScaleTransTxtX(tick)},${props.gridText.translate.text.y})`;\n        textAnchor = 'middle';\n        y2 = props.innerTickSize * sign;\n        y1 = tickSpacing * sign;\n        dy = sign < 0 ? '0em' : '.71em';\n        x2grid = 0;\n        y2grid = -props.height;\n        gridTextRotate = props.gridText.rotate.bottom;\n        break;\n      case 'left':\n        tr = (tick) => `translate(0,${adjustedScale(tick)})`;\n        trText = (tick) => `translate(0,${adjustedScale(tick)})`;\n        textAnchor = 'end';\n        x2 = props.innerTickSize * -sign;\n        x1 = tickSpacing * -sign;\n        dy = '.32em';\n        x2grid = props.width;\n        y2grid = 0;\n        gridTextRotate = props.gridText.rotate.left;\n        break;\n      case 'right':\n        tr = (tick) => `translate(0,${adjustedScale(tick)})`;\n        trText = (tick) => `translate(0,${adjustedScale(tick)})`;\n        textAnchor = 'start';\n        x2 = props.innerTickSize * -sign;\n        x1 = tickSpacing * -sign;\n        dy = '.32em';\n        x2grid = -props.width;\n        y2grid = 0;\n        gridTextRotate = props.gridText.rotate.right;\n        break;\n      default:\n        break;\n    }\n\n    if (props.horizontalChart) {\n      textTransform = 'rotate(-90)';\n      [y1, x1] = [x1, -y1 || 0];\n\n      switch (props.orient) {\n        case 'top':\n          textAnchor = 'start';\n          dy = '.32em';\n          break;\n        case 'bottom':\n          textAnchor = 'end';\n          dy = '.32em';\n          break;\n        case 'left':\n          textAnchor = 'middle';\n          dy = sign < 0 ? '.71em' : '0em';\n          break;\n        case 'right':\n          textAnchor = 'middle';\n          dy = sign < 0 ? '.71em' : '0em';\n          break;\n        default:\n          break;\n      }\n    }\n\n    if (props.gridHorizontal) {\n      gridOn = true;\n      gridStrokeWidth = props.gridHorizontalStrokeWidth;\n      gridStroke = props.gridHorizontalStroke;\n      gridStrokeDashArray = props.gridHorizontalStrokeDash;\n    } else if (props.gridVertical) {\n      gridOn = true;\n      gridStrokeWidth = props.gridVerticalStrokeWidth;\n      gridStroke = props.gridVerticalStroke;\n      gridStrokeDashArray = props.gridVerticalStrokeDash;\n    }\n\n    // return grid line if grid is enabled and grid line is not on at same position as other axis.\n    const gridLine = (pos) => {\n      if (gridOn\n        && !(props.orient2nd === 'left' && pos === 0)\n        && !(props.orient2nd === 'right' && pos === props.width)\n        && !((props.orient === 'left' || props.orient === 'right') && pos === props.height)\n      ) {\n        return (\n          <line style={{\n            strokeWidth: gridStrokeWidth,\n            shapeRendering: 'crispEdges',\n            stroke: gridStroke,\n            strokeDasharray: gridStrokeDashArray,\n          }} x2={x2grid} y2={y2grid}\n          />\n        );\n      }\n      return null;\n    };\n\n    const optionalTextProps = textTransform ? {\n      transform: textTransform,\n    } : {};\n\n    gridTextFontSize = props.gridText.font.size;\n    gridTextFontWeight = props.gridText.font.weight;\n\n    return (\n    <g>\n      {ticks.map((tick, idx) => (\n          <g key={idx} className=\"tick\" transform={tr(tick)} >\n            {gridLine(adjustedScale(tick))}\n            <line\n              style={{\n                shapeRendering: 'crispEdges',\n                opacity: '1',\n                stroke: props.tickStroke,\n                strokeWidth: '0.5',\n              }}\n              x2={x2}\n              y2={y2}\n            />\n          </g>\n        ))\n      }\n      {ticks.map((tick, idx) => (\n        <g className=\"tickText\" transform={trText(tick)} >\n            <text\n              strokeWidth={gridTextFontWeight}\n              dy={dy} x={x1} y={y1}\n              style={{ stroke: props.tickTextStroke, fill: props.tickTextStroke, 'font-size': gridTextFontSize}}\n              textAnchor={textAnchor}\n              {...optionalTextProps}\n              transform={gridTextRotate}\n            >\n              {`${tickFormat(tick)}`.split('\\n').map((tickLabel, index) => (\n                  <tspan x={x1 || 0} dy={dy} key={index}>\n                    {tickLabel}\n                  </tspan>\n              ))}\n            </text>\n            </g>\n            ))}\n    </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Label',\n\n  propTypes: {\n    height: PropTypes.number,\n    horizontalChart: PropTypes.bool,\n    horizontalTransform: PropTypes.string,\n    label: PropTypes.string.isRequired,\n    width: PropTypes.number,\n    strokeWidth: PropTypes.number,\n    textAnchor: PropTypes.string,\n    verticalTransform: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      horizontalTransform: 'rotate(270)',\n      strokeWidth: 0.01,\n      textAnchor: 'middle',\n      verticalTransform: 'rotate(0)',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    if (!props.label) {\n      return <text />;\n    }\n\n    let transform;\n    let x;\n    let y;\n    if (props.orient === 'top' || props.orient === 'bottom') {\n      transform = props.verticalTransform;\n      x = props.width / 2;\n      y = props.offset;\n\n      if (props.horizontalChart) {\n        transform = `rotate(180 ${x} ${y}) ${transform}`;\n      }\n    } else {  // left, right\n      transform = props.horizontalTransform;\n      x = -props.height / 2;\n      if (props.orient === 'left') {\n        y = -props.offset;\n      } else {\n        y = props.offset;\n      }\n    }\n\n\n    return (\n      <text\n        strokeWidth={props.strokeWidth.toString()}\n        textAnchor={props.textAnchor}\n        transform={transform}\n        y={y}\n        x={x}\n        style={{'font-size':'1.4em'}}\n\n      >\n        {props.label}\n      </text>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\nconst d3 = require('d3');\nconst AxisTicks = require('./AxisTicks');\nconst AxisLine = require('./AxisLine');\nconst Label = require('./Label');\n\nmodule.exports = createReactClass({\n\n  displayName: 'XAxis',\n\n  propTypes: {\n    fill: PropTypes.string,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    horizontalChart: PropTypes.bool,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.string,\n    tickStroke: PropTypes.string,\n    tickTextStroke: PropTypes.string,\n    xAxisClassName: PropTypes.string,\n    xAxisLabel: PropTypes.string,\n    xAxisTickValues: PropTypes.array,\n    xAxisOffset: PropTypes.number,\n    xScale: PropTypes.func.isRequired,\n    xOrient: PropTypes.oneOf(['top', 'bottom']),\n    yOrient: PropTypes.oneOf(['left', 'right']),\n    gridVertical: PropTypes.bool,\n    gridVerticalStroke: PropTypes.string,\n    gridVerticalStrokeWidth: PropTypes.number,\n    gridVerticalStrokeDash: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: 'none',\n      stroke: 'none',\n      strokeWidth: '1',\n      tickStroke: '#000',\n      xAxisClassName: 'rd3-x-axis',\n      xAxisLabel: '',\n      xAxisLabelOffset: 10,\n      xAxisOffset: 0,\n      xOrient: 'bottom',\n      yOrient: 'left',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const t = `translate(0 ,${props.xAxisOffset + props.height})`;\n\n    let tickArguments;\n    if (typeof props.xAxisTickCount !== 'undefined') {\n      tickArguments = [props.xAxisTickCount];\n    }\n\n    if (typeof props.xAxisTickInterval !== 'undefined') {\n      // tickArguments = [d3.time[props.xAxisTickInterval.unit], props.xAxisTickInterval.interval];\n    }\n\n    return (\n      <g\n        className={props.xAxisClassName}\n        transform={t}\n      >\n        <AxisLine\n          scale={props.xScale}\n          stroke={props.stroke}\n          orient={props.xOrient}\n          outerTickSize={props.tickSize}\n          {...props}\n        />\n        <Label\n          horizontalChart={props.horizontalChart}\n          label={props.xAxisLabel}\n          offset={props.xAxisLabelOffset}\n          orient={props.xOrient}\n          margins={props.margins}\n          width={props.width}\n        />\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\nconst d3 = require('d3');\nconst AxisTicks = require('./AxisTicks');\nconst AxisLine = require('./AxisLine');\nconst Label = require('./Label');\n\nmodule.exports = createReactClass({\n\n  displayName: 'XGrid',\n\n  propTypes: {\n    fill: PropTypes.string,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    horizontalChart: PropTypes.bool,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.string,\n    tickStroke: PropTypes.string,\n    tickTextStroke: PropTypes.string,\n    xAxisClassName: PropTypes.string,\n    xAxisLabel: PropTypes.string,\n    xAxisTickValues: PropTypes.array,\n    xAxisOffset: PropTypes.number,\n    xScale: PropTypes.func.isRequired,\n    xOrient: PropTypes.oneOf(['top', 'bottom']),\n    yOrient: PropTypes.oneOf(['left', 'right']),\n    gridVertical: PropTypes.bool,\n    gridVerticalStroke: PropTypes.string,\n    gridVerticalStrokeWidth: PropTypes.number,\n    gridVerticalStrokeDash: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: 'none',\n      stroke: 'none',\n      strokeWidth: '1',\n      tickStroke: '#000',\n      xAxisClassName: 'rd3-x-axis',\n      xAxisLabel: '',\n      xAxisLabelOffset: 10,\n      xAxisOffset: 0,\n      xOrient: 'bottom',\n      yOrient: 'left',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const t = `translate(0 ,${props.xAxisOffset + props.height})`;\n\n    let tickArguments;\n    if (typeof props.xAxisTickCount !== 'undefined') {\n      tickArguments = [props.xAxisTickCount];\n    }\n\n    if (typeof props.xAxisTickInterval !== 'undefined') {\n      // tickArguments = [d3.time[props.xAxisTickInterval.unit], props.xAxisTickInterval.interval];\n    }\n\n    return (\n      <g\n        className={props.xAxisClassName}\n        transform={t}\n      >\n        <AxisTicks\n          tickValues={props.xAxisTickValues}\n          tickFormatting={props.tickFormatting}\n          tickArguments={tickArguments}\n          tickStroke={props.tickStroke}\n          tickTextStroke={props.tickTextStroke}\n          innerTickSize={props.tickSize}\n          scale={props.xScale}\n          orient={props.xOrient}\n          orient2nd={props.yOrient}\n          height={props.height}\n          width={props.width}\n          horizontalChart={props.horizontalChart}\n          gridVertical={props.gridVertical}\n          gridVerticalStroke={props.gridVerticalStroke}\n          gridVerticalStrokeWidth={props.gridVerticalStrokeWidth}\n          gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n          gridText={props.gridText}\n        />\n\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst createReactClass = require('create-react-class');\nconst React = require('react');\nconst d3 = require('d3');\nconst AxisLine = require('./AxisLine');\nconst Label = require('./Label');\n\nmodule.exports = createReactClass({\n\n  displayName: 'YAxis',\n\n  propTypes: {\n    fill: PropTypes.string,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.string,\n    tickStroke: PropTypes.string,\n    tickTextStroke: PropTypes.string,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    horizontalChart: PropTypes.bool,\n    yAxisClassName: PropTypes.string,\n    yAxisLabel: PropTypes.string,\n    yAxisOffset: PropTypes.number,\n    yAxisTickValues: PropTypes.array,\n    xOrient: PropTypes.oneOf(['top', 'bottom']),\n    yOrient: PropTypes.oneOf(['left', 'right']),\n    yScale: PropTypes.func.isRequired,\n    gridVertical: PropTypes.bool,\n    gridVerticalStroke: PropTypes.string,\n    gridVerticalStrokeWidth: PropTypes.number,\n    gridVerticalStrokeDash: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: 'none',\n      stroke: '#000',\n      strokeWidth: '1',\n      tickStroke: '#000',\n      yAxisClassName: 'rd3-y-axis',\n      yAxisLabel: '',\n      yAxisOffset: 0,\n      xOrient: 'bottom',\n      yOrient: 'left',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    let t;\n    if (props.yOrient === 'right') {\n      t = `translate(${props.yAxisOffset + props.width}, 0)`;\n    } else {\n      t = `translate(${props.yAxisOffset}, 0)`;\n    }\n\n    let tickArguments;\n    if (props.yAxisTickCount) {\n      tickArguments = [props.yAxisTickCount];\n    }\n\n    if (props.yAxisTickInterval) {\n      tickArguments = [d3.time[props.yAxisTickInterval.unit], props.yAxisTickInterval.interval];\n    }\n\n    return (\n      <g\n        className={props.yAxisClassName}\n        transform={t}\n      >\n        <AxisLine\n          orient={props.yOrient}\n          outerTickSize={props.tickSize}\n          scale={props.yScale}\n          stroke={props.stroke}\n          {...props}\n        />\n        <Label\n          height={props.height}\n          horizontalChart={props.horizontalChart}\n          label={props.yAxisLabel}\n          margins={props.margins}\n          offset={props.yAxisLabelOffset}\n          orient={props.yOrient}\n        />\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst createReactClass = require('create-react-class');\nconst React = require('react');\nconst d3 = require('d3');\nconst AxisTicks = require('./AxisTicks');\nconst AxisLine = require('./AxisLine');\nconst Label = require('./Label');\n\nmodule.exports = createReactClass({\n\n  displayName: 'YGrid',\n\n  propTypes: {\n    fill: PropTypes.string,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.string,\n    tickStroke: PropTypes.string,\n    tickTextStroke: PropTypes.string,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    horizontalChart: PropTypes.bool,\n    yAxisClassName: PropTypes.string,\n    yAxisLabel: PropTypes.string,\n    yAxisOffset: PropTypes.number,\n    yAxisTickValues: PropTypes.array,\n    xOrient: PropTypes.oneOf(['top', 'bottom']),\n    yOrient: PropTypes.oneOf(['left', 'right']),\n    yScale: PropTypes.func.isRequired,\n    gridVertical: PropTypes.bool,\n    gridVerticalStroke: PropTypes.string,\n    gridVerticalStrokeWidth: PropTypes.number,\n    gridVerticalStrokeDash: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: 'none',\n      stroke: '#000',\n      strokeWidth: '1',\n      tickStroke: '#000',\n      yAxisClassName: 'rd3-y-axis',\n      yAxisLabel: '',\n      yAxisOffset: 0,\n      xOrient: 'bottom',\n      yOrient: 'left',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    let t;\n    if (props.yOrient === 'right') {\n      t = `translate(${props.yAxisOffset + props.width}, 0)`;\n    } else {\n      t = `translate(${props.yAxisOffset}, 0)`;\n    }\n\n    let tickArguments;\n    if (props.yAxisTickCount) {\n      tickArguments = [props.yAxisTickCount];\n    }\n\n    if (props.yAxisTickInterval) {\n      tickArguments = [d3.time[props.yAxisTickInterval.unit], props.yAxisTickInterval.interval];\n    }\n\n    return (\n      <g\n        className={props.yAxisClassName}\n        transform={t}\n      >\n        <AxisTicks\n          innerTickSize={props.tickSize}\n          orient={props.yOrient}\n          orient2nd={props.xOrient}\n          tickArguments={tickArguments}\n          tickFormatting={props.tickFormatting}\n          tickStroke={props.tickStroke}\n          tickTextStroke={props.tickTextStroke}\n          tickValues={props.yAxisTickValues}\n          scale={props.yScale}\n          height={props.height}\n          width={props.width}\n          horizontalChart={props.horizontalChart}\n          gridHorizontal={props.gridHorizontal}\n          gridHorizontalStroke={props.gridHorizontalStroke}\n          gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n          gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n          gridText={props.gridText}\n        />\n\n      </g>\n    );\n  },\n});\n","\nexports.XAxis = require('./XAxis');\nexports.YAxis = require('./YAxis');\nexports.XGrid = require('./XGrid');\nexports.YGrid = require('./YGrid');\n\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'BasicChart',\n\n  propTypes: {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    height: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    svgClassName: PropTypes.string,\n    title: PropTypes.node,\n    titleClassName: PropTypes.string,\n    width: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-basic-chart',\n      svgClassName: 'rd3-chart',\n      titleClassName: 'rd3-chart-title',\n      title: '',\n    };\n  },\n\n  _renderTitle() {\n    const props = this.props;\n\n    if (props.title !== '') {\n      return (\n        <h4\n          className={props.titleClassName}\n        >\n          {props.title}\n        </h4>\n      );\n    }\n    return null;\n  },\n\n  _renderChart() {\n    const props = this.props;\n\n    return (\n      <svg\n        className={props.svgClassName}\n        height={props.height}\n        viewBox={props.viewBox}\n        width={props.width}\n      >\n        {props.children}\n      </svg>\n    );\n  },\n\n  render() {\n    const props = this.props;\n\n    return (\n      <div\n        className={props.className}\n      >\n        {this._renderTitle()}\n        {this._renderChart()}\n      </div>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst LegendChart = require('./LegendChart');\nconst BasicChart = require('./BasicChart');\n\nmodule.exports = createReactClass({\n\n  displayName: 'Chart',\n\n  propTypes: {\n    legend: PropTypes.bool,\n    svgClassName: PropTypes.string,\n    titleClassName: PropTypes.string,\n    shouldUpdate: PropTypes.bool,\n  },\n\n  getDefaultProps() {\n    return {\n      legend: false,\n      svgClassName: 'rd3-chart',\n      titleClassName: 'rd3-chart-title',\n      shouldUpdate: true,\n      background:null,\n    };\n  },\n  shouldComponentUpdate(nextProps) {\n    return nextProps.shouldUpdate;\n  },\n\n  render() {\n    const props = this.props;\n\n    if (props.legend) {\n      return (\n        <LegendChart\n          svgClassName={props.svgClassName}\n          titleClassName={props.titleClassName}\n          {...this.props}\n        />\n      );\n    }\n    return (\n      <BasicChart\n        svgClassName={props.svgClassName}\n        titleClassName={props.titleClassName}\n        {...this.props}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst Legend = require('../Legend');\nconst d3 = require('d3');\n\nmodule.exports = createReactClass({\n\n  displayName: 'LegendChart',\n\n  propTypes: {\n    children: PropTypes.node,\n    createClass: PropTypes.string,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    data: PropTypes.array,\n    height: PropTypes.node,\n    legend: PropTypes.bool,\n    legendPosition: PropTypes.string,\n    margins: PropTypes.object,\n    sideOffset: PropTypes.number,\n    svgClassName: PropTypes.string,\n    title: PropTypes.node,\n    titleClassName: PropTypes.string,\n    viewBox: PropTypes.string,\n    width: PropTypes.node,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-legend-chart',\n      colors: d3.scaleOrdinal(d3.schemeCategory10),\n      colorAccessor: (d, idx) => idx,\n      data: [],\n      legend: false,\n      legendPosition: 'right',\n      sideOffset: 90,\n      svgClassName: 'rd3-chart',\n      titleClassName: 'rd3-chart-title',\n      title: '',\n      svgTitle:{\n                title:'Title',\n                x:50,\n                y:50,\n                fontSize:'1.5em',\n              }\n    };\n  },\n\n  _renderLegend() {\n    const props = this.props;\n\n    if (props.legend) {\n      return (\n        <Legend\n          colors={props.colors}\n          colorAccessor={props.colorAccessor}\n          data={props.data}\n          colorsDomain={props.colorsDomain}\n          legendPosition={props.legendPosition}\n          margins={props.margins}\n          width={props.sideOffset}\n          series={props.series}\n          legendStyle={props.legendStyle}\n        />\n      );\n    }\n\n    return null;\n  },\n\n  _renderTitle() {\n    const props = this.props;\n\n    const fontSize = props.svgTitle.fontSize;\n\n\n    if (props.title !== '') {\n      return (\n          <text\n            text-anchor=\"middle\"\n            y={props.svgTitle.y}\n            x={props.svgTitle.x}\n            style={{'font-size':fontSize}}\n          >\n          {props.title}\n          </text>\n      );\n    }\n    return null;\n  },\n\n  _renderChart() {\n    const props = this.props;\n    return (\n      <svg\n        className={props.svgClassName}\n        height=\"100%\"\n        viewBox={props.viewBox}\n        width=\"100%\"\n      >\n        {this._renderTitle()}\n        {props.children}\n      </svg>\n    );\n  },\n\n  render() {\n    const props = this.props;\n\n    return (\n      <div\n        className={props.className}\n        style={{ display: 'grid', width: props.width, height: props.height, background:props.background }}\n      >\n        {/* <div style={{ display: 'table', width: '100%', height: '100%' }}>\n          <div style={{ display: 'table-cell', width: '100%', height: '100%' }}>\n            {this._renderChart()}\n          </div>\n          <div style={{ display: 'table-cell', width: props.sideOffset, verticalAlign: 'top' }}>\n            {this._renderLegend()}\n          </div>\n        </div> */}\n\n\n        <div style={{ display: 'flex', 'align-items':'flex-end'}}>\n          <div style={{ width:  props.width, height: props.height  }}>\n\n            {this._renderChart()}\n          </div>\n          <div style={{'align-self':'center'}}>\n            {this._renderLegend()}\n          </div>\n        </div>\n\n      </div>\n    );\n  },\n});\n","exports.Chart = require('./Chart');\n","\nexports.XAxis = require('./axes').XAxis;\nexports.YAxis = require('./axes').YAxis;\nexports.XGrid = require('./axes').XGrid;\nexports.YGrid = require('./axes').YGrid;\n\nexports.Chart = require('./charts').Chart;\n\nexports.Legend = require('./Legend');\nexports.Tooltip = require('./Tooltip');\nexports.Voronoi = require('./Voronoi');\n","exports.BarChart = require('./barchart').BarChart;\nexports.LineChart = require('./linechart').LineChart;\nexports.PieChart = require('./piechart').PieChart;\nexports.AreaChart = require('./areachart').AreaChart;\nexports.Treemap = require('./treemap').Treemap;\nexports.ScatterChart = require('./scatterchart').ScatterChart;\nexports.CandlestickChart = require('./candlestick').CandlestickChart;\n\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst VoronoiCircleContainer = require('./VoronoiCircleContainer');\nconst Line = require('./Line');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    color: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    data: PropTypes.array,\n    interpolationType: PropTypes.string,\n    xAccessor: PropTypes.func,\n    yAccessor: PropTypes.func,\n    hoverAnimation: PropTypes.bool,\n  },\n\n  getDefaultProps() {\n    return {\n      data: [],\n      xAccessor: (d) => d.x,\n      yAccessor: (d) => d.y,\n      interpolationType: 'linear',\n      hoverAnimation: false,\n    };\n  },\n\n  _isDate(d, accessor) {\n    return Object.prototype.toString.call(accessor(d)) === '[object Date]';\n  },\n\n  render() {\n    const props = this.props;\n    const xScale = props.xScale;\n    const yScale = props.yScale;\n    const xAccessor = props.xAccessor;\n    const yAccessor = props.yAccessor;\n\n    const interpolatePath = d3.line()\n        .x((d) => props.xScale(xAccessor(d)))\n        .y((d) => props.yScale(yAccessor(d)))\n        .curve(d3.curveMonotoneX);\n\n\n    if (this._isDate(props.data[0].values[0], xAccessor)) {\n      interpolatePath.x(d => props.xScale(props.xAccessor(d).getTime()));\n    } else {\n      interpolatePath.x(d => props.xScale(props.xAccessor(d)));\n    }\n\n    const lines = props.data.map((series, idx) => (\n        <Line\n          path={interpolatePath(series.values)}\n          stroke={props.colors(props.colorAccessor(series, idx))}\n          strokeWidth={series.strokeWidth}\n          strokeDashArray={series.strokeDashArray}\n          seriesName={series.name}\n          key={idx}\n        />\n      )\n    );\n\n\n    const voronoi = d3.voronoi()\n      .x(d => xScale(d.coord.x))\n      .y(d => yScale(d.coord.y))\n      .extent([[0, 0], [props.width, props.height]]);\n\n    let cx;\n    let cy;\n    let circleFill;\n\n\n    const regions = voronoi(props.value).polygons().map( (polygon, idx) => {\n      const point = polygon.data;\n      delete polygon.data;\n      const vnode = polygon;\n      // debugger;\n\n      cx = props.xScale(point.coord.x);\n      cy = props.yScale(point.coord.y);\n\n      circleFill = props.colors(props.colorAccessor(vnode, point.seriesIndex));\n\n      return (\n        <VoronoiCircleContainer\n          key={idx}\n          circleFill={circleFill}\n          vnode={vnode}\n          hoverAnimation={props.hoverAnimation}\n          cx={cx} cy={cy}\n          circleRadius={props.circleRadius}\n          onMouseOver={props.onMouseOver}\n          dataPoint={{\n            xValue: point.coord.x,\n            yValue: point.coord.y,\n            seriesName: point.series.name,\n          }}\n        />\n      );\n    });\n\n    return (\n      <g>\n        <g>{regions}</g>\n        <g>{lines}</g>\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Line',\n\n  propTypes: {\n    fill: PropTypes.string,\n    path: PropTypes.string,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.number,\n    strokeDashArray: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      stroke: '#3182bd',\n      fill: 'none',\n      strokeWidth: 1,\n      className: 'rd3-linechart-path',\n    };\n  },\n\n  render() {\n    const props = this.props;\n    return (\n      <path\n        d={props.path}\n        stroke={props.stroke}\n        strokeWidth={props.strokeWidth}\n        strokeDasharray={props.strokeDashArray}\n        fill={props.fill}\n        className={props.className}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst d3 = require('d3');\nconst createReactClass = require('create-react-class');\n\nconst { Chart, XAxis, YAxis, XGrid, YGrid, Tooltip } = require('../common');\nconst DataSeries = require('./DataSeries');\nconst utils = require('../utils');\nconst {\n  CartesianChartPropsMixin,\n  DefaultAccessorsMixin,\n  ViewBoxMixin,\n  TooltipMixin,\n} = require('../mixins');\n\nmodule.exports = createReactClass({\n\n  displayName: 'LineChart',\n\n  propTypes: {\n    circleRadius: PropTypes.number,\n    hoverAnimation: PropTypes.bool,\n    margins: PropTypes.object,\n    data: PropTypes.array.isRequired,\n  },\n\n  mixins: [CartesianChartPropsMixin, DefaultAccessorsMixin, ViewBoxMixin, TooltipMixin],\n\n  getDefaultProps() {\n    return {\n      colors: d3.scaleOrdinal(d3.schemeCategory10),\n      circleRadius: 3,\n      className: 'rd3-linechart',\n      hoverAnimation: true,\n      margins: { top: 70, right: 20, bottom: 60, left: 60 },\n      xAxisClassName: 'rd3-linechart-xaxis',\n      yAxisClassName: 'rd3-linechart-yaxis',\n      data: [],\n    };\n  },\n\n  _calculateScales: utils.calculateScales,\n\n  render() {\n    const props = this.props;\n\n    if (this.props.data && this.props.data.length < 1) {\n      return null;\n    }\n\n    const { innerWidth, innerHeight, trans, svgMargins } = this.getDimensions();\n    const yOrient = this.getYOrient();\n    const domain = props.domain || {};\n\n    if (!Array.isArray(props.data)) {\n      props.data = [props.data];\n    }\n\n    // Returns an object of flattened allValues, xValues, and yValues\n    const flattenedData = utils.flattenData(props.data, props.xAccessor, props.yAccessor);\n\n    const allValues = flattenedData.allValues;\n    const xValues = flattenedData.xValues;\n    const yValues = flattenedData.yValues;\n    const scales = this._calculateScales(\n      innerWidth,\n      innerHeight,\n      xValues,\n      yValues,\n      domain.x,\n      domain.y\n    );\n\n    return (\n      <span onMouseLeave={this.onMouseLeave}>\n        <Chart\n          viewBox={this.getViewBox()}\n          legend={props.legend}\n          sideOffset={props.sideOffset}\n          data={props.data}\n          margins={props.margins}\n          colors={props.colors}\n          colorAccessor={props.colorAccessorOrdinal}\n          width={props.width}\n          height={props.height}\n          title={props.title}\n          shouldUpdate={!this.state.changeState}\n        >\n          <g transform={trans} className={props.className}>\n            <XGrid\n              xAxisClassName={props.xAxisClassName}\n              xAxisTickValues={props.xAxisTickValues}\n              xAxisTickCount={props.xAxisTickCount}\n              xAxisTickInterval={props.xAxisTickInterval}\n              xAxisOffset={props.xAxisOffset}\n              xScale={scales.xScale}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              data={props.data}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridVertical={props.gridVertical}\n              gridVerticalStroke={props.gridVerticalStroke}\n              gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n            />\n            <YGrid\n              yAxisClassName={props.yAxisClassName}\n              yScale={scales.yScale}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisTickCount={props.yAxisTickCount}\n              yAxisOffset={props.yAxisOffset}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridHorizontal={props.gridHorizontal}\n              gridHorizontalStroke={props.gridHorizontalStroke}\n              gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n              gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n            />\n\n\n            <DataSeries\n              xScale={scales.xScale}\n              yScale={scales.yScale}\n              xAccessor={props.xAccessor}\n              yAccessor={props.yAccessor}\n              hoverAnimation={props.hoverAnimation}\n              circleRadius={props.circleRadius}\n              data={props.data}\n              value={allValues}\n              interpolationType={props.interpolationType}\n              colors={props.colors}\n              colorAccessor={props.colorAccessorOrdinal}\n              width={innerWidth}\n              height={innerHeight}\n              onMouseOver={this.onMouseOver}\n            />\n            <XAxis\n              xAxisClassName={props.xAxisClassName}\n              xAxisTickValues={props.xAxisTickValues}\n              xAxisTickCount={props.xAxisTickCount}\n              xAxisTickInterval={props.xAxisTickInterval}\n              xAxisOffset={props.xAxisOffset}\n              xScale={scales.xScale}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              data={props.data}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridVertical={props.gridVertical}\n              gridVerticalStroke={props.gridVerticalStroke}\n              gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n            />\n            <YAxis\n              yAxisClassName={props.yAxisClassName}\n              yScale={scales.yScale}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisTickCount={props.yAxisTickCount}\n              yAxisOffset={props.yAxisOffset}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridHorizontal={props.gridHorizontal}\n              gridHorizontalStroke={props.gridHorizontalStroke}\n              gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n              gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n            />\n\n          </g>\n        </Chart>\n        {(props.showTooltip ? <Tooltip {...this.state.tooltip} /> : null)}\n      </span>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'VoronoiCircle',\n\n  // TODO: Check prop types\n  propTypes: {\n    handleMouseOver: PropTypes.any,\n    handleMouseLeave: PropTypes.any,\n    voronoiPath: PropTypes.any,\n    cx: PropTypes.any,\n    cy: PropTypes.any,\n    circleRadius: PropTypes.any,\n    circleFill: PropTypes.any,\n  },\n\n  getDefaultProps() {\n    return {\n      circleRadius: 3,\n      circleFill: '#1f77b4',\n    };\n  },\n\n  render() {\n    return (\n      <g>\n        <path\n          onMouseOver={this.props.handleMouseOver}\n          onMouseLeave={this.props.handleMouseLeave}\n          fill=\"transparent\"\n          stroke='#F5F5F5'\n          d={this.props.voronoiPath}\n        />\n        <circle\n          onMouseOver={this.props.handleMouseOver}\n          onMouseLeave={this.props.handleMouseLeave}\n          cx={this.props.cx}\n          cy={this.props.cy}\n          r={this.props.circleRadius}\n          fill={this.props.circleFill}\n          className=\"rd3-linechart-circle\"\n        />\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst { findDOMNode } = require('react-dom');\nconst shade = require('../utils').shade;\nconst VoronoiCircle = require('./VoronoiCircle');\n\nmodule.exports = createReactClass({\n\n  displayName: 'VornoiCircleContainer',\n\n  propTypes: {\n    circleRadius: PropTypes.any,\n    circleFill: PropTypes.any,\n    onMouseOver: PropTypes.any,\n    dataPoint: PropTypes.any,\n  },\n\n  getDefaultProps() {\n    return {\n      circleRadius: 3,\n      circleFill: '#1f77b4',\n      hoverAnimation: true,\n    };\n  },\n\n  getInitialState() {\n    return {\n      circleRadius: this.props.circleRadius,\n      circleFill: this.props.circleFill,\n    };\n  },\n\n  _animateCircle() {\n    const rect = findDOMNode(this).getElementsByTagName('circle')[0].getBoundingClientRect();\n    this.props.onMouseOver.call(this, rect.right, rect.top, this.props.dataPoint);\n    this.setState({\n      circleRadius: this.props.circleRadius * (5 / 4),\n      circleFill: shade(this.props.circleFill, 0.2),\n    });\n  },\n\n  _restoreCircle() {\n    this.setState({\n      circleRadius: this.props.circleRadius,\n      circleFill: this.props.circleFill,\n    });\n  },\n\n  _drawPath(d) {\n    if (d === undefined) {\n      return 'M Z';\n    }\n    return `M${d.join(',')}Z`;\n  },\n\n  render() {\n    const props = this.props;\n\n    // animation controller\n    let handleMouseOver;\n    let handleMouseLeave;\n    if (props.hoverAnimation) {\n      handleMouseOver = this._animateCircle;\n      handleMouseLeave = this._restoreCircle;\n    } else {\n      handleMouseOver = handleMouseLeave = null;\n    }\n\n    return (\n      <g>\n        <VoronoiCircle\n          handleMouseOver={handleMouseOver}\n          handleMouseLeave={handleMouseLeave}\n          voronoiPath={this._drawPath(props.vnode)}\n          cx={props.cx}\n          cy={props.cy}\n          circleRadius={this.state.circleRadius}\n          circleFill={this.state.circleFill}\n        />\n      </g>\n    );\n  },\n});\n","\nexports.LineChart = require('./LineChart');\n","'use strict';\n\n\nconst d3 = require('d3');\nconst PropTypes = require('prop-types');\n\nmodule.exports = {\n\n  propTypes: {\n    axesColor: PropTypes.string,\n    colors: PropTypes.func,\n    colorAccessorSequential: PropTypes.func,\n    colorAccessorOrdinal: PropTypes.func,\n    data: PropTypes.array.isRequired,\n    height: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    horizontal: PropTypes.bool,\n    legend: PropTypes.bool,\n    legendOffset: PropTypes.number,\n    title: PropTypes.string,\n    width: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    xAccessor: PropTypes.func,\n    xAxisFormatter: PropTypes.func,\n    xAxisLabel: PropTypes.string,\n    xAxisLabelOffset: PropTypes.number,\n    xAxisTickCount: PropTypes.number,\n    xAxisTickInterval: PropTypes.object,\n    xAxisTickValues: PropTypes.array,\n    xAxisTickStroke: PropTypes.string,\n    xAxisTickTextStroke: PropTypes.string,\n    xAxisOffset: PropTypes.number,\n    xOrient: PropTypes.oneOf(['top', 'bottom']),\n    xScale: PropTypes.func,\n    yAccessor: PropTypes.func,\n    yAxisFormatter: PropTypes.func,\n    yAxisLabel: PropTypes.string,\n    yAxisLabelOffset: PropTypes.number,\n    yAxisTickCount: PropTypes.number,\n    yAxisTickInterval: PropTypes.object,\n    yAxisTickValues: PropTypes.array,\n    yAxisTickStroke: PropTypes.string,\n    yAxisTickTextStroke: PropTypes.string,\n    yAxisOffset: PropTypes.number,\n    yOrient: PropTypes.oneOf(['default', 'left', 'right']),\n    yScale: PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      axesColor: '#000',\n      // colors: d3.scaleOrdinal(d3.schemeCategory10),\n      colorAccessorSequential: (d, idx) => d[idx],\n      colorAccessorOrdinal: (d, idx) => idx,\n      height: 200,\n      horizontal: false,\n      legend: false,\n      legendOffset: 120,\n      title: '',\n      width: 400,\n      // xAxisFormatter: no predefined value right now\n      xAxisLabel: '',\n      xAxisLabelOffset: 38,\n      xAxisOffset: 0,\n      // xAxisTickCount: no predefined value right now\n      // xAxisTickInterval: no predefined value right now\n      // xAxisTickValues: no predefined value right now\n      xAxisTickStroke: '#000',\n      xAxisTickTextStroke: '#000',\n      xOrient: 'bottom',\n      // xScale: no predefined value right now\n      // yAxisFormatter: no predefined value right now\n      yAxisLabel: '',\n      yAxisLabelOffset: 35,\n      yAxisOffset: 0,\n      // yAxisTickCount: no predefined value right now\n      // yAxisTickInterval: no predefined value right now\n      // yAxisTickValues: no predefined value right now\n      yAxisTickStroke: '#000',\n      yAxisTickTextStroke: '#000',\n      yOrient: 'default',\n      // yScale: no predefined value right now\n    };\n  },\n\n  getYOrient() {\n    const yOrient = this.props.yOrient;\n\n    if (yOrient === 'default') {\n      return this.props.horizontal ? 'right' : 'left';\n    }\n\n    return yOrient;\n  },\n};\n","'use strict';\n\nconst PropTypes = require('prop-types');\n\nmodule.exports = {\n  propTypes: {\n    xAccessor: PropTypes.func,\n    yAccessor: PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      xAccessorBar: (d) => d.data.x,\n      yAccessorBar: (d) => d[1],\n\n      xAccessor: (d) => d.x,\n      yAccessor: (d) => d.y,\n    };\n  },\n};\n","'use strict';\n\n\nconst PropTypes = require('prop-types');\n\nmodule.exports = {\n\n  propTypes: {\n    showTooltip: PropTypes.bool,\n    tooltipFormat: PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      showTooltip: true,\n      tooltipFormat: (d) => String(d.yValue),\n    };\n  },\n\n  getInitialState() {\n    return {\n      tooltip: {\n        x: 0,\n        y: 0,\n        child: '',\n        show: false,\n      },\n      changeState: false,\n    };\n  },\n\n  componentWillReceiveProps() {\n    this.setState({\n      changeState: false,\n    });\n  },\n\n  onMouseOver(x, y, dataPoint) {\n    if (!this.props.showTooltip) {\n      return;\n    }\n    this.setState({\n      tooltip: {\n        x,\n        y,\n        child: this.props.tooltipFormat.call(this, dataPoint),\n        show: true,\n      },\n      changeState: true,\n    });\n  },\n\n  onMouseLeave() {\n    if (!this.props.showTooltip) {\n      return;\n    }\n    this.setState({\n      tooltip: {\n        x: 0,\n        y: 0,\n        child: '',\n        show: false,\n      },\n      changeState: true,\n    });\n  },\n};\n","\n'use strict';\n\nconst PropTypes = require('prop-types');\n\nmodule.exports = {\n\n  propTypes: {\n    viewBox: PropTypes.string,\n    viewBoxObject: PropTypes.object,\n  },\n\n  getViewBox() {\n    if (this.props.viewBoxObject) {\n      const v = this.props.viewBoxObject;\n      return [v.x, v.y, v.width, v.height].join(' ');\n    } else if (this.props.viewBox) {\n      return this.props.viewBox;\n    }\n    return null;\n  },\n\n  getDimensions() {\n    const props = this.props;\n    const { horizontal, margins, viewBoxObject, xOrient } = props;\n    const yOrient = this.getYOrient();\n\n    let width;\n    let height;\n    if (viewBoxObject) {\n      width = viewBoxObject.width;\n      height = viewBoxObject.height;\n    } else {\n      width = props.width;\n      height = props.height;\n    }\n\n    let svgWidth;\n    let svgHeight;\n    let svgMargins;\n    let trans;\n    if (horizontal) {\n      const center = width / 2;\n      trans = `rotate(90 ${center} ${center}) `;\n      svgWidth = height;\n      svgHeight = width;\n      svgMargins = {\n        left: margins.top,\n        top: margins.right,\n        right: margins.bottom,\n        bottom: margins.left,\n      };\n    } else {\n      trans = '';\n      svgWidth = width;\n      svgHeight = height;\n      svgMargins = margins;\n    }\n\n    const xAxisOffset = Math.abs(props.xAxisOffset || 0);\n    const yAxisOffset = Math.abs(props.yAxisOffset || 0);\n\n    const xOffset = svgMargins.left + (yOrient === 'left' ? yAxisOffset : 0);\n    const yOffset = svgMargins.top + (xOrient === 'top' ? xAxisOffset : 0);\n    trans += `translate(${xOffset}, ${yOffset})`;\n\n    return {\n      innerHeight: svgHeight - svgMargins.top - svgMargins.bottom - xAxisOffset,\n      innerWidth: svgWidth - svgMargins.left - svgMargins.right - yAxisOffset,\n      trans,\n      svgMargins,\n    };\n  },\n};\n","\nexports.CartesianChartPropsMixin = require('./CartesianChartPropsMixin');\nexports.DefaultAccessorsMixin = require('./DefaultAccessorsMixin');\nexports.ViewBoxMixin = require('./ViewBoxMixin');\nexports.TooltipMixin = require('./TooltipMixin');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\n\nmodule.exports = createReactClass({\n\n  displayName: 'Arc',\n\n  propTypes: {\n    fill: PropTypes.string,\n    d: PropTypes.string,\n    startAngle: PropTypes.number,\n    endAngle: PropTypes.number,\n    innerRadius: PropTypes.number,\n    outerRadius: PropTypes.number,\n    labelTextFill: PropTypes.string,\n    valueTextFill: PropTypes.string,\n    sectorBorderColor: PropTypes.string,\n    showInnerLabels: PropTypes.bool,\n    showOuterLabels: PropTypes.bool,\n  },\n\n  getDefaultProps() {\n    return {\n      labelTextFill: 'black',\n      valueTextFill: 'white',\n      showInnerLabels: true,\n      showOuterLabels: true,\n    };\n  },\n\n  renderInnerLabel(props, arc) {\n    // make value text can be formatted\n    const formattedValue = props.valueTextFormatter(props.value);\n    return (\n      <text\n        className=\"rd3-piechart-value\"\n        transform={`translate(${arc.centroid()})`}\n        dy=\".35em\"\n        style={{\n          shapeRendering: 'crispEdges',\n          textAnchor: 'middle',\n          fill: props.valueTextFill,\n        }}\n      >\n        { formattedValue }\n      </text>\n    );\n  },\n\n  renderOuterLabel(props) {\n    const rotate = `rotate(${(props.startAngle + props.endAngle) / 2 * (180 / Math.PI)})`;\n    const radius = props.outerRadius;\n    const dist = radius + 35;\n    const angle = (props.startAngle + props.endAngle) / 2;\n    const x = dist * (1.2 * Math.sin(angle));\n    const y = -dist * Math.cos(angle);\n    const t = `translate(${x},${y})`;\n\n    return (\n      <g>\n        <line\n          x1=\"0\"\n          x2=\"0\"\n          y1={-radius - 2}\n          y2={-radius - 26}\n          stroke={props.labelTextFill}\n          transform={rotate}\n          style={{\n            fill: props.labelTextFill,\n            strokeWidth: 2,\n          }}\n        >\n        </line>\n        <text\n          className=\"rd3-piechart-label\"\n          transform={t}\n          dy=\".35em\"\n          style={{\n            textAnchor: 'middle',\n            fill: props.labelTextFill,\n            shapeRendering: 'crispEdges',\n          }}\n        >\n          {props.label}\n        </text>\n      </g>\n    );\n  },\n\n  render() {\n    const props = this.props;\n\n    const arc = d3.arc()\n      .innerRadius(props.innerRadius)\n      .outerRadius(props.outerRadius)\n      .startAngle(props.startAngle)\n      .endAngle(props.endAngle);\n\n    return (\n      <g className=\"rd3-piechart-arc\" >\n        <path\n          d={arc()}\n          fill={props.fill}\n          stroke={props.sectorBorderColor}\n          onMouseOver={props.handleMouseOver}\n          onMouseLeave={props.handleMouseLeave}\n        />\n        {props.showOuterLabels ? this.renderOuterLabel(props, arc) : null}\n        {props.showInnerLabels ? this.renderInnerLabel(props, arc) : null}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst { findDOMNode } = require('react-dom');\nconst shade = require('../utils').shade;\nconst Arc = require('./Arc');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'ArcContainer',\n\n  propTypes: {\n    fill: PropTypes.string,\n    onMouseOver: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    dataPoint: PropTypes.any, // TODO prop type?\n  },\n\n  getInitialState() {\n    return {\n      // fill is named as fill instead of initialFill to avoid\n      // confusion when passing down props from top parent\n      fill: this.props.fill,\n    };\n  },\n\n  _animateArc() {\n    const rect = findDOMNode(this).getBoundingClientRect();\n    this.props.onMouseOver.call(this, rect.right, rect.top, this.props.dataPoint);\n    this.setState({\n      fill: shade(this.props.fill, 0.2),\n    });\n  },\n\n  _restoreArc() {\n    this.props.onMouseLeave.call(this);\n    this.setState({\n      fill: this.props.fill,\n    });\n  },\n\n  render() {\n    const props = this.props;\n\n    return (\n      <Arc\n        {...this.props}\n        fill={this.state.fill}\n        handleMouseOver={props.hoverAnimation ? this._animateArc : null}\n        handleMouseLeave={props.hoverAnimation ? this._restoreArc : null}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst ArcContainer = require('./ArcContainer');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    data: PropTypes.array,\n    values: PropTypes.array,\n    labels: PropTypes.array,\n    transform: PropTypes.string,\n    innerRadius: PropTypes.number,\n    radius: PropTypes.number,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    showInnerLabels: PropTypes.bool,\n    showOuterLabels: PropTypes.bool,\n    sectorBorderColor: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      data: [],\n      innerRadius: 0,\n      colors: d3.scaleOrdinal(d3.schemeCategory10),\n      colorAccessor: (d, idx) => idx,\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const pie = d3.pie()\n                  .sort(null);\n\n    const arcData = pie(props.values);\n\n    const arcs = arcData.map((arc, idx) => (\n        <ArcContainer\n          key={idx}\n          startAngle={arc.startAngle}\n          endAngle={arc.endAngle}\n          outerRadius={props.radius}\n          innerRadius={props.innerRadius}\n          labelTextFill={props.labelTextFill}\n          valueTextFill={props.valueTextFill}\n          valueTextFormatter={props.valueTextFormatter}\n          fill={props.colors(props.colorAccessor(props.data[idx], idx))}\n          value={props.values[idx]}\n          label={props.labels[idx]}\n          width={props.width}\n          showInnerLabels={props.showInnerLabels}\n          showOuterLabels={props.showOuterLabels}\n          sectorBorderColor={props.sectorBorderColor}\n          hoverAnimation={props.hoverAnimation}\n          onMouseOver={props.onMouseOver}\n          onMouseLeave={props.onMouseLeave}\n          dataPoint={{ yValue: props.values[idx], seriesName: props.labels[idx] }}\n        />\n      )\n    );\n    return (\n      <g className=\"rd3-piechart-pie\" transform={props.transform} >\n        {arcs}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst d3 = require('d3');\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst DataSeries = require('./DataSeries');\nconst { Chart, Tooltip } = require('../common');\nconst TooltipMixin = require('../mixins').TooltipMixin;\n\nmodule.exports = createReactClass({\n\n  displayName: 'PieChart',\n\n  propTypes: {\n    data: PropTypes.array,\n    radius: PropTypes.number,\n    cx: PropTypes.number,\n    cy: PropTypes.number,\n    labelTextFill: PropTypes.string,\n    valueTextFill: PropTypes.string,\n    valueTextFormatter: PropTypes.func,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    title: PropTypes.string,\n    showInnerLabels: PropTypes.bool,\n    showOuterLabels: PropTypes.bool,\n    sectorBorderColor: PropTypes.string,\n    hoverAnimation: PropTypes.bool,\n  },\n\n  mixins: [TooltipMixin],\n\n  getDefaultProps() {\n    return {\n      data: [],\n      title: '',\n      colors: d3.scaleOrdinal(d3.schemeCategory10),\n      colorAccessor: (d, idx) => idx,\n      valueTextFormatter: (val) => `${val}%`,\n      hoverAnimation: true,\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    if (props.data && props.data.length < 1) {\n      return null;\n    }\n    const transform = `translate(${props.cx || props.width / 2},${props.cy || props.height / 2})`;\n\n    const values = props.data.map((item) => item.value);\n    const labels = props.data.map((item) => item.label);\n\n    return (\n      <span>\n        <Chart\n          width={props.width}\n          height={props.height}\n          title={props.title}\n          shouldUpdate={!this.state.changeState}\n        >\n          <g className=\"rd3-piechart\">\n            <DataSeries\n              labelTextFill={props.labelTextFill}\n              valueTextFill={props.valueTextFill}\n              valueTextFormatter={props.valueTextFormatter}\n              data={props.data}\n              values={values}\n              labels={labels}\n              colors={props.colors}\n              colorAccessor={props.colorAccessor}\n              transform={transform}\n              width={props.width}\n              height={props.height}\n              radius={props.radius}\n              innerRadius={props.innerRadius}\n              showInnerLabels={props.showInnerLabels}\n              showOuterLabels={props.showOuterLabels}\n              sectorBorderColor={props.sectorBorderColor}\n              hoverAnimation={props.hoverAnimation}\n              onMouseOver={this.onMouseOver}\n              onMouseLeave={this.onMouseLeave}\n            />\n          </g>\n        </Chart>\n        {(props.showTooltip ? <Tooltip {...this.state.tooltip} /> : null)}\n      </span>\n    );\n  },\n});\n","\nexports.PieChart = require('./PieChart');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst VoronoiCircleContainer = require('./VoronoiCircleContainer');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    circleRadius: PropTypes.number.isRequired,\n    className: PropTypes.string,\n    colors: PropTypes.func.isRequired,\n    colorAccessor: PropTypes.func.isRequired,\n    data: PropTypes.array.isRequired,\n    height: PropTypes.number.isRequired,\n    xAccessor: PropTypes.func.isRequired,\n    xScale: PropTypes.func.isRequired,\n    yAccessor: PropTypes.func.isRequired,\n    yScale: PropTypes.func.isRequired,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-scatterchart-dataseries',\n    };\n  },\n\n  render() {\n    const props = this.props;\n    const xScale = props.xScale;\n    const yScale = props.yScale;\n    const xAccessor = props.xAccessor;\n    const yAccessor = props.yAccessor;\n\n    const voronoi = d3.voronoi()\n      .x(d => xScale(d.coord.x))\n      .y(d => yScale(d.coord.y))\n      .extent([[0, 0], [props.width, props.height]]);\n\n    const regions = voronoi(props.data).polygons().map( (polygon, idx) => {         \n      const point = polygon.data; \n      delete polygon.data; \n\n      const vnode = polygon;\n      const coord = point.coord;\n\n      const x = xAccessor(coord);\n      const y = yAccessor(coord);\n\n      // The circle coordinates\n      let cx;\n      let cy;\n\n      if (Object.prototype.toString.call(x) === '[object Date]') {\n        cx = xScale(x.getTime());\n      } else {\n        cx = xScale(x);\n      }\n\n      if (Object.prototype.toString.call(y) === '[object Date]') {\n        cy = yScale(y.getTime());\n      } else {\n        cy = yScale(y);\n      }\n\n      return (\n        <VoronoiCircleContainer\n          key={idx}\n          circleFill={props.colors(props.colorAccessor(point.d, point.seriesIndex))}\n          circleRadius={props.circleRadius}\n          cx={cx}\n          cy={cy}\n          vnode={vnode}\n          onMouseOver={props.onMouseOver}\n          dataPoint={{ xValue: x, yValue: y, seriesName: point.series.name }}\n        />\n      );\n    });\n\n    return (\n      <g\n        className={props.className}\n      >\n        {regions}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst d3 = require('d3');\nconst createReactClass = require('create-react-class');\n\nconst { Chart, XAxis, YAxis, XGrid, YGrid, Tooltip } = require('../common');\nconst DataSeries = require('./DataSeries');\nconst utils = require('../utils');\nconst {\n  CartesianChartPropsMixin,\n  DefaultAccessorsMixin,\n  ViewBoxMixin,\n  TooltipMixin,\n} = require('../mixins');\n\nmodule.exports = createReactClass({\n\n  displayName: 'ScatterChart',\n\n  propTypes: {\n    circleRadius: PropTypes.number,\n    className: PropTypes.string,\n    hoverAnimation: PropTypes.bool,\n    margins: PropTypes.object,\n    xAxisClassName: PropTypes.string,\n    yAxisClassName: PropTypes.string,\n  },\n\n  mixins: [\n    CartesianChartPropsMixin,\n    DefaultAccessorsMixin,\n    ViewBoxMixin,\n    TooltipMixin,\n  ],\n\n  getDefaultProps() {\n    return {\n      colors: d3.scaleOrdinal(d3.schemeBlues[6].reverse()),\n      circleRadius: 3,\n      className: 'rd3-scatterchart',\n      hoverAnimation: true,\n      margins: { top: 10, right: 20, bottom: 50, left: 45 },\n      xAxisClassName: 'rd3-scatterchart-xaxis',\n      yAxisClassName: 'rd3-scatterchart-yaxis',\n    };\n  },\n\n  _calculateScales: utils.calculateScales,\n\n  render() {\n    const props = this.props;\n    const data = props.data;\n\n    if (!data || data.length < 1) {\n      return null;\n    }\n\n    const { innerWidth, innerHeight, trans, svgMargins } = this.getDimensions();\n    const yOrient = this.getYOrient();\n    const domain = props.domain || {};\n\n    // Returns an object of flattened allValues, xValues, and yValues\n    const flattenedData = utils.flattenData(data, props.xAccessor, props.yAccessor);\n\n    const allValues = flattenedData.allValues;\n    const xValues = flattenedData.xValues;\n    const yValues = flattenedData.yValues;\n\n    const scales = this._calculateScales(\n      innerWidth, innerHeight, xValues, yValues, domain.x, domain.y\n    );\n    const xScale = scales.xScale;\n    const yScale = scales.yScale;\n\n    return (\n      <span onMouseLeave={this.onMouseLeave}>\n        <Chart\n          colors={props.colors}\n          colorAccessor={props.colorAccessorOrdinal}\n          data={data}\n          height={props.height}\n          legend={props.legend}\n          sideOffset={props.sideOffset}\n          margins={props.margins}\n          title={props.title}\n          viewBox={this.getViewBox()}\n          width={props.width}\n          shouldUpdate={!this.state.changeState}\n        >\n          <g\n            className={props.className}\n            transform={trans}\n          >\n            <XGrid\n              xAxisClassName={props.xAxisClassName}\n              xAxisTickValues={props.xAxisTickValues}\n              xAxisTickCount={props.xAxisTickCount}\n              xAxisTickInterval={props.xAxisTickInterval}\n              xAxisOffset={props.xAxisOffset}\n              xScale={scales.xScale}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              data={props.data}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridVertical={props.gridVertical}\n              gridVerticalStroke={props.gridVerticalStroke}\n              gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n            />\n            <YGrid\n              yAxisClassName={props.yAxisClassName}\n              yScale={scales.yScale}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisTickCount={props.yAxisTickCount}\n              yAxisOffset={props.yAxisOffset}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridHorizontal={props.gridHorizontal}\n              gridHorizontalStroke={props.gridHorizontalStroke}\n              gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n              gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n            />\n\n            <DataSeries\n              circleRadius={props.circleRadius}\n              colors={props.colors}\n              colorAccessor={props.colorAccessorOrdinal}\n              data={allValues}\n              height={innerHeight}\n              hoverAnimation={props.hoverAnimation}\n              width={innerWidth}\n              xAccessor={(coord) => coord.x}\n              xScale={xScale}\n              yAccessor={(coord) => coord.y}\n              yScale={yScale}\n              onMouseOver={this.onMouseOver}\n            />\n            <XAxis\n              data={data}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              margins={svgMargins}\n              stroke={props.axesColor}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              width={innerWidth}\n              xAxisClassName={props.xAxisClassName}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              xAxisOffset={props.xAxisOffset}\n              xAxisTickInterval={props.xAxisTickInterval}\n              xAxisTickValues={props.xAxisTickValues}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              xScale={xScale}\n              gridVertical={props.gridVertical}\n              gridVerticalStroke={props.gridVerticalStroke}\n              gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n            />\n            <YAxis\n              data={data}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              margins={svgMargins}\n              stroke={props.axesColor}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              yAxisClassName={props.yAxisClassName}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              yAxisOffset={props.yAxisOffset}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisTickCount={props.yAxisTickCount}\n              yScale={yScale}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              gridHorizontal={props.gridHorizontal}\n              gridHorizontalStroke={props.gridHorizontalStroke}\n              gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n            />\n\n          </g>\n        </Chart>\n        {(props.showTooltip ? <Tooltip {...this.state.tooltip} /> : null)}\n      </span>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'VoronoiCircle',\n\n  propTypes: {\n    circleFill: PropTypes.string.isRequired,\n    circleRadius: PropTypes.number.isRequired,\n    className: PropTypes.string,\n    cx: PropTypes.number.isRequired,\n    cy: PropTypes.number.isRequired,\n    handleMouseLeave: PropTypes.func.isRequired,\n    handleMouseOver: PropTypes.func.isRequired,\n    pathFill: PropTypes.string,\n    voronoiPath: PropTypes.string.isRequired,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-scatterchart-voronoi-circle',\n      pathFill: 'transparent',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    return (\n      <g>\n        <path\n          d={props.voronoiPath}\n          fill={props.pathFill}\n          stroke='#DCDCDC'\n          onMouseLeave={props.handleMouseLeave}\n          onMouseOver={props.handleMouseOver}\n        />\n        <circle\n          cx={props.cx}\n          cy={props.cy}\n          className={props.className}\n          fill={props.circleFill}\n          onMouseLeave={props.handleMouseLeave}\n          onMouseOver={props.handleMouseOver}\n          r={props.circleRadius}\n        />\n      </g>\n    );\n  },\n});\n","'use strict';\n\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst { findDOMNode } = require('react-dom');\nconst shade = require('../utils').shade;\nconst VoronoiCircle = require('./VoronoiCircle');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'VornoiCircleContainer',\n\n  propTypes: {\n    circleFill: PropTypes.string,\n    circleRadius: PropTypes.number,\n    circleRadiusMultiplier: PropTypes.number,\n    className: PropTypes.string,\n    hoverAnimation: PropTypes.bool,\n    shadeMultiplier: PropTypes.number,\n    vnode: PropTypes.array.isRequired,\n    onMouseOver: PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      circleFill: '#1f77b4',\n      circleRadius: 3,\n      circleRadiusMultiplier: 1.25,\n      className: 'rd3-scatterchart-voronoi-circle-container',\n      hoverAnimation: true,\n      shadeMultiplier: 0.2,\n    };\n  },\n\n  getInitialState() {\n    return {\n      circleFill: this.props.circleFill,\n      circleRadius: this.props.circleRadius,\n    };\n  },\n\n  _animateCircle() {\n    const props = this.props;\n\n    if (props.hoverAnimation) {\n      const rect = findDOMNode(this).getElementsByTagName('circle')[0].getBoundingClientRect();\n      this.props.onMouseOver.call(this, rect.right, rect.top, props.dataPoint);\n      this.setState({\n        circleFill: shade(props.circleFill, props.shadeMultiplier),\n        circleRadius: props.circleRadius * props.circleRadiusMultiplier,\n      });\n    }\n  },\n\n  _restoreCircle() {\n    const props = this.props;\n    if (props.hoverAnimation) {\n      this.setState({\n        circleFill: props.circleFill,\n        circleRadius: props.circleRadius,\n      });\n    }\n  },\n\n  _drawPath(d) {\n    if (typeof d === 'undefined') {\n      return 'M Z';\n    }\n\n    return `M${d.join(',')}Z`;\n  },\n\n  render() {\n    const props = this.props;\n    const state = this.state;\n\n    return (\n      <g\n        className={props.className}\n      >\n        <VoronoiCircle\n          circleFill={state.circleFill}\n          circleRadius={state.circleRadius}\n          cx={props.cx}\n          cy={props.cy}\n          handleMouseLeave={this._restoreCircle}\n          handleMouseOver={this._animateCircle}\n          voronoiPath={this._drawPath(props.vnode)}\n        />\n      </g>\n    );\n  },\n});\n","\nexports.ScatterChart = require('./ScatterChart');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Cell',\n\n  propTypes: {\n    fill: PropTypes.string,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    label: PropTypes.string,\n  },\n\n  render() {\n    const props = this.props;\n\n    const textStyle = {\n      textAnchor: 'middle',\n      fill: props.textColor,\n      fontSize: props.fontSize,\n      fontWeight: '600'\n    };\n\n    const t = `translate(${props.x}, ${props.y}  )`;\n\n    return (\n      <g transform={t}>\n        <rect\n          className=\"rd3-treemap-cell\"\n          width={props.width}\n          height={props.height}\n          fill={props.fill}\n          onMouseOver={props.handleMouseOver}\n          onMouseLeave={props.handleMouseLeave}\n        />\n        <text\n          x={props.width / 2}\n          y={props.height / 2}\n          dy=\".35em\"\n          style={textStyle}\n          className=\"rd3-treemap-cell-text\"\n        >\n          {props.label}\n        </text>\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst shade = require('../utils').shade;\nconst Cell = require('./Cell');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'CellContainer',\n\n  propTypes: {\n    fill: PropTypes.string,\n  },\n\n  getInitialState() {\n    return {\n      // fill is named as fill instead of initialFill to avoid\n      // confusion when passing down props from top parent\n      fill: this.props.fill,\n    };\n  },\n\n  _animateCell() {\n    this.setState({\n      fill: shade(this.props.fill, 0.05),\n    });\n  },\n\n  _restoreCell() {\n    this.setState({\n      fill: this.props.fill,\n    });\n  },\n\n  render() {\n    const props = this.props;\n    return (\n      <Cell\n        {...props}\n        fill={this.state.fill}\n        handleMouseOver={props.hoverAnimation ? this._animateCell : null}\n        handleMouseLeave={props.hoverAnimation ? this._restoreCell : null}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst CellContainer = require('./CellContainer');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    data: PropTypes.array,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    width: PropTypes.number,\n    height: PropTypes.number,\n  },\n\n  getDefaultProps() {\n    return {\n      data: [],\n      colors: d3.scaleOrdinal(d3.schemePastel2),\n      colorAccessor: (d, idx) => idx,\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const treemap = d3.treemap()\n                    .size([props.width, props.height]);\n\n    // stratify the data: reformatting for d3.js\n    var root = d3.stratify()\n      .id(function(d) { return d.label; })\n      .parentId(function(d) { return d.parent; })\n      (props.data);\n\n    root.sum(function(d) { return +d.value })\n\n    const tree = treemap(root);\n\n    const cells = tree.children.map((node, idx) => (\n        <CellContainer\n          key={idx}\n          x={node.x0}\n          y={node.y0}\n          width={node.x1 - node.x0}\n          height={node.y1 - node.y0}\n          fill={props.colors(props.colorAccessor(node, idx))}\n          label={node.data.label}\n          fontSize={props.fontSize}\n          textColor={props.textColor}\n          hoverAnimation={props.hoverAnimation}\n        />\n    ), this);\n\n    return (\n      <g transform={props.transform} className=\"treemap\">\n        {cells}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst d3 = require('d3');\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst Chart = require('../common').Chart;\nconst DataSeries = require('./DataSeries');\n\nmodule.exports = createReactClass({\n\n  displayName: 'Treemap',\n\n  propTypes: {\n    data: PropTypes.array,\n    margins: PropTypes.object,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    title: PropTypes.string,\n    textColor: PropTypes.string,\n    fontSize: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    hoverAnimation: PropTypes.bool,\n  },\n\n  getDefaultProps() {\n    return {\n      hoverAnimation: true,\n      data: [],\n      width: 400,\n      heigth: 200,\n      title: '',\n      textColor: '#f7f7f7',\n      fontSize: '0.85em',\n      // colors: d3.scaleOrdinal(d3.schemeCategory10),\n      colorAccessor: (d, idx) => idx,\n    };\n  },\n\n  render() {\n    const props = this.props;\n    if (this.props.data && this.props.data.length < 1) {\n      return null;\n    }\n\n    return (\n      <Chart\n        title={props.title}\n        width={props.width}\n        height={props.height}\n      >\n        <g className=\"rd3-treemap\">\n          <DataSeries\n            data={props.data}\n            width={props.width}\n            height={props.height}\n            colors={props.colors}\n            colorAccessor={props.colorAccessor}\n            textColor={props.textColor}\n            fontSize={props.fontSize}\n            hoverAnimation={props.hoverAnimation}\n          />\n        </g>\n      </Chart>\n    );\n  },\n});\n","\nexports.Treemap = require('./Treemap');\n","const d3 = require('d3');\n\nexports.calculateScales = (width, height, xValues, yValues, xDomain = [], yDomain = []) => {\n  let xScale;\n  if (xValues.length > 0 && Object.prototype.toString.call(xValues[0]) === '[object Date]') {\n    xScale = d3.scaleTime()\n      .range([0, width]);\n  } else {\n    xScale = d3.scaleLinear()\n      .range([0, width]);\n  }\n  const xdomain = d3.extent(xValues);\n  if (xDomain[0] !== undefined && xDomain[0] !== null) xdomain[0] = xDomain[0];\n  if (xDomain[1] !== undefined && xDomain[1] !== null) xdomain[1] = xDomain[1];\n  xScale.domain(xdomain);\n\n  let yScale;\n  if (yValues.length > 0 && Object.prototype.toString.call(yValues[0]) === '[object Date]') {\n    yScale = d3.scaleTime()\n      .range([height, 0]);\n  } else {\n    yScale = d3.scaleLinear()\n      .range([height, 0]);\n  }\n\n  const ydomain = d3.extent(yValues);\n  if (yDomain[0] !== undefined && yDomain[0] !== null) ydomain[0] = yDomain[0];\n  if (yDomain[1] !== undefined && yDomain[1] !== null) ydomain[1] = yDomain[1];\n  yScale.domain(ydomain);\n\n  return {\n    xScale,\n    yScale,\n  };\n};\n\n// debounce from Underscore.js\n// MIT License: https://raw.githubusercontent.com/jashkenas/underscore/master/LICENSE\n// Copyright (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative\n// Reporters & Editors\nexports.debounce = (func, wait, immediate) => {\n  let timeout;\n  return function debounce(...args) {\n    const context = this;\n    const later = () => {\n      timeout = null;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n};\n\nexports.flattenData = (data, xAccessor, yAccessor) => {\n  const allValues = [];\n  const xValues = [];\n  const yValues = [];\n  const coincidentCoordinateCheck = {};\n\n  data.forEach((series, i) => {\n    series.values.forEach((item, j) => {\n      const x = xAccessor(item);\n\n      // Check for NaN since d3's Voronoi cannot handle NaN values\n      // Go ahead and Proceed to next iteration since we don't want NaN\n      // in allValues or in xValues or yValues\n      if (isNaN(x)) {\n        return;\n      }\n      xValues.push(x);\n\n      const y = yAccessor(item);\n      // when yAccessor returns an object (as in the case of candlestick)\n      // iterate over the keys and push all the values to yValues array\n      let yNode;\n      if (typeof y === 'object' && Object.keys(y).length > 0) {\n        Object.keys(y).forEach((key) => {\n          // Check for NaN since d3's Voronoi cannot handle NaN values\n          // Go ahead and Proceed to next iteration since we don't want NaN\n          // in allValues or in xValues or yValues\n          if (isNaN(y[key])) {\n            return;\n          }\n          yValues.push(y[key]);\n          // if multiple y points are to be plotted for a single x\n          // as in the case of candlestick, default to y value of 0\n          yNode = 0;\n        });\n      } else {\n        // Check for NaN since d3's Voronoi cannot handle NaN values\n        // Go ahead and Proceed to next iteration since we don't want NaN\n        // in allValues or in xValues or yValues\n        if (isNaN(y)) {\n          return;\n        }\n        yValues.push(y);\n        yNode = y;\n      }\n\n      const xyCoords = `${x}-${yNode}`;\n      if (coincidentCoordinateCheck.hasOwnProperty(xyCoords)) {\n        // Proceed to next iteration if the x y pair already exists\n        // d3's Voronoi cannot handle NaN values or coincident coords\n        // But we push them into xValues and yValues above because\n        // we still may handle them there (labels, etc.)\n        return;\n      }\n      coincidentCoordinateCheck[xyCoords] = '';\n\n      const pointItem = {\n        coord: {\n          x,\n          y: yNode,\n        },\n        d: item,\n        id: series.name + j,\n        series,\n        seriesIndex: i,\n      };\n      allValues.push(pointItem);\n    });\n  });\n\n  return { allValues, xValues, yValues };\n};\n\n\nexports.shade = (hex, percent) => {\n  let red;\n  let green;\n  let blue;\n  const min = Math.min;\n  const round = Math.round;\n  if (hex.length !== 7) { return hex; }\n  const number = parseInt(hex.slice(1), 16);\n  const R = number >> 16;\n  const G = number >> 8 & 0xFF;\n  const B = number & 0xFF;\n  red = min(255, round((1 + percent) * R)).toString(16);\n  if (red.length === 1) red = `0${red}`;\n  green = min(255, round((1 + percent) * G)).toString(16);\n  if (green.length === 1) green = `0${green}`;\n  blue = min(255, round((1 + percent) * B)).toString(16);\n  if (blue.length === 1) blue = `0${blue}`;\n  return `#${red}${green}${blue}`;\n};\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/ChartContext.js","src/ChartProvider.js","src/SetStyle.js","src/areachart/Area.jsx","src/areachart/AreaChart.jsx","src/areachart/AreaContainer.jsx","src/areachart/DataSeries.jsx","src/areachart/index.js","src/barchart/Bar.jsx","src/barchart/BarChart.jsx","src/barchart/BarContainer.jsx","src/barchart/DataSeries.jsx","src/barchart/index.js","src/candlestick/Candle.jsx","src/candlestick/CandlestickChart.jsx","src/candlestick/CandlestickContainer.jsx","src/candlestick/DataSeries.jsx","src/candlestick/Wick.jsx","src/candlestick/index.js","src/common/Legend.jsx","src/common/Polygon.jsx","src/common/Tooltip.jsx","src/common/Voronoi.jsx","src/common/axes/AxisLine.jsx","src/common/axes/AxisTicks.jsx","src/common/axes/Label.jsx","src/common/axes/XAxis.jsx","src/common/axes/XGrid.jsx","src/common/axes/YAxis.jsx","src/common/axes/YGrid.jsx","src/common/axes/index.js","src/common/charts/BasicChart.jsx","src/common/charts/Chart.jsx","src/common/charts/LegendChart.jsx","src/common/charts/index.js","src/common/index.js","src/index.js","src/linechart/DataSeries.jsx","src/linechart/Line.jsx","src/linechart/LineChart.jsx","src/linechart/VoronoiCircle.jsx","src/linechart/VoronoiCircleContainer.jsx","src/linechart/index.js","src/mixins/CartesianChartPropsMixin.js","src/mixins/DefaultAccessorsMixin.js","src/mixins/TooltipMixin.js","src/mixins/ViewBoxMixin.js","src/mixins/index.js","src/piechart/Arc.jsx","src/piechart/ArcContainer.jsx","src/piechart/DataSeries.jsx","src/piechart/PieChart.jsx","src/piechart/index.js","src/scatterchart/DataSeries.jsx","src/scatterchart/ScatterChart.jsx","src/scatterchart/VoronoiCircle.jsx","src/scatterchart/VoronoiCircleContainer.jsx","src/scatterchart/index.js","src/treemap/Cell.jsx","src/treemap/CellContainer.jsx","src/treemap/DataSeries.jsx","src/treemap/Treemap.jsx","src/treemap/index.js","src/utils/index.js"],"names":[],"mappings":"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","file":"react-d3.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import React from 'react';\n\nconst ChartContext = React.createContext();\n\nexport default ChartContext;","import ChartContext from './ChartContext';\n\nconst React = require('react');\n\nmodule.exports = createReactClass({\n    displayName: 'ChartProvider',\n\n\n    getInitialState() {\n        return {\n          chartStyle:'asdf'\n        };\n      },\n\n\n    render() {\n        return (\n            <ChartContext.Provider\n                value={{\n                    chartStyle:this.state.chartStyle,\n                    setChartStyle: style => {\n                        this.setState({\n                            chartStyle:style\n                        });\n                    }\n                }}\n            >\n                {this.props.children}\n\n            </ChartContext.Provider>\n        )\n    }\n})","import ChartContext from './ChartContext';\nconst React = require('react');\n\n/*\n    This components sets context variables.\n    It will be outside of this application after migrate to React function components.\n*/\n\n\nmodule.exports = createReactClass({\n    displayName: 'SetStyle',\n\n    render() {\n\n        this.contextType = ChartContext;\n        const context = this.contextType._currentValue\n        context.setChartStyle(this.props.style)\n\n        return (\n            null\n        )\n    }\n})\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Area',\n\n  propTypes: {\n    path: PropTypes.string,\n    fill: PropTypes.string,\n    handleMouseOver: PropTypes.func,\n    handleMouseLeave: PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: '#3182bd',\n    };\n  },\n\n  render() {\n    return (\n      <path\n        className=\"rd3-areachart-area\"\n        d={this.props.path}\n        fill={this.props.fill}\n        onMouseOver={this.props.handleMouseOver}\n        onMouseLeave={this.props.handleMouseLeave}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst DataSeries = require('./DataSeries');\nconst { Chart, XAxis, YAxis, XGrid, YGrid } = require('../common');\nconst { CartesianChartPropsMixin, DefaultAccessorsMixin, ViewBoxMixin } = require('../mixins');\n\nmodule.exports = createReactClass({\n\n  displayName: 'AreaChart',\n\n  propTypes: {\n    margins: PropTypes.object,\n    interpolate: PropTypes.bool,\n    interpolationType: PropTypes.string,\n    hoverAnimation: PropTypes.bool,\n    data: PropTypes.array.isRequired,\n  },\n\n  mixins: [CartesianChartPropsMixin, DefaultAccessorsMixin, ViewBoxMixin],\n\n  getDefaultProps() {\n    return {\n      colors: d3.scaleOrdinal(d3.schemeBlues[3].reverse()),\n      // colors: d3.scaleOrdinal(d3.schemePastel2),\n\n      margins: { top: 10, right: 20, bottom: 40, left: 45 },\n      yAxisTickCount: 4,\n      interpolate: false,\n      interpolationType: null,\n      className: 'rd3-areachart',\n      hoverAnimation: true,\n      data: [],\n    };\n  },\n\n  render() {\n    const props = this.props;\n    let data = props.data;\n    const interpolationType =\n      props.interpolationType ||\n      (props.interpolate ? 'cardinal' : 'linear');\n\n    const { innerWidth, innerHeight, trans, svgMargins } = this.getDimensions();\n    const yOrient = this.getYOrient();\n\n    if (!Array.isArray(data)) {\n      data = [data];\n    }\n    if (this.props.data && this.props.data.length < 1) {\n      return null;\n    }\n\n    const yScale = d3.scaleLinear()\n      .range([innerHeight, 0]);\n\n    const xValues = [];\n    const yValues = [];\n    // const seriesNames = [];\n    // const yMaxValues = [];\n    const domain = props.domain || {};\n    const xDomain = domain.x || [];\n    const yDomain = domain.y || [];\n    const seriesNames = Object.keys(data[0]).filter( f => f !== 'date') || [];\n\n    const yMaxValues = d3.sum(seriesNames.map( n => {\n        return d3.max(data.map( d => { return d[n]}))\n    }))\n\n\n    /* TODO - generalize. Only acceptint field date for x axis*/\n    data.map( d => {\n      xValues.push(d.date);\n    })\n\n\n    let xScale;\n    if (xValues.length > 0 &&\n      Object.prototype.toString.call(xValues[0]) === '[object Date]' &&\n      props.xAxisTickInterval) {\n      xScale = d3.scaleTime()\n        .range([0, innerWidth]);\n    } else {\n      xScale = d3.scaleLinear()\n        .range([0, innerWidth]);\n    }\n\n    const xdomain = d3.extent(xValues);\n    if (xDomain[0] !== undefined && xDomain[0] !== null) xdomain[0] = xDomain[0];\n    if (xDomain[1] !== undefined && xDomain[1] !== null) xdomain[1] = xDomain[1];\n    xScale.domain(xdomain);\n    const ydomain = [0, yMaxValues];\n    if (yDomain[0] !== undefined && yDomain[0] !== null) ydomain[0] = yDomain[0];\n    if (yDomain[1] !== undefined && yDomain[1] !== null) ydomain[1] = yDomain[1];\n\n    yScale.domain(ydomain);\n\n    const colorsDomain = Array.from(Array(seriesNames.length).keys())\n    props.colors.domain(colorsDomain);\n\n    const stack = d3.stack()\n    stack.keys(seriesNames)\n\n    const layers = stack(data)\n    const dataSeries = layers.map((d, idx) => (\n        <DataSeries\n        key={idx}\n        fill={props.colors(props.colorAccessorOrdinal(d, idx))}\n        // seriesName={d.name}\n        index={idx}\n        xScale={xScale}\n        yScale={yScale}\n        data={d}\n        xAccessor={props.xAccessor}\n        yAccessor={props.yAccessor}\n        interpolationType={interpolationType}\n        hoverAnimation={props.hoverAnimation}\n      />\n\n    ));\n\n    return (\n      <Chart\n        viewBox={this.getViewBox()}\n        legend={props.legend}\n        data={data}\n        margins={props.margins}\n        width={props.width}\n        height={props.height}\n        title={props.title}\n      >\n        <g transform={trans} className={props.className}>\n        <XGrid\n            xAxisClassName=\"rd3-areachart-xaxis\"\n            xScale={xScale}\n            xAxisTickValues={props.xAxisTickValues}\n            xAxisTickInterval={props.xAxisTickInterval}\n            xAxisTickCount={props.xAxisTickCount}\n            xAxisLabel={props.xAxisLabel}\n            xAxisLabelOffset={props.xAxisLabelOffset}\n            tickFormatting={props.xAxisFormatter}\n            tickStroke={props.xAxisTickStroke}\n            tickTextStroke={props.xAxisTickTextStroke}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={innerHeight}\n            horizontalChart={props.horizontal}\n            gridVertical={props.gridVertical}\n            gridVerticalStroke={props.gridVerticalStroke}\n            gridVerticalStrokeWidth={props.gridVerticalStrokeWidth}\n            gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n          />\n          <YGrid\n            yAxisClassName=\"rd3-areachart-yaxis\"\n            yScale={yScale}\n            yAxisTickValues={props.yAxisTickValues}\n            yAxisTickInterval={props.yAxisTickInterval}\n            yAxisTickCount={props.yAxisTickCount}\n            yAxisLabel={props.yAxisLabel}\n            yAxisLabelOffset={props.yAxisLabelOffset}\n            tickFormatting={props.yAxisFormatter}\n            tickStroke={props.yAxisTickStroke}\n            tickTextStroke={props.yAxisTickTextStroke}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={props.height}\n            horizontalChart={props.horizontal}\n            gridHorizontal={props.gridHorizontal}\n            gridHorizontalStroke={props.gridHorizontalStroke}\n            gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n            gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n          />\n          {dataSeries}\n          <XAxis\n            xAxisClassName=\"rd3-areachart-xaxis\"\n            xScale={xScale}\n            xAxisTickValues={props.xAxisTickValues}\n            xAxisTickInterval={props.xAxisTickInterval}\n            xAxisTickCount={props.xAxisTickCount}\n            xAxisLabel={props.xAxisLabel}\n            xAxisLabelOffset={props.xAxisLabelOffset}\n            tickFormatting={props.xAxisFormatter}\n            tickStroke={props.xAxisTickStroke}\n            tickTextStroke={props.xAxisTickTextStroke}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={innerHeight}\n            horizontalChart={props.horizontal}\n            gridVertical={props.gridVertical}\n            gridVerticalStroke={props.gridVerticalStroke}\n            gridVerticalStrokeWidth={props.gridVerticalStrokeWidth}\n            gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n          />\n          <YAxis\n            yAxisClassName=\"rd3-areachart-yaxis\"\n            yScale={yScale}\n            yAxisTickValues={props.yAxisTickValues}\n            yAxisTickInterval={props.yAxisTickInterval}\n            yAxisTickCount={props.yAxisTickCount}\n            yAxisLabel={props.yAxisLabel}\n            yAxisLabelOffset={props.yAxisLabelOffset}\n            tickFormatting={props.yAxisFormatter}\n            tickStroke={props.yAxisTickStroke}\n            tickTextStroke={props.yAxisTickTextStroke}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={props.height}\n            horizontalChart={props.horizontal}\n            gridHorizontal={props.gridHorizontal}\n            gridHorizontalStroke={props.gridHorizontalStroke}\n            gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n            gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n          />\n        </g>\n      </Chart>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst shade = require('../utils').shade;\nconst Area = require('./Area');\n\nmodule.exports = createReactClass({\n\n  displayName: 'AreaContainer',\n\n  propTypes: {\n    fill: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: '#3182bd',\n    };\n  },\n\n  getInitialState() {\n    return {\n      fill: this.props.fill,\n    };\n  },\n\n  _animateArea() {\n    this.setState({\n      fill: shade(this.props.fill, 0.02),\n    });\n  },\n\n  _restoreArea() {\n    this.setState({\n      fill: this.props.fill,\n    });\n  },\n\n  render() {\n    const props = this.props;\n\n    // animation controller\n    let handleMouseOver;\n    let handleMouseLeave;\n    if (props.hoverAnimation) {\n      handleMouseOver = this._animateArea;\n      handleMouseLeave = this._restoreArea;\n    } else {\n      handleMouseOver = handleMouseLeave = null;\n    }\n\n    return (\n      <Area\n        handleMouseOver={handleMouseOver}\n        handleMouseLeave={handleMouseLeave}\n        {...props}\n        fill={this.state.fill}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst AreaContainer = require('./AreaContainer');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    fill: PropTypes.string,\n    interpolationType: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      interpolationType: 'linear',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const area = d3.area()\n    .x((d) => props.xScale(d.data.date))\n    .y0((d) => props.yScale(d[0]))\n    .y1((d) => props.yScale(d[1]))\n    .curve(d3.curveCatmullRom.alpha(0.5));\n\n    const path = area(props.data);\n\n    return (\n      <AreaContainer\n        fill={props.fill}\n        hoverAnimation={props.hoverAnimation}\n        path={path}\n      />\n    );\n  },\n});\n","\nexports.AreaChart = require('./AreaChart');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  propTypes: {\n    fill: PropTypes.string,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    x: PropTypes.number,\n    y: PropTypes.number,\n    className: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      offset: 0,\n      className: 'rd3-barchart-bar',\n    };\n  },\n\n  render() {\n    return (\n      <rect\n        className=\"rd3-barchart-bar\"\n        {...this.props}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst DataSeries = require('./DataSeries');\nconst { Chart, XAxis, XGrid, YGrid, YAxis, Tooltip } = require('../common');\nconst {\n  CartesianChartPropsMixin,\n  DefaultAccessorsMixin,\n  ViewBoxMixin,\n  TooltipMixin,\n} = require('../mixins');\n\nmodule.exports = createReactClass({\n\n  displayName: 'BarChart',\n\n  propTypes: {\n    chartClassName: PropTypes.string,\n    data: PropTypes.array.isRequired,\n    hoverAnimation: PropTypes.bool,\n    margins: PropTypes.object,\n    rangeRoundBandsPadding: PropTypes.number,\n    // https://github.com/mbostock/d3/wiki/Stack-Layout#offset\n    stackOffset: PropTypes.oneOf(['silhouette', 'expand', 'wigget', 'zero']),\n    grouped: PropTypes.bool,\n    valuesAccessor: PropTypes.func,\n    xAccessorBar: PropTypes.func,\n    yAccessorBar: PropTypes.func,\n    y0Accessor: PropTypes.func,\n    title: PropTypes.string,\n    xAxisClassName: PropTypes.string,\n    yAxisClassName: PropTypes.string,\n    yAxisTickCount: PropTypes.number,\n    xIsDate: PropTypes.bool,\n    color: PropTypes.object,\n  },\n\n\n\n\n  mixins: [CartesianChartPropsMixin, DefaultAccessorsMixin, ViewBoxMixin, TooltipMixin],\n\n  getDefaultProps() {\n    return {\n      chartClassName: 'rd3-barchart',\n      hoverAnimation: true,\n      margins: { top: 10, right: 20, bottom: 40, left: 45 },\n      rangeRoundBandsPadding: 0.25,\n      stackOffset: 'zero',\n      grouped: false,\n      valuesAccessor: d => d,\n      y0Accessor: d => d[0],\n      xAxisClassName: 'rd3-barchart-xaxis',\n      yAxisClassName: 'rd3-barchart-yaxis',\n      yAxisTickCount: 4,\n      xIsDate: false,\n      color: {\n        accessor: 'Sequential',\n        colors: d3.scaleOrdinal(d3.schemeBlues[9].reverse())\n      }\n    };\n  },\n\n\n  _getLabels(firstSeries) {\n    // we only need first series to get all the labels\n    const { valuesAccessor, xAccessorBar } = this.props;\n    return valuesAccessor(firstSeries).map(xAccessorBar);\n  },\n\n  _stack(seriesNames) {\n    // Only support columns with all positive or all negative values\n    // https://github.com/mbostock/d3/issues/2265\n    const { stackOffset, xAccessorBar, yAccessorBar, valuesAccessor } = this.props;\n    return d3.stack()\n              .keys(seriesNames)\n              .order(d3.stackOrderNone)\n              .offset(d3.stackOffsetNone);\n  },\n\n  render() {\n    const props = this.props;\n    const yOrient = this.getYOrient();\n\n    const domain = props.domain || {};\n\n    if (props.data.length === 0) {\n      return null;\n    }\n\n    const _array = props.data\n    const dataDict = {}\n\n    /* Check date field */\n    _array.map( (elem, idxE) => {\n        let bar;\n        /* TODO: have to cast from string to bool on the client */\n        props.xIsDate === \"true\" ? bar = new Date(elem.x).toLocaleDateString() : bar = elem.x;\n        if (typeof dataDict[bar] === 'undefined'){\n          dataDict[bar] = {'x':bar, [elem.name]:+elem.y}\n        }else{\n          dataDict[bar][elem.name] = +elem.y\n        }\n    })\n\n    /* ENTRADA PRECISA SER ESSES !!! */\n    const data = Object.keys(dataDict).map(function(key){\n        return dataDict[key];\n    });\n\n    /* COLUMNS */\n    let series = new Set(props.data.map((item) => item.name));\n    series = Array.from(series);\n\n    /* d3 */\n    const _data = this._stack(series)(data);\n    // debugger\n\n    const { innerHeight, innerWidth, trans, svgMargins } = this.getDimensions();\n\n    const xScale = d3.scaleBand()\n    .domain(data.map(d => d.x))\n    .paddingInner(0.1)\n    .paddingOuter(0.1)\n    .range([0, innerWidth])\n\n    const minYDomain = Math.min(0, d3.min(_data, (d) => (d[1])))\n    const maxYDomain = d3.max(_data, (d) => (d[1]))\n    const yDomain = ([d3.min(_data, d => d3.min(d, d => d[1])), d3.max(_data, d => d3.max(d, d => d[1]))])\n    const yScale = d3.scaleLinear().range([innerHeight, 0]).domain(yDomain);\n    const maxYObjects = d3.max(data.map( d => Object.keys(d).length))\n    const origArray = [...Array(maxYObjects).keys()]\n\n    let colorsDomain;\n    let colorsAccessor;\n\n\n    if (this.props.color.accessor === 'Sequential'){\n        colorsDomain = origArray.map(x => x / maxYObjects)\n        colorsAccessor = this.props.colorAccessorSequential\n    }else{\n        colorsDomain = series\n        colorsAccessor = this.props.colorAccessorOrdinal\n    }\n    // debugger;\n    // colorsDomain.reverse()\n\n\n\n    return (\n      <span>\n        <Chart\n          viewBox={this.getViewBox()}\n          legend={props.legend}\n          data={props.data}\n          margins={props.margins}\n          color={this.props.color}\n          colorsDomain={colorsDomain}\n          colorsAccessor={colorsAccessor}\n          width={props.width}\n          height={props.height}\n          title={props.title}\n          shouldUpdate={!this.state.changeState}\n          series={series}\n          svgLegend={props.svgLegend}\n          svgChart={props.svgChart}\n          legendStyle={props.legendStyle}\n          background={props.background}\n          svgTitle={props.svgTitle}\n        >\n          <g transform={trans} className={props.chartClassName}>\n            <XGrid\n              xAxisClassName={props.xAxisClassName}\n              xAxisTickValues={props.xAxisTickValues}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              xScale={xScale}\n              margins={svgMargins}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              gridVertical={props.gridVertical}\n              gridVerticalStroke={props.gridVerticalStroke}\n              gridVerticalStrokeWidth={props.gridVerticalStrokeWidth}\n              gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n              gridText={props.gridText}\n              translateTickLabel_Y_X={props.translateTickLabel_Y_X}\n              translateTickLabel_Y_Y={props.translateTickLabel_Y_Y}\n              translateTickLabel_X_X={props.translateTickLabel_X_X}\n              translateTickLabel_X_Y={props.translateTickLabel_X_Y}\n            />\n            <YGrid\n              yAxisClassName={props.yAxisClassName}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              yScale={yScale}\n              margins={svgMargins}\n              yAxisTickCount={props.yAxisTickCount}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              gridHorizontal={props.gridHorizontal}\n              gridHorizontalStroke={props.gridHorizontalStroke}\n              gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n              gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n              gridText={props.gridText}\n              translateTickLabel_Y_X={props.translateTickLabel_Y_X}\n              translateTickLabel_Y_Y={props.translateTickLabel_Y_Y}\n              translateTickLabel_X_X={props.translateTickLabel_X_X}\n              translateTickLabel_X_Y={props.translateTickLabel_X_Y}\n            />\n            <DataSeries\n              yScale={yScale}\n              xScale={xScale}\n              margins={svgMargins}\n              _data={_data}\n              series={series}\n              width={innerWidth}\n              height={innerHeight}\n              grouped={props.grouped}\n              color={this.props.color}\n              colorsDomain={colorsDomain}\n              colorsAccessor={colorsAccessor}\n              hoverAnimation={props.hoverAnimation}\n              valuesAccessor={props.valuesAccessor}\n              xAccessorBar={props.xAccessorBar}\n              yAccessorBar={props.yAccessorBar}\n              y0Accessor={props.y0Accessor}\n              onMouseOver={this.onMouseOver}\n              onMouseLeave={this.onMouseLeave}\n            />\n            <YAxis\n              yAxisClassName={props.yAxisClassName}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              yScale={yScale}\n              margins={svgMargins}\n              yAxisTickCount={props.yAxisTickCount}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n            />\n            <XAxis\n              xAxisClassName={props.xAxisClassName}\n              xAxisTickValues={props.xAxisTickValues}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              xScale={xScale}\n              margins={svgMargins}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n            />\n\n\n\n          </g>\n        </Chart>\n        {(props.showTooltip ? <Tooltip {...this.state.tooltip} /> : null)}\n      </span>\n    );\n  },\n});\n","'use strict';\n\nimport * as ReactDOM from 'react-dom'\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\nconst Bar = require('./Bar');\nconst shade = require('../utils').shade;\n\n\nmodule.exports = createReactClass({\n\n  propTypes: {\n    fill: PropTypes.string,\n    onMouseOver: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n  },\n\n\n  getInitialState() {\n    return {\n      // fill is named as fill instead of initialFill to avoid\n      // confusion when passing down props from top parent\n      fill: this.props.fill,\n    };\n  },\n\n  _animateBar() {\n    const rect = ReactDOM.findDOMNode(this).getBoundingClientRect();\n    this.props.onMouseOver.call(this, rect.right, rect.top, this.props.datapoint);\n    this.setState({\n      fill: shade(this.props.fill, 0.2),\n    });\n  },\n\n  _restoreBar() {\n    this.props.onMouseLeave.call(this);\n    this.setState({\n      fill: this.props.fill,\n    });\n  },\n\n  render() {\n    const props = this.props;\n\n    // animation controller\n    let handleMouseOver;\n    let handleMouseLeave;\n    if (props.hoverAnimation) {\n      handleMouseOver = this._animateArea;\n      handleMouseLeave = this._restoreArea;\n    } else {\n      handleMouseOver = handleMouseLeave = null;\n    }\n\n\n    // Remove props\n    const newProps = Object.assign({}, this.props);\n    delete newProps.hoverAnimation;\n\n    return (\n      <Bar\n        {...newProps}\n        fill={this.props.fill}\n        onMouseOver={props.hoverAnimation ? this._animateBar : null}\n        onMouseLeave={props.hoverAnimation ? this._restoreBar : null}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst BarContainer = require('./BarContainer');\n\nconst {\n  CartesianChartPropsMixin,\n} = require('../mixins');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n  mixins: [CartesianChartPropsMixin],\n  propTypes: {\n    _data: PropTypes.array,\n    series: PropTypes.array,\n    grouped: PropTypes.bool,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    height: PropTypes.number,\n    width: PropTypes.number,\n    valuesAccessor: PropTypes.func,\n    xAccessorBar: PropTypes.func,\n    yAccessorBar: PropTypes.func,\n    y0Accessor: PropTypes.func,\n    onMouseOver: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    hoverAnimation: PropTypes.bool, // TODO: prop types?\n    xScale: PropTypes.any,\n    yScale: PropTypes.any,\n  },\n\n  mixins: [CartesianChartPropsMixin],\n\n  _renderBarSeries() {\n    const { _data, valuesAccessor } = this.props;\n    return _data.map((layer, seriesIdx) => {\n      return (valuesAccessor(layer).map(segment => this._renderBarContainer(segment, seriesIdx)))\n      }\n    )\n\n  },\n\n  _renderBarContainer(segment, seriesIdx) {\n\n    const { color, colorsAccessor, colorsDomain, grouped, series, xScale, yScale } = this.props;\n    const barHeight = Math.abs(yScale(this.props.y0Accessor(segment)) - yScale(this.props.yAccessorBar(segment)));\n    const yWidth = yScale(this.props.y0Accessor(segment) + this.props.yAccessorBar(segment));\n    let y = grouped ? yScale(this.props.yAccessorBar(segment)) : yWidth;\n    const key = this.props.series[seriesIdx] + segment.data.x +segment[1];\n    const height = Math.abs(this.props.y0Accessor(segment) - this.props.yAccessorBar(segment))\n\n    y = ((this.props.yAccessorBar(segment) >= 0) ? y : y - barHeight)\n    y = y || 0\n\n\n\n\n    return (\n      <BarContainer\n        key={key}\n        height={barHeight || 0}\n        width={xScale.bandwidth() }\n        x={ xScale(this.props.xAccessorBar(segment)) }\n        y={y}\n        fill={this.props.color.colors(colorsAccessor(colorsDomain, seriesIdx))}\n        hoverAnimation={this.props.hoverAnimation}\n        onMouseOver={this.props.onMouseOver}\n        onMouseLeave={this.props.onMouseLeave}\n        datapoint={{\n          xValue: this.props.xAccessorBar(segment),\n          yValue: this.props.yAccessorBar(segment),\n          seriesName: this.props.series[seriesIdx],\n          height: height || 0\n        }}\n      />\n    );\n  },\n\n  render() {\n    return (\n      <g>{this._renderBarSeries()}</g>\n    );\n  },\n});\n","\nexports.BarChart = require('./BarChart');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Candle',\n\n  propTypes: {\n    className: PropTypes.string,\n    shapeRendering: PropTypes.string,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.number,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-candlestick-candle',\n      shapeRendering: 'crispEdges',\n      stroke: '#000',\n      strokeWidth: 1,\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    return (\n      <rect\n        className={props.className}\n        fill={props.candleFill}\n        x={props.candleX}\n        y={props.candleY}\n        stroke={props.candleFill}\n        strokeWidth={props.strokeWidth}\n        style={{ shapeRendering: props.shapeRendering }}\n        width={props.candleWidth}\n        height={props.candleHeight}\n        onMouseOver={props.handleMouseOver}\n        onMouseLeave={props.handleMouseLeave}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst utils = require('../utils');\nconst DataSeries = require('./DataSeries');\nconst { Chart, XAxis, YAxis, XGrid, YGrid } = require('../common');\nconst { ViewBoxMixin, CartesianChartPropsMixin } = require('../mixins');\n\nmodule.exports = createReactClass({\n\n  displayName: 'CandleStickChart',\n\n  propTypes: {\n    data: PropTypes.oneOfType([\n      PropTypes.array,\n      PropTypes.object,\n    ]),\n    fillUp: PropTypes.func,\n    fillUpAccessor: PropTypes.func,\n    fillDown: PropTypes.func,\n    fillDownAccessor: PropTypes.func,\n    hoverAnimation: PropTypes.bool,\n    xAxisFormatter: PropTypes.func,\n    xAxisTickInterval: PropTypes.object,\n    xAxisTickValues: PropTypes.array,\n    yAxisFormatter: PropTypes.func,\n    yAxisTickCount: PropTypes.number,\n    yAxisTickValues: PropTypes.array,\n  },\n\n  mixins: [CartesianChartPropsMixin, ViewBoxMixin],\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-candlestick',\n      xAxisClassName: 'rd3-candlestick-xaxis',\n      yAxisClassName: 'rd3-candlestick-yaxis',\n      data: [],\n      fillUp: () => '#009900',\n      fillUpAccessor: (d, idx) => idx,\n      // fillDown: d3.scaleOrdinal(d3.schemeCategory10),\n      fillDown: () => '#FF3300',\n      fillDownAccessor: (d, idx) => idx,\n      hoverAnimation: true,\n      margins: { top: 10, right: 20, bottom: 30, left: 45 },\n      xAccessor: (d) => d.x,\n      yAccessor: (d) => ({ open: d.open, high: d.high, low: d.low, close: d.close }),\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const { innerWidth, innerHeight, trans, svgMargins } = this.getDimensions();\n    const yOrient = this.getYOrient();\n    const domain = props.domain || {};\n\n    if (!Array.isArray(props.data)) {\n      props.data = [props.data];\n    }\n    if (this.props.data && this.props.data.length < 1) {\n      return null;\n    }\n    const flattenedData = utils.flattenData(props.data, props.xAccessor, props.yAccessor);\n\n    const xValues = flattenedData.xValues;\n    const yValues = flattenedData.yValues;\n    const scales = utils.calculateScales(\n      innerWidth, innerHeight, xValues, yValues, domain.x, domain.y);\n\n    const dataSeries = props.data.map((series, idx) => (\n        <DataSeries\n          key={idx}\n          seriesName={series.name}\n          index={idx}\n          xScale={scales.xScale}\n          yScale={scales.yScale}\n          data={series.values}\n          fillUp={props.fillUp(props.fillUpAccessor(series, idx))}\n          fillDown={props.fillDown(props.fillDownAccessor(series, idx))}\n          xAccessor={props.xAccessor}\n          yAccessor={props.yAccessor}\n          hoverAnimation={props.hoverAnimation}\n        />\n      )\n    );\n\n    return (\n      <Chart\n        viewBox={this.getViewBox()}\n        width={props.width}\n        height={props.height}\n        margins={props.margins}\n        title={props.title}\n      >\n        <g transform={trans} className={props.className}>\n            <XGrid\n              xAxisClassName={props.xAxisClassName}\n              xAxisTickValues={props.xAxisTickValues}\n              xAxisTickCount={props.xAxisTickCount}\n              xAxisTickInterval={props.xAxisTickInterval}\n              xAxisOffset={props.xAxisOffset}\n              xScale={scales.xScale}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              data={props.data}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridVertical={props.gridVertical}\n              gridVerticalStroke={props.gridVerticalStroke}\n              gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n            />\n            <YGrid\n              yAxisClassName={props.yAxisClassName}\n              yScale={scales.yScale}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisTickCount={props.yAxisTickCount}\n              yAxisOffset={props.yAxisOffset}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridHorizontal={props.gridHorizontal}\n              gridHorizontalStroke={props.gridHorizontalStroke}\n              gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n              gridHorizontalStrokeDash={props.gridVerticalStrokeDash}\n            />\n          {dataSeries}\n          <XAxis\n            xAxisClassName={props.xAxisClassName}\n            xScale={scales.xScale}\n            xAxisTickValues={props.xAxisTickValues}\n            xAxisTickInterval={props.xAxisTickInterval}\n            xAxisOffset={props.xAxisOffset}\n            tickFormatting={props.xAxisFormatter}\n            tickStroke={props.xAxisTickStroke}\n            tickTextStroke={props.xAxisTickTextStroke}\n            xAxisLabel={props.xAxisLabel}\n            xAxisLabelOffset={props.xAxisLabelOffset}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={innerHeight}\n            horizontalChart={props.horizontal}\n          />\n          <YAxis\n            yAxisClassName={props.yAxisClassName}\n            yScale={scales.yScale}\n            yAxisTickValues={props.yAxisTickValues}\n            yAxisOffset={props.yAxisOffset}\n            yAxisTickCount={props.yAxisTickCount}\n            tickFormatting={props.yAxisFormatter}\n            tickStroke={props.yAxisTickStroke}\n            tickTextStroke={props.yAxisTickTextStroke}\n            yAxisLabel={props.yAxisLabel}\n            yAxisLabelOffset={props.yAxisLabelOffset}\n            xOrient={props.xOrient}\n            yOrient={yOrient}\n            margins={svgMargins}\n            width={innerWidth}\n            height={props.height}\n            horizontalChart={props.horizontal}\n          />\n        </g>\n      </Chart>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst utils = require('../utils');\nconst Candle = require('./Candle');\nconst Wick = require('./Wick');\n\nmodule.exports = createReactClass({\n\n  displayName: 'CandleStickContainer',\n\n  propTypes: {\n    candleX: PropTypes.number,\n    candleY: PropTypes.number,\n    className: PropTypes.string,\n    candleFill: PropTypes.string,\n    candleHeight: PropTypes.number,\n    candleWidth: PropTypes.number,\n    wickX1: PropTypes.number,\n    wickX2: PropTypes.number,\n    wickY1: PropTypes.number,\n    wickY2: PropTypes.number,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-candlestick-container',\n    };\n  },\n\n  getInitialState() {\n    // state for animation usage\n    return {\n      candleWidth: this.props.candleWidth,\n      candleFill: this.props.candleFill,\n    };\n  },\n\n  _animateCandle() {\n    this.setState({\n      candleWidth: this.props.candleWidth * 1.5,\n      candleFill: utils.shade(this.props.candleFill, -0.2),\n    });\n  },\n\n  _restoreCandle() {\n    this.setState({\n      candleWidth: this.props.candleWidth,\n      candleFill: this.props.candleFill,\n    });\n  },\n\n  render() {\n    const props = this.props;\n    const state = this.state;\n\n    // animation controller\n    let handleMouseOver;\n    let handleMouseLeave;\n    if (props.hoverAnimation) {\n      handleMouseOver = this._animateCandle;\n      handleMouseLeave = this._restoreCandle;\n    } else {\n      handleMouseOver = handleMouseLeave = null;\n    }\n\n    return (\n      <g className={props.className}>\n       <Wick\n         wickX1={props.wickX1}\n         wickX2={props.wickX2}\n         wickY1={props.wickY1}\n         wickY2={props.wickY2}\n       />\n       <Candle\n         candleFill={state.candleFill}\n         candleWidth={state.candleWidth}\n         candleX={props.candleX - ((state.candleWidth - props.candleWidth) / 2)}\n         candleY={props.candleY}\n         candleHeight={props.candleHeight}\n         handleMouseOver={handleMouseOver}\n         handleMouseLeave={handleMouseLeave}\n       />\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst CandlestickContainer = require('./CandlestickContainer');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    fillUp: PropTypes.string.isRequired,\n    fillDown: PropTypes.string.isRequired,\n  },\n\n  render() {\n    const props = this.props;\n\n    const xRange = props.xScale.range();\n    const width = Math.abs(xRange[0] - xRange[1]);\n    const candleWidth = (width / (props.data.length + 2)) * 0.5;\n\n    const dataSeriesArray = props.data.map((d, idx) => {\n      // Candles\n      const ohlc = props.yAccessor(d);\n      const candleX = props.xScale(props.xAccessor(d)) - 0.5 * candleWidth;\n      const candleY = props.yScale(Math.max(ohlc.open, ohlc.close));\n      const candleHeight = Math.abs(props.yScale(ohlc.open) - props.yScale(ohlc.close));\n      const wickY2 = props.yScale(ohlc.low);\n      const candleFill = (ohlc.open <= ohlc.close) ? props.fillUp : props.fillDown;\n\n      // Wicks\n      const wickX1 = props.xScale(props.xAccessor(d));\n      const wickY1 = props.yScale(ohlc.high);\n      const wickX2 = wickX1;\n\n      return (\n        <CandlestickContainer\n          key={idx}\n          candleFill={candleFill}\n          candleHeight={candleHeight}\n          candleWidth={candleWidth}\n          candleX={candleX}\n          candleY={candleY}\n          wickX1={wickX1}\n          wickX2={wickX2}\n          wickY1={wickY1}\n          wickY2={wickY2}\n          hoverAnimation={props.hoverAnimation}\n        />\n      );\n    }, this);\n\n    return (\n      <g>\n        {dataSeriesArray}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Wick',\n\n  propTypes: {\n    className: PropTypes.string,\n    shapeRendering: PropTypes.string,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.number,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-candlestick-wick',\n      stroke: '#666666',\n      strokeWidth: 1,\n      shapeRendering: 'crispEdges',\n    };\n  },\n\n  render() {\n    const props = this.props;\n    return (<line\n      stroke={props.stroke}\n      strokeWidth={props.strokeWidth}\n      // style={{ shapeRendering: props.shapeRendering }}\n      className={props.className}\n      x1={props.wickX1}\n      y1={props.wickY1}\n      x2={props.wickX2}\n      y2={props.wickY2}\n    />);\n  },\n});\n","\nexports.CandlestickChart = require('./CandlestickChart');\n","'use strict';\nimport ChartContext from '../ChartContext';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\n\nmodule.exports = createReactClass({\n\n  displayName: 'Legend',\n\n  propTypes: {\n    className: PropTypes.string,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    data: PropTypes.array.isRequired,\n    itemClassName: PropTypes.string,\n    margins: PropTypes.object,\n    text: PropTypes.string,\n    // width: PropTypes.number.isRequired,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-legend',\n      itemClassName: 'rd3-legend-item',\n      text: '#000',\n      legendStyle: {\n                textStyle:{\n                  fontSize: '50%',\n                  verticalAlign: 'top',\n                },\n                bulletStyle:{\n                  lineHeight: '60%',\n                  fontSize: '200%',\n                }\n              }\n    }\n  },\n\n\n\n  render() {\n\n    /* Context */\n    this.contextType = ChartContext;\n    const { chartStyle }  = this.contextType._currentValue;\n\n\n    const props = this.props;\n    const textStyle = props.legendStyle.textStyle;\n    const legendItems = [];\n\n    const fontSize = props.legendStyle.textStyle.fontSize;\n    const fontWeight = props.legendStyle.textStyle.fontWeight;\n\n    /* TODO - Legado !!!\n      Deixar a entrada de dados flat para todos os graficos.\n    */\n   if (props.series !== undefined){\n     props.series.map( (serie, idx) => {\n       let itemStyle = Object.assign({},props.legendStyle.bulletStyle)\n       itemStyle.color = props.color.colors(props.colorsAccessor(props.colorsDomain, idx));\n\n        const rev_idx = props.series.length - idx\n        legendItems.push(\n          <g key={`series_circle:${idx}`}>\n            <circle cx=\"30\" cy={10 + 15 * rev_idx} r=\"4\" fill={itemStyle.color} id=\"circle\"/>\n            <text\n              className= {`rd3-legend-text ${chartStyle && chartStyle}` }\n              x=\"42\"\n              y={14 + 15 * rev_idx}\n            >\n              {serie}\n            </text>\n          </g>\n        );\n      })\n    }else{\n      if (! props.color){ return []}\n      props.data.forEach((series, idx) => {\n        let itemStyle = Object.assign({},props.legendStyle.bulletStyle)\n        itemStyle.color = props.color.colors(props.colorsAccessor(series, idx));\n\n        const rev_idx = props.series.length - idx\n        legendItems.push(\n          <g key={`circle:${idx}`}>\n            <circle cx=\"30\" cy={10 + 15 * rev_idx} r=\"4\" fill={itemStyle.color} id=\"circle\"/>\n            <text\n              className= {`rd3-legend-text ${chartStyle && chartStyle}` }\n              x=\"50\"\n              y={14 + 15 * rev_idx}\n              // style={{'font-size':'0.8em'}}\n            >\n              {series.name}\n            </text>\n          </g>\n        );\n      });\n    }\n    return (\n      legendItems\n    );\n  },\n});\n\n\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  // TODO: PropTypes.any\n  propTypes: {\n    structure: PropTypes.any,\n    id: PropTypes.any,\n    vnode: PropTypes.any,\n  },\n\n  _animateCircle() {\n    this.props.structure.cursor('voronoi').cursor(this.props.id).update(() => 'active');\n    // this.props.pubsub.emit('animate', this.props.id);\n  },\n\n  _restoreCircle() {\n    this.props.structure.cursor('voronoi').cursor(this.props.id).update(() => 'inactive');\n    // this.props.pubsub.emit('restore', this.props.id);\n  },\n\n  _drawPath(d) {\n    if (d === undefined) {\n      return '';\n    }\n    return `M${d.join(',')}Z`;\n  },\n\n  render() {\n    return (<path\n      onMouseOver={this._animateCircle}\n      onMouseOut={this._restoreCircle}\n      fill=\"white\"\n      opacity=\"0\"\n      d={this._drawPath(this.props.vnode)}\n    />);\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  propTypes: {\n    x: PropTypes.number,\n    y: PropTypes.number,\n    child: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.element,\n    ]),\n    show: PropTypes.bool,\n  },\n\n  render() {\n    const props = this.props;\n    const display = this.props.show ? 'inherit' : 'none';\n    const containerStyles = {\n      position: 'fixed',\n      top: props.y,\n      left: props.x,\n      display,\n      opacity: 0.8,\n      width:'100px'\n    };\n\n    // TODO: add 'right: 0px' style when tooltip is off the chart\n    const tooltipStyles = {\n      position: 'absolute',\n      backgroundColor: 'white',\n      border: '1px solid',\n      borderColor: '#ddd',\n      borderRadius: '4px',\n      padding: '5px',\n      marginLeft: '10px',\n      marginRight: '10px',\n      marginTop: '-15px',\n      width:'100px'\n    };\n    return (\n      <div style={containerStyles}>\n        <div style={tooltipStyles} className=\"rd3-legend-text\">\n          {props.child}\n        </div>\n      </div>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\nconst d3 = require('d3');\nconst Polygon = require('./Polygon');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Voronoi',\n\n  // TODO: PropTypes.any\n  propTypes: {\n    xScale: PropTypes.any,\n    yScale: PropTypes.any,\n    width: PropTypes.any,\n    height: PropTypes.any,\n    structure: PropTypes.any,\n    data: PropTypes.any,\n  },\n\n  render() {\n    const xScale = this.props.xScale;\n    const yScale = this.props.yScale;\n\n    const voronoi = d3.geom.voronoi()\n      .x(d => xScale(d.coord.x))\n      .y(d => yScale(d.coord.y))\n      .clipExtent([[0, 0], [this.props.width, this.props.height]]);\n\n    const regions = voronoi(this.props.data).map((vnode, idx) => (\n      <Polygon structure={this.props.structure} key={idx} id={vnode.point.id} vnode={vnode} />\n    ));\n\n    return (\n      <g>\n        {regions}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nimport ChartContext from '../../ChartContext';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'AxisLine',\n\n  propTypes: {\n    scale: PropTypes.func.isRequired,\n    innerTickSize: PropTypes.number,\n    outerTickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickArguments: PropTypes.array,\n    fill: PropTypes.string,\n    stroke: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      innerTickSize: 6,\n      outerTickSize: 6,\n      tickPadding: 3,\n      fill: 'none',\n      tickArguments: [10],\n      tickValues: null,\n      tickFormat: null,\n    };\n  },\n\n\n  _d3_scaleExtent(domain) {\n    const start = domain[0];\n    const stop = domain[domain.length - 1];\n    return start < stop ? [start, stop] : [stop, start];\n  },\n\n  _d3_scaleRange(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : this._d3_scaleExtent(scale.range());\n  },\n\n  render() {\n    const props = this.props;\n    const sign = props.orient === 'top' || props.orient === 'left' ? -1 : 1;\n\n    /* Context */\n    this.contextType = ChartContext;\n    const { chartStyle }  = this.contextType._currentValue;\n\n    const range = this._d3_scaleRange(props.scale);\n\n    let d;\n    if (props.orient === 'bottom' || props.orient === 'top') {\n      d = `M${range[0]},${sign * props.outerTickSize}V0H${range[1]}V${sign * props.outerTickSize}`;\n    } else {\n      d = `M${sign * props.outerTickSize},${range[0]}H0V${range[1]}H${sign * props.outerTickSize}`;\n    }\n\n    return (\n      <path\n        // className=\"domain\"\n        className = {`rd3-axis-domain ${chartStyle && chartStyle}` }\n        d={d}\n        style={{ shapeRendering: 'crispEdges' }}\n        // fill={props.fill}\n        fill='none'\n        stroke='#000000'\n        strokeWidth='0.5'\n\n        // stroke={props.stroke}\n        // strokeWidth={props.strokeWidth}\n      >\n      </path>\n    );\n  },\n});\n","'use strict';\nimport ChartContext from '../../ChartContext';\n\nconst React = require('react');\nconst PropTypes = require('prop-types');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'AxisTick',\n\n  propTypes: {\n    scale: PropTypes.func.isRequired,\n    orient: PropTypes.oneOf(['top', 'bottom', 'left', 'right']).isRequired,\n    orient2nd: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    horizontal: PropTypes.bool,\n    tickArguments: PropTypes.array,\n    tickValues: PropTypes.array,\n    innerTickSize: PropTypes.number,\n    outerTickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickFormat: PropTypes.func,\n    tickStroke: PropTypes.string,\n    tickTextStroke: PropTypes.string,\n    gridHorizontal: PropTypes.bool,\n    gridVertical: PropTypes.bool,\n    gridHorizontalStroke: PropTypes.string,\n    gridVerticalStroke: PropTypes.string,\n    gridHorizontalStrokeWidth: PropTypes.number,\n    gridVerticalStrokeWidth: PropTypes.number,\n    gridHorizontalStrokeDash: PropTypes.string,\n    gridVerticalStrokeDash: PropTypes.string,\n    gridText:PropTypes.object,\n  },\n  getDefaultProps() {\n    return {\n      // translateTickLabel: 'translate(\"10px\",0)',\n      translateTickLabel_Y_X: 0,\n      translateTickLabel_Y_Y: 0,\n      translateTickLabel_X_X: 0,\n      translateTickLabel_X_Y: 0,\n\n      innerTickSize: 6,\n      outerTickSize: 6,\n      tickStroke: '#000',\n      tickPadding: 6,\n      tickArguments: [10],\n      tickValues: null,\n      gridHorizontal: false,\n      gridVertical: false,\n      gridHorizontalStroke: '#D8D7D7',\n      gridVerticalStroke: '#D8D7D7',\n      gridHorizontalStrokeWidth: 0.4,\n      gridVerticalStrokeWidth: 0.4,\n      gridHorizontalStrokeDash: '5, 5',\n      gridVerticalStrokeDash: '5, 5',\n      gridText:{rotate:{\n                    top:null,\n                    right:null,\n                    bottom:null,\n                    left:null\n                },\n                translate:{\n                  text:{x:0, y:0},\n                  line:{x:0, y:0}\n                },\n                font:{\n                  size:'1.0em',\n                  weight:'.01'\n                }\n              },\n      xGridLabelOffset: 50,\n      yGridLabelOffset: 10\n\n    };\n  },\n\n  render() {\n    // debugger\n    const props = this.props;\n\n    /* Context */\n    this.contextType = ChartContext;\n    const { chartStyle }  = this.contextType._currentValue;\n\n\n    let tr;\n    let trText;\n    let gridTextRotate;\n    let gridTextFontSize;\n    let gridTextFontWeight;\n    let textAnchor;\n    let textTransform;\n    let tickFormat;\n    let y1;\n    let y2;\n    let dy;\n    let x1;\n    let x2;\n\n    let gridStrokeWidth;\n    let gridStroke;\n    let gridStrokeDashArray;\n    let x2grid;\n    let y2grid;\n    let gridOn = false;\n    let translateTickLabel;\n\n    const sign = props.orient === 'top' || props.orient === 'right' ? -1 : 1;\n    const tickSpacing = Math.max(props.innerTickSize, 0) + props.tickPadding;\n\n    const scale = props.scale;\n\n    let ticks;\n    if (props.tickValues) {\n      ticks = props.tickValues;\n    } else if (scale.ticks) {\n      ticks = scale.ticks.apply(scale, props.tickArguments);\n    } else {\n      ticks = scale.domain();\n    }\n\n    if (props.tickFormatting) {\n      tickFormat = props.tickFormatting;\n    } else if (scale.tickFormat) {\n      tickFormat = scale.tickFormat.apply(scale, props.tickArguments);\n    } else {\n      tickFormat = (d) => d;\n    }\n\n    const adjustedScale = scale.bandwidth ? d => scale(d) + scale.bandwidth() / 2 : scale;\n\n    // Still working on this\n    // Ticks and lines are not fully aligned\n    // in some orientations\n    const adjustedScaleTransTxtX = (tick) => adjustedScale(tick) + props.gridText.translate.text.x;\n\n    switch (props.orient) {\n      case 'top':\n        tr = (tick) => `translate(${adjustedScale(tick)},0)`;\n        trText = (tick) => `translate(${adjustedScale(tick)},0)`;\n        textAnchor = 'middle';\n        y2 = props.innerTickSize * sign;\n        y1 = tickSpacing * sign;\n        dy = sign < 0 ? '0em' : '.71em';\n        x2grid = 0;\n        y2grid = -props.height;\n        gridTextRotate = props.gridText.rotate.top;\n        break;\n      case 'bottom':\n        tr = (tick) => `translate(${adjustedScale(tick)},0)`;\n        trText = (tick) => `translate(${adjustedScaleTransTxtX(tick)},${props.gridText.translate.text.y})`;\n        textAnchor = 'middle';\n        y2 = props.innerTickSize * sign;\n        y1 = tickSpacing * sign;\n        dy = sign < 0 ? '0em' : '.51em';\n        x2grid = 0;\n        y2grid = -props.height;\n        gridTextRotate = props.gridText.rotate.bottom;\n        translateTickLabel = 'translate(' + props.translateTickLabel_X_X + ',' + props.translateTickLabel_X_Y + ')';\n        break;\n      case 'left':\n        tr = (tick) => `translate(0,${adjustedScale(tick)})`;\n        trText = (tick) => `translate(0,${adjustedScale(tick)})`;\n        textAnchor = 'end';\n        x2 = props.innerTickSize * -sign;\n        x1 = tickSpacing * -sign;\n        dy = '.32em';\n        x2grid = props.width;\n        y2grid = 0;\n        gridTextRotate = props.gridText.rotate.left;\n        translateTickLabel = 'translate(' + props.translateTickLabel_Y_X + ',' + props.translateTickLabel_Y_Y + ')';\n        // debugger;\n        break;\n      case 'right':\n        tr = (tick) => `translate(0,${adjustedScale(tick)})`;\n        trText = (tick) => `translate(0,${adjustedScale(tick)})`;\n        textAnchor = 'start';\n        x2 = props.innerTickSize * -sign;\n        x1 = tickSpacing * -sign;\n        dy = '.32em';\n        x2grid = -props.width;\n        y2grid = 0;\n        gridTextRotate = props.gridText.rotate.right;\n        break;\n      default:\n        break;\n    }\n\n    if (props.horizontalChart) {\n      textTransform = 'rotate(-90)';\n      [y1, x1] = [x1, -y1 || 0];\n\n      switch (props.orient) {\n        case 'top':\n          textAnchor = 'start';\n          dy = '.32em';\n          break;\n        case 'bottom':\n          textAnchor = 'end';\n          dy = '.32em';\n          break;\n        case 'left':\n          textAnchor = 'middle';\n          dy = sign < 0 ? '.71em' : '0em';\n          break;\n        case 'right':\n          textAnchor = 'middle';\n          dy = sign < 0 ? '.71em' : '0em';\n          break;\n        default:\n          break;\n      }\n    }\n\n    if (props.gridHorizontal) {\n      gridOn = true;\n      gridStrokeWidth = props.gridHorizontalStrokeWidth;\n      gridStroke = props.gridHorizontalStroke;\n      gridStrokeDashArray = props.gridHorizontalStrokeDash;\n    } else if (props.gridVertical) {\n      gridOn = true;\n      gridStrokeWidth = props.gridVerticalStrokeWidth;\n      gridStroke = props.gridVerticalStroke;\n      gridStrokeDashArray = props.gridVerticalStrokeDash;\n    }\n\n    // return grid line if grid is enabled and grid line is not on at same position as other axis.\n    const gridLine = (pos) => {\n      if (gridOn\n        && !(props.orient2nd === 'left' && pos === 0)\n        && !(props.orient2nd === 'right' && pos === props.width)\n        && !((props.orient === 'left' || props.orient === 'right') && pos === props.height)\n      ) {\n        return (\n          <line\n          className = {`rd3-svg-grid-lines ${chartStyle && chartStyle}` }\n          x2={x2grid} y2={y2grid}\n          />\n        );\n      }\n      return null;\n    };\n\n    const optionalTextProps = textTransform ? {\n      transform: textTransform,\n    } : {};\n\n    gridTextFontSize = props.gridText.font.size;\n    gridTextFontWeight = props.gridText.font.weight;\n\n    return (\n    <g>\n      <g>\n        {ticks.map((tick, idx) => (\n            <g key={idx} className=\"tick\" transform={tr(tick)} >\n              {gridLine(adjustedScale(tick))}\n              <line\n                className = {`rd3-svg-grid-ticks ${chartStyle && chartStyle}` }\n                x2={x2}\n                y2={y2}\n              />\n            </g>\n          ))\n      }\n      </g>\n\n      /* Move all tick labels at once */\n      <g transform={translateTickLabel}>\n        {ticks.map((tick, idx) => (\n          <g className=\"tickText\" transform={trText(tick)} key={idx} >\n              <text\n                strokeWidth={gridTextFontWeight}\n                dy={dy} x={x1} y={y1}\n                style={{ stroke: props.tickTextStroke, fill: props.tickTextStroke, fontSize: gridTextFontSize}}\n                textAnchor={textAnchor}\n                {...optionalTextProps}\n                transform={gridTextRotate}\n              >\n                {`${tickFormat(tick)}`.split('\\n').map((tickLabel, index) => (\n                    <tspan\n                      className= {`rd3-axis-text ${chartStyle && chartStyle}` }\n                    x={x1}\n                    dy={dy}\n                    key={index}\n                    >\n                      {tickLabel}\n                    </tspan>\n                ))}\n              </text>\n              </g>\n              ))}\n      </g>\n    </g>\n\n    );\n  },\n});\n","'use strict';\n\nimport ChartContext from '../../ChartContext';\n\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Label',\n\n  propTypes: {\n    height: PropTypes.number,\n    horizontalChart: PropTypes.bool,\n    horizontalTransform: PropTypes.string,\n    label: PropTypes.string.isRequired,\n    width: PropTypes.number,\n    strokeWidth: PropTypes.number,\n    textAnchor: PropTypes.string,\n    verticalTransform: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      horizontalTransform: 'rotate(270)',\n      strokeWidth: 0.01,\n      textAnchor: 'middle',\n      verticalTransform: 'rotate(0)',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    if (!props.label) {\n      return <text />;\n    }\n\n    let transform;\n    let x;\n    let y;\n    if (props.orient === 'top' || props.orient === 'bottom') {\n      transform = props.verticalTransform;\n      x = props.width / 2;\n      y = props.offset;\n\n      if (props.horizontalChart) {\n        transform = `rotate(180 ${x} ${y}) ${transform}`;\n      }\n    } else {  // left, right\n      transform = props.horizontalTransform;\n      x = -props.height / 2;\n      if (props.orient === 'left') {\n        y = -props.offset;\n      } else {\n        y = props.offset;\n      }\n    }\n\n\n    return (\n      <ChartContext.Consumer>\n        {context => (\n          <text\n            className= {`rd3-axis-labels ${context && context.chartStyle}` }\n            strokeWidth={props.strokeWidth.toString()}\n            textAnchor={props.textAnchor}\n            transform={transform}\n            y={y}\n            x={x}\n            // style={{'font-size':'1.4em'}}\n\n          >\n            {props.label}\n          </text>\n        )}\n      </ChartContext.Consumer>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\nconst d3 = require('d3');\nconst AxisTicks = require('./AxisTicks');\nconst AxisLine = require('./AxisLine');\nconst Label = require('./Label');\n\nmodule.exports = createReactClass({\n\n  displayName: 'XAxis',\n\n  propTypes: {\n    fill: PropTypes.string,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    horizontalChart: PropTypes.bool,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.string,\n    tickStroke: PropTypes.string,\n    tickTextStroke: PropTypes.string,\n    xAxisClassName: PropTypes.string,\n    xAxisLabel: PropTypes.string,\n    xAxisTickValues: PropTypes.array,\n    xAxisOffset: PropTypes.number,\n    xScale: PropTypes.func.isRequired,\n    xOrient: PropTypes.oneOf(['top', 'bottom']),\n    yOrient: PropTypes.oneOf(['left', 'right']),\n    gridVertical: PropTypes.bool,\n    gridVerticalStroke: PropTypes.string,\n    gridVerticalStrokeWidth: PropTypes.number,\n    gridVerticalStrokeDash: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: 'none',\n      stroke: 'none',\n      strokeWidth: '1',\n      tickStroke: '#000',\n      xAxisClassName: 'rd3-x-axis',\n      xAxisLabel: '',\n      xAxisLabelOffset: 10,\n      xAxisOffset: 0,\n      xOrient: 'bottom',\n      yOrient: 'left',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const t = `translate(0 ,${props.xAxisOffset + props.height})`;\n\n    let tickArguments;\n    if (typeof props.xAxisTickCount !== 'undefined') {\n      tickArguments = [props.xAxisTickCount];\n    }\n\n    if (typeof props.xAxisTickInterval !== 'undefined') {\n      // tickArguments = [d3.time[props.xAxisTickInterval.unit], props.xAxisTickInterval.interval];\n    }\n\n    return (\n      <g\n        className={props.xAxisClassName}\n        transform={t}\n      >\n        <AxisLine\n          scale={props.xScale}\n          stroke={props.stroke}\n          orient={props.xOrient}\n          outerTickSize={props.tickSize}\n          {...props}\n        />\n        <Label\n          horizontalChart={props.horizontalChart}\n          label={props.xAxisLabel}\n          offset={props.xAxisLabelOffset}\n          orient={props.xOrient}\n          margins={props.margins}\n          width={props.width}\n        />\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\nconst d3 = require('d3');\nconst AxisTicks = require('./AxisTicks');\nconst AxisLine = require('./AxisLine');\nconst Label = require('./Label');\n\nmodule.exports = createReactClass({\n\n  displayName: 'XGrid',\n\n  propTypes: {\n    fill: PropTypes.string,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    horizontalChart: PropTypes.bool,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.string,\n    tickStroke: PropTypes.string,\n    tickTextStroke: PropTypes.string,\n    xAxisClassName: PropTypes.string,\n    xAxisLabel: PropTypes.string,\n    xAxisTickValues: PropTypes.array,\n    xAxisOffset: PropTypes.number,\n    xScale: PropTypes.func.isRequired,\n    xOrient: PropTypes.oneOf(['top', 'bottom']),\n    yOrient: PropTypes.oneOf(['left', 'right']),\n    gridVertical: PropTypes.bool,\n    gridVerticalStroke: PropTypes.string,\n    gridVerticalStrokeWidth: PropTypes.number,\n    gridVerticalStrokeDash: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: 'none',\n      stroke: 'none',\n      strokeWidth: '1',\n      tickStroke: '#000',\n      xAxisClassName: 'rd3-x-axis',\n      xAxisLabel: '',\n      xAxisLabelOffset: 10,\n      xAxisOffset: 0,\n      xOrient: 'bottom',\n      yOrient: 'left',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const t = `translate(0 ,${props.xAxisOffset + props.height})`;\n\n    let tickArguments;\n    if (typeof props.xAxisTickCount !== 'undefined') {\n      tickArguments = [props.xAxisTickCount];\n    }\n\n    if (typeof props.xAxisTickInterval !== 'undefined') {\n      // tickArguments = [d3.time[props.xAxisTickInterval.unit], props.xAxisTickInterval.interval];\n    }\n\n    return (\n      <g\n        className={props.xAxisClassName}\n        transform={t}\n      >\n        <AxisTicks\n          tickValues={props.xAxisTickValues}\n          tickFormatting={props.tickFormatting}\n          tickArguments={tickArguments}\n          tickStroke={props.tickStroke}\n          tickTextStroke={props.tickTextStroke}\n          innerTickSize={props.tickSize}\n          scale={props.xScale}\n          orient={props.xOrient}\n          orient2nd={props.yOrient}\n          height={props.height}\n          width={props.width}\n          horizontalChart={props.horizontalChart}\n          gridVertical={props.gridVertical}\n          gridVerticalStroke={props.gridVerticalStroke}\n          gridVerticalStrokeWidth={props.gridVerticalStrokeWidth}\n          gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n          gridText={props.gridText}\n\n          translateTickLabel_X_X={props.translateTickLabel_X_X}\n          translateTickLabel_X_Y={props.translateTickLabel_X_Y}\n        />\n\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst createReactClass = require('create-react-class');\nconst React = require('react');\nconst d3 = require('d3');\nconst AxisLine = require('./AxisLine');\nconst Label = require('./Label');\n\nmodule.exports = createReactClass({\n\n  displayName: 'YAxis',\n\n  propTypes: {\n    fill: PropTypes.string,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.string,\n    tickStroke: PropTypes.string,\n    tickTextStroke: PropTypes.string,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    horizontalChart: PropTypes.bool,\n    yAxisClassName: PropTypes.string,\n    yAxisLabel: PropTypes.string,\n    yAxisOffset: PropTypes.number,\n    yAxisTickValues: PropTypes.array,\n    xOrient: PropTypes.oneOf(['top', 'bottom']),\n    yOrient: PropTypes.oneOf(['left', 'right']),\n    yScale: PropTypes.func.isRequired,\n    gridVertical: PropTypes.bool,\n    gridVerticalStroke: PropTypes.string,\n    gridVerticalStrokeWidth: PropTypes.number,\n    gridVerticalStrokeDash: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: 'none',\n      stroke: '#000',\n      strokeWidth: '1',\n      tickStroke: '#000',\n      yAxisClassName: 'rd3-y-axis',\n      yAxisLabel: '',\n      yAxisOffset: 0,\n      xOrient: 'bottom',\n      yOrient: 'left',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    let t;\n    if (props.yOrient === 'right') {\n      t = `translate(${props.yAxisOffset + props.width}, 0)`;\n    } else {\n      t = `translate(${props.yAxisOffset}, 0)`;\n    }\n\n    let tickArguments;\n    if (props.yAxisTickCount) {\n      tickArguments = [props.yAxisTickCount];\n    }\n\n    if (props.yAxisTickInterval) {\n      tickArguments = [d3.time[props.yAxisTickInterval.unit], props.yAxisTickInterval.interval];\n    }\n\n    return (\n      <g\n        className={props.yAxisClassName}\n        transform={t}\n      >\n        <AxisLine\n          orient={props.yOrient}\n          outerTickSize={props.tickSize}\n          scale={props.yScale}\n          stroke={props.stroke}\n          {...props}\n        />\n        <Label\n          height={props.height}\n          horizontalChart={props.horizontalChart}\n          label={props.yAxisLabel}\n          margins={props.margins}\n          offset={props.yAxisLabelOffset}\n          orient={props.yOrient}\n        />\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst createReactClass = require('create-react-class');\nconst React = require('react');\nconst d3 = require('d3');\nconst AxisTicks = require('./AxisTicks');\nconst AxisLine = require('./AxisLine');\nconst Label = require('./Label');\n\nmodule.exports = createReactClass({\n\n  displayName: 'YGrid',\n\n  propTypes: {\n    fill: PropTypes.string,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.string,\n    tickStroke: PropTypes.string,\n    tickTextStroke: PropTypes.string,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    horizontalChart: PropTypes.bool,\n    yAxisClassName: PropTypes.string,\n    yAxisLabel: PropTypes.string,\n    yAxisOffset: PropTypes.number,\n    yAxisTickValues: PropTypes.array,\n    xOrient: PropTypes.oneOf(['top', 'bottom']),\n    yOrient: PropTypes.oneOf(['left', 'right']),\n    yScale: PropTypes.func.isRequired,\n    gridVertical: PropTypes.bool,\n    gridVerticalStroke: PropTypes.string,\n    gridVerticalStrokeWidth: PropTypes.number,\n    gridVerticalStrokeDash: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      fill: 'none',\n      stroke: '#000',\n      strokeWidth: '1',\n      tickStroke: '#000',\n      yAxisClassName: 'rd3-y-axis',\n      yAxisLabel: '',\n      yAxisOffset: 0,\n      xOrient: 'bottom',\n      yOrient: 'left',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    let t;\n    if (props.yOrient === 'right') {\n      t = `translate(${props.yAxisOffset + props.width}, 0)`;\n    } else {\n      t = `translate(${props.yAxisOffset}, 0)`;\n    }\n\n    let tickArguments;\n    if (props.yAxisTickCount) {\n      tickArguments = [props.yAxisTickCount];\n    }\n\n    if (props.yAxisTickInterval) {\n      tickArguments = [d3.time[props.yAxisTickInterval.unit], props.yAxisTickInterval.interval];\n    }\n\n    return (\n      <g\n        className={props.yAxisClassName}\n        transform={t}\n      >\n        <AxisTicks\n          innerTickSize={props.tickSize}\n          orient={props.yOrient}\n          orient2nd={props.xOrient}\n          tickArguments={tickArguments}\n          tickFormatting={props.tickFormatting}\n          tickStroke={props.tickStroke}\n          tickTextStroke={props.tickTextStroke}\n          tickValues={props.yAxisTickValues}\n          scale={props.yScale}\n          height={props.height}\n          width={props.width}\n          horizontalChart={props.horizontalChart}\n          gridHorizontal={props.gridHorizontal}\n          gridHorizontalStroke={props.gridHorizontalStroke}\n          gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n          gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n          gridText={props.gridText}\n\n          translateTickLabel_Y_X={props.translateTickLabel_Y_X}\n          translateTickLabel_Y_Y={props.translateTickLabel_Y_Y}\n\n        />\n\n      </g>\n    );\n  },\n});\n","\nexports.XAxis = require('./XAxis');\nexports.YAxis = require('./YAxis');\nexports.XGrid = require('./XGrid');\nexports.YGrid = require('./YGrid');\n\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'BasicChart',\n\n  propTypes: {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    height: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    svgClassName: PropTypes.string,\n    title: PropTypes.node,\n    titleClassName: PropTypes.string,\n    width: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-basic-chart',\n      svgClassName: 'rd3-chart',\n      titleClassName: 'rd3-chart-title',\n      title: '',\n    };\n  },\n\n  _renderTitle() {\n    const props = this.props;\n\n    if (props.title !== '') {\n      return (\n        <h4\n          className={props.titleClassName}\n        >\n          {props.title}\n        </h4>\n      );\n    }\n    return null;\n  },\n\n  _renderChart() {\n    const props = this.props;\n\n    return (\n      <svg\n        className={props.svgClassName}\n        height={props.height}\n        viewBox={props.viewBox}\n        width={props.width}\n      >\n        {props.children}\n      </svg>\n    );\n  },\n\n  render() {\n    const props = this.props;\n\n    return (\n      <div\n        className={props.className}\n      >\n        {this._renderTitle()}\n        {this._renderChart()}\n      </div>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst LegendChart = require('./LegendChart');\nconst BasicChart = require('./BasicChart');\n\nmodule.exports = createReactClass({\n\n  displayName: 'Chart',\n\n  propTypes: {\n    legend: PropTypes.bool,\n    svgClassName: PropTypes.string,\n    titleClassName: PropTypes.string,\n    shouldUpdate: PropTypes.bool,\n  },\n\n  getDefaultProps() {\n    return {\n      legend: false,\n      svgClassName: 'rd3-chart',\n      titleClassName: 'rd3-chart-title',\n      shouldUpdate: true,\n      background:null,\n    };\n  },\n  shouldComponentUpdate(nextProps) {\n    return nextProps.shouldUpdate;\n  },\n\n  render() {\n    const props = this.props;\n\n    if (props.legend) {\n      return (\n        <LegendChart\n          svgClassName={props.svgClassName}\n          titleClassName={props.titleClassName}\n          {...this.props}\n        />\n      );\n    }\n    return (\n      <BasicChart\n        svgClassName={props.svgClassName}\n        titleClassName={props.titleClassName}\n        {...this.props}\n      />\n    );\n  },\n});\n","'use strict';\nimport ChartContext from '../../ChartContext';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst Legend = require('../Legend');\nconst d3 = require('d3');\n\nmodule.exports = createReactClass({\n\n  displayName: 'LegendChart',\n\n  propTypes: {\n    children: PropTypes.node,\n    createClass: PropTypes.string,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    data: PropTypes.array,\n    height: PropTypes.node,\n    legend: PropTypes.bool,\n    legendPosition: PropTypes.string,\n    margins: PropTypes.object,\n    sideOffset: PropTypes.number,\n    svgClassName: PropTypes.string,\n    title: PropTypes.node,\n    titleClassName: PropTypes.string,\n    viewBox: PropTypes.string,\n    width: PropTypes.node,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-legend-chart',\n      colors: d3.scaleOrdinal(d3.schemeCategory10),\n      colorAccessor: (d, idx) => idx,\n      data: [],\n      legend: false,\n      legendPosition: 'right',\n      sideOffset: 90,\n      svgClassName: 'rd3-chart',\n      titleClassName: 'rd3-chart-title',\n      title: '',\n      svgTitle:{\n                title:'Title',\n                x:50,\n                y:50,\n                fontSize:'1.5em',\n              },\n      svgLegend:{\n                position:{\n                    x:'85%',\n                    y:'20%'\n                }},\n      svgChart:{\n                  width:'95%'\n                }\n    };\n  },\n\n  _renderLegend() {\n    const props = this.props;\n\n    if (props.legend) {\n      return (\n        <Legend\n          // colors={props.colors}\n          // colorAccessor={props.colorAccessor}\n          // data={props.data}\n          // colorsDomain={props.colorsDomain}\n          // legendPosition={props.legendPosition}\n          // margins={props.margins}\n          // width={props.sideOffset}\n          // series={props.series}\n          // legendStyle={props.legendStyle}\n          // svgLegend={props.svgLegend}\n          {...this.props}\n\n        />\n      );\n    }\n\n    return null;\n  },\n\n  _renderTitle() {\n    const props = this.props;\n\n    const fontSize = props.svgTitle.fontSize;\n\n    /* Context */\n    this.contextType = ChartContext;\n    const { chartStyle }  = this.contextType._currentValue;\n\n    if (props.title !== '') {\n      return (\n          <text\n            className= {`rd3-svg-title ${chartStyle && chartStyle}` }\n            textAnchor=\"middle\"\n            y={props.svgTitle.y}\n            x={props.svgTitle.x}\n            // style={{'font-size':fontSize}}\n          >\n          {props.title}\n          </text>\n      );\n    }\n    return null;\n  },\n\n  _renderChart() {\n    const props = this.props;\n\n    /* Context */\n    this.contextType = ChartContext;\n    const { chartStyle }  = this.contextType._currentValue;\n\n    return (\n\n      <svg\n        className={`${props.svgClassName} ${chartStyle}`}\n        height=\"100%\"\n        viewBox={props.viewBox}\n        width=\"100%\"\n      >\n        <svg viewBox={props.viewBox} width={props.svgChart.width} height={props.svgChart.height}>\n          {this._renderTitle()}\n          {props.children}\n        </svg>\n        <svg x={props.svgLegend.position.x} y={props.svgLegend.position.y}>\n          {this._renderLegend()}\n        </svg>\n      </svg>\n    );\n  },\n\n  render() {\n    const props = this.props;\n    /* Context */\n    this.contextType = ChartContext;\n    const { chartStyle }  = this.contextType._currentValue;\n\n\n    return (\n      <div\n        className={`${props.className} ${chartStyle}`}\n        // className={props.className}\n\n        style={{ display: 'grid', width: props.width, height: props.height, background:props.background }}\n\n      >\n          <div style={{ display:'flex',  width:props.width, height:props.height  }}>\n\n            {this._renderChart()}\n          </div>\n\n\n      </div>\n    );\n  },\n});\n","exports.Chart = require('./Chart');\n","\nexports.XAxis = require('./axes').XAxis;\nexports.YAxis = require('./axes').YAxis;\nexports.XGrid = require('./axes').XGrid;\nexports.YGrid = require('./axes').YGrid;\n\nexports.Chart = require('./charts').Chart;\n\nexports.Legend = require('./Legend');\nexports.Tooltip = require('./Tooltip');\nexports.Voronoi = require('./Voronoi');\n","exports.BarChart = require('./barchart').BarChart;\nexports.LineChart = require('./linechart').LineChart;\nexports.PieChart = require('./piechart').PieChart;\nexports.AreaChart = require('./areachart').AreaChart;\nexports.Treemap = require('./treemap').Treemap;\nexports.ScatterChart = require('./scatterchart').ScatterChart;\nexports.CandlestickChart = require('./candlestick').CandlestickChart;\n\nexports.SetStyle = require('./SetStyle');\nexports.ChartContext = require('./ChartContext');\nexports.ChartProvider = require('./ChartProvider');","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst VoronoiCircleContainer = require('./VoronoiCircleContainer');\nconst Line = require('./Line');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    color: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    data: PropTypes.array,\n    interpolationType: PropTypes.string,\n    xAccessor: PropTypes.func,\n    yAccessor: PropTypes.func,\n    hoverAnimation: PropTypes.bool,\n  },\n\n  getDefaultProps() {\n    return {\n      data: [],\n      xAccessor: (d) => d.x,\n      yAccessor: (d) => d.y,\n      interpolationType: 'linear',\n      hoverAnimation: false,\n    };\n  },\n\n  _isDate(d, accessor) {\n    return Object.prototype.toString.call(accessor(d)) === '[object Date]';\n  },\n\n  render() {\n    const props = this.props;\n    const xScale = props.xScale;\n    const yScale = props.yScale;\n    const xAccessor = props.xAccessor;\n    const yAccessor = props.yAccessor;\n\n    const interpolatePath = d3.line()\n        .x((d) => props.xScale(xAccessor(d)))\n        .y((d) => props.yScale(yAccessor(d)))\n        .curve(d3.curveMonotoneX);\n\n\n    if (this._isDate(props.data[0].values[0], xAccessor)) {\n      interpolatePath.x(d => props.xScale(props.xAccessor(d).getTime()));\n    } else {\n      interpolatePath.x(d => props.xScale(props.xAccessor(d)));\n    }\n\n    const lines = props.data.map((series, idx) => (\n        <Line\n          path={interpolatePath(series.values)}\n          stroke={props.colors(props.colorAccessor(series, idx))}\n          strokeWidth={series.strokeWidth}\n          strokeDashArray={series.strokeDashArray}\n          seriesName={series.name}\n          key={idx}\n        />\n      )\n    );\n\n\n    const voronoi = d3.voronoi()\n      .x(d => xScale(d.coord.x))\n      .y(d => yScale(d.coord.y))\n      .extent([[0, 0], [props.width, props.height]]);\n\n    let cx;\n    let cy;\n    let circleFill;\n\n\n    const regions = voronoi(props.value).polygons().map( (polygon, idx) => {\n      const point = polygon.data;\n      delete polygon.data;\n      const vnode = polygon;\n      // debugger;\n\n      cx = props.xScale(point.coord.x);\n      cy = props.yScale(point.coord.y);\n\n      circleFill = props.colors(props.colorAccessor(vnode, point.seriesIndex));\n\n      return (\n        <VoronoiCircleContainer\n          key={idx}\n          circleFill={circleFill}\n          vnode={vnode}\n          hoverAnimation={props.hoverAnimation}\n          cx={cx} cy={cy}\n          circleRadius={props.circleRadius}\n          onMouseOver={props.onMouseOver}\n          dataPoint={{\n            xValue: point.coord.x,\n            yValue: point.coord.y,\n            seriesName: point.series.name,\n          }}\n        />\n      );\n    });\n\n    return (\n      <g>\n        <g>{regions}</g>\n        <g>{lines}</g>\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Line',\n\n  propTypes: {\n    fill: PropTypes.string,\n    path: PropTypes.string,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.number,\n    strokeDashArray: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      stroke: '#3182bd',\n      fill: 'none',\n      strokeWidth: 1,\n      className: 'rd3-linechart-path',\n    };\n  },\n\n  render() {\n    const props = this.props;\n    return (\n      <path\n        d={props.path}\n        stroke={props.stroke}\n        strokeWidth={props.strokeWidth}\n        strokeDasharray={props.strokeDashArray}\n        fill={props.fill}\n        className={props.className}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst d3 = require('d3');\nconst createReactClass = require('create-react-class');\n\nconst { Chart, XAxis, YAxis, XGrid, YGrid, Tooltip } = require('../common');\nconst DataSeries = require('./DataSeries');\nconst utils = require('../utils');\nconst {\n  CartesianChartPropsMixin,\n  DefaultAccessorsMixin,\n  ViewBoxMixin,\n  TooltipMixin,\n} = require('../mixins');\n\nmodule.exports = createReactClass({\n\n  displayName: 'LineChart',\n\n  propTypes: {\n    circleRadius: PropTypes.number,\n    hoverAnimation: PropTypes.bool,\n    margins: PropTypes.object,\n    data: PropTypes.array.isRequired,\n  },\n\n  mixins: [CartesianChartPropsMixin, DefaultAccessorsMixin, ViewBoxMixin, TooltipMixin],\n\n  getDefaultProps() {\n    return {\n      colors: d3.scaleOrdinal(d3.schemeCategory10),\n      circleRadius: 3,\n      className: 'rd3-linechart',\n      hoverAnimation: true,\n      margins: { top: 70, right: 20, bottom: 60, left: 60 },\n      xAxisClassName: 'rd3-linechart-xaxis',\n      yAxisClassName: 'rd3-linechart-yaxis',\n      data: [],\n    };\n  },\n\n  _calculateScales: utils.calculateScales,\n\n  render() {\n    const props = this.props;\n\n    if (this.props.data && this.props.data.length < 1) {\n      return null;\n    }\n\n    const { innerWidth, innerHeight, trans, svgMargins } = this.getDimensions();\n    const yOrient = this.getYOrient();\n    const domain = props.domain || {};\n\n    if (!Array.isArray(props.data)) {\n      props.data = [props.data];\n    }\n\n    // Returns an object of flattened allValues, xValues, and yValues\n    const flattenedData = utils.flattenData(props.data, props.xAccessor, props.yAccessor);\n\n    const allValues = flattenedData.allValues;\n    const xValues = flattenedData.xValues;\n    const yValues = flattenedData.yValues;\n    const scales = this._calculateScales(\n      innerWidth,\n      innerHeight,\n      xValues,\n      yValues,\n      domain.x,\n      domain.y\n    );\n\n    return (\n      <span onMouseLeave={this.onMouseLeave}>\n        <Chart\n          viewBox={this.getViewBox()}\n          legend={props.legend}\n          sideOffset={props.sideOffset}\n          data={props.data}\n          margins={props.margins}\n          colors={props.colors}\n          colorAccessor={props.colorAccessorOrdinal}\n          width={props.width}\n          height={props.height}\n          title={props.title}\n          shouldUpdate={!this.state.changeState}\n        >\n          <g transform={trans} className={props.className}>\n            <XGrid\n              xAxisClassName={props.xAxisClassName}\n              xAxisTickValues={props.xAxisTickValues}\n              xAxisTickCount={props.xAxisTickCount}\n              xAxisTickInterval={props.xAxisTickInterval}\n              xAxisOffset={props.xAxisOffset}\n              xScale={scales.xScale}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              data={props.data}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridVertical={props.gridVertical}\n              gridVerticalStroke={props.gridVerticalStroke}\n              gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n            />\n            <YGrid\n              yAxisClassName={props.yAxisClassName}\n              yScale={scales.yScale}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisTickCount={props.yAxisTickCount}\n              yAxisOffset={props.yAxisOffset}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridHorizontal={props.gridHorizontal}\n              gridHorizontalStroke={props.gridHorizontalStroke}\n              gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n              gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n            />\n\n\n            <DataSeries\n              xScale={scales.xScale}\n              yScale={scales.yScale}\n              xAccessor={props.xAccessor}\n              yAccessor={props.yAccessor}\n              hoverAnimation={props.hoverAnimation}\n              circleRadius={props.circleRadius}\n              data={props.data}\n              value={allValues}\n              interpolationType={props.interpolationType}\n              colors={props.colors}\n              colorAccessor={props.colorAccessorOrdinal}\n              width={innerWidth}\n              height={innerHeight}\n              onMouseOver={this.onMouseOver}\n            />\n            <XAxis\n              xAxisClassName={props.xAxisClassName}\n              xAxisTickValues={props.xAxisTickValues}\n              xAxisTickCount={props.xAxisTickCount}\n              xAxisTickInterval={props.xAxisTickInterval}\n              xAxisOffset={props.xAxisOffset}\n              xScale={scales.xScale}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              data={props.data}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridVertical={props.gridVertical}\n              gridVerticalStroke={props.gridVerticalStroke}\n              gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n            />\n            <YAxis\n              yAxisClassName={props.yAxisClassName}\n              yScale={scales.yScale}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisTickCount={props.yAxisTickCount}\n              yAxisOffset={props.yAxisOffset}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridHorizontal={props.gridHorizontal}\n              gridHorizontalStroke={props.gridHorizontalStroke}\n              gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n              gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n            />\n\n          </g>\n        </Chart>\n        {(props.showTooltip ? <Tooltip {...this.state.tooltip} /> : null)}\n      </span>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'VoronoiCircle',\n\n  // TODO: Check prop types\n  propTypes: {\n    handleMouseOver: PropTypes.any,\n    handleMouseLeave: PropTypes.any,\n    voronoiPath: PropTypes.any,\n    cx: PropTypes.any,\n    cy: PropTypes.any,\n    circleRadius: PropTypes.any,\n    circleFill: PropTypes.any,\n  },\n\n  getDefaultProps() {\n    return {\n      circleRadius: 3,\n      circleFill: '#1f77b4',\n    };\n  },\n\n  render() {\n    return (\n      <g>\n        <path\n          onMouseOver={this.props.handleMouseOver}\n          onMouseLeave={this.props.handleMouseLeave}\n          fill=\"transparent\"\n          stroke='#F5F5F5'\n          d={this.props.voronoiPath}\n        />\n        <circle\n          onMouseOver={this.props.handleMouseOver}\n          onMouseLeave={this.props.handleMouseLeave}\n          cx={this.props.cx}\n          cy={this.props.cy}\n          r={this.props.circleRadius}\n          fill={this.props.circleFill}\n          className=\"rd3-linechart-circle\"\n        />\n      </g>\n    );\n  },\n});\n","'use strict';\n\nimport * as ReactDOM from 'react-dom'\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\nconst shade = require('../utils').shade;\nconst VoronoiCircle = require('./VoronoiCircle');\n\nmodule.exports = createReactClass({\n\n  displayName: 'VornoiCircleContainer',\n\n  propTypes: {\n    circleRadius: PropTypes.any,\n    circleFill: PropTypes.any,\n    onMouseOver: PropTypes.any,\n    dataPoint: PropTypes.any,\n  },\n\n  getDefaultProps() {\n    return {\n      circleRadius: 3,\n      circleFill: '#1f77b4',\n      hoverAnimation: true,\n    };\n  },\n\n  getInitialState() {\n    return {\n      circleRadius: this.props.circleRadius,\n      circleFill: this.props.circleFill,\n    };\n  },\n\n  _animateCircle() {\n    const rect = ReactDOM.findDOMNode(this).getElementsByTagName('circle')[0].getBoundingClientRect();\n    this.props.onMouseOver.call(this, rect.right, rect.top, this.props.dataPoint);\n    this.setState({\n      circleRadius: this.props.circleRadius * (5 / 4),\n      circleFill: shade(this.props.circleFill, 0.2),\n    });\n  },\n\n  _restoreCircle() {\n    this.setState({\n      circleRadius: this.props.circleRadius,\n      circleFill: this.props.circleFill,\n    });\n  },\n\n  _drawPath(d) {\n    if (d === undefined) {\n      return 'M Z';\n    }\n    return `M${d.join(',')}Z`;\n  },\n\n  render() {\n    const props = this.props;\n\n    // animation controller\n    let handleMouseOver;\n    let handleMouseLeave;\n    if (props.hoverAnimation) {\n      handleMouseOver = this._animateCircle;\n      handleMouseLeave = this._restoreCircle;\n    } else {\n      handleMouseOver = handleMouseLeave = null;\n    }\n\n    return (\n      <g>\n        <VoronoiCircle\n          handleMouseOver={handleMouseOver}\n          handleMouseLeave={handleMouseLeave}\n          voronoiPath={this._drawPath(props.vnode)}\n          cx={props.cx}\n          cy={props.cy}\n          circleRadius={this.state.circleRadius}\n          circleFill={this.state.circleFill}\n        />\n      </g>\n    );\n  },\n});\n","\nexports.LineChart = require('./LineChart');\n","'use strict';\n\n\nconst d3 = require('d3');\nconst PropTypes = require('prop-types');\n\nmodule.exports = {\n\n  propTypes: {\n    axesColor: PropTypes.string,\n    colors: PropTypes.func,\n    colorAccessorSequential: PropTypes.func,\n    colorAccessorOrdinal: PropTypes.func,\n    data: PropTypes.array.isRequired,\n    height: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    horizontal: PropTypes.bool,\n    legend: PropTypes.bool,\n    legendOffset: PropTypes.number,\n    title: PropTypes.string,\n    width: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    xAccessor: PropTypes.func,\n    xAxisFormatter: PropTypes.func,\n    xAxisLabel: PropTypes.string,\n    xAxisLabelOffset: PropTypes.number,\n    xAxisTickCount: PropTypes.number,\n    xAxisTickInterval: PropTypes.object,\n    xAxisTickValues: PropTypes.array,\n    xAxisTickStroke: PropTypes.string,\n    xAxisTickTextStroke: PropTypes.string,\n    xAxisOffset: PropTypes.number,\n    xOrient: PropTypes.oneOf(['top', 'bottom']),\n    xScale: PropTypes.func,\n    yAccessor: PropTypes.func,\n    yAxisFormatter: PropTypes.func,\n    yAxisLabel: PropTypes.string,\n    yAxisLabelOffset: PropTypes.number,\n    yAxisTickCount: PropTypes.number,\n    yAxisTickInterval: PropTypes.object,\n    yAxisTickValues: PropTypes.array,\n    yAxisTickStroke: PropTypes.string,\n    yAxisTickTextStroke: PropTypes.string,\n    yAxisOffset: PropTypes.number,\n    yOrient: PropTypes.oneOf(['default', 'left', 'right']),\n    yScale: PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      axesColor: '#000',\n      colorAccessorSequential: (d, idx) => {\n        return d[idx]\n      },\n      colorAccessorOrdinal: (d, idx) => idx,\n      height: 200,\n      horizontal: false,\n      legend: false,\n      legendOffset: 120,\n      title: '',\n      width: 400,\n      // xAxisFormatter: no predefined value right now\n      xAxisLabel: '',\n      xAxisLabelOffset: 38,\n      xAxisOffset: 0,\n      // xAxisTickCount: no predefined value right now\n      // xAxisTickInterval: no predefined value right now\n      // xAxisTickValues: no predefined value right now\n      xAxisTickStroke: '#000',\n      xAxisTickTextStroke: '#000',\n      xOrient: 'bottom',\n      // xScale: no predefined value right now\n      // yAxisFormatter: no predefined value right now\n      yAxisLabel: '',\n      yAxisLabelOffset: 35,\n      yAxisOffset: 0,\n      // yAxisTickCount: no predefined value right now\n      // yAxisTickInterval: no predefined value right now\n      // yAxisTickValues: no predefined value right now\n      yAxisTickStroke: '#000',\n      yAxisTickTextStroke: '#000',\n      yOrient: 'default',\n      // yScale: no predefined value right now\n    };\n  },\n\n  getYOrient() {\n    const yOrient = this.props.yOrient;\n\n    if (yOrient === 'default') {\n      return this.props.horizontal ? 'right' : 'left';\n    }\n\n    return yOrient;\n  },\n};\n","'use strict';\n\nconst PropTypes = require('prop-types');\n\nmodule.exports = {\n  propTypes: {\n    xAccessor: PropTypes.func,\n    yAccessor: PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      xAccessorBar: (d) => d.data.x,\n      yAccessorBar: (d) => d[1],\n\n      xAccessor: (d) => d.x,\n      yAccessor: (d) => d.y,\n    };\n  },\n};\n","'use strict';\n\n\nconst PropTypes = require('prop-types');\n\nmodule.exports = {\n\n  propTypes: {\n    showTooltip: PropTypes.bool,\n    tooltipFormat: PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      showTooltip: true,\n      /* Sum */\n      // tooltipFormat: (d) => String( d.seriesName) + ':\\n' + String( d.yValue),\n\n      /* Height */\n      tooltipFormat: (d) => String( d.seriesName) + ':\\n' + String( d.height) ,\n    };\n  },\n\n  getInitialState() {\n    return {\n      tooltip: {\n        x: 0,\n        y: 0,\n        child: '',\n        show: false,\n      },\n      changeState: false,\n    };\n  },\n\n  componentWillReceiveProps() {\n    this.setState({\n      changeState: false,\n    });\n  },\n\n  onMouseOver(x, y, dataPoint) {\n    if (!this.props.showTooltip) {\n      return;\n    }\n    this.setState({\n      tooltip: {\n        x,\n        y,\n        child: this.props.tooltipFormat.call(this, dataPoint),\n        show: true,\n      },\n      changeState: true,\n    });\n  },\n\n  onMouseLeave() {\n    if (!this.props.showTooltip) {\n      return;\n    }\n    this.setState({\n      tooltip: {\n        x: 0,\n        y: 0,\n        child: '',\n        show: false,\n      },\n      changeState: true,\n    });\n  },\n};\n","\n'use strict';\n\nconst PropTypes = require('prop-types');\n\nmodule.exports = {\n\n  propTypes: {\n    viewBox: PropTypes.string,\n    viewBoxObject: PropTypes.object,\n  },\n\n  getViewBox() {\n    if (this.props.viewBoxObject) {\n      const v = this.props.viewBoxObject;\n      return [v.x, v.y, v.width, v.height].join(' ');\n    } else if (this.props.viewBox) {\n      return this.props.viewBox;\n    }\n    return null;\n  },\n\n  getDimensions() {\n    const props = this.props;\n    const { horizontal, margins, viewBoxObject, xOrient } = props;\n    const yOrient = this.getYOrient();\n\n    let width;\n    let height;\n    if (viewBoxObject) {\n      width = viewBoxObject.width;\n      height = viewBoxObject.height;\n    } else {\n      width = props.width;\n      height = props.height;\n    }\n\n    let svgWidth;\n    let svgHeight;\n    let svgMargins;\n    let trans;\n    if (horizontal) {\n      const center = width / 2;\n      trans = `rotate(90 ${center} ${center}) `;\n      svgWidth = height;\n      svgHeight = width;\n      svgMargins = {\n        left: margins.top,\n        top: margins.right,\n        right: margins.bottom,\n        bottom: margins.left,\n      };\n    } else {\n      trans = '';\n      svgWidth = width;\n      svgHeight = height;\n      svgMargins = margins;\n    }\n\n    const xAxisOffset = Math.abs(props.xAxisOffset || 0);\n    const yAxisOffset = Math.abs(props.yAxisOffset || 0);\n\n    const xOffset = svgMargins.left + (yOrient === 'left' ? yAxisOffset : 0);\n    const yOffset = svgMargins.top + (xOrient === 'top' ? xAxisOffset : 0);\n    trans += `translate(${xOffset}, ${yOffset})`;\n\n    return {\n      innerHeight: svgHeight - svgMargins.top - svgMargins.bottom - xAxisOffset,\n      innerWidth: svgWidth - svgMargins.left - svgMargins.right - yAxisOffset,\n      trans,\n      svgMargins,\n    };\n  },\n};\n","\nexports.CartesianChartPropsMixin = require('./CartesianChartPropsMixin');\nexports.DefaultAccessorsMixin = require('./DefaultAccessorsMixin');\nexports.ViewBoxMixin = require('./ViewBoxMixin');\nexports.TooltipMixin = require('./TooltipMixin');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\n\nmodule.exports = createReactClass({\n\n  displayName: 'Arc',\n\n  propTypes: {\n    fill: PropTypes.string,\n    d: PropTypes.string,\n    startAngle: PropTypes.number,\n    endAngle: PropTypes.number,\n    innerRadius: PropTypes.number,\n    outerRadius: PropTypes.number,\n    labelTextFill: PropTypes.string,\n    valueTextFill: PropTypes.string,\n    sectorBorderColor: PropTypes.string,\n    showInnerLabels: PropTypes.bool,\n    showOuterLabels: PropTypes.bool,\n  },\n\n  getDefaultProps() {\n    return {\n      labelTextFill: 'black',\n      valueTextFill: 'white',\n      showInnerLabels: true,\n      showOuterLabels: true,\n    };\n  },\n\n  renderInnerLabel(props, arc) {\n    // make value text can be formatted\n    const formattedValue = props.valueTextFormatter(props.value);\n    return (\n      <text\n        className=\"rd3-piechart-value\"\n        transform={`translate(${arc.centroid()})`}\n        dy=\".35em\"\n        style={{\n          shapeRendering: 'crispEdges',\n          textAnchor: 'middle',\n          fill: props.valueTextFill,\n        }}\n      >\n        { formattedValue }\n      </text>\n    );\n  },\n\n  renderOuterLabel(props) {\n    const rotate = `rotate(${(props.startAngle + props.endAngle) / 2 * (180 / Math.PI)})`;\n    const radius = props.outerRadius;\n    const dist = radius + 35;\n    const angle = (props.startAngle + props.endAngle) / 2;\n    const x = dist * (1.2 * Math.sin(angle));\n    const y = -dist * Math.cos(angle);\n    const t = `translate(${x},${y})`;\n\n    return (\n      <g>\n        <line\n          x1=\"0\"\n          x2=\"0\"\n          y1={-radius - 2}\n          y2={-radius - 26}\n          stroke={props.labelTextFill}\n          transform={rotate}\n          style={{\n            fill: props.labelTextFill,\n            strokeWidth: 2,\n          }}\n        >\n        </line>\n        <text\n          className=\"rd3-piechart-label\"\n          transform={t}\n          dy=\".35em\"\n          style={{\n            textAnchor: 'middle',\n            fill: props.labelTextFill,\n            shapeRendering: 'crispEdges',\n          }}\n        >\n          {props.label}\n        </text>\n      </g>\n    );\n  },\n\n  render() {\n    const props = this.props;\n\n    const arc = d3.arc()\n      .innerRadius(props.innerRadius)\n      .outerRadius(props.outerRadius)\n      .startAngle(props.startAngle)\n      .endAngle(props.endAngle);\n\n    return (\n      <g className=\"rd3-piechart-arc\" >\n        <path\n          d={arc()}\n          fill={props.fill}\n          stroke={props.sectorBorderColor}\n          onMouseOver={props.handleMouseOver}\n          onMouseLeave={props.handleMouseLeave}\n        />\n        {props.showOuterLabels ? this.renderOuterLabel(props, arc) : null}\n        {props.showInnerLabels ? this.renderInnerLabel(props, arc) : null}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nimport * as ReactDOM from 'react-dom'\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\nconst shade = require('../utils').shade;\nconst Arc = require('./Arc');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'ArcContainer',\n\n  propTypes: {\n    fill: PropTypes.string,\n    onMouseOver: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    dataPoint: PropTypes.any, // TODO prop type?\n  },\n\n  getInitialState() {\n    return {\n      // fill is named as fill instead of initialFill to avoid\n      // confusion when passing down props from top parent\n      fill: this.props.fill,\n    };\n  },\n\n  _animateArc() {\n    const rect = ReactDOM.findDOMNode(this).getBoundingClientRect();\n    this.props.onMouseOver.call(this, rect.right, rect.top, this.props.dataPoint);\n    this.setState({\n      fill: shade(this.props.fill, 0.2),\n    });\n  },\n\n  _restoreArc() {\n    this.props.onMouseLeave.call(this);\n    this.setState({\n      fill: this.props.fill,\n    });\n  },\n\n  render() {\n    const props = this.props;\n\n    return (\n      <Arc\n        {...this.props}\n        fill={this.state.fill}\n        handleMouseOver={props.hoverAnimation ? this._animateArc : null}\n        handleMouseLeave={props.hoverAnimation ? this._restoreArc : null}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst ArcContainer = require('./ArcContainer');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    data: PropTypes.array,\n    values: PropTypes.array,\n    labels: PropTypes.array,\n    transform: PropTypes.string,\n    innerRadius: PropTypes.number,\n    radius: PropTypes.number,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    showInnerLabels: PropTypes.bool,\n    showOuterLabels: PropTypes.bool,\n    sectorBorderColor: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      data: [],\n      innerRadius: 0,\n      colors: d3.scaleOrdinal(d3.schemeCategory10),\n      colorAccessor: (d, idx) => idx,\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const pie = d3.pie()\n                  .sort(null);\n\n    const arcData = pie(props.values);\n\n    const arcs = arcData.map((arc, idx) => (\n        <ArcContainer\n          key={idx}\n          startAngle={arc.startAngle}\n          endAngle={arc.endAngle}\n          outerRadius={props.radius}\n          innerRadius={props.innerRadius}\n          labelTextFill={props.labelTextFill}\n          valueTextFill={props.valueTextFill}\n          valueTextFormatter={props.valueTextFormatter}\n          fill={props.colors(props.colorAccessor(props.data[idx], idx))}\n          value={props.values[idx]}\n          label={props.labels[idx]}\n          width={props.width}\n          showInnerLabels={props.showInnerLabels}\n          showOuterLabels={props.showOuterLabels}\n          sectorBorderColor={props.sectorBorderColor}\n          hoverAnimation={props.hoverAnimation}\n          onMouseOver={props.onMouseOver}\n          onMouseLeave={props.onMouseLeave}\n          dataPoint={{ yValue: props.values[idx], seriesName: props.labels[idx] }}\n        />\n      )\n    );\n    return (\n      <g className=\"rd3-piechart-pie\" transform={props.transform} >\n        {arcs}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst d3 = require('d3');\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst DataSeries = require('./DataSeries');\nconst { Chart, Tooltip } = require('../common');\nconst TooltipMixin = require('../mixins').TooltipMixin;\n\nmodule.exports = createReactClass({\n\n  displayName: 'PieChart',\n\n  propTypes: {\n    data: PropTypes.array,\n    radius: PropTypes.number,\n    cx: PropTypes.number,\n    cy: PropTypes.number,\n    labelTextFill: PropTypes.string,\n    valueTextFill: PropTypes.string,\n    valueTextFormatter: PropTypes.func,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    title: PropTypes.string,\n    showInnerLabels: PropTypes.bool,\n    showOuterLabels: PropTypes.bool,\n    sectorBorderColor: PropTypes.string,\n    hoverAnimation: PropTypes.bool,\n  },\n\n  mixins: [TooltipMixin],\n\n  getDefaultProps() {\n    return {\n      data: [],\n      title: '',\n      colors: d3.scaleOrdinal(d3.schemeCategory10),\n      colorAccessor: (d, idx) => idx,\n      valueTextFormatter: (val) => `${val}%`,\n      hoverAnimation: true,\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    if (props.data && props.data.length < 1) {\n      return null;\n    }\n    const transform = `translate(${props.cx || props.width / 2},${props.cy || props.height / 2})`;\n\n    const values = props.data.map((item) => item.value);\n    const labels = props.data.map((item) => item.label);\n\n    return (\n      <span>\n        <Chart\n          width={props.width}\n          height={props.height}\n          title={props.title}\n          shouldUpdate={!this.state.changeState}\n        >\n          <g className=\"rd3-piechart\">\n            <DataSeries\n              labelTextFill={props.labelTextFill}\n              valueTextFill={props.valueTextFill}\n              valueTextFormatter={props.valueTextFormatter}\n              data={props.data}\n              values={values}\n              labels={labels}\n              colors={props.colors}\n              colorAccessor={props.colorAccessor}\n              transform={transform}\n              width={props.width}\n              height={props.height}\n              radius={props.radius}\n              innerRadius={props.innerRadius}\n              showInnerLabels={props.showInnerLabels}\n              showOuterLabels={props.showOuterLabels}\n              sectorBorderColor={props.sectorBorderColor}\n              hoverAnimation={props.hoverAnimation}\n              onMouseOver={this.onMouseOver}\n              onMouseLeave={this.onMouseLeave}\n            />\n          </g>\n        </Chart>\n        {(props.showTooltip ? <Tooltip {...this.state.tooltip} /> : null)}\n      </span>\n    );\n  },\n});\n","\nexports.PieChart = require('./PieChart');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst VoronoiCircleContainer = require('./VoronoiCircleContainer');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    circleRadius: PropTypes.number.isRequired,\n    className: PropTypes.string,\n    colors: PropTypes.func.isRequired,\n    colorAccessor: PropTypes.func.isRequired,\n    data: PropTypes.array.isRequired,\n    height: PropTypes.number.isRequired,\n    xAccessor: PropTypes.func.isRequired,\n    xScale: PropTypes.func.isRequired,\n    yAccessor: PropTypes.func.isRequired,\n    yScale: PropTypes.func.isRequired,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-scatterchart-dataseries',\n    };\n  },\n\n  render() {\n    const props = this.props;\n    const xScale = props.xScale;\n    const yScale = props.yScale;\n    const xAccessor = props.xAccessor;\n    const yAccessor = props.yAccessor;\n\n    const voronoi = d3.voronoi()\n      .x(d => xScale(d.coord.x))\n      .y(d => yScale(d.coord.y))\n      .extent([[0, 0], [props.width, props.height]]);\n\n    const regions = voronoi(props.data).polygons().map( (polygon, idx) => {         \n      const point = polygon.data; \n      delete polygon.data; \n\n      const vnode = polygon;\n      const coord = point.coord;\n\n      const x = xAccessor(coord);\n      const y = yAccessor(coord);\n\n      // The circle coordinates\n      let cx;\n      let cy;\n\n      if (Object.prototype.toString.call(x) === '[object Date]') {\n        cx = xScale(x.getTime());\n      } else {\n        cx = xScale(x);\n      }\n\n      if (Object.prototype.toString.call(y) === '[object Date]') {\n        cy = yScale(y.getTime());\n      } else {\n        cy = yScale(y);\n      }\n\n      return (\n        <VoronoiCircleContainer\n          key={idx}\n          circleFill={props.colors(props.colorAccessor(point.d, point.seriesIndex))}\n          circleRadius={props.circleRadius}\n          cx={cx}\n          cy={cy}\n          vnode={vnode}\n          onMouseOver={props.onMouseOver}\n          dataPoint={{ xValue: x, yValue: y, seriesName: point.series.name }}\n        />\n      );\n    });\n\n    return (\n      <g\n        className={props.className}\n      >\n        {regions}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst d3 = require('d3');\nconst createReactClass = require('create-react-class');\n\nconst { Chart, XAxis, YAxis, XGrid, YGrid, Tooltip } = require('../common');\nconst DataSeries = require('./DataSeries');\nconst utils = require('../utils');\nconst {\n  CartesianChartPropsMixin,\n  DefaultAccessorsMixin,\n  ViewBoxMixin,\n  TooltipMixin,\n} = require('../mixins');\n\nmodule.exports = createReactClass({\n\n  displayName: 'ScatterChart',\n\n  propTypes: {\n    circleRadius: PropTypes.number,\n    className: PropTypes.string,\n    hoverAnimation: PropTypes.bool,\n    margins: PropTypes.object,\n    xAxisClassName: PropTypes.string,\n    yAxisClassName: PropTypes.string,\n  },\n\n  mixins: [\n    CartesianChartPropsMixin,\n    DefaultAccessorsMixin,\n    ViewBoxMixin,\n    TooltipMixin,\n  ],\n\n  getDefaultProps() {\n    return {\n      colors: d3.scaleOrdinal(d3.schemeBlues[6].reverse()),\n      circleRadius: 3,\n      className: 'rd3-scatterchart',\n      hoverAnimation: true,\n      margins: { top: 10, right: 20, bottom: 50, left: 45 },\n      xAxisClassName: 'rd3-scatterchart-xaxis',\n      yAxisClassName: 'rd3-scatterchart-yaxis',\n    };\n  },\n\n  _calculateScales: utils.calculateScales,\n\n  render() {\n    const props = this.props;\n    const data = props.data;\n\n    if (!data || data.length < 1) {\n      return null;\n    }\n\n    const { innerWidth, innerHeight, trans, svgMargins } = this.getDimensions();\n    const yOrient = this.getYOrient();\n    const domain = props.domain || {};\n\n    // Returns an object of flattened allValues, xValues, and yValues\n    const flattenedData = utils.flattenData(data, props.xAccessor, props.yAccessor);\n\n    const allValues = flattenedData.allValues;\n    const xValues = flattenedData.xValues;\n    const yValues = flattenedData.yValues;\n\n    const scales = this._calculateScales(\n      innerWidth, innerHeight, xValues, yValues, domain.x, domain.y\n    );\n    const xScale = scales.xScale;\n    const yScale = scales.yScale;\n\n    return (\n      <span onMouseLeave={this.onMouseLeave}>\n        <Chart\n          colors={props.colors}\n          colorAccessor={props.colorAccessorOrdinal}\n          data={data}\n          height={props.height}\n          legend={props.legend}\n          sideOffset={props.sideOffset}\n          margins={props.margins}\n          title={props.title}\n          viewBox={this.getViewBox()}\n          width={props.width}\n          shouldUpdate={!this.state.changeState}\n        >\n          <g\n            className={props.className}\n            transform={trans}\n          >\n            <XGrid\n              xAxisClassName={props.xAxisClassName}\n              xAxisTickValues={props.xAxisTickValues}\n              xAxisTickCount={props.xAxisTickCount}\n              xAxisTickInterval={props.xAxisTickInterval}\n              xAxisOffset={props.xAxisOffset}\n              xScale={scales.xScale}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              data={props.data}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridVertical={props.gridVertical}\n              gridVerticalStroke={props.gridVerticalStroke}\n              gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n            />\n            <YGrid\n              yAxisClassName={props.yAxisClassName}\n              yScale={scales.yScale}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisTickCount={props.yAxisTickCount}\n              yAxisOffset={props.yAxisOffset}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              margins={svgMargins}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              stroke={props.axesColor}\n              gridHorizontal={props.gridHorizontal}\n              gridHorizontalStroke={props.gridHorizontalStroke}\n              gridHorizontalStrokeWidth={props.gridHorizontalStrokeWidth}\n              gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n            />\n\n            <DataSeries\n              circleRadius={props.circleRadius}\n              colors={props.colors}\n              colorAccessor={props.colorAccessorOrdinal}\n              data={allValues}\n              height={innerHeight}\n              hoverAnimation={props.hoverAnimation}\n              width={innerWidth}\n              xAccessor={(coord) => coord.x}\n              xScale={xScale}\n              yAccessor={(coord) => coord.y}\n              yScale={yScale}\n              onMouseOver={this.onMouseOver}\n            />\n            <XAxis\n              data={data}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              margins={svgMargins}\n              stroke={props.axesColor}\n              tickFormatting={props.xAxisFormatter}\n              tickStroke={props.xAxisTickStroke}\n              tickTextStroke={props.xAxisTickTextStroke}\n              width={innerWidth}\n              xAxisClassName={props.xAxisClassName}\n              xAxisLabel={props.xAxisLabel}\n              xAxisLabelOffset={props.xAxisLabelOffset}\n              xAxisOffset={props.xAxisOffset}\n              xAxisTickInterval={props.xAxisTickInterval}\n              xAxisTickValues={props.xAxisTickValues}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              xScale={xScale}\n              gridVertical={props.gridVertical}\n              gridVerticalStroke={props.gridVerticalStroke}\n              gridVerticalStrokeDash={props.gridVerticalStrokeDash}\n            />\n            <YAxis\n              data={data}\n              width={innerWidth}\n              height={innerHeight}\n              horizontalChart={props.horizontal}\n              margins={svgMargins}\n              stroke={props.axesColor}\n              tickFormatting={props.yAxisFormatter}\n              tickStroke={props.yAxisTickStroke}\n              tickTextStroke={props.yAxisTickTextStroke}\n              yAxisClassName={props.yAxisClassName}\n              yAxisLabel={props.yAxisLabel}\n              yAxisLabelOffset={props.yAxisLabelOffset}\n              yAxisOffset={props.yAxisOffset}\n              yAxisTickValues={props.yAxisTickValues}\n              yAxisTickCount={props.yAxisTickCount}\n              yScale={yScale}\n              xOrient={props.xOrient}\n              yOrient={yOrient}\n              gridHorizontal={props.gridHorizontal}\n              gridHorizontalStroke={props.gridHorizontalStroke}\n              gridHorizontalStrokeDash={props.gridHorizontalStrokeDash}\n            />\n\n          </g>\n        </Chart>\n        {(props.showTooltip ? <Tooltip {...this.state.tooltip} /> : null)}\n      </span>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'VoronoiCircle',\n\n  propTypes: {\n    circleFill: PropTypes.string.isRequired,\n    circleRadius: PropTypes.number.isRequired,\n    className: PropTypes.string,\n    cx: PropTypes.number.isRequired,\n    cy: PropTypes.number.isRequired,\n    handleMouseLeave: PropTypes.func.isRequired,\n    handleMouseOver: PropTypes.func.isRequired,\n    pathFill: PropTypes.string,\n    voronoiPath: PropTypes.string.isRequired,\n  },\n\n  getDefaultProps() {\n    return {\n      className: 'rd3-scatterchart-voronoi-circle',\n      pathFill: 'transparent',\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    return (\n      <g>\n        <path\n          d={props.voronoiPath}\n          fill={props.pathFill}\n          stroke='#DCDCDC'\n          onMouseLeave={props.handleMouseLeave}\n          onMouseOver={props.handleMouseOver}\n        />\n        <circle\n          cx={props.cx}\n          cy={props.cy}\n          className={props.className}\n          fill={props.circleFill}\n          onMouseLeave={props.handleMouseLeave}\n          onMouseOver={props.handleMouseOver}\n          r={props.circleRadius}\n        />\n      </g>\n    );\n  },\n});\n","'use strict';\n\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst { findDOMNode } = require('react-dom');\nconst shade = require('../utils').shade;\nconst VoronoiCircle = require('./VoronoiCircle');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'VornoiCircleContainer',\n\n  propTypes: {\n    circleFill: PropTypes.string,\n    circleRadius: PropTypes.number,\n    circleRadiusMultiplier: PropTypes.number,\n    className: PropTypes.string,\n    hoverAnimation: PropTypes.bool,\n    shadeMultiplier: PropTypes.number,\n    vnode: PropTypes.array.isRequired,\n    onMouseOver: PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      circleFill: '#1f77b4',\n      circleRadius: 3,\n      circleRadiusMultiplier: 1.25,\n      className: 'rd3-scatterchart-voronoi-circle-container',\n      hoverAnimation: true,\n      shadeMultiplier: 0.2,\n    };\n  },\n\n  getInitialState() {\n    return {\n      circleFill: this.props.circleFill,\n      circleRadius: this.props.circleRadius,\n    };\n  },\n\n  _animateCircle() {\n    const props = this.props;\n\n    if (props.hoverAnimation) {\n      const rect = findDOMNode(this).getElementsByTagName('circle')[0].getBoundingClientRect();\n      this.props.onMouseOver.call(this, rect.right, rect.top, props.dataPoint);\n      this.setState({\n        circleFill: shade(props.circleFill, props.shadeMultiplier),\n        circleRadius: props.circleRadius * props.circleRadiusMultiplier,\n      });\n    }\n  },\n\n  _restoreCircle() {\n    const props = this.props;\n    if (props.hoverAnimation) {\n      this.setState({\n        circleFill: props.circleFill,\n        circleRadius: props.circleRadius,\n      });\n    }\n  },\n\n  _drawPath(d) {\n    if (typeof d === 'undefined') {\n      return 'M Z';\n    }\n\n    return `M${d.join(',')}Z`;\n  },\n\n  render() {\n    const props = this.props;\n    const state = this.state;\n\n    return (\n      <g\n        className={props.className}\n      >\n        <VoronoiCircle\n          circleFill={state.circleFill}\n          circleRadius={state.circleRadius}\n          cx={props.cx}\n          cy={props.cy}\n          handleMouseLeave={this._restoreCircle}\n          handleMouseOver={this._animateCircle}\n          voronoiPath={this._drawPath(props.vnode)}\n        />\n      </g>\n    );\n  },\n});\n","\nexports.ScatterChart = require('./ScatterChart');\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'Cell',\n\n  propTypes: {\n    fill: PropTypes.string,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    label: PropTypes.string,\n  },\n\n  render() {\n    const props = this.props;\n\n    const textStyle = {\n      textAnchor: 'middle',\n      fill: props.textColor,\n      fontSize: props.fontSize,\n      fontWeight: '600'\n    };\n\n    const t = `translate(${props.x}, ${props.y}  )`;\n\n    return (\n      <g transform={t}>\n        <rect\n          className=\"rd3-treemap-cell\"\n          width={props.width}\n          height={props.height}\n          fill={props.fill}\n          onMouseOver={props.handleMouseOver}\n          onMouseLeave={props.handleMouseLeave}\n        />\n        <text\n          x={props.width / 2}\n          y={props.height / 2}\n          dy=\".35em\"\n          style={textStyle}\n          className=\"rd3-treemap-cell-text\"\n        >\n          {props.label}\n        </text>\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst shade = require('../utils').shade;\nconst Cell = require('./Cell');\n\n\nmodule.exports = createReactClass({\n\n  displayName: 'CellContainer',\n\n  propTypes: {\n    fill: PropTypes.string,\n  },\n\n  getInitialState() {\n    return {\n      // fill is named as fill instead of initialFill to avoid\n      // confusion when passing down props from top parent\n      fill: this.props.fill,\n    };\n  },\n\n  _animateCell() {\n    this.setState({\n      fill: shade(this.props.fill, 0.05),\n    });\n  },\n\n  _restoreCell() {\n    this.setState({\n      fill: this.props.fill,\n    });\n  },\n\n  render() {\n    const props = this.props;\n    return (\n      <Cell\n        {...props}\n        fill={this.state.fill}\n        handleMouseOver={props.hoverAnimation ? this._animateCell : null}\n        handleMouseLeave={props.hoverAnimation ? this._restoreCell : null}\n      />\n    );\n  },\n});\n","'use strict';\n\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst d3 = require('d3');\nconst CellContainer = require('./CellContainer');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    data: PropTypes.array,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    width: PropTypes.number,\n    height: PropTypes.number,\n  },\n\n  getDefaultProps() {\n    return {\n      data: [],\n      colors: d3.scaleOrdinal(d3.schemePastel2),\n      colorAccessor: (d, idx) => idx,\n    };\n  },\n\n  render() {\n    const props = this.props;\n\n    const treemap = d3.treemap()\n                    .size([props.width, props.height]);\n\n    // stratify the data: reformatting for d3.js\n    var root = d3.stratify()\n      .id(function(d) { return d.label; })\n      .parentId(function(d) { return d.parent; })\n      (props.data);\n\n    root.sum(function(d) { return +d.value })\n\n    const tree = treemap(root);\n\n    const cells = tree.children.map((node, idx) => (\n        <CellContainer\n          key={idx}\n          x={node.x0}\n          y={node.y0}\n          width={node.x1 - node.x0}\n          height={node.y1 - node.y0}\n          fill={props.colors(props.colorAccessor(node, idx))}\n          label={node.data.label}\n          fontSize={props.fontSize}\n          textColor={props.textColor}\n          hoverAnimation={props.hoverAnimation}\n        />\n    ), this);\n\n    return (\n      <g transform={props.transform} className=\"treemap\">\n        {cells}\n      </g>\n    );\n  },\n});\n","'use strict';\n\nconst d3 = require('d3');\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst createReactClass = require('create-react-class');\n\nconst Chart = require('../common').Chart;\nconst DataSeries = require('./DataSeries');\n\nmodule.exports = createReactClass({\n\n  displayName: 'Treemap',\n\n  propTypes: {\n    data: PropTypes.array,\n    margins: PropTypes.object,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    title: PropTypes.string,\n    textColor: PropTypes.string,\n    fontSize: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    hoverAnimation: PropTypes.bool,\n  },\n\n  getDefaultProps() {\n    return {\n      hoverAnimation: true,\n      data: [],\n      width: 400,\n      heigth: 200,\n      title: '',\n      textColor: '#f7f7f7',\n      fontSize: '0.85em',\n      // colors: d3.scaleOrdinal(d3.schemeCategory10),\n      colorAccessor: (d, idx) => idx,\n    };\n  },\n\n  render() {\n    const props = this.props;\n    if (this.props.data && this.props.data.length < 1) {\n      return null;\n    }\n\n    return (\n      <Chart\n        title={props.title}\n        width={props.width}\n        height={props.height}\n      >\n        <g className=\"rd3-treemap\">\n          <DataSeries\n            data={props.data}\n            width={props.width}\n            height={props.height}\n            colors={props.colors}\n            colorAccessor={props.colorAccessor}\n            textColor={props.textColor}\n            fontSize={props.fontSize}\n            hoverAnimation={props.hoverAnimation}\n          />\n        </g>\n      </Chart>\n    );\n  },\n});\n","\nexports.Treemap = require('./Treemap');\n","const d3 = require('d3');\n\nexports.calculateScales = (width, height, xValues, yValues, xDomain = [], yDomain = []) => {\n  let xScale;\n  if (xValues.length > 0 && Object.prototype.toString.call(xValues[0]) === '[object Date]') {\n    xScale = d3.scaleTime()\n      .range([0, width]);\n  } else {\n    xScale = d3.scaleLinear()\n      .range([0, width]);\n  }\n  const xdomain = d3.extent(xValues);\n  if (xDomain[0] !== undefined && xDomain[0] !== null) xdomain[0] = xDomain[0];\n  if (xDomain[1] !== undefined && xDomain[1] !== null) xdomain[1] = xDomain[1];\n  xScale.domain(xdomain);\n\n  let yScale;\n  if (yValues.length > 0 && Object.prototype.toString.call(yValues[0]) === '[object Date]') {\n    yScale = d3.scaleTime()\n      .range([height, 0]);\n  } else {\n    yScale = d3.scaleLinear()\n      .range([height, 0]);\n  }\n\n  const ydomain = d3.extent(yValues);\n  if (yDomain[0] !== undefined && yDomain[0] !== null) ydomain[0] = yDomain[0];\n  if (yDomain[1] !== undefined && yDomain[1] !== null) ydomain[1] = yDomain[1];\n  yScale.domain(ydomain);\n\n  return {\n    xScale,\n    yScale,\n  };\n};\n\n// debounce from Underscore.js\n// MIT License: https://raw.githubusercontent.com/jashkenas/underscore/master/LICENSE\n// Copyright (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative\n// Reporters & Editors\nexports.debounce = (func, wait, immediate) => {\n  let timeout;\n  return function debounce(...args) {\n    const context = this;\n    const later = () => {\n      timeout = null;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n};\n\nexports.flattenData = (data, xAccessor, yAccessor) => {\n  const allValues = [];\n  const xValues = [];\n  const yValues = [];\n  const coincidentCoordinateCheck = {};\n\n  data.forEach((series, i) => {\n    series.values.forEach((item, j) => {\n      const x = xAccessor(item);\n\n      // Check for NaN since d3's Voronoi cannot handle NaN values\n      // Go ahead and Proceed to next iteration since we don't want NaN\n      // in allValues or in xValues or yValues\n      if (isNaN(x)) {\n        return;\n      }\n      xValues.push(x);\n\n      const y = yAccessor(item);\n      // when yAccessor returns an object (as in the case of candlestick)\n      // iterate over the keys and push all the values to yValues array\n      let yNode;\n      if (typeof y === 'object' && Object.keys(y).length > 0) {\n        Object.keys(y).forEach((key) => {\n          // Check for NaN since d3's Voronoi cannot handle NaN values\n          // Go ahead and Proceed to next iteration since we don't want NaN\n          // in allValues or in xValues or yValues\n          if (isNaN(y[key])) {\n            return;\n          }\n          yValues.push(y[key]);\n          // if multiple y points are to be plotted for a single x\n          // as in the case of candlestick, default to y value of 0\n          yNode = 0;\n        });\n      } else {\n        // Check for NaN since d3's Voronoi cannot handle NaN values\n        // Go ahead and Proceed to next iteration since we don't want NaN\n        // in allValues or in xValues or yValues\n        if (isNaN(y)) {\n          return;\n        }\n        yValues.push(y);\n        yNode = y;\n      }\n\n      const xyCoords = `${x}-${yNode}`;\n      if (coincidentCoordinateCheck.hasOwnProperty(xyCoords)) {\n        // Proceed to next iteration if the x y pair already exists\n        // d3's Voronoi cannot handle NaN values or coincident coords\n        // But we push them into xValues and yValues above because\n        // we still may handle them there (labels, etc.)\n        return;\n      }\n      coincidentCoordinateCheck[xyCoords] = '';\n\n      const pointItem = {\n        coord: {\n          x,\n          y: yNode,\n        },\n        d: item,\n        id: series.name + j,\n        series,\n        seriesIndex: i,\n      };\n      allValues.push(pointItem);\n    });\n  });\n\n  return { allValues, xValues, yValues };\n};\n\n\nexports.shade = (hex, percent) => {\n  let red;\n  let green;\n  let blue;\n  const min = Math.min;\n  const round = Math.round;\n  if (hex.length !== 7) { return hex; }\n  const number = parseInt(hex.slice(1), 16);\n  const R = number >> 16;\n  const G = number >> 8 & 0xFF;\n  const B = number & 0xFF;\n  red = min(255, round((1 + percent) * R)).toString(16);\n  if (red.length === 1) red = `0${red}`;\n  green = min(255, round((1 + percent) * G)).toString(16);\n  if (green.length === 1) green = `0${green}`;\n  blue = min(255, round((1 + percent) * B)).toString(16);\n  if (blue.length === 1) blue = `0${blue}`;\n  return `#${red}${green}${blue}`;\n};\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}